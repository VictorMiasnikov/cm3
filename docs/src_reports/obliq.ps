%!PS-Adobe-3.0
%%Title: (Obliq SRC Report \(New \251\))
%%Creator: (Microsoft Word: LaserWriter 8 8.3.3)
%%CreationDate: (5:27 PM Thursday, April 25, 1996)
%%For: (luca)
%%Pages: 70
%%DocumentFonts: Palatino-BoldItalic Times-Bold Symbol Times-Italic Times-Roman Times-BoldItalic Courier Courier-Oblique Courier-Bold Lics
%%DocumentNeededFonts: Times-Bold Symbol Times-Italic Times-Roman Times-BoldItalic Courier Courier-Oblique Courier-Bold
%%DocumentSuppliedFonts: Palatino-BoldItalic Lics
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%LanguageLevel: 2
%%Orientation: Portrait
%%DocumentMedia: Default 611.71 791.94 0 () ()
%ADO_ImageableArea: 12.06 12.06 599.65 779.88
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Obliq SRC Report \(New \251\))def
/Creator(Microsoft Word: LaserWriter 8 8.3.3)def
/CreationDate(5:27 PM Thursday, April 25, 1996)def
/For(luca)def
/Pages 70 def
end def end
/md 269 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 83 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F1/setgray ld
/:F/setrgbcolor ld
/:F4/setcmykcolor where
{
pop
/setcmykcolor ld
}{
{
3
{
dup
3 -1 roll add
dup 1 gt{pop 1}if
1 exch sub
4 1 roll
}repeat
pop
setrgbcolor
}bd
}ifelse
/:Fx
{
counttomark
{0{G}0{:F}{:F4}}
exch get
exec
pop
}bd
/:rg{/DeviceRGB :ss}bd
/:sc{$cs :ss}bd
/:dc{/$cs xdf}bd
/:sgl{}def
/:dr{}bd
/:fCRD{pop}bd
/:ckcs{}bd
/:ss{/$c xdf}bd
/$cs Z
%%EndFile
%%BeginFile: adobe_psp_level2_basicimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$j 9 dict dup
begin
/ImageType 1 def
/MultipleDataSource false def
end
def
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/bpc Z
/ih Z
/iw Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
datatype 0 lt datatype 8 gt or{
(error, datatype out of range)print flush stop
}if
/setupimageproc{
{
currentfile
}
{
currentfile 0(%ADOeod)/SubFileDecode filter/ASCIIHexDecode filter
}
{
currentfile/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter
}
{
currentfile/DCTDecode filter
}
{
currentfile/ASCII85Decode filter/DCTDecode filter
}
{
currentfile 6 dict dup begin
/K 0 def
/EndOfLine true def
/EncodedByteAlign true def
/Rows Height def
/Columns Width def
/EndOfBlock true def
end/CCITTFaxDecode filter
}
{
currentfile/ASCII85Decode filter 6 dict dup begin
/K 0 def
/EndOfLine true def
/EncodedByteAlign true def
/Rows Height def
/Columns Width def
/EndOfBlock true def
end/CCITTFaxDecode filter
}
}datatype get store
{
[1 0]
}{
[0 1]
}ifelse
/polarity xs
/smoothflag xs
concat
pop
/bpc xs
/ih xs
/iw xs
$c setcolorspace
}bd
/:j{im_save restore}bd
/:g
{
1 G
0 0 1 1 rF
0 G
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:h
{
:Fx
0 0 1 1 rF
:Fx
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:i
{
:Fx
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
%%EndFile
%%BeginFile: adobe_psp_level2_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/rgbclut Z
/hival Z
/:k
{
/rgbclut xs
pop
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/hival xs
[/Indexed $c hival rgbclut]setcolorspace
$j dup begin
/Width iw def
/Height ih def
/Decode[0 hival]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent bpc def
/Interpolate smoothflag def
end
image
}bd
/:l
{
$j dup begin
/Width iw def
/Height ih def
/Decode[[currentcolor]length{0 1}repeat]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 8 def
/Interpolate smoothflag def
end
image
}bd
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
$cs
}bd
/popstatic
{
/$cs xs
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div setgray 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
%%BeginFile: adobe_psp_TrueType
%%Copyright: Copyright 1991-1993 Apple Computer, Inc. All Rights Reserved.
userdict/LW
statusdict begin product end(LaserWriter)anchorsearch
exch pop
{
dup length 0 eq
{
pop 1
}{
( Plus)eq
{
2
}{
3
}ifelse
}ifelse
}{
0
}ifelse
put
userdict/patchOK known not{
userdict/patchOK
systemdict/eexec known
systemdict/cexec known and{
countdictstack mark
false
<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
{eexec}stopped{
cleartomark
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse
false
}{
{cleartomark pop true}{cleartomark pop false}ifelse
}ifelse
}{false}ifelse
put
}if
userdict/downloadOK known not
{
userdict/downloadOK
{
patchOK
LW dup 1 ne
exch 2 ne
and
and
vmstatus exch sub
exch pop 120000 gt
and
}bind
put
}if
userdict/type42known known not
{
userdict/type42known
systemdict/resourcestatus known
{
42/FontType resourcestatus
{
pop pop true
}{
false
}ifelse
}{
false
}ifelse
put
}if
type42known not downloadOK and
userdict/*charpath known not and
{
userdict begin
/*charpath/charpath load def
/charpathflag false def
/charpath
{
userdict/charpathflag true put
userdict/*charpath get exec
userdict/charpathflag false put
}bind def
end
}if
/endstring 0 def
/mystring 0 def
userdict/checkload
{
{
pop exec
}{
save
3 dict begin
/mystring 6050 string def
exch
/endstring exch def
{
currentfile mystring readline not
{stop}if
endstring eq
{exit}if
}loop
end
restore
pop
}ifelse
}bind
put
type42known not downloadOK and{userdict/TrueDict known{TrueDict/initer known not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA565E19358AEA5550A3550B39C26EE55F98C1D4C2CA2D63919AE617140BD52D3FE961B3CFC9F7CA38C3DD467FB1641238797A5642FED713B53CDD80F41A863595D7A82B8D7598E6EE7F27933BBBC5A58AB46FDCA84ED117437ADC525E4EA0D93CDFED129F6868DCD011E14210D9F3CAD52C5B33B1402DC0F86914E67BE0F63B2D12F3CD76A10C151CB4C2798487A34FC7181BE3C79B4FBD2CBB3540E86BF70FBDD8FF3D9B16424EF45871B2C818EF2346EA3CE37BEC8FE1D40

33DF000C886A940A0E1DD7A0AC40BD0CBCE29D0A81FEF9A5AEF813B8BA06F4CFE9527E601A0164DECE8FD10BCB2333021DACF6CD0D802E151AE96A82C7C10AD99F5DC43A9889CAA64EC4E5307DB9440000F35F79E51FAEBDA92D2F97390C93FFAD4D21411F932BFCBA4EB0666BDCE3DE8D1BBCD7B24CA0DA1A08E747409D9094A6417BFBE926A6300DEB2B572C63EF42C4F392637AC94290C58CC92681376B29B2726CFA8518689DAF9D01B93598C69BBF98F865C384CE5C853476A202F9059D3DC6C3025E697CC2AC

66B1E30CA6B566A9A61CC040FE44E773038251DD8BB53FED0BDF11F8AA276DC0456A43E529324252861E8FD4D06DD6331376E315B4BCB8997534ED06B0175C4078FC85147C69F444EE9CA1BE9649059C1E995631947FF372330DB97F421219E17E912826005B9732665C73E12043050366987A7B8AD687CD322D14E6DF7FFB894B18497D3F38037978563161854F0EAB66CEAC3377512C802EE1A0630A39BEC52B590DAAF5052BB8A78E570FAB15C1C2793EC7FB8F2FFC33A432DAC0DD7803B9D0503A2ECAE101DCE9

672356B6B624504E8831277D45CB7F80255804E8059671ED3D3B767479C6C4A5CE28DC38BFB809E86D8E02B2BD80479101031868468A128033F4E409B2DAAB4868379E2BD2622333D5C309B9649E86EC4FDC1C420D5CAE6A2767311CC207BFD09FEDF37EE8A3D66EB4782D9C663FC030B779E0AB02BE4584658CC25BB9BCFFBE006F41DA9BCE2CED2966CFAA201248D9AB714873EC6F933909A1F48C01F80023BCB24B192EA19588A88DA28D36F6B782D2607E957212299C3840557B14CDD260356826793A64E235CA

ADFA5D1C71A4B6C4E1330FC01CA664510B27F819D69D617E01387BB801BD470756DC57989DE20B61552F9C1DC383E25876E10900DBCD4B9E50F05E7C2EC528C8633784A121DA279F812C7965B648E4E00819A29C652F2B85F3534E245A696E91CC03ED9FE3F97CEFFDBE95361FEF985D1CF7CFFB974233FE820D4869EA1937E52FC7B2CB00BCF37CCDC72177BDB1904E1F3726A5FE9CA59BBF87A8C3513F99FBD037CBD6BB01E795B84DABF9595DDEF0E91C6435FD406DE84A172D2AE07BC78A3BD4ED195F2F09E3FE

0B4DCC58C81614D1F8173CFBAEA5FF6371A986232E76539524D293BE86340CD86B81A929036782CD707F699A2D8B40F7C6F91377DA1940F105B2AAC8ADF45A2063DA4A0C63D7F3956148FEFD364E6A05B349486A782FD2A1295F93DF8987D5A1DFBE894B98CE080BFD726E6C35CC4AB4121A301522AEB16BC7008E83AC12A8A7B711AEE12AC961C1DBE58D10240B3CC12A750EAF75F09BD536589C0226B9204D7E53BCC5761ED6A52CB652DBB682A576B8915B653E8F1A96628219545928C5BA4CC1FAAFE0A2C7B2C4

193CB23513DCC76752FA9C26B776902F0554A3D58AB47BFFB2056B98661B0D5957C6EF52303D791606CE0B7A46BDC13C1FC227C6CDFD421DF6215711A6F4A8BE501364B63BBB0EA6EA02715CD63281E292233AA46480104FD6FB7A9868CDA3B6060BF51088EC56C8F8BD3B9BDE892D8EA9CAF31D99A34F4410E3E97C7C3C34FA8517A9302793D9549672FF75E0E4A00FC92CF7E045752675852434655D892D19E0EF4666133BFBB532E0BEC7BCBE0A846B88E18AE8DC87FC58622485130DF26DC378CBCEF357EE718C

7D1B3CCC8E7F35EC43A26E5F40756BC7D998DACA6425160035590484E6B130C54387EE4CDBBFA356011D9D14F74A98F5ABAAAFDACC912CE099D5C92DD706A8CFFC23ED037FE6D1044362D0A7D5C1F901EC80AB886DB09A500817538B2D7B65C0ECDE477CFC86D32249361EC4522FE149F57DB19D44D8DBDC66B548CEE7763E0C8F10448C6E1B5AF2529FAAA5697D253C5BBFA14423ABCA1DE3819F019AD4A3BB6204A9BAAB063BC6B3A25A7677254F1F99FFDE4BAF13ACBDC5D9F2056E52B65C1228B93883CBD3120F

D9E4448F965D5498E5DA4445F4B191F79763F5FFBDA70B616A00EEBA0B6888F9F91E4EAE3A731A7F4044F9930F2FD4CCD65E9CA08648003F80AD4418E3E83E9A7ACC6696F809504420118CA186064AFCA07D22AE96726D0B7A8E58E9CFA4DFFB0BD5E982BECF889D250BBA8EFFAEB674C58DDA554DBD0E1972E846BBA347075E8196D08CC5D9173FAD91C9F5F609F3C8DB4162E8D06CACACB72EBBA2351DF2BF1D32423925BE11D334B1F7203EA6F30C0C0EAFE3392A798956B40089AA356B8A932E2B60AF888A49CB

56DC85ADBFD5BAC0748C02605C8C395F238A22B959FE9F0E49B77541D6398BCCD6EB02B30B4A91F07CDBA6DC4FB32B55226F47E454449DB23780537A12F1FFB395DEA05A8AA78A4F9946B074DF95B31B4B86DEE1B2492D03D886C1B01E444F34633D6015AC1CA90A7C6513855DB5A1C7B2F57DC8BDC2B9100D4C2BCF6628C0A12AF2AB7FC67806E97AFABB42EC46A4FFEBCE555B0AC2F64D8034A7FC36407721C4B0F3B4F3D16113990D043564E89B3D54E92366F88713AC3E28139FA71ECFAD17BC622CCA8BE58AA4

4D3EBFF06F49DDE7DDC37035E984CBEE06AB4D1FFB440B821A15651B915E1006402BF87342190932387FCF33EB79DB73E38EBF34039E799279D7C153446AFB3C4DBC5C375288F3F7C553B296B44A61F867DCF8952BF26A2D64B05A24DEBA1664BFE73AD12CDDA3756276D23B350308DCCE491417360FCA06CF1D497B4AA75EB700A788869F2FC357D8B1D153715A6F50985577A0FD1E35BF04A8AAFA1D0972D1D8FD3DE8A65DE81D40C4A1B0C8D7C6CD0EB55F7C2A3FCA1D454B74451E806452888033B2772F9C699F

C28A4BAC9E862F7DFCA301B788F1A51C44BFAA311FF93740CCD6F29D08BE0F6932E691EB43586925283D58599AED5F98114911D4C05AC4148CAC65F9AF0BF76433245A27B32D3FEBF5952C47E96626CC22A3264255A24E03A020A505D8440F16228C2190DDD0017A60D34144BECC33AFE20B56928FC199E9D9C30ABCF4927DA1A9AE1558A5702BB1B7127DE35249215F49763AD75C543D8EDF6781A949A75C7C78D422256A72318E1A45B1E587A2D502F5CA611DED7DDCF443FDD78E808A9C6EDFDDDC924BA5CA9EEC

C664D66C1B3E4A60A398ECB3C4CD3C9F7851270F05543794E2F88E06BF670889AC8602A2BBAD12D218E7B78924BBB7FD60ECE42B458FC6773F9E75B37D6BFE14A3979B6EB42157263DAFEB70F729868335C95D39E2EED0215F555CE879E325B17754D46F9DAD318E1AC50C7084A71E3184A729470D80D9CEE2768D2370FB7BD2F2008B0AF62A3A08B620C6E9206D7463FEE01631D796E240968237EFBE17A4F170D92D1F9CBB26BC0861E0C1F58F77F66453D437A50DB6D0D5F2E324121FF63311B65371C6EEB36E69

05F588F28F34A7B0EB57BF4368F26C9E86CC3AFDF6CD7167F5D9E3EF766E3E614E7D5DD6E145C36F314FEA99ECEBA54B846D4D8221882BE64FBFEE85647730885087B65F292229400FB23492929CE963191036FDD83C691BA127ACE32130E33C3C5FB423F980D7462865A6CB18A21973CE32D89E7516E0E03F76B84E8FB50326D95E36B05CD7D0447B9FE86EDE386D8DAA7E8B082AF4EB18A7DAE77B3C950A4C83B68229E9192AFEFD01F51546EF2DF730CB499D904013E14B0F5B6B2D726DD4D1B20AFDF10B56A49A

55B0D95AB7678DEAE39A7458F68CA514A3CBA87F47EB83ECD9F81AA4052ABF161F222F6B2F679F39D0286DE59F4FB75261803635C524348390DC3D6B042E2F4607592174ADB571D8072846DE69123DC3985805F498BAA31C76C2E9EA52C120081D8B7F0C61C0701230B722645CFE883F9AC0ADEBD3B1938272C73E9A7C7E629EF9B64A26BE9E8672A0DAA274775B78BA7F9675FD692333F04B982636705AC061FCD0CDB19002726FCEED6102C7384DAB536D21A788B4C2A11ABDF77A2916E7D7320B809FD71D24AD51

56C0697D2769CCE8033A0D24A52FDAEF5C3FADC461F538AC0BFCBA57AB3DA633832F5B9B98F67DE6D3356B0207F06E72554AC2383EEFC7092858C36C12CE8AED27F10452C889A6C60836F49E88AA479B273F4378A3301B64DAA9195E036DB88522C94EB797E4EE3024B8454FBCEE702EA5D9DCB7B6F766FDBAA34CF185DF8AE361AC556F31E21679B020116AA9EA08008714859B3B98BA5B1D0376F8CCF2E5AC4311E82AD6853ECA05DCDD9C87D8606EE20FE779BC17D5D030885AE7D1671DB1026749EEEF22D30420

4CFBC6A52B97ECB72DB9A6851EBE69EDCFD21A37BD4540E7947D6B42BFAC69C2889858B1F5A739E22DE2A29E7CBA66A9D2473CB0672193D6BE087B40551BA16D7F32D7B163FE65B05B53982D0945FF5BF55DE45E0F0A6D1EAF79D55ABA5FAABD40467E2F5F7517832E98F63B29DA2A5A6747B0513B97745CCF4EACB0858E4319E5EB4D45F2A8795A3E133256565F31D6532F85603D5731DB39FB097C1775835B843451416573994A0B6A3202804D870F868BAF3112E889B2EF8F5BC928492FF15E5E597F9FB64A3112

2168F6372B98DA557B9DF246B4F61EDFADA4A5A7DD414E6F2E17CCD7F95C6EBBEA2B91079C22D1B5A7114F27BB5C3705FBB28C99486B35D32127360212F0B685AB3C06F06FED57EE63BA5D08D91C863204BB8EB5453C3BF32E1E5714A664BEF58F16C747C1FF920D674D3353EF8E3F55D84C958A26D05F3D4FB82A55EF887B34B547647DEF1D8816A6E3EEBCDB91D20EFAAC5A500C368494F2B3846F69CCCB48EBD4B06D4329D8A85422BE1BD2F0ADBEBBA3A2F3E2A5D8EDCADC856E9263841EE18120992852668FB4

449CD3D74276939F5EAA292659626E0CEE3490F528A7E53818104A176213509DCD88C64AAF0446BB0A2883DEA5C54BA4779A0767A746F79F72F72AE3899A83991957586BCA101F7E4DE87520FEE0BFD82E7C7731628807B33DDDA0B0EB2D34604FA9D12A547E5827ECFF9E64352DB10960CB3B117AB2C837FA81829B21A271100CE7E7FD0518D4D352051F16AF38656E9775E4118FC50E21182088819B78606CF5F063DCF08DA5B7D533A3B71369BFE77D682D87C74D4245FD9926D5317B6DEB288B220D1EF7309908

FA85A07EB2B96D5A2A4D527DEDCE5F1AA1DD1B6DFF61E1B10DCB6CF2B913BA6EC61DAD73B644D3A754BE943F77A237D5DBF677AD11F6F9C5FB03664C217175FA95702E69FF35B4CE30B2BC673A7AB4A0B1469AAA122E4F4D3F9828C3AD7EA26DE31D0758863158C19801E7D96F3E805A45F45E71DB416D893AEB03F8CD39EB842C56383E13A826B1D81F89CA3783D7B935AF96ADD02DC15496F4D7232A463149B9A8B272F017F21632B675A008A11D19E0DE2E7026245ADA9D6DBA168D6A1DBEA1491E0DD5B3F56584

B9E1D0E1E7DD89383226F07FB3B07687D2AD646149E5BA39D6567BF954DDA0F72A0B541F596A44AF270AF0C72E8FD60A8AEE316E6C283D7A27E80C564F7597FAAA7093D02D5BAC8C00D7847C44426D1F9D0E9A5B930AFEFBD44EB103DCE64728D714E35FD3E56061D9682BD81A9FC41AC30CDE46FA5824CB72615BDD37F2230660E20460DA93E07B3290D13FAF954DE1379AF60F5F4579F964C423B71302660AC966F6D335A4B9BA08C6D60DE6F8296590C920CB36CCDB0BE842EBC070DE96CFD4DCA31D4DC45AC6A5

5E77B0D819DF4691A11C228143BDF7480F6847F1E558B31A035386777505EDF2EB6D91DF28FDB24563E5A9345A148C91534B6D4336F63C634554A46188DA9E49B80081FB268FA32A3D89EC898F7EE62CC7D64BB1C0695E070D1C464541DFDC623D0457CBB25C90ECC387FF07D37BFE7731C1A6EF0EFF70AC1EF7E8D26AC47EE8AE5D3BD523511B1FC953655CBD2433E12859B8E721E54C4C81EF4372D8892B27058D5B957318B1452209344E7FC21CCC2F75FAFEEC1697DD3603947320B996FCBC65094498589B6171

7E5D64D4101818C6E03E75CA1DEFBCCAC97D267E50239CF58294EE8006807B2C3D97078ECE6E983B951141733871B45A1D3899246D98D1395A5BAF1964C95B1AFEDF668DFC9D5F94465240CD9D49D576143454876DA4FC98802F347FF69ECF406C833D17D4A18ADB4895132E770577E7D39D6FAB267375BA9F5C7C77162159190911BC71578AE1C8121285B215C5F9B1E3CD88BABFBF228F9280C35ECF1851A115CE8A38C6FFE656B83BECAAFFD874F5B720EF18EA57D981CB1AC469F30071E1A4BC709FEF988E6E1E

4717FF7C37CE52DDB878B4A8F24F4B11482322AFC22AB5705C73594A8EAB4A370BE733F51B40E29AB1F8C5EBE1137B319505CEA62DECA5E338A89CD2C8750664246E7BFB3C38B30860A951920CC6AD6E089D4C656527DD7BA68C76157391770D99B15BE8FACEC17F8943EBF6A3DB839ABA7001C37B3112C6F5614916D9123B75BDC71FDA7D6ABB53CAA8621D6A0130E38F2B929B211CA4B53427B1063F2CF3978E52FB9ACD74C6F721455512EF30600B66B8DA6A7D56C43C8790DB84A6043DC03BD38B6CA0CC504271

35EFB50227B9C8B804D8C9E58CB78309E4F3AEC20C5A7DCE18C1C7171478D39CF532F057ABA7E5DB19D35BD51DA63EB05A6A15312F8FA3ED2637699BD1803A14961CCF49DC061B3BBA30AF017699BD2D2D38C7DE1EAA45B54CD51B9C57C80AE675E4521B49B5D7778C1EDA3B45B19EF04AA936955D00835328B61BF1220B6BC49CCBD1EDD0D90F18E879A859E3E20E9C3A7F3860D7125EDE6FE67CD3EF12783DBE274EFF59B348681BF3A8D2D297AEDF9E4A265C0D6D63271007874B17145792869127C6659696AB31

C02EB8304E9F396A7E033EBD08AF87F561D5DC2F37DF9EA60A472DC5D51647F8A4568FFEC5FC84708B2C17E55262570415212060235615B4C1DEFBF5CF5C4821491DCA10532149A3A34562C55AF5C0122950B45DD5CEAF82239B7F79FE34083FE4C72E07043ABC9917AFC9BE22655C51CC81C908C0D4BA39CB965EFB976C03FABA4D0973DAC112F5C28A1FF1D284E61A9B120D9C5030885A8754950FF892492863F7EFA99AAB5A3BFF027858F4F0132739B886A9CA2AC054A026A12F34418D8C3AF4EB3C9B468271D5

830E82B25F0ECF22F89E7CF33BE08D6909A4CA7BEB11F36CC953E45282CF9DFDEC04A3FFD266D3539085293AD22311B3FE1268C4CC68A8F63CF90FCB66257B601D55E1B0993DF149996C54DB707C933CD9312A913E5E7762A43FD40A8EE87D2824F18EDFEAC97BEC2DC7AF2950B5EF8B40E799FDEFA5DED8A39D9C846CFD8F591A063C55E56C1F3786D1D206D44C344780ECDC08045D50C3A7019A6E8B68EF744262E2761C9078DB24DA446B758876A96F03133489264BDFCD8B8B6D13505D68DC324313A0BBF7B1BE

F28A22DBAD4A4A7756BD63281D966B3B59A13FD5731F32AFF8225BD170CF917D65F3324DC172ABF6ED720DBF8180A91B36BA0C0B6932C87AD1748B16A8E3ADF82377A5B32F8E4D344664175FE041C7BA40460FE2B098211CCB10D4F8D50A8DCCA9E531D5C9702287951F9A26A5EB7445B591C2F75F2AA4805E95BC6800121AECBE620C4885C24DF5AD51A669111B55E2CC6D8051466A0ABF83B784258037A8E64DA90C633E4C03AC45C1C440A5F39E7F93398682DD5573461EB52CEC17E6CC6BFB58CBCC649F661001

B87A764C0FDEF4C56B4D809B648F77C06B9DDD0EF72AD3E42B95F983759109081808744BF5AE6D7B7ABA77D416C1655D73A73AAD6EE458C2EC48810728F77FBA26A88B252EA2F9E02136699330A59876042A31F207F3C095DD61A7DF3F902D553C6BC71C5766A914DB0449F32B3E8D8DA385356E6BD70BA76911CE05BAFC8966B9032B9AD00F68C65093DA1030CFD72C5421B359CD03843DE67E9103C74CD639A3C0CDD48DBE3EBF916FFAEC54B3B62C9E8C940025A9A81544763F740B878B7067CD60E3935A326C36

81FA46A6BD2B31F1EC5AA73235A8E7697D4EF55F78CA19B5305B2D948F8999D9A34FC3A81CA0672BBA61F334D227CDF302CD8D0F4ABA18F1E4E24E14B533FB9956256DF5167748064EC99BCACE9C9576531E133AC943F501B0503C6E671BCB11EFFECEAA4DEC1A85AF0BF65E0FEB44C5812F30D393B2BA364A1F82BFFC383A2EFA8022E2BD9A049070635EDC860F9C4FC764F0929CD9545BE15F20F54D05E204F7CB5C764738529442CB75F86401307394AA8FE005149BE23477FFBFD6B5C4E297160522069B87BFAB

0D7DDB21390992A450DE608AEF28EE9ED0BFC55DE395910CA8363EEB56EC7A85D23C4612837E24681E6BC245CB7373FEA5876BDF836D66001267A8F758CE1FA53D4E892DA7D188E9EA75AF62B07251EA464B95AF661E6C2B6A047F660D62D5DA7B46CC8E2C3AD1BAEDB6EA66DB18A6ABB7E8E0C7970FF729B70FAD0C61BA21D1FF32F8F9A46E379C65F7ED71F1581F2BA0C36F0A6E572C7B0DBA5C1B6D48A7D7C80627DD94C77FF6D9C7E9A4130F202DD750EE021E4C4DC99CE6A2DE272B017219F31A3436C284D1D3

6F6596D29652B9AAF5D2B9D0C5050D40BF91223D77FA9A72473BA612A6AF73BB9765FA8D706595B7905919EBA3A9CF4FD705B5D7242AE7429147F211A2F3EDC101A298C614E02960A440EF108788CF9941AC007BF97B4A87450EC7F82AD2C856851F3FFE97CFF585FC7BFCCFC859D8CEF8261688525C4B9F5E99771FE20C2199BB49D98DBB9EC01DC4B334174ED6EB37C4BB5E52FA3480921E80893D96211E034C4789310013F9847952472674D265F37855DED87BF4739CE6311D567FC69591EE524AE62E4B727B8E

3044C9ABF1BCD3DAC8ED7DD55570DE771980FAE5E08F0220915D9FFA42059BFC589C186A82C49B7BF9F4FAC6F62C3B1DAF48BA94DCF020849855C52E245A226C9C45527AF033872B0B29A7A1322395A8239AB1ADDC09B6E184CF44190EB5EFF927E81752680E6D69093560251071A78E207FA032E1FD82D7FF73C5EC311BFC802013B08E58375ADF3CD8272D992B4D7133B81CC66BF34FF372BF3646016B5F227928388CD3480EC5D1DE73A3FE1042330E6AE75608C0CBA83F57B241FFD53099BF67BECCF2FF323573

B2258458F04AA1B4A40EF44D62195018F7D6645157EA96D889654B651B27B86C8302A7E7F0CA678E1C9351E91B7E28ABAE8BAC043D054D125DA681236BF1F58CCB69507BB6A4B2D4EFFA4100919020F90AFE9CBC02F55B9542DCEE6137BDAFEB40AC8269CB7C42628EC0090E21D709B2B9F08DB49BE5C137194965A4E0542F774E61656C6A2E740302953FA96ECD6880B61D86B0C12369232B957752C92942B4A8FC6DBBA8AFB02353AF18A1307F1CB99CEEA1EAE4344998CB21038A38F2A8D731BA95DC4378220C9F

9484BEAED07B72A3B70DF6D8E8C0FDCBD6D2CC6B29B7F77F33A8A039517FE74488EAB5C487D1CB931C9B5AE07A772032604881984EB823FE54F3F5F440D86FF1A63418430B56B106581CC8C3453D71982C6684B12B1BDBF6D5353654DCAD9285C2EB09FF7A5EFE43D05B2F26B46AFEB3F4AB2955A7E67E862A44F01B71DD424A9A4500AF7033978F2059634FF214E890E77BC3BBC45F8741CCD7E3AB130E7948C49D524728C7FAF1B3CC3104B8D563472F5D1BC71DC20B744951698908C37ED36965DEE5BE5CB840C1

6DB43A4C8E1B8351566A878181C882C0E1BDA59881ED757579FF34156394AF305472189FF986AC470B7F17B627E55C57D68E83337DCF0575EAC9662FC928A2D7658C09EBD6C0F666C485AF7189E153F60F5468FD02D6E733054559D35B13F2A4F3C1AE748514E8D83D832FF235E0408616307CF4AA1B19777E6BF72765411E5A9378C54162670FE0D1DF4DEF83890AEE019E987109124F7BF41BAC603FC26F355FBE4D707A0F9DC683ABC0DD7D9A133F71F40A310FB504AF25D4FA195895511E1CFD359C42176EE316

072B27D45CC45E9845072841306FB527E0755B7E55527F7DDA7FA5AB6F4BFFFD46337365BD115F48E5AD41AAEB4F2EFDE86A8063DDFF020169254138CB35AA514620C2FC3898D06AA4A00FAD3A5D368C0C2637919BEB3E3FBC9835B1A0883B5427C1964AED0704FA2B5CBEA66B4AACF122657DBC0417DD772AFF20F3DCBDFEEBF658C9B94B98A2E6DA35C532C0D1F43F2BCDEF5B8A7E90925D856A0BA530043B950C76135A0EA25A1CD7621249F7ACC11712BC962404FE34DE72C0F52E91FABFFE3A7140A6F9D562D4

ED27E95039B6DD31B9BFEE14B3CD39182182E0FF5DCBF2442DEF75B5D5C69495F14954E7DCB64C7FBB276B082FB463EC5CE8D02ED89C8EC6D6F719ECD345FF5B905AA9498D373B39BE82B9FE4E37877B6A385A0EE7C1C54D4122571036E711C30C7054A8AFCFB3F655DB1D1F99B3830C2BBA4F650CC32F52C92D266D6EEAE469722AC429B8007B6F38EA45BD2F394BEF0C6A8BAA4D68363797461EA611572C611237608502147A476423FA828450045528DD49CB57D1EFDE0B155FEA49FD8475A46AC4CEDA1EE131B4

FFA1639E2D2575B210DF7DCB1C563A427F540D8773632CE9FA53603F371529B81743D7B8C9AB294F00C1E36A1A89CDD327986BDC928D9B70915E1B7F0C3F4E3FA696B6EE205CCD19CA887DEC11DA5C361AA6A1AF51DF5BB31A0F451858015BE8DDCA3DA116A6B1494F17D7DCB3D550FBDBF6FF5B5E1F820D722FDAB610E0D1E6A43D84EB0CDB85D5663513B655C38B6FD45B2853FCFFB0E1F70BCFE9F0CBB32ACB2F80708A62DD5365EB17B6DAEBD320B205CD4DA186BF8AD62258F8847298871108FBBEFBC2F11DE1

1771B6D8A5C8FF1238FCF009780DAFFDDE99CD48990D244F0118637CFB23D25CED46853D97CF7268484EA2983AA5E49C0448BCE91368F3285BEF6DD3709FACB0005D0BA788F8790B4AEA2D97B7E9655E8972B305EE0AF63783DB2337F71AE3C2945BD8EF16ACDEC0CEFF00681B6CD7FA4686DE7A39B2561DB26B0ACB7D024A6D72623A7CB122E867E3097A45FB106761B33F7DED0D4B0D1560EFD0CA30B4B87C8CD78BCA3908282C21262811EBE6B17E30659D35CCCF209181D813DA195C4F2BF2AA8A75A8F16C9848

92E23A4619680ED3FE1D5BCEF125925196CB4F5257624AB34FF11CD9B8A9324289844E3C3B8C57BA3F2E69914D6F903131B3ADF44BE4C8C97854C346CAE9AE1D86A99E98A8D44E1137634F4868211C95410F116B1A86FD49562774B06104E13EAD9D27F7EE63C1B0990DCCA0EF08AACA52BC144BC1CCF55A8020F3273F251A5B6B4016A68743C9EE464ACC5559B63786FDE78E21E1BD7A26C77D9BCEC13BBB21E8B7FB4B1A575E16E7E4D7A32455C9662EB530AADB5807CEE2B3E50ACC0FFF80B4CB2D8C614145A17A

6C3E1FD7359E7FDDC7131DAB620CCD55B5A6506E6980A649AC68C15EEB2356590AE7F78BB8499F657D79C01C2921380D41704C2E216DEA2CD0D4A6BABF25B945939F8C8181010982C482C7E98BFD18FC4B7253B4929A74A57D687C03CF4B77F54CC64E15824641D2F7E6C1E659637A7126D57BCD48CA5BB3CD9B741CF270E21C76144EF975BBB47023718AF9D85153DC6E27D9D01149F01F4DCA39889534623BC4776A7CD15C9A411B44918C849F382868DBCCF7E96389E236A7FCEC09C104863169F62BDD8FF62329

E0B47816A7F86C5DFBB38EC346829374FDE8DC05C11CF9636C33073F9558711E7524A1A2ECC7462074B63300FB875671FF9FF3F37BABA24C4621338FA314A5CE6AD0D18DB3D33D5FFF6A3304A96584F3A0E1761DCB5E6D7CF6DE7FEFC78CEADADA4DAFE67D66E8068108110FE4F0B2DF0A287340F1E1B0B51CD781969307E210B8ECAFD26C44285F59609E31F832FB579CA550E94862BC50E083280939F8C8AF68E36361773BB2A0777F0FCB4697DE251EB8DD44DEF8230B9CC3D4A713B61CED700057ED65A5F5FA17

E03AFE6D7A20EC3FACD65431FD4CCDF7AD087B1DFA4562389C8CC210C7425E1ADBB63CAACA728B9832DE0F3938587EEE315396FFDCAA7E2823B1A6F9C202103B4ACB630B841D403792AC9755E36B9450BD0EF2A661829B9FAD7B877D62A40E0239D1C7D139CD92C84ED70716D133D4A9BD8D3B422D729074B7CDAB4C41FBE1AB0087022C903A6A4A25DDF30438FCF4B2AE2A32D66BD083B856E561F7B58B305AD4C83C42C9B0D4FB4344845694B93536E89EC11B6CFC31FAEC80E407D2B64D36AF30B6AA1F4D26B0D9

E909711E537562E5E6DAA03CA3FF8720B8D27AEE2E00B1D9637E190B5CAA216FB9D2131DA0D7F3D8CC50EA40E94218513C12B871F75C069EADA786B1E40BE1053883F128D8E12C327FA169CFB3805E730502A2ADA96CC8B9FDA9AF9E1E433B4EF5899DA75CA7669B5740BFC2E53B9367519704F39599D43B5EC8EA9D9800A362B7CEB9C84AD13C2F9A3D05C2DBBFF918AFFD6B8BDBEE1837773E9C3D5A3F9F815DA202186B81AF517228F43BCEA4B8F5FB54648CA9DEFB66629D01E1158D877901B8B6122D0FEC2E86

FACCF1E77E714F99E183A019CB36E36A3BB7C216F6C2472B231988A592679B0A964975B96363E726D66082D8DFABE721CCF8357FA4B697281B887EBA5D959FD920A5B8F984F1DA0D8B19BC43E51FA9AF1235F2B357B4290B6269B64FE2D274A17C18FE41A95BA5CB34100BAD70C2D932CFDE87D0853C48B866E50ECA14FA8702D4FE24E95FA87CE1000C036784EBB2FB50103D2E65DEE5760B17F7274A8DDB217DBAF5095193D676FFC0231DE9D8A7AE6F23B7A22B17A8F87E04D4333155975BCE54C4BA7BDBC24AA1

100783F347F7CBDBD7DDA698040D632DD034BAF3B3BCB639C23D184489CF1E5C83D022559909802030D96DC91B6CEFF15C9C2D602A5223E01FA113C2F76B59216742FEC590A840EE11236E46E78638068543C3EA3F7D2E9D6805DDB94566579F57FFA200D6FFD806AE8E27AE8CD2C07C4FE2C30DD24ACB1AE4FA7F76634450DAD3566DD2269BC0912E3DE3E1DAA251FF192A54AA1ACB4D629E02350F480BC569F0D90D615F99EF00C915D6C17DBB791A5411BC4100A070353911A6F59F2DD30DA44C9C70806CB78D72

AA21E6E3B432C3CA31148C949EE949839948457C38649B27BCFB3D809F3367AC9F5DEB38E5A2205683F81BD9FDCBA3822972AC067C7E175BA2B425BB320770631196ADE5100322071D7CBDBE6231B7834CEE648BF2AE6143DC364B520723DC63C1A86CB281708F868AAC8CBE4264C98EB6A44845A2A351D2454038C826DB3C1F75257FBC22EF2555BA080C71CBD5A4DFC039F7BE334E04845DE70C9731B92F4C774728431665F4FD4CBB736AAF2024542CE60E808B814A02A16EA68B5974A314F5C6199BA161815C21

442CE4FE388D69C843925371A020EC8EEF998440497C7DCE1A1DF233D20901CA6EF6FAA2995CBC6AB73EC6C4DF1E7052BB321E622ADDFE40704620EF6286C2A843CD46B1D15D6306644F54E0CC80CB2934E9E808A587391FE26F3C400C25EEC9AA60332F50218930CFBFF067519C6A24A72DEB73A7FD02D6F5222EA7BFD97CDC53DF3D456BB3F19E4527A759A53070CAD2FC179C0862E3D0188DFD96DAA6A7F708F825CFEBB8D0E6174B42206780C27C4181C060621E13ADA00E6BC4EEBE8692CF0AECE36C706218C0

FE40628E7DB4FE79D4725B02B6758042CCECA3D57697188137B29251263B1B40F59053CA8D23625DBB7E1B6FC659D1319506F15AF95027D3F532FDE44FE4D0EE033B984F6C3652317167F41155F4B7C15A2473085015169AF8704E9BACE4780CA431DD288158CD8DCE9662AAE1AF94FAF3A6C7C2CD95E670D15A70C7C730810ABC4C01C2BD4E3C37897A8368D20BCA72D5195D7B3D927FB6285D389964E5C7FD69951331E218C6681BFE549E7B0A5F14D3328931872A135977A7CF39058D6D09A95C7872156BBA17E6

03F7004F119543FC2E0F9675BEFD17467972AD55A3E1938188123DE67AB55FD98507A0CE31AE847CF81C28EA83A53B3D50291E610D03B09D528AF87CDFDA20D694FD6597E4BC0B63A7F8DC1BB5693986B5845CA3F959C34B590F69A6CC17BEBDA27742D2C9C6775447B9FDF70888F1D4B25A9EB8BD5A7AB1C733CF240878D045F651E735928CED717ABDF8F1A828993C1519001D254761C4D9E8A8CEA00F9447CFB7335C688CB1E8F8B6C0F6ABF5ED6E7E53EA802EC7CC35BB579DE5EA0327C254403023C2F2146293

C8A2791515BD9C5B6EB86122BA8D982392C250237DA52FF9DA304BCFDBDDB31373ED5F36CC7677681C077C5DE383F03E992598B1F08933AE211160F7E86E1EB2EFC43684437F234780D625AFD9764A10E72B10672B9E9715116234378A9C8BFB4B0035F0BE2A3EA92BF927D90AA800A0C65F5405ECF3E6F9AE234F6256AECC7071DD7998485D818C0F6F60F88C2FCF3BE1C3ECBCF057143D5ABDCE28A400ED82613A14A6BB03A5E7B28F754A0490CD05B0A3B027204E0C689E9EF9CAE05C1B5658BB33E749BA9646CA

7199C76AC3CCF72FAE441F455E8FE4C1A925B0623DAAF08966346479F372F56ECE84C74E06D6742CA231C94269447BB2FA1474AC52BAB06D37B8E761D5A8C6AF2FD3B72A1757E0B5CC33B517AE310C630590A9EAE0329CA49F3BFAD23414653DF624CD2AFBFDA66C53D38477733A0D90EBF39F234AF04A4CFCB8E754999E6E0935BC0D40182AA4007C9C4137F087B0716F6690DBA50BF6A78B7BA92C6856C8A2F2FD0B64AB09D52F63E203A9531BF8B7B63F8B0DE4667B633AE0719F626A593B9D169901FEA1DBFA5A

6E03BD9164C178D66EE1CE749B857C299607900B9EED083582C07A0D330469FDF03DBF9FF0595D9AD4866B586979962180CE1E4221319AF2437C01B6440C5C338C752A3E161F49FC14FBF1CE39828C1D307B2F5B71F35B6E2345DB82B79B7AE0FF4AA1D5E3A71CD71BE499F9EF1914C526EF642DC6AD7F9661C827B41E8668AA7C6429B2292B7D6E5F03FBEE269C30FB89B1C5EFFDD8A533AAF28BEC5A91B758C439FE982F1F8B51F5FFBD0D2761C33FA5E70020914FF7A7AF725FE9AA49B7DB101322FA7B86A6BAE9

9EF93084163F2507AC1C516640A929A64365E870C85BC16492B135C8A4D5B359D0CCDB63862F883B256810C4502144B515CD92B81110E1845913D47FA538C96FD64DDC8C41CA3DF28438C0A407B6F29D5F8314D976962D43F770E4C864F68EA87B28F8BA73A66E880F45DE49E01017DB9360027381EC2C396B73B0A273BF6445D32A2B3157A1639809B5FC5BA8F9658B33C297BE9AF79C895790DF0F114A13C2FBD8006986F1C00EFD1E4518763B9A6616C61521AC8A04F363569C39ECF16EEEB55C9D5242D24F547C

58214DE011E7E78E2F46EBEEE5C2E96F3CCE21067BA4BFBEC9E4A248F076F80DC4AFC06D9C7BD8F5194FD1A477E02619ED308721C0D1D94BE9690565A3FA9D7E8B629415EECB952EF7A132266F4C50DDC16C3AA253FE1D73180D5F9C93A47573DA1EBD67A073C2FF922C42739E82257C0FF484B63D44D1AEB8CD6FCC9386DDA12BB82BA276BBD399E3FA08464189CFAD97AE113B47D008F13B75EAD449F4A8B811B37A390181A2258CC3518D7CBABCBE400F4E5E02030D67D96668A519EFF76029A39822B3743E230E

32B2744D1106B634C686B5D191719032A8FA8406D9433498D5914CB3531E43D42C8F35EDED59B2DDD6257E16D2605AB0ABCBA6B1B6C607E6117794C808170A2574DB99FC5BCCC072A88D7398F2071AA75B08F6F6E080ADF3D80F61C4FD13B7A37B8302460276EFE1CEB7FDD702A03B36FABF6D38F048BCAC04226B2A6354192AA011E72CBB9C52BBF6CF1F00E1A518C7851341488B0987C2C456598B68B50EF3D8888FBE99FCE934CC8F6EC02241CA8DF04486DF1ACED4833C17CF2098B873C13CAB6228DED4AF2760

0E4947DA17E46843370AB537475C80D5A3B0859A6BEE3FC0AECF1FB8971C8D342C444D3AF991C05269BE78F389CA2762CE800DD97211BF48BB998747BD90D32F702ED1E73593F3E3E5A42EED70C23771C2D8174C6D781451181205FD9A561775B30C32A8E98A7DA696D50393D7ECFF644C712BE72D1D1AD0CD876439C85476EECD344D4B79ED67BDCE76CF40CB26A6432C867C25A87D6D20D0DC983F1AA30E6F088E2F1D8206036B88E17457E92D6561F9C768D0F484834E1D9DE3E31BA2F35916C84BE1738F4F5902

9656B007ADFAC642551FF9CB7F446843B6F19DA4F7165E4590B9D5DC1FF2CB39559278EBB1CB65CAC5BAAE4E85D267B15BF5A5420BA508A4588B031BB49497B86099CC59F167AC57FA9052D645C68226DD2F0242ED689E58948233095CE9FDD1737BD2D2ECB8AEAEDEC649761429F26035FAD8505B2BABD771BC733FE3317AF2B69B7D5A01B604CF06FA3409BFFDF2834F53A9D959D6C844111EA428210B3B4402D2DFAE5690680A9E175567A53EC91029B0C3A8CA78D7C07274FB95912590367DAE915CBE69DD28FB

65024BB5574E37920E9A5CD253F9AFBD603D457F7ACD84728124416590CD64BFA174F0B382E05AB2C833FF827808841804197BB5A2EE24AAB1D4A4BB56D6CBF7B3D90EE005BA96115837B0CE4EC8CAC4803602C364D37F0252E0A335D24B99866DEC9E66DAB63A3E4992E7123D745EAC6F2F5231A5847320455077A52BC22BC66873C73746573BB4C37E2611A6D0679B8479A3C0C161B304BA4BFBBC96196D3490FA38805BBD325843F1C870D4EFEA6A85A9D358F6FDB24E3C5B0A2B73D0CD1B982F3FB1B0862C26CF

F83B051264F98D4F9108F3CDDEBE9255DB62AB8D58BB59CFD7A13EEC250BCB789143BF4EE34331CFD7EE42E7893085AC507C412B45B7BC9317E06DC7BB847C02073C42AE96FDC626FC407DC7C90678B2A0D0FB756D7835B2595B20FA557A49F07F63FC58B344C82E8709404437A3635FBF9ED7481DA53A42B88E824D6DB496B22C40DC42CEE38F1E61606BC4F8742D432240AEB56257DC37EACF5729CD6AC42CFF9AA0E366F17AB3D4B7E952E1139CD3444C64DC33142814B690F3A2FC19956FE1A830C2D84DAB26BE

8C458C8968616878388F4F3C9C51BF650B27AB112463703C0F0A5F4DD3D536FD7E4B972DD01E263005DF37592D722F57D79E198C4FEDE20945110CE813B403BF276A89CC429EEBB953AF1B5D98C4546681B2741CEA2E177CBEDEFFF4D8745E55305B91394A90A3995150C9D780F864B41337F417C9F6D77B267B88F0C75FD9C73235053069E707EA282A80CB59FF4BE295372574196071C355B029CEC2602EF3096568D6C255693B340C024B25DF46FF72C15AEB898D97CEFE57524E7F23A0E3A7FBE783338B15B9E6

C3CBC681EA6B7C32DEEF4C6FEA3E57C3588C73DA5ACB74B523B20FC06163E2C745097035C37C629C02EE4E55221EAAB6146B58512B2E975665E7B3E79107F84812B7A8A96BE900FA968A63A1E6FBB64654171756A48FF7278EDC445C2D6E14EACD7C3547AE42E8563B3575A221878E174EDF5D372B3006BBA36FD4C25007BE9E30EA4AA07F6F731473F9F4B2482A8F762FC79571C7FA60CF05230E8CC46249959A2D86775F7784AAE64FE7FEC88BF401262D71E9CD6B2B0181EC73C906024E4E502619168C30359C29

D317E4B43BAE3C40DD11E7BCAB7EFA8929B3E06FE2C7A0B81F923E0A0D125FAC6165FC2650B3B9D718EB338442A6CD3BA2734BC1AA6D35D31709C8DC8010CC6C41C21BC1D12D9EBA15FA8C5A1482CA306563A07E59E9DB9C3662F9D73C1F5599EB772662B74BAFEFDCF01BD4E8F2B2C24C5212EB56CD92CF32193567E792DFE91B39A1B17C4BEF11D84A7F11CEFDF0EC1E2621E59B1893114F6F7D67D145BB96D6E8AF1EB008975D845A88EB7C47D8E79A4761A0E824446F9F0DC709F23DB9B344FDF0B6468CF95994

7AB948EB506AE7DFF8B37859D8C52703AD5DDAC9622CF4B66DCD068A1DE4B999B46CDC7E80FDF4113BC42D71F9382F692E07B90808CEF13CAB857945C95BA549F32552328A74339247A509828AE6FD45347F65B704E91C88970951ED2738BFA092733C1BBB06B0CFA103AFAC855DF187764D16867876EE4B6BE7F5AAC4BF5C9ED33C401E60C36BE350C271AEFB4C5FC875347AD9A1B5A19A8C5FFAD67ADD966B237E58F76B26CEC820DAD184AFF917A001FC2236730BB7EC81C9859FFFE95615E796C84A8AD4FF66FB

2369B98BC0433323756EF3639D76F49AE2EEE80C237A50D80508DFC2FF511958A6057C48E2F6B14C5AAC611CACF3DC3960261EBDF781F9E36188B7F70C7E6F4680889DE16E7C3B10FEAA13D8BB427F572538B3152EED9B560CB4212D1C9085DC63669F3A8EFE12525483A58B14048449DAD66621990CF285C3F714B7A24679AAC69464E1897C818023CB1A0E14B2A2F88FC92C3AA04C914DCDA0BCC11AF48A5C3663A709B18A2F5A2B58B48BB272CD261C59C775A324753EEC926FDBA0C1FA0C2E2D2C9B895BC9DD8A

C663CDE5E1332EA1821E2955588D5473C87BE950BA6832DD4CD99425E5C9421B05859DB64FB9F0599D42F3F407D96607EF2E68FE3380AC7D3B719215B894565287D134C23DE7A2A4B37236F79745904FFFA7C8DFCD709E4B158DCFD764EEA97577B9613AF8330C7608F3ADCD8D961355053533F9131B1C3F07598BD19C65437FE4D0B069A770240C1F8259FC348635221FBF837BC7653095A28F2F5649B1258830E742E2FF2403E59F060B3D02B06BEE1E3BAC2506FAA966889BE0572CF29D7C49441BB9E28593AB33

3E4E4A0C4DE7E6E921FCFB0AF6ECE42A7E74E3DA78B1AF97DB75EC90F299336C6223D98794AE7FCD40FB262CA6E13D276D148E76AF21F934B553A58C3F0BF9E9602E021D338C3C6E361CE3CF4353CC33213988BC3E33D235F7D01BA366E10826AC2A2F13F147A7903AA71E9E508E9B3082D3BA6F22B0FDF195D8B6F0530494B9952D7C4C03088EE13CEC8420F2465CE46D2E42B7C127AA735E09513D0B5EB2DCA80F486765EE48D48DE8E980DE79DACE22F3ACBCD801DA0F7604862A557ECC6F326C6F539AE855F7A8

4800D82B436CCFB555B5D2BDD4E4F68339070A9D5E101D35C5576C8372911064E9BE20CF819CDA7551A226958A22E0D17E61F0BB2EFC6203E81F680987AD74E63B546F2F93DAE67421B1CD20B579C17E0C4AA3D511863E1A4190FCDC8B775659C7897385C838882F3B2790D1F32E374343BE455B4AB097C4FDEA5C0A3A41C28BFA2DB01B5F8AC545092F75645AA2B9EFD59B19A20A4C16511CA16B175775459F1CFECC2EFF90CAAB93541E34E0E4879BA4315D276045F8EBC425E661FF475C76E0896D76EEADDC352A

B663D7ED352BD516EC11F389107684C5886D27577DD6358628C49D892A42C5760C3459F6163D35CAC77815181F6D9CA3D7FD837BAAE42EA4B25EB60661C8B7491C45BB8634CB58820889C272C93E445DAB06417C5D6EC166FC96787F9F0A6D62F087D50615D88A3B55A01785D4DF07C7B70F3B8FC1EBA9E50412B357943C111169E9CF52CA501A39654FC3CF12526BDAD3925DFE2932FB079289F8E60CA5AD75C335C147AB9E65F5933C79059279DB4A58AB175210C641CDFEE2E4C6C5301ABA734EEEE9E001D297C9

410713431BB7D644A8E4F0831A3DFF84AEEC52522F4E9A1FEFEB3A337CCD80B32478DF80FD801496EF37C6A5274CB226E4BE5A4EBC0A76EE2637D69EEF11D8240B173AEB06834E449D496C93C313CFA954E79128121E0D536783D5F95C90573C3E27CC360293D552C04A1BD9E7A270D5228ECC6F1549094373704C4BE47F68F485D6603C54AB16D82DC0D13F28C634AE920D4FDD318BB9518C039D9AB6D101EF31FC27BA8365F456A1CE06E55D4AF6B61F1AA9E69B42544B1777F1E533E3945EDC2E21DA4E453905B9

BCC0D2AD6858B23DE3A197EB51EDEA30CAB7EF9A4EEAEC8800A88FE5B10F1C4C4A9DC6724118D468065D7AD5C2E877216AD69ABDE583B25F90C600DCAFCB93A21BE639A032E50F662F412CC9D33524F73298847BD647BA8511730D70E9F40C227D4356594244A2336F28AE370106B1D9A4EDF1F7643F09FCCC31DD1B92AC0E40CEEB1101FC19F9A54E400AA7D79C05FAB3D0419853E1717B04B966FCA31A2ACC8698153A46C2980D0DC24843BB21AD22FCFB9138C334A030C918C2A4F2BC694438170E914A988D839D

CA4912FAFC51A0BDA5C0E9E63EE1B17733C29609CFAF4559CB6F8EE84FEF85CC0E289D2403D0D7C1144B33FCCB30659FF9A86A3B391815229ECFE1D2984C5B2F0B7ED4B2F138A644BD25550BE2684F8C0FEC80510C9264218B2130218BA691B6C0C76459B22153CA6E1C16EAAAC7702E048981290C31D9FDB1BCB721831100F9F03CD11A5B518B5E9F7ABC610B1686E8BD1B9775AFF661544D693B1B4E11003313AF1DD0E21ABD7217EE13F52518B41BEFB4940406282F8BB434B1044980943D611650050C9EED7E47

8D192B07A8CC2AE4622DFE3BF9D69DF5D7FC30A34FCEDC5C244149AE45901D04E9CE5E5F57889459248B1897482393A2FD6186CC8325E082DEC270632B214A556A4AF4527E7EAC3B301707456BA8C0A605E369EE32EB46D84F2A6932FE151B463C936775B9EC8B0A732F8F7AC66BD7C48B245B3DECFBFFAC3D453434FAFC078492A0B873ADA45B0F08B7366727DAF93D55A3E6CD6F768230A4F75EA6324AA620BF2D56E0FF36CB3A2E08C3284EAF28CA1927495E631DC6372FBF7E16DAB5E1BFFBE4E99999143EF989

5556283DDEFBEB4CF4DBEFDB670EFF7254C177D17516680F0CB745DFFAC4BA8E70A3811DDA8F53EFB8412D578DB0B78967326BE61059729F7604C3DB26DE022242320AACE70FFC2EED00BBEE43B65BABC7A602A3E17B53532D9C78258E8427CAEDBE0398850F0D999D78D547D5694F27AA86D01062B020BC75770B27AE791265CF57D8C35A36C6BE9118C6179F4CD0E87E8CBB676B73F546DC3FD4674B0AEEB9BE8D3B360676EB44240D84F9A6A39E184D5772BC52EFC9C7680636396D0E51E364828FE5C7EA5DD8EF

3AB70DDBA33667962D213523EB65AFD74806840E2E9CA6436BFDB7648406A767C89FBE037B976359E60F624DA3DD9EDABFB11AFA6365864B568586795174E9B8A4F5A3C31140B1E0E6B00ADB87C896A3C16023FAE8D0EFD1C2ED24AF46CB1AF921DD9330D9E83FD90BCCA9C9A1BC6CECF8E14B5598F776D3C65CAB9AC7F349EFAA5A407B6A1B6C3B5EC24720FFA676995B22EDF0C3958BF8CDBDE1B84F69920501389E498C9768D8767D66293FD9B166D47765981AE70BD3F1F03A8B8D04A9EE9BB962C0A3945FD5C4

1C9AF06B268F2BA3638269BB95B1A9AB40E68CE877F928FD771C1D55326013A95FD853AE477A5DA321C177A59FF22DA97876822B002704C76477B3E60BDCF1805D0CA46E6CE53D300E70533F15C77C13FFEC049D2860489E0826DDE17725C7FED7C08A2344DF761563BE9DFC3CED4C414D4394197BC26ADB7418B5F4E4ADE0D3837DFE32159AF9AF155AB16567B4FFCADA7410D684A85033F688B471DA3DA42D5CF69FEFB7188427BD128621CEE1E829467835528CE2C3DB88CB9587B68FB4FFC1867A0386C8DCBC9A

F6433F857681EA716CFB2D8E092EED7C85BC09C9D1AA474DA6E147D17A6DBA41F7780BCE42FE5BD4600B9F1C24B1FE19B003291FC4BA8B60ECEA5E89066E0F9CCE3FA2C5178B730958B5BBA94725AD06FA7EEFF815253BB344FCFAD2F7700A631B2BAE92849E5F65952256A68F8379ECAAF6FD75252F4AF06B8000F4CD7BD3878A5055C8030AF28E4F7856752FAF26DE8391449243F930246D643763B8E57EBA4652678D1C83263618980195B6AC7C37A86C8206BF84B56CAC9C3B96E40D57FCC3FAB3764A2440F8C9

75E5881C39B90F510D88A1F1C5436958BA285180B865647CB9306DB4F91551195E15C9E277ECDDF887BD48425E07A2E27C51DCFA68DEEB5FDAE19ACE847A76BF50E64DEE83C2096A3A26293DAEA7553D497A360FBB4559FDCB5C579100133514FD18C3FCE08C17A8458844DBECE2A6DEFEBB7CB7E6158EB95AC419FA2C776820EA4C6E73AC09566A9A34C16C3C77CB17036E8A61680DC3309B63506A788FCDB078E8E5453EB3775B4A990BDA69DBB14EC2FC626873CC3B8EE785E08D069AF8EA282B882775C648C093

AFA55B35EB89B21BE72320C6EC35F342EEE222645E2672E322A84B26703BBE0FB075EDDF94B00AB1CFEB7FCD648A016092088FB99EC4179CFDFE6ABFED566CC9909D16A6F39DA8C483238A0B388E1D7405690C0B1DB84F56AC226735EC9DD74FA37D0CF0EFB13F7D8EBC1F6455EB26B303F0CC649359E637097B5C71DBA6680374F9432A003927EA76B6972244C474FFC13FB7D8A1366BB980BB06BE1F8A77EA8497D935ECE50898B99E0F7CB68C57F2380D25CF58EA747C7472E14F259C22C76D9AF35027A00C5C0C

BE6F88E15BA291EBEFA62516EAEE1641B54009CC4150682EABCD9C1F1BCC2CCA7D32E101DCFAB83599FD34B741F629CF9402F7F99F12D39D745A4DD721720854DBEF0BE448E74A3C1AF1895A9FD4CA0179E4962E3225228251BFCB179D4E849526672FC072F590970DF0A1F786406408BEF5497DE948F45E11165507A240FD06566212CE2005D47CED962507D74778C1C2B8CC72B05A8C0950E133680CF3065BE891E3CA209F61A6C0D4DA757040EA8E8E87C2E9836E1CE3C8D36CB4FEFAB7C9D38FE622E36520F102

4566BC89EDFB9F8E7B34D74580DF53D1B13862A625A99ADEB2EED8B6343C490EEFC40F2EE9BFE3EE51D9BCA5D764E9B47A5DB9FB45459595266B39C2ECBC458AD4C70A9834E1940052ED476409EF9ED46AA0AA8BD6F329B4FAB6A49220ED6DA230821DC5587C76C63D15DB75873E63CE81BBB9263697E27C58647CB362F49BD48DF6818ED8F8DBBAEE42BB83622DE4D46904AF877581FCB7BC6824783B2390E14B233D10B6DE527DE3F1BB479A8C4D0258089A17EAF11441237766A899CD4BD2FD47B8021DC97F10A4

6178994134E7706257891F8BBCFD7D1CB131089B33C3F9F44465CD34D92F3338A4A5BE982416162B518DFAAE7802D12E0EA987A9ADDC30B857D0357F3F0E9B009C92003D9746641AA2B4DE57D33145E3B2218EDA45AF75B703C7765376EB8A50FB50133B46D4C734A49C3BC14BD6B3BF7AD5136BB7D69AF46EF0DD1BFD51D82C7916F26862E0C9AC8AFACEE4797FD3ABA6A531579C3437393648689D528CD1CCF99FF01C94362E0005FE6244F5FCB86BD44F72698C0BA0D2B389E8F2F89C72BE5588A27940AED8E6E6

9ED2F0AD6BE5A34D4460EED88470D789412E45A61D95E462DA6805B93FF142AF77434A5588A867786836842A13BE94831174DD01655412892E01CC80D53A1114FF0C017FFB27D588F6FBE58E71F9582A734FFF73124A4E7D94B7FAF718D7ABF2298A1F611A0DEEA7751FEDE2234EB210561532BC74F13109749957909F2805ACCB9DA6C57166051099A8E1091620FD62BDDE5F18232BB601994C3E51D3001C23701D9AE9429B21EB2394A79111207F036235065610F9D3D0653688FB43129AE6E3F6746C8DA5C422EA

65D964B2A62E8DF5BA0A221B58254BE15C92316349678A9E569E9767B539A60D3FBA8608A08807A301DA1C1803AFE72925E852C9D9BCC27D5797198599BB310C8AE9AA60852D125642A962C92FCCF011140681DEC48E922747C8555031B3E8EFCA71BCCCE28049A7296BF8A5A45CAB14287C550B9B7F20109AFAE2FA06F8885A455F6C1334DBDBCDC23B259E6964FC849125E68CB4FDEF304CD6195396A1FE3EC06159CCCBD40361352512A2BC0BDB56F6C5B013618E5D2189B5D3BD0D6F05D8E12621F9567BA5E627

02DC60FB5F1AB47EF9026B2D3601A6C2F53B67FCEE8888EE92038D8D77F4DF6A982CE6C65E258B60E95EDB3E9C551B523C95557D88FFABFA496000B1E1265E9013DFC5981D344B59424056A8B00EE1F78499C54A3B36BCE0C54009F338D01D6ACE5D68F82EDC3D6CA3276E93D13413FA76E17CD4FFF70A7EA4286809E357B2978C28B6A54F9038247DCCAE91981BD182DC65E69D09115E3656156F85D61C2F624C333B50A657F9659EDB17EC06AB86B43A249918893E6BE6E28912C0A6E87BF7AA92E5CA7FA46C8BE9

0B5E33927DE6CA086055292E96647207A37C2F415E5B33DE54A2E461402EF2888470DC6F0B79311ACEAABA8A347319ABD7FB6FDCF57AE94842A857DB6E6AEE0090B11C5FD98E20B1A6F7AA86F5D1E5FD0EFDA1D639591DDF29DEB34C3EA02FB4D3EFF6C3584203090EC162AAC39EB8D7AA69344E2E21A4E61C9D95803E6DB82DAFE4FD65D60DF41B8CF5F00C87BF677AC34361E910728D3CBDAB6EF5E7208D5CBFC3CF1F486508C527F392C3939025B3E1F7611A866B16FC382335464EE1442C5BCFAF4778AE906207

57E549D919AC463F32C6BD2D13C68DA2C454EEA9EAC1E12E5DC144FFC031E829A0D78E8EA9F6C3E093AD3009B22731A1ECB6EA3FACEBFCC2CDA458D10CBEE678A48FFCC2B25133C1576F0C385263231C28289477C4C587AC35422B057BD2F10B5A12B1A0B4683BE742AA9AD845D98C1447BE675D68736F7F0C14540239480E52E65253A3CDB10B77A8B9FE0C365C5046E60BB09216BE6D7B01CD8B1C4E28B937E701F4250F396C088814165D8A47FBEBED4857467C9C129C8AA1107F7111D3D56F035495793AFD916B

AE8F43C28D23BDD7C0BCC7A2E6EF6A147FE0799A5C49DFA467E388FBFDF92990A2669AB9CA5A7F29EE4803EF7E083E20A48429056686436A366A4A064DA45ABEF5C46EFFF3BBE2A02D66152C852FCA3045A134043AC5D0AB8651D0EB19DA15DA04854A7112D4EB7E2FBAA7003A733020839005539AB19C6DDA2F77AE6AE53B50117161B20DBCBC179F43DC2D827831D2C4BDFCAE9492E121A1B561FBE67C3690CC646C0FEA64CE8D902FB1C59B10A203A96C6CFF9C3770368F1B86E97DD00856F5B06AF7A4ED52C1F8

2D4DE222F03CFD14D25B1BA37512F347F98E2B1626912BF114E7545B5536C5929DE14D7D6684518DB39028831B4022B55063B764228278CCEEC2A9D38DBD1D88C0438308BE3E07CFE7CDBBDE5D9C1631FDF65DE79CB798C88DDB21C3E915983D92C1365C4C2437599D10BC65591AD2211844A5AFDFB84EFA4AC617ADCE4FCD2D431BCA5DDF4697E3EE826F3CF2BDC88D69BD1F49B30CC8E44B3113C05DE727D83D9947779828E588DFCF6B0E3BB9816A0F408214AB5E366F811948D6224B828102D9AB9CA0B31685EF

60D8357D60819D1D017597ABA752E67763F451FA09FE7128E95C4EA6EF60AFD231ABEBD4C5E7799EDB3A640D99798B1442268FB6EBBAB026F1C0EBCAF3C0689CD8DC0EC4F54D247C26BA1B48B1B5C8F439B3C885B153B11C2FEB89E2951348E0420614B40601587A33EC429B50F9D00DA0E4D719AF22B4C3A03B4611D07C37879497189F0750667F520022DEDCAE5829DEBBAFF5A15046BDDC0F271935E182A4A94ABCB8BDEDB5C892B7EE3A070F89A127D1C742A1EA6A59EF6E64B343981D03835E001C5203E34404

B50196B9D0E9FA4FC0092471093977B4F728F999DB03736EFE4670662CAAD2B3AEC31EAC38B0B20B4E5FC51AE63E6019627FEC0AEDDC37B6ACA3B43731FA8456D8EF84F18212D8FF5552C269DAC83D73E675578B63B81AC122018BD3D0097B62E27655F6D0AEC52761FAEE0119CACA714CA14AF20D94020D6A197B0BCD480163AF8A4F6ACF788FF42C65C4A9FFFA36EE085E7454E5AD29F3A0C0D936C770C942C1A76C5D34F991E5C1F12ADCE95DFF95C085A914A94D390719BBCDC12E0CE7888164FA4F2036839650

835C3346349BBF8B5AA7853A3EA6AA31A86FFFD784A346701E4783E087EE33CFD58B116A4684545C61205662C7C5AD33EC962FB464F5CC3C56313CE18553D5C8A7534ABB8D90BC5CFC07ECEEF345F300624E176CAE9DA2A7D28A516FABE879E104D2DC58F750063C71CA70C761514FEE90D0E451E35A014837AEA32AC92B39B7AEB81BB669CF7CB5E43A65F9A591648FB54A9BCEAE25A10659A235B8D953254BFDF5B3C0C1A24ACEA9CA37246AB5A18687128B42DA0534067C2B23E4C6234788DC96B5B25CB85D288A

089D129F6B61567969754F4915B335D6D0A77D67442238C669D3FD591C69B8AEC194A187FE22652049BF48D894B49906748C4444808236D61064E5977B2C683F6C577B9F9E52C4CF8F6A7AB49CE28F7992341E9865C2F477DC719E5EFE366117555A2063C112B0C486B918BAD78F593B292099DA067390605134644AEC7CC90013456260D8649FBD91A02D80CCA3FA3BAF9BC72E4E7DDAF089837B3012126A015DDF82551BD34FC4F62C5CF37D37DEF5BEC77894A08649E873249164D61970D93FCB131EFC73308256

093F67100D4206B04429F83C6C8D24CF2CD4DE484721275BF3EDAC2ED839DFC11837D3B779CB511F989CA62D4179E88343B8491B3FDCE197CD5DD5F31CB2A803276577E8FCEB548A3C5E73383028E39B0B4C462AF3315A2B7DCC51D89243C553632E6D333FCF17F2A62A3FC9C74B81741831049EBA7C1FF5CA7A3181639F7679AB9A83304A1B797FC9261143455646D983B852DD506B443D1A53D0C24EE8ABBAE85654A6E4735F3DA0907D8797C9288CC4452502C04FF16D851D172F443C395497B70C7D76A33B21C5

BB55FC02A87802D460353B9967A70EAEAA83B9E329E9C9DD5803AD8A1A51BE01460349415D596ED15D28CAC66ECA74514B4044A8A220B3344B3D2ACD6B6D214DCC9A1A08E49C5901246616D69F51EA5B534BD513EE6B31868546D977F0158BE460C7946EADECB78639FF1FEB8C32F93503FE3A49BD15ADDDDB76C8AC905E6E391474B2BA5C9EE87AEE657092F6A7533D78B5415475DE3997289ADE9AEAAA0AF982BFCDBF3B27AA60BD949A67F8DB351645E451F83E0210EFF7F98F6A632DC493B76221A2B43808065F

EF50B979636EEB939F9E21D9B369CCBF65F29C33D5D7A2C3590321A2E9E0B36DC63B9832A88BBAEE60C993C8008A155322271AC00206B79B43101920E114C2A600FA5260BAB18287271B3E60E261186E9DA7C754170AE4E627BA51327B4CA4A2942DAEF7CCF5BAE5A3C6C1A4BDF90EF408BD3A1EF6C13988F33CF72D2148F0F1D8B338D50FBAC7904B30AB0E58406F832D5EF27AA57E82374EDAE26A88BB55E19A3DB8532B736CBFCCED21437B926ABBC25F0672BB3BCAE17678F17A22E6353F04F224E46349519C78

69C3B5A4C6ADA46491FC788D2F797CEFAAA495633D1C010AE62FDD2F64CB080E9BACBB29E5CD5972599CD98AB13E7276DCDCAE1B299DA2A855A73C3342DA8EBCFF515F09E80DBB5C8CAF370A1C89A49221B200BFD090B27F18A4E4CF02B4A347D59608477C3AF1D62C0B3B42E035E2E0923B2F70DC661783B2BC00413F15D4B147B07CFAC3E78C0030900B8683766B665AF17DA5F469C1259C77A9FA9454166BF7B83107DA51F235A60EDD0BE279CD81A8852101636EE8D9032C692C27CE05CF452E46D2BAABC62A3A

D36C8E525DA52EB855AAC60B12B57D82EC12DCFA9366C5CFC87B6A26671B5B919F9D2039F71B595462C3AAF7F7A6DDC6F6CADE00B81A98C7F3555414E1B36282F8872382B53547059119AFD2D903A7CE0A750CDC0E285D4AAB1BF44E6710CFEC5F6A390DD572122B1129978EE11C64666FB64A6CAB13913C95B38D382FAD9659D862197959FA4CEDD87B26E6D5CD56EA2DDF5C9AD94706A7E04E4D9AFAD167862CC4CDA532137CA893ADB61B4DDA9FCF40581074E3220D83D99E9987DC11BD8D7AC029BB1DBA7AEEE6

2F05052AE2A82E690AC8CAB2D6CE37BA5760CFB41DBEC096C721D75F6033327BF127888FA09BD44BB959853BBD8474228E490BAA27024A107E73EDC7686733EB6087700FD5634E4B49A6BC5A993D5BA1ADE6EEB695B3F339ACEAA67FC3A3FD01C8451A424A233E11D3FB68DCFE64396F4A9D950A82C199439807AB05A61D052CEC7E4B27CEA43ED4C7EE69D5CB69C9B286B8C9BF0F7EBE844F28FA4F95E8ED688C415BEB4EC0380EEEF28C4DC7E805D3E360C889A9F99BA7BBA7703E6D40A8770989F614FC0B6ECB26

73480B3D5CBAB7BB967D3AC80A7592F95DC207400D03C45E68F419C287DE1DAD8FEBBA3B36B33CEF055F823ADE7309D4C130BFBC9E853885CB38DEE41404D7AD5E0E7CFBEF49FEA4B70601D24968EC6A32A02FB33A3EFCF8691C3ACA5F1C1EDF911B429B7825EF7CE90603BB81930B2FC003366CC339D98069D31EDBFC2806DFF6EFA8AE945FC65E4F6F09CD2293594050962A44CCB26531171C5F947971060CEFBBF907A333D69244BA1318FAE758F939B86CCC0C17EBE442FEF5FA76305AFA1B8B02A05F092F0FD3

13B9B6EBDC4E0E09292B66C44D57412DB2A8ABAC56908C960936C9599158D869961FC6584937AFD26AC7A9B1F08E9F476A5CCD2117D021DBDA45BA33D87E995A8C7DA2EF5686F2DB801E7D2A1F658B0EB1CFDFD7C313DAF7E441991D1F40B871F19423F1BAF8DEB244561D04241B2411CA6D722091AC9EBD66B0B0EFF0FE4EF162E510EADDDE5B49CC6E8B475F4725542DB82389FED08565D9AA941BDB76D5166978ACCDDF830D64B73ABA1CBA866B84A1EB4CC8356A6EDB48D1A738299B785A5FB8CF89CFE5C59D99

D0F473AD099EEBC1C29561F1AF62EBBF0F62685CF80037BBEED27E4A3BB28B14756244380C507443FCAA162A2FBF596A92735A5880C19A7DF9A5A4277FF251869A3533F9C46F821BDCF3C0C669F404A8948D313DC30C575016EE2C97C95374567874198FAC6D5FAC8925E0CE1251321EE236DE8C67F737990AF4F42991EFFB1F7DFADCD51C0B694CF3E253AFAA50FD5DF0FCA1C8E3D3542FE3F03BA3FE12E913F0E25E213772767730236D0626D69E9041767A66D08680DF644BD63AFDB6B845C08825FC089FE3FE09

C6767FF876BD32575D345007160ABE8DA7EAF4078CC61DE97CF6EB8C79123E8BB868B3531FFBE55191428E2A218EA867A96C8C6A50CA81114D430174F30F0A6A14AC8CB797EE69D89137525FFB34F74D8DA13FF0165E4B7A4C9CBFF6BA56976A906EC8CFEC147C21938C2A0176657B9291CD7466F944C52A34639726A8D2705606DD693763EDD35148EB30344E9428696D4BDDEF84C8920AD4904924443B532FFCF3F007BE2FCF542CD525C6A9C9B51427B24E35FB054EE4FA18008303460822EC58386B4F8AF1AC1F

B8A9D236BA58FDC61866C6B4F546D2C71697C6E4C5FAEA5CF75966844564F0F75FDAE2412E20F2CBDBC0203B412841AB3513585011F38FE3ED68707CF2802663DC9800B20E43B85B5FBCB949533551A550C983434ED29A7E59AE69EDCF9B835C275C2DC4229A6AFA61735234818F4F97C3F084CBA9529DB1619CB8635C7D0C5AB9A8E38456B49DDC3506A6080E086729416DB00D472CF45BFDD05622F36727D3E10FBD6EE940F96A2A34CAB83890224BCD3DACB058CE5AF3F02FB997C1A4C9CA8028EE040223E9715B

1AE1496C0AC3FED3308D4B948913708042BA0859229344CAC3D1502CE2CE7CE69EBDF51045EEEFE0FEAD0C26D4AEFA53695E96FC44D5E6FB06711A3D123310D2BD59C49222341737A88E71EEF4063961A59B7F2C44FD5EDAB21AD339AA9F65C6C90DE4F4ABAC2C65AB5211E622F79992158E5DD448BCCC67D1FC0172F167160F5DB5387E42D995CAAE7DD53A93B8E65D6821B270A451E066C3199831D00DAE583506ACD02D5AB126EAA81681BB8C5B23FCC98718B94B3A397B62DD8E0AD5A69566DED187A91760F82A

F84C4446D46578934AB6B4D49BBF746B1F9A3AEE2221C61FDBE159DD561AB8781CDBA10297C9A980A797A1CA026DA2203CAC57A5659B2D0FDEAF924F0D97F39832A4C9E266F57AA3B0B2A616B0A8A27DC4A734990223F9209A75241BC0A38842F7A80AC9C02AC5C5D5B810B0945908F7ED906602FE1937548FB31E6D81297AF61108EA09FA46583FF7B27F56D07CD2B5ECC2D0FD3567CE8157A3431278E02E3A688A34EDE60A6DE90CA123803CAC4349D2FF0BDD82B20071B6EEB862C280D52CC0C75D215DFE797D86

369FFC28E01B6D890ED06FA942756A252CCBCA9E25E3D6AB93B7D9872B0B71E744CAFF1D8DCF5C5B302F19E0411F0D3935FF1CA867BEEE89C9530DA330E64B7FE05C98551D2D9301F23BE2B5E078CD6CDE92A2EFFF755B9BB2AEECB974C2E99B3CC94A75D1076AC748EDEC5541E271B756EADE31B96C2B3DB8D815E77BF69BE8365E33FF8FB4E0165BE7C48AD647A7FBCEBB83364D79D1CDB019CFE4FBDFAFAA641FD30507B691ABDC924D9E618C9BFF7EAE795880807EF752E815F9011D15B8CE413A7B4E203D9808

0623F4106FFAFB99299E63B0F94D61E8AD5856AAEFAD0001A3C7EBD8A1A83532A02947F148C0AD1E78C9BD3D2844D9FBEE52E0821272DE371272AD05934651350F74CFFD9527A6060A29026EBED195A034DA077AD60A582F3213F58EBDBAC6CFA57DC2DF8AD3BEA5DBA2A49968A2C2F71DF05193FDE964DF226DFC02BAC7F1FFEE3BEDC29B1560FF82AD29227833758ABB2EA54DCBAFA92BAB00993CBC769FE9BB81E8645887B10E12B7DACA36C4B651635B27499D516A6D9EB375313EAA72961BBF4E3A62A0A373D0

C57E6C588245C84B578547C30E3150511B0F17B492CD8993FED4BB637FDC8E940B669D3DAE618B53AB849BBCAAD337E50F003874A5A620D49B77A109E0F31355204F44968760B96F498C614461BCB43F2559C988E84695EDC99E2925FB2B9ED2903783ADE1C6AFF964E2181DED72FD9F78BE1A0EDF8F27700288E2B703A3E9C578BDE2EDE4A7977A913D280C5942FC839BE96FB886F86287BB1C76DF83747633129C1F022F60486C1C41F97ACEFBC0986562280E0DCFFB60B54F678E6B9B81274BCB54CC14333C7F74

FDB62F2CB078AA73A62989835CCE912111478C3672AF6F81E73D7AF6E609EAC689DA88DF3D641157429AFA2FB7F027F8B0158A6DFCB4407527441AF54DDF32B9517AB182A2C1FC9C7E42A1CD79A65FB8F48C2A5F1B6C026F55D8C9AC0159FC95E52552C85DF6575A0569219F3C2ED52D927DBCAC206C81BBBB20F6A7C149653751976814AB9F2AC75CB0105A19E9BF7B6810FC484D56FCF8324E0FC16BC915EB86170FE66A29C560D7D3A2CF14C725191EB7B6634C8E7462D4F1DC6C84FFB1FA78B6EBDCBBE665F8B7

69F2CE2E7078DFC42BD38B4E30B8E0623B1835F5EDF744D82E87C691DE1D565CABDD4C4040B63BDD5533F769701F84FDE934DD7F89425A0733E0B39F668A27BBA668E640DB502E3C4E1274B8A35E6341F31FA6DA81B42FFCB6D275E44DD4E758B7A0FA37B87A428299BAFBC42D00FA31DDF8C099A34EDFC4A0038494D036A3262C13B0B3FABD2C998FCD18F342ECAA95949C87681CBD78960220EFB525A8E6278BF0A53410D4A7FA5585C07296C56A3454F6AD8F5C95BA68E600A1120AAF1EED827244212B72BE464E

595B3049D2A01A84C7555C1F0D64AF83881EABC774E5A04F4E9AD0130244C6F04CABD8513734C10226FA4A9956439E72679F28A870D6E1B57D970DC94F2584CCBA75E9BE6DC758FAE27832C410BFC069B875C91EA2B561BEF7534B05CA33E0A584989C5BF5852242E179B52EC0611E7EB2A58E101FBAD04946145D7BE284F57A0BA431A6118864F93BB9994FFC983004ED8B552D778983619ACD27F696590CA56D383289A41618BB8B8E8E2D36B0050B85DF5EC1011634168E717AF0030B1E219390967EF3ECF8351A

8C870E70AA219A3E03C2C142CC1E2EDB4B75C97856E196B4AA06B85BC97E769BF8F0BD612C1F60E081362581CB8A6FE271391DEC952F876181E71B5E49E991E16B4A06738EFC0EF55AAFCECB4C4159CD2DE4D335B4D83956BBA0B3E43A47955187C878B3E73848175E2BCD9C7F84B47E70E938CC57A49F61BC7A7AC4FCEFB752E0CAAFB95CF1DF431980E9AD692EC7588C6D6133BB2D4850F1BABC8E533CEDB885B2E8AD62288B1D03254E8C43CB94F8EFED37E1456B8AD79619D7F18E383B4ACEC3817D566CEA4C8B

B25AE9D733B95543FCFE21A19835F6487876224660A82034FE8018BB376D6C369740D8A60F468D078E4911833C5900FC0EFE8040792CF97D2FC93718855877A0CAE10000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


type42known not downloadOK and{userdict/TrueDict known{TrueDict/render known not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA61D516861E6B44ABEFEA3F41AA6265F561EEA329F99C57BE14D599EA9627B771E47DEA5C3F4348515CCD2F77B6D7A104A321F49A3F7E10CCB09E0F18E3DB6F66BEC10C986A33AEC7BC881833274B6807D8D4F3871CB44A265B633E2C2E88DB139C9E100B819F507490A87FBC0C2B35F2D264C5BF78F3F

BCD4069AED9FFF05234274FFA12D9FA2205799ECA89AE87295C17598015BFC7E1C31769F9496E96CA921DE592EFD6F1F750AA4E6EC470B6C094EF710F5D52F74A4DE887B9D64E60C8194DAA4A97549158F44A258BEB54121B794A70AC586FBC1C7FC08E30901D89FFBB02A7E6B18AC4AA0B87C05A4F8FDA2F7A947FBA46D1CF7CFC24DBF78B2DB3E9768B86982D8312BAD12A1A77862F21120AAAD32F686E88749CA078F054DAE900EFF33DE0F508EEFD7A605F271626FE8C629A60556339D879D0049C47350BD3F67

C051B5610706E203DBF71AE4F022A716D1E1295916BC44576C02C55257ECBF8F5E9978ABA5742AFC086D508004673EF7F634C37BEE15A5A2D7BB9BDF95946025CCD907FC204526D009010D953A648F332CB7C1F4C094C18D16FF74303642A5C522129A1320CE2375DB5354D81EE91BA309143F40F2EEBE2C923FEF9A2E82D1192AAA3D65E1FBFD3A2FB898B7BF45EA41B2D98C80E736CB4DF517AD013A09B8027728007E608709F2492DBF145A782E5056A54677D237F743042C77BA748DE556814E31BF124E4EA043

081DBB688A63D3DEF0A54C44AE435AA184180B30C6CEF3D9515DDF1F1998974A77EFE67EEA6F0EE9DBCAF5AC7F49AC49F5DBF093A96A943DB165BC81558F72DEA242A46B424C2245E92726A0ED5DEB702F488DE84A248137C29812514D077CAB67AA0BB30D18431DB3A0A03FBBDFB84593889E622636DE8DDC651512725E702F174A0AC617E94F528DDDB567BAC531E9D4A5571124811FBD53CE7B519691F99392B27E62A9C5C904F9B21521D336FE10287A84B2B6A5DEE847D22F7A062777E91B6C48E91472CD18A8

C3F2E5317BBF9EB737A46593987EC1C972C27FA204FB59D59FC6DA487EDEE3ACFF771A6A2EEC32FE4378B6FAE314454605F271AC0579EA382FF19D7E75DD5020E0E8BA9BD142280D59F39AD362E267CFAF0145997A6AA9602D782193F67F3EA1E199DB42CB9C80285FA7E2E28F97E5DD05E9273CB9A6ECC5C2DC7F47C63FF4640D840CDA0F775B826EE06CB8F318F1CB2A79249C639D68FFD1F0230121442185D825AAF3AA95D179E8589B0A1868B4AA8B588DC9F27E366602F73E7996DE83E8F15F1DEDD3477E05FC

2186F7A4918C3F3BCB5306F22685639EC6C33EDBB70A5C79C627CFE9FCBF7605C5D64D5CC09E934E14FE746AFF7B3A0033202D1F10752D79D418308AA0D16B98A7373FDE8FE28F0FAABC46B65949463E020580B43A99D355FF1424998FFA8A242AAD3D2B57CDAEDBCBD7EABA48D401AE54840D338AE621A21C2EDF6056DFB5B585F84628376426111D97DBE58C944A6B9DD9CCE9FABDA3A09083A5DAA9408CCCAAA71BD7CD7E6C7B29D23D9643C1A33FEC705C9D17F44AE8F1D88C672397588E4F07CD8C579A63D380

1D58E6D7C178A4F0A502269531576132BB4EB53E75ADDACAB718992B06FE4CD1A03AC0CFDE20E3E2306E8C2763A1CF6C49EBF66608AC420174133481D6068E61FB009C95440F2E1988713E5ED9735061AF2CE5149A92218F05819CD35697C28DC00BFF9DECFFFBBC3992B99F2A42C2A95B86672B8DFA1B5849B2F19F6FCBF37AF2C7F0BF87931209BEB51C49C00822E65427DA586AA08A2CEEC94F076743042AF365B5DF679696F5B30857F4D00BDC3833D2BF87D2915798604ACE456CD69DD4D1CE1DCDF0E8A3AC71

0F41F741A0622A13AF8B0136DC17F7C0B9D64270F955CDEFE3833BBF97D5134FDBE11DBC7B6391581CF5E5281D1C6F1085F963566955DABA32CEB68076C62783870995C468A2CABEE6B0CAAE21E9536247017E15F4F47A225FC53786B2B5CAF485F0F3E093C0953A16C3D1021FE4EF6DD6B9816E422A39AF591AB03F9DC76E052D7E8A0DEDFDE9D35BC88CBB8FA4693DC26A71C8D1E61DD5CFAF42890360F3806E3E02CE56D754A6B5DFEECF9EFC2513C4D63AD9727333B4795A2C3B071F9F7778AF76C4B057B3B1F5

6DF1DF4BC6D30C5ECE465C2A3C97BCE6E9C7675938671CE32379D589C8631A3A465CCA2925A0CCD58CB2D85A124C5A27BBA1B811AF904182E5323B087EF7A916BDA8F253FEB8EBE44FBF5171C29BD204A4E10A812AA46AAE0B88E563FB7F119F6DA9679CEA40E9D66B3198E6ED8ADA6A79ECBB657E1234159DC811C66C3200027CC9DABDC508D610555C0462AA274018AD7F25F2C9FF6435C257B9CCCAD57A220AD491B36C62281CC95AECC1EE9FCFAE4E6703F12A6642E92606AB70B2DAA9A03E69DBE7F814B16402

A58C50956106C9F9D4ADB6D06ADEE309A3771BE22559CD7419EC67FA84FD47E3CC97546344C982BBD63544860BF4EC044274BD67C2AF0A7352DBAC5183FCAAC3D04E9F923B2C7389405C96B3C71418D5A6DAAF8422FAF3229418765EAB198679E1BAE62EAD505B67C84DEE812A2B727A2188F476A90B0BF78023173BDE4C781D557C615E1871CF361C494C1796D06925125A70606863198B0FA1496B04E367F8527E641080B185663C9A32926B8539A7B4077EA27352C4A0E41FD869D11317F0EFDAB26C9F0FD4CB60

6BE364A6AC5476A532EC2CA5FECBBDE484150E0E2A9CEDDE066D821D6BB51085FB372EF5968DFCB16FE13996EA1161091F7298A9B813684E5EC58B7551461616D433442C7770D4670C1C95584686E50EDFC5DA2C9EE66B498D8E2B1F204F308D5631F98B668E3EA969233326797183E444EF1209F1563B60A8332B73FF6B511DD6FBF87DB10086D7DCF66EBDF929C6F4E95FC74CB4C80789CB8DDC7A6DD6E4935545E55FF777ECA8A03B3521FF2F5FFF72E749350BECE6D478A0F28E179D639F3156F54B5AC0292A60

99C5E7F2D50C792A33E3338EA4D654376C86FA665386EE6624C5AF3F51FEEAEE722FACAEF4553F795A224FD8E8EF9076824042432EFA70AE978C1855C17199232B2F2A551888E024F91062856EA362DF7DB1B6882C27C4CEFB993D97D32A63F25EAD0CD8E9B55B96AED3E06AFBCC0B2A228E860F05D371C9F8EBF67DED0B0ED24E230D8E79D01C16A9A8E0B85C32025286B884F807EE7264C489D0A289BCBB711FAEB1F118922D19D9481A68E598DDF17ED26DF449F0A9484367FC5DCC6861D05A8FEFE4295BA80D69

6A9305CA6C47CB279EE520D313E6001A82F3EED6B7286E1348AA7C7B44D8796BA71C0461BA5CB0996AC4405145F0C2B2FFE30F61F52AF08C01A9A53F278AB66EB33335CDE3FC01753F1E6B68B8DC251DEBC8567CBE3BE025E2B0792F8BE0D914B8F729C223DAB71E29CAB0A13294D32014BA1B3B91E80AE989EC7A91835B3B8885217B6A32106D672E49840C8D4EDC19B6777DE7C3D004371EEB3207251A0D18F3CAAF47B4C555755551D952B3EA9A3A1EE352DB161A9F7316A5110AAB33DE798BF69C366EF87516B4

E0ED22D50A7142D964DAF7FAEBBB56B93742A1606239B52854264BA62424E6FC2EDC6509F5003F8B6E3618DA9900523A4286D6E78528400A9BFCFA1E2E2FDDB09FA993DAE2631392B55283AD51D0F7FA006BF43BD3E0864E5E8081ECCE10395662E3E0C0E5986CAA738A9F58107E4670514A538BC828E067C0D425C60CA1CF2F9714A150277834678620538FBBE3A0172AAFE0AABB26FE907A1CF99C84F796784AD5152A0D0B14C4E45AB5E2590B3BB1F17119FC92AD39160856C35F64520EB3C49F826E25A9A6CBD4

115A2822052C5B9F56E2E7C0442D0498AC55D96A91E4D80DA062E644EE7C3C04E14AFC84521976FE27AFDDEC1CD1636ED6E0259BDC590CC5D18DC0461002555AE792B012ACE808FA7CEE68FDEFA04CAD5103D76BEDBA015904D2F7916F0170CFF5F6B2D51D2B8BFA231394D44F64524ECB64F4170BD3C2A4A5BEF2841CF47C5E96551B5ABAC4A9C43A400B1D0236B14192A90786E15B642D4AEB876C943E41D667ECE444091182FFD5673936D0609E0B4187557362A54DFB75496622CE388CF929FE6B5AFEC76231AA

EB1B3AEDF82831CE8B4ADCDA23ACFCF519D4CEC99919ED5D3C91840EE3AC7C07B71F821CC982709A7FDA6230A91BA00B25ED9F52C95ED286D6DD80E3C12B496189521968ADA7147E4D0E812E156DB9195A33D565162427906F907A9FD08E6E1CD5D65306D219D14996B605734AD3B5CF200627FAB98F1ABB9507B618F1DBAA43212B450B4B431BD5C3F51C447574C4FF57696E6D5B773269A63A9A1033830C5CB6D984BCB32A8506D478B551B31A71DF1A215C5A4435DF7117FDC8945B02A1BD212431FF861D23C29C

AD989BEC623F7809FCB26C736163126B2C43519CE72D9737711741B2037EFB3A60000110D7F2C8EE16BE6FB9A8FE906A742CC5BB3ED52A3882859810CE3813865B352620F08B9FFA16C10DC601AE8CEFC83AF1360F1E4A2BBEE41D4EF78A387766C750D16A9E88E4535B9CF7641AB0FDCF69374C26D7BEFCBAEE854A352591D0EF050B20A22C584FC27EE179BB29AC543DD35C61BFC87810D7393E65E62D7EABC544A2E1A316ED9F7C6244D36F5BB0B473F81F7F58DBEDDDF5C377544FE67A800B7CF6A7D2EBC63984

140E8EFBCFEF2B3583DBA03AE52CF6496A91953948F8C23332CD31C0C312854E7238F3646567D681FC0BA32146EE448D8F1D1FDFA1B8E5188280094C8E470CDB430361EAD7A850F80E63B7FE1689B68FCE20D46D831153DC9F9DAF83FAC7D9ACB4ABF71E9C4656A79AB46638AC59BCD43151CD7E50BE3730E64D583318BE4FE0E6EB06E58E5B9C76C5D32229405E0BFCF7D4A690BC13A0793FADA35FD6A3B7FA47CFD258676D6BBA3DC726AE19FC410ADF5DE85017D480DFE135958CB4345792C3C7EB6F50E77671E2

625E44DD6BB3DDE8B06E29EE9A3CF2E1A01C7EC7143A447024396A9C960C4D14EFAEA510254A7C73758918A6CD7F94057C147D037EF0CAA4BE7493F6490CAAB83713F7831393E7443B8A76D4D257E457355FC5595358A697D4E6933A79E1DB23839509626081B3AB1E91D405D03A92AD926178807653C4F0BCE1EE2D37329D9B9ACF684A17DB8C077DE318C122002F21DFB7A5C56EABE159CD516B825A4FDAD6060C468278EE32FA93C14CC75C8782863E53E9AAA36890ED30DDE7506AD5F12E5CFAB963E3C51834E7

E06C48575C98E1DB702DBD2BF82D1596B9663B34FEFC46D3C588626E3044D2F0B69EE753D4C0818D732C2735D6C8C8DF959D0BF6E3A38BF11525A17892949B59AC01FF0CD275B84DCC04D47488D91660582A57DA33E23A8F127BD01C46F4FF6A282C6EB36045930C78DEB48E5C46F602EA986DA177065BFA94E4C9FC80402938EE0CE9ACABA6F1AA8804FFB3F2031BE98208ACB4976DA470E31D5C8034633404D0418D7E788C04889862E9EB5CBC1757AC01137828EEBC4E9F47A0F6BBED728CCA0867BF80D07F6A76

ED8F0FD940636474CCC71E1E7E10E8BF28ACBDDAB024778D74D7D951904D51B4233B29AA0BA1561F998B7F4EA1563262F6211861C58924AF6F163EB77AD68B1CBC7CBA8A852470306FA40B6FD08B64AB59BD5CFB2DD82E753E4A9EEC9BFA30254D1DA54E857076D4DE0BAF672AB31587A7DF0756A6B2521BE938803099DA148FF163854F2FD3EFDDEB22CCEA8E0DB77ACEDBEA3420EB257A65EE2A08B74A1D2705D454B487DDA26622A307796B2E61873FD6C5466490BCC303C90FB3CB148A77B9C3F0863E9F4F61B3

6540C2E1C4811FFF5C7BA4CDDC807CC50B5ABF5FA3E98C0C54EFBEEBBD78CF5261143E8DAD1714F25F855DCCD517AB636CC29CB6BA014D6577B1FA2212CB985F273F8BB52F75FFFBF234C8E0D5DC6BCD8E54B2E77545FE35A406A6C26C483EB346F52E86A13A694529F2069941A71541D3F0E1988F08CA3EA553EC909ADFDDB33759646662A5D4D8EA8CE44A90D5C60B444F169452067B3581425A8404403924770D83431460755C75F52BF42D23131E9C704F7898D7E7F0B8B88A623A423875E59F9928C79085170D

46934A8FCE39624A513AD99535C557C6CB3F988670C6F752080EE3920C528970633D9A83E0EBFD1D35B903A07B4ED1B32FA91D280E0E3EB0700A9FA6FCAE70F99CDD1971875A56C8F6185B911DF58B4895D0F80541450B9B98E40838E66D869CAB3143F528BBE7D8CADD33961270D231C7FB5660764842CF195B654E1D4DF4359C114735E7412C395E628A18D90088E4EC88E72CB1B4CCBCCC7DA056458D44AFE5977075AB0C85F531A9390B1D7E7CDFF9EB719A4DD2D5D8E3D5D74E591AC9583D7822E80D420D7869

247150077EC2D448B80671694CC90BBEED4DAE7B22D425E3103BB2E43AA4501C6183A4E9993BC194C0381B986CD7B6F34383FB5788C8D0176601B1B170CA5D4AE28916F03E945F331AB97B3C24952EB445054191D62D9EA083B9E6DCE09AA5534CA12E273A55F5D594044ADB7B3083B7F2442F5DB85FE2309831F492DC3CEC98D63BF21686AA21856E3464B0E79B070696AC7DD3E367DA2CB7D9742C1D75ECF0DF46FA1202BBDC861C6650E98C4C49FA4B1C74C1229020092B0B7E4DA40FD82E00757FEB1A888CB16F

CF266C45B6B9A6093955A0DF0C1E974648A38E1B6650A21AFC284645294BD4F146DA9CF8D0C6C5ECEBEACC6C22A57D735DF41B67815DF8A5FC7788776E603067B6A1EFADC3DBEC84F7448BF9FF23ACF233A5FB850FE1F2374A324C6EEB0042C41BED091772AA22A139CA382D7E75A40D666166F7D7601D86A1B0FD71B66B7C1BAF210B8F3AE23F5EAC2FD47E8A8D9C4DAA78A0A4236CF79BE24A725E9297E5806D80D7295F5322031B083E950C7BB9BF79E759D724413A6CD6E84B3AC84433988E6E36FA3922FEA549

05C7083197823B196D316EAD2D4F34DA595BE04392AF83405D9A3695BFA739B710E2F187776AC7CB3E6B97E3B52778532DB88DA829B54CA0757C31417A436723327046F914656E1EBA3B6AFCB44C30744A37AEDFCE4A4B65500CB7330E7392189D38BFE1C64D330ADB7C6ECBF5F58987CB2F41023C5C7731193D2EC0C8B6845436B8803194442B6C8954EE5EE75EF02DB6475573C5DAD8E24E1C28948ED8B05A70C7655949E120DF205173498E05DE282704552FE9E73FCEB17B035836390C4A0D31E14AF9D4DF5728

028F406E83E045C0A540EE5555F9E9F1DA84B220B09CA9D196987FEC306B73B061C2F3BA9EB267EB79BF1D5698FFD905661C0B064008D6E30D752CD07A1899F82D5D85329CE49B26A59E7720CB375FA0061332FB2B440B4C9D00D299944DF24F8DFFA6BD234AC7CC75FF8BA922B82CDB5E86F8147BE02BD0143B40E7C91FADE5F124B88E451F0AA4D9465591B7C5A381CB1C9B1D0A18177DE4A522BE7C1C205C16E1F1EFDDE7FBD60D1537A94DCB8A60F8A688A924658C5E74A2D4A74BF909C0AA67B15EF87E86EDEE

33693850C16CA241D854127DC9E63F3CEA37E7C85CE58CE8B5BFF264B2D0E4B5F03B61BC8590827D2B9D67A94112BF0EBA0D1A88861B6B64DA1EAA6F12B01D53275228E69D6BE2A1788B37B4EADC88368310FFCC4B006A7C8F92F09CD31316BFE7B5ED6DC6A6981724C6A5073ECB4B3F2037BAD7668513F3D9E9EA5EDD92AAC08224C417E10068B5647C93BB5A06E6507DF914082C0AA9BD6E7640F5722ABC6E7EE7B776D28A27C0E1E026E68D2A44A6DE168C3F363FBC42444FCC5D5EC89803BC6AA7A2C27EB18F57

A6BCD4A37378E5806C86243008BB05F86B93FE11B05AA369A56A0F96FD413153ADF87B34869869C52F9466321C8E57B3072C18B6273E668D7FC990192143468D9B61EB407A6E094A0B0835ABA9E3537E1F974B6823EF0F8EC023499829CEF7B334C56B16842ECCF40DE0BECDEBD5DA6FB917FCE49AB546FF0E6817C01D14BBBFBEE65C251359F52C979AB9C12579E06D3C0658D64A610CC9B84F7D73AD1096A6C43F5C2802493EC5C6F9D432FC26CB7E45FCD41E3A7829853F3380B61D83AEF2F96D18EBA626FCB7DE

CA9B801332E321C9E62A345E1C049A934B6812672041EE283871978F3B019F2198F0C9DEA713003C1FA37A9CD8E164CFAF7AF95F92723D7D03B533BBAD7AB92D2D4447E9188EC2667777EDE290B6734BA6DDCBC687A223D929D204FC7DE8432B8F3EFE8A5E9A553B9F531977BF00F644AB91EE41F5BB7BE06CC69E0759F752E0BD618D6909C4F4868A2B1BC2B7A97B3A26AA92543DE059D30A4EF8D9C62FE5CD6105E10B21152B42E5C05380A0015CEF43BE1F8C1B81BC5F87D507ED9173DAB1E027090A5F761C9807

06D688D65BC737F3C9FFE403542D380BB99FF60E0CB0C5E1707717C4ACC6D007BC4C67A666EABADC690F0A702EE2C9A36595AFF9AA1DA3688B7AA16FA09FB5091C19AED55CBF6FF2373429E3A6381388E04CD77E94C4FED3060166C2E088ECC53F79D2B77E753C79ED0BC3D13D8F33857311FCA74520621F98A451863B301047AB3CA58DEE3CBB1A7287025113453C7F285B84F9A64E2C66E1940893B7509FA368E73B533B09898A6ED747207C10F6B1ECD808388101C8751D1FD32C8056205C83E4DE989EDD725A4F

96F5AD02D7B4A63E8A26CEBF9E26AB8A21E1A8B87EBF4A87513B398B912449361CC59CC0D8F46D63B7A81553D461DE9D9B46D861D6DA6EEA5212D81C4ABF9C591ACF6A1759AB855FABF12143D12F46ACABED307F23F1C04D456A9F607D99486D874998CC52D294AA5170555250B67381B9CC77F6155DFDA86A084CAD623ED172EBFECF8A1FF6C0294875B6893B405755EF619519F2D8C2AFDCADA5964B811C8B6E422DF13C4AED13A196B2C14FA2E76CD26D4396E902A5028E3AAC8B98260451589B88CE2B4C4A23FC

D8C769E991F90B335AEE9DBC3DA3D8AA32772F37B94B0ACA332000BF18FDA20DDFD7D65EAC88EAA2D1155EEDAC4A62B2F85C66B92872DC9319807D8C62D3A8D95E019C42A097A54DD80111EC24130A559CE3977A38CDE8C5C4B37E52FDD49EE956FD66CA1CB0A29AC2D482F0E17F1666573D4890829E21C4C3490781E48CC41A05578FA0C0CDDD62B78086FB9DE87378B2D0CA311B3C8807F5EF8402CC15327EC85E8212D6739C218A12D88E7E9EC6A8D00FC6CAB1EC025C90D491EE305C81721B1A4BD257A90B669D

5861A7BB8588E0728640A2622DF22BE5E787F95F0FCA3B5B2F24F6B4A6D3CC2F5FCC4873D999DF931FBB3FC5591247533BF53013985FF8922FF44F74DF9C37E314BB6461D071F144DC7B14871D86D7C8A01ECC05CF4864B855FB26761BF9562F9E03B6A29271F4F030B29821EF2E4A76C0498A23E723653EA5E63AA2E23AE407BEFA06F5A178030275F5406496672AC4F63EABEA58EACBB2C750118B6BBA58FF0DA32FCBD57EFC99A5AFE649C15854D7857454DE5BCBC9FBAF4AE77BD4254E98E181CA1120D6ED2EDF

7AF37FDB68600941A21AAD5DF910E39095E30DCA8C0AFCB10C80858515698057F19927E2EE5A0429B8E7CD73B6626F559EB49F6DE9B8BC4CCBB41DB84683411A5BF9CBF510A1C6B39BE54E1C6AE7A6ABB4EC3CF251BF27C39DA391869D43D6BBD1D94464EB3D8BF7FF46880C7A101914A7A6B6D3B4512D514DF879182CE8CCB9C62AA4D4D323806EA3466CF9D075FAC2770232BD693A3CD6E0C499A70EFADE31E65FCE6391B1F6B9B7CF9C8287080610A019421FC53A6D49BBE7355FB6B33F70006EE97DC759759878

79BE914859436935D909004C861F24B101FD74C679DFA9CECC0F37BF61A4CE7992FC0D1AAFAF9A57C2DDF23409DDB40F509F6B14B6309BE827FBB68886E9BF8EA3673DDB04C41A30D3BA32EDC6916C40DC693CCBC47EE499DF9746AA6EFCDE477D8ABCD27AB4C771A48F0472125C5B5F43015C42822A5CF19E15F261D50A56C688FA6BFA7CCEB62E623E7CABBADF1ADDFF86D5E87F721A827EC12B5046250446CF89A1AB266F7CFC02B4F8F15AACB92DA3B3E9E9475220A6EC6F0B0857DE23B842BBC6363A04CA52B1

5AF815034089F571745CB5C144C235D553D5A10244390A5DE45CA12E290E3C9B7E3FBCB02D487C4BF540463F0E4808D6F3F9D55C8435A3D849ADE039B16360A94E8B8ADBC69D6B61DB605596E3BE95AFCFAED67A9D998893A5E0F93312F0B30546E17C69C35538758EE0BDCDEC9E30266745150C12882DFE9A2533D13130EEE36C0E05AFFFA422DA6355BBEA19A312DF159F094811E86F4D78BE476113A61C9C5A0776D138FE937580ADB80BD8B1A98F8C0587EB176934A0D143AE32B81AE66779ACE3D33325FF2D36

A7648CCC8251A79507CAD09F1016BF77049987E3A5A328BBF4A90D70E906737CA56FF1EF91BBB58FD7E769A547CD5DB3663CB11E446B7A3A3EBEDAE1C3CFC06A98AA4C90E98C5BDFEDAE934CC61E42CC2618D2FBA426EA97202C07B49E17CC65CDF8615687D9AE6C616D2BDDF14870E0963DD5E2580AA6911FFD57D7FA8D16C90039117526F3DD9A6E3DFB1E554133A4A421CB03CACF15551E192D32FAD3EE410D661C4074E208920AD8A6FC4D0F24E668FFBE9C5671D3C3F28EBFD9E95F49CF9C03DC11FC1D9AD85B

FBAF725709769CB8F461866585A2F1B93A074ABC5B7FA4548DD80F4EEFCDA32F5E6545982D977B5F11704E73D08BEA4D1D4D047A71DC3BE69768E7DDD4B80AB8BC90130A3417C8A41A3899A4DDAD64FF917C686BE67FCFB43F8B508A3D2E053B2F3F97C0574CFD340FC8E7A92472C420DA811B61DCC55743E8D5EBE6250B2E9CFA606BB843C0713F8976798D675F8E173357AD4DB7E3530C6D4A71ADFB3C98246A2FF0824EE3980F0B1A3F95DAE33BFCD4EF4FCD1FCF780A949A7EE699A3ED29E0EAA42F5BE3F85121

2E6883A12A168BF6125BFF6F1C2337581A39DD9E2C328ACF36646B7682CC50B75B2E1CC2C9718070A3A3894597149A09F2E5EDC58248A1EAED9B14E48F13C13C2E0221D3C0981DE04A08CA10C83873DD3B23F2E310CBFB3DF372FF257B2B6D36E63AC9DA6C3081C7DDDE110331731294ED962C65ABA1F9C9CA785985EBC965A93DE267AFDD7F6E3604FD3632DA3100B4437E40F44AC98396B4425326DBBE0C88B189721A465F33DD57D05C5BD95A822549BFC611F90B4C49A22B76C6006FDAEEBFEC18BBDEBF17EF87

2DC140204FEA1FF1E131C50AA4126828F11147B3882AFAED5D9C1F6F1B9F43EED8D0E957B909E333B3C3E7FDE21A292F9744E49392FAA46AFF27D13743F550E5929EBEF5985DEE2C0E419AAFBD130C5337B9BCC51C442D59D4BAA87F1B5A7805E8C57918089FC9EEC715517D9FFF8E7036EFB4D1B2CEF2561DCB7B2B235E69565D9FFCFB8B1460B72CB421745392BD327B4FDBC4C945BF1A3A8EC0A7C7C948ACFA90E91B1422AAFA8198255DF3ABC02BF1603E985C96055D0309C328663DA3FBF769A5AEB526A8C078

800526CADA363E38A54572B48D6A9213B5816C95139DA6CEE71B4556B16584FF56926DC2FCA6BA8E88B3566A6DBB4BEE5135EF7DA7B38322F48B9190E5A9325500A1DC6FE3AF2EE8374E660C2FFA0A6D21E4FF1B4E94B36F6F9BBF0AAC62FDCA5DC221E6BCD1F6193692F30F57DEA75D69A264AA8910611B4BBCFE1D880500D8C78E07534BF53C70ADEACAC02F6047497DCA4F03967AC3EA09AAFD6C5EAB146FE2DA7A7C99D4E5D6E29B1BEF93689FE3C298AC0A38721EF6A10CCAEC71D8AE2F3BC5A7035D97A702C0

A828351B8B893765C19DF8A1AF0149F5DC1B8AB2B323C5633B8777EF50509E50A72FF57E84122914D60B91245BA1A1A4E2F8E31B95EE3FB4FDCFB2DC491A9D7F6475EECF5A9F17EF41AC8625C43DD20A72C8831871B579F8632AF8B09BAE31F8793A476B049B51924614DC8E3FF6CA0A16F27DA53E2F5868B0A565A50057CA468E3B90B3B1F73AC20CE8B82CF833DCC50643F174F071A5FEE7A0D9BBB3130BF9A1A414A63982C0A0430E9D69DC33369BAF62D1BA21A3FDA8F91324325716F1286DABD1CAD913616A13

17E6F8EE4F44D4EAA7D3C884FD264CEA35244306B1E503BBAE643B3415AC0AF2CD3BD92F0D094214CAB6CB2EE39F80E878ADE0EBD3CD716ADCD88223810A423222D5E7A0F453D15AF6C6F0962C792A49744792C2E102B49B2C900244C4BC3B22BF161F025E0DCFCDCD02A49331EDF0A1689A6A7C6BC8AB29D462719FA5E89500FBD6677547AAE6A404A430B34C4606580578C2848DD99F20D8A98F87900713EB037D2517CC0FF2E3D9E52C20CCF0EC2F8A2191A802DBC8D4CA8C7400400CB43D21C1E7236A31205935

7776FAAD77FF0FE525CDF7C5E462BDBB4EA539088928792D694142E060BE791F3AE6DAC08867A8493FFEDF396F29008E651B304839B54064D5FF429077F5B6D4FD108F01CEA4439A2348A287444D04666110958728D055BF922219B482FC6DD8E341847BAAF605B59FEAEDD02085196F029B129688A6F52A89230B4C068E42540A2283DC504C01733DCF0D2201F7382097057215A798FE7B0287ED6578DD63449DB1CC72C81951DF59F3F4945F696015CAA02C8104B66DC66CD065F96AC793534A644541DED838DF3B

F7BA3C87D4333732B9C70720895B6B7E85EFCFC4C849D6F3CB74D0F66253D7A37C30DA58FF79F5A008F77302E3DF3F77CDF7F6E3658B99E4066273329CC0C5E907355C0678E173E5135B24972A86C6EC0C4C6EC82E6CB2B28F00D18215D3C84611004499F211FF45E690C30533517EF5130EA161CDF9FEDA3D46D3AB285F1531DAFBE0953D63B510486DAE8537088E8718823B88A72C6466182D8D293D94F8C92AB16F01C1F5CB9041272B927FE646570DB421748D521995854437C5727C1EF328923F04C5D7749388

9D8E0DFC96C8B99C67CB5E5C3EA1A7E2316421AAF4A0B0BB980B6F3159AA2E142712E0095AE534DFA217B7E7BF68A16E354B067E93C6B458540D2175B849435FA423CF153C5DE1F217FB7E1D696569879EE11E4140C5EBE4FF7E2988599E0A359D6E660D44631A52B2B46AE01C25CF903816FCAB8D392A1CCCA93F0E1BB9F1C8CD40DFB64066663CEAF56318EF836BEAE3039A9B53427D1FAFD5A731BB2EF20272760EC95E20A355A613680579D72413E0DE0DBFF704741D5E290FF707293C7D0EE8AC0439C1211674

027580736ADD2D9A0BAC725C7B5F807533CAABC964E57E0F61D5069454DEADE05B30002D7515861B1F1AFC681BDB522010DECEBF55C551881903AA6086A0866364B7508450C30C75F344D9A13304D5C51329A4ED7596DC4E480216674893D9007057DAE43A1F2B685E2FFB6CB205953DB7968EC8FDB08B92739E7FBD7CC14FC380C005A31A2E09E45EF86957ECE3886B36956BB2C9C31B347A28E67C02FDB69B68F5BD956CDCE9CBE4E6EAA08BE7A9E137BF7EF62206D59526B27AC97875CCADBE6E6905E974433F39

CCCAEA34D5F8A8DA08F4AB4779D5CBD3D2A21B210E40952CA656781EF5FFA0C6DFD0C6D2CFC99A48EC1E7D0D9977A312B398F7E999148ADC26AAA3DD6719FE2415341934A07948E2F0233661769D37F379DBBECCD1521CC3889BF9B3EFA7F6D7BA0881CF5E66886ED7B083D52E8CBF3926152AAFFB58AC77AB2A6B8C45E9256C53DBB4A456DF9B2BAF5D905B946357B088CDB311E2263A0EA9BBB0614B4EDCB47613E78F18E641B531D95BA45573F3B8903A6E5874F0B2C98A65B07744AA62CC2FC6E741D17B4C7508

7BE54805480D64EEC42F159DED5CF4C739449EC88A4E2782C63C972B5B6D2A9BFEF615E687911FF1A1F606764F9CEF48CD5F6DDFBC5F5EF9DBFE6FD2444B3EB2F87659267D052BAE95142FB50CE9DB0D4AC2127967FC4C3973978A1C730DCCF5469432A1296B154AF4ACE64A994FAF684AADD72CABA823B2371D40B9EE6E9B321C5C6B193BEE340E6FAB142AB8CC0259AF86B8D03D509F2496E05EBB3D1250D8281BA3DD4AFF4D30EC23DBB0D121968D6AC794245F5A5746B0E857945D85D9B4C304BD5A99DA735897

3B3BF33D7C463D3F470EC0F7113E0FFC1F5DA457ED01B2F55CE7C7092496BD64265A682D761A7D86BE90634AB16006220DD5D5FA088478EFF1663C9C5C9E68CCFB2B54BB7B80B578E5FEC0434B1FE073358C7A3EE5AD4861CBF3100CBD75DC49F62C8D393F8D60DA13F298CC2827A7D6E33CA45AE59731E4B30F97BA3A8A827389398A1F5E8CECBE6A9D4F8AB88EEDB77D782C7305349D6948B87B14A41015496E4C99A345215965499338996D6B89D392B1DCAF2BEA7DFE2BEF945800644AAD9D46EB7F7A9001A9FF

E063D2F6626B7A88E188E914FDEA90C5BABE0C682FCAD381C1136584618CFC2563315073D94CCB27D2BF7B79DB107F9456A6D9875F044B6D3CB2275D1FBAB50AE8504FB4669F84B769823E9AC6133AD6754BCC501A75BD1364655173134A888E5DC17D7F0A2DFAD9E67EDD33B7C9F4C9E6DBA67945C4AE66CEE463F6425FE29FC78D23E6CE2DC00B567D9063900A5C265B8A32DCDDA0E0E8B6A07F8460BEA4EB71208F6C7F71F82714C91FA329AC1B8DF6C6DAE50D1668996C07880A2D0FEFBA629BED5DA235961F87

2C2B576F7F0CBEDA4D4A506C2233534359EE5664518E1935F9C416BCA6E7C020CF380283593CFEE1C4E9F8220693F8F6D4D6F0C8872DFA3FB9995DD33CDDFDA02FE5D07583124F493976AA36A9E112A0C917003E59E03BDE51DA5960ECC5C7AEF871AE825C844C7783A5E781105BD2E79476D279E26701E2651CC82DB980DDA8D1C23F4D06E0A3C6B40F0BE5CB2ACE6BFD1028D976A441C2DF5F454C2CFEB6CD8770D1275B976B045AA97DDB5D3383EE116D486B9385ADEB25CB995E34A51C968F187A21D5B2EEDF05

5775162E4BC3BE24F31F76A334835FCF3B4ADDB5667D0B2D887ED300038C0E0704697CFDF84F231EC211A46BEDE0101C6B2D9C22B89D5615E22ED10D0C15F0D067BEBEE90E455E97C940FD641845DA15AE92AE7FC6CAE145036764F9615114B45434B8AEFD68D8DD8578FCDAA7FDC880C4726D901BE9676155C5C8E41A3D09609A033EF01DC59F12BD55994B2FCEA7FBD33C8434C1EA316D5AA96F2E2EA47A6FDD2D43DF2F324F3AF326901804CFDA9495CF479880677628EAAB1510E4779786171030910D4DCAF963

9CB2D818A776BBA487BDFC99736702CA57E23EA0F70A7D9D93159DF33FEF09A44E8AF59563C54FF280507AB2BE9E98DE490CC76DEC3ED3E2463EEED16903C6888313E635BAF7263A53DC1AF764EBAC19CE8B4EB8028EAB43FF37774E1D94D49BAB85402CFCF6045D4F7267020761384F81EC6F05408B3304E3677EE4D6722BB36A95F42781CE5448801C017677E464CFE69701E150EE7A40216A39C1DA1227C8DBF6C33AC9A823E3449009B6A5E280DC59843F48FD031CB72F279E1F69AEDFA402A4BD74F8D8499AC1

E2F49A44AB2520185A6C482E9AA06F5EDE3EA33857C5CE6B901BBF04F241E46B3AF7DC3749DEEDE9B0688A1E9A9B127573A157C82EFC04B50EC51AB227FF4C783D11269D6D0B74C8258B0F80CC1CE141FAA39881397BBF534B234C00A3DD50B234A41F6475E4C84671CEA174D0EE4A3E27B93BC327B58B77A7EF0DB133DC10E5FF66DDAD7DA8AA69457D3722270E5D9EEDB63A3F001879A9995E27637A1F584AB4BA57D90EAA223C7D88BC3E53CB84313D5CC6BBE2A94863728E62FBBA551CE931D8C874CDAAE3905F

0D016FAE152739D9C4378D63D1E1C317C51AB801D02FD16A6D57702C592FE1795725A945E5AF1D377F127B6FE89F857C7B035831B22DBC71D66F2F987DDDD90F9578334298B4251CA9EC750F60CDFB1F950F0C54CD03F39F28296F1BFC092FBEADFD27BFCC414E0BF02D222931867C9D0068B8DFACCEC738DB859A26DBD89D4F7A626B10AA8F0FB93C8E8200285A1FF4160852373894996B3D5DEA45E3B9EEACF67277C245E7C27A8724AC3AE541F3A6884250B28E1100491105E033F45034BD4C325C58A608B74AD3

61E9B7792967A45E24FF6E40E9529793CFBD7701A14BDF873DCA7148AF53836F1EFDF20FEDAD49684AF77E5FF8D66331789DBEE740344EE97A1D872B00728CB586C9F4039AC617020BF44A188F3B6A17F7A0E3DEE95A4D9656A27049615B2893D49C209DD08667532CCFFE428BFD95F77936D5494101C61A5885328F732C49074B39695EAD4DE1766F4FAFF464A1B62981FFE307633072D5BEFB11B34BB3FB9AB1DA92AFC87625A4E7CEB9FE81160BFC2E669B2119E4B0D90595269D3C687327240075053097E1C457

1563D7784E48B5FB52074C7AE8759413B30E996CA7011E1B1EEFB82A53BF2DA35CAB36DAD668F29E4F04985D164B4EFCED5328818811A66E83F9BBD86C66C3FA966E667AE1D10874A942EC7C5403C88F5F1EE3E0E7B2E02E6C825E2D399B492F01848864242BEFD59C4E96F88FBD1E8C64887D774EC70F5332044866FF391151CAE6D11D8F959BCCE8F334B3344172C6AE031E5FB6A61724F85A7F73F77589B8776A67CD80C6D946C6EA5E81FC365B476A1CC9C4524FB0E92420186543CBCE53AB1538FE74F8C04B2C

C8352E79D94C4BD20586F142171AA0ED0EE8DF6796CF43AAB2A358357D585A178F7B05C14901A7EADA687632650813473582C2C505F37A36A9BC32740090FD1B398000AC0507E7449C679E5660CC3A618F6108DA8A7DCB8DDD135BE05EB8C877CEB4B402061BB7F61651D2AC5166FF7CAD0B397217F8B9A8C1A5622C76546C9864D2E1A96B4C2D97AF6AF6B679755C4833868AA9A4740BE4A2C3D96E039DC53286B51A6E9E5ECAAA538A6E71F779A29E9ABD0584FFC1E85A28B58F2D8FDF8A830626E1111D3FFF6721

73D3F4956999815489948EF6F5FF1C000250BE18A7C55DC846B67667096B6F1730D6EE0BCE2380C376536658676047A17CB26EF2AFC9AB1669A76CE2DC76451BE16A48BB63A0FC5EBDABB21235BC3BFFD469072BF00AA35C93305E0E177BB4A3625EB5F096CAE2382A83BE4EB35911CC27E4DC41612F65F94E49F385AA1EFE9EA6FB4C83A34419BF5BF81E74A2411E5314D7F25B6B2E7A4EF4FC97C6BCA7A428ACD2B4BF64FDE87984B53D61031A0420FA0359F0CEB739C738F5D06A51208312FCD774474FB6CDF610

5EF0B9AFFFAB3FC7A5B9828823BDFEEAC2C541FABBFE94CA8CF48199D62E83EA2C4C2B5ED394F7DDB7D6E9E1837F12671C4D0ADB931D21F21D29E020BBB8C27F4BC903A515DBF5301C24A626034A4C73DA7FAF00134AC2517B196EB63177B4F570B7F972AB9091B8C891FE756496E80015784CD10B4629B7142D902A32DDB54E9AD0DD4135BDC6EFFAE6561418D9E5A3F0E452E7E9D93DC286B161BBCF7C58F64CE668E39AC7ECFA10667FE54EF98CCBF761B7D64EB9A2DA9448B280D1FF2E6EE0DC0604F468AE5CB9

CA88F9021539E1B7CDE1E3DDB95E525686001A9D6EFC5D2F109ACE5F7BD17F158E2707C4981E1F18A79ECF430F99E0E82A984B0E63E16E9B576EA3D61135291AFB759188EA98AA48E8C022030908D3E4894E181C228734A8DF8C7F43EF3A31FF47ED47C7DC2008B9EBD60BA639C45DF16C73C40C829D0330C93CD8DF8AB0448C723FDCF520B06ABE5DAF040D65EC65C9BDDC34D64A7D66F6EA08E07487700FE94EA082F3B371AFB411390148F7D842DD631C10C9C71D0EEE4087D8CED7CC5F5591281C0075A832044E

9655A67A442F4B1CC25395CE294C32389A8DAFEE17FA17B193E04B6FE3C3BE4E9BC1928BAB6E371D216F783CB45E93C4D2146B7D0F593EF1E51DB123A1536D10DC8E24CF489489D24CD16D061FE65BCEE43DFB1C0CB49E9B9B3FE3E90BD06F65F0AD7BF3159F7262B88EEAE1B810E8901CAA6C9B4886AB2E4E2DC9F48EFFC1803150A3B1B1D245522CA45AF2F2BD354B155357E3B21B565398FB77631C4D4C4B97C6A9BD5F0CF9AC78CDAC195D60C452B97B9AAF3EEA41D51C712B937AD2B0AD0146F43877D5DE08EE

A613FC43DAB6A35507DD4C5B16A15632F6B560989F4FFFB61E745600FA8195B626909C9CAA1F6FEF1DAD830A0AA1DED41DFE40FAF60CA521F2236695DFEE1E565AC8A6843300F9BB50ABF350D0DA08B63D14456D6A79FA750351978EC91C9776BD079133D493E94D710748AAA942BD094273F37CBA21F92D6CC954B1B5344E0C6C032F9333B9A48D1690A2390C1E6E242159DAB70FD4993C7D9A5890084D4FC39699C868EE8CB4DF9B380FA8D4E1A5348D1911D25E66999C397F702785EBCB2DB743A3F60DEC3CDF00

7D6B4DAE27EB0D19FEC9D16869C53C671A07B6A41BE6510EE28351CE6D57C47B88A6D2714BFB3FE7DD0ACA3CBEF6ADE67A22B5933097A6ED43912E0DEE684BE12C10DB917B3F0A93A366E5E17734F389F7C916249E2E3A3588027B28DCDFACF323A2E04B8CE2B175731F6C4DF3F379264DA19D0674397BAA53EB0F56D62DCD679867E5BB61ADF84D02329AF591CF4A7ACEB161F4FDD54733A790067CECE133D8FC54185AABFA75617E969A70D3D0476026DC2779586D1D98CACEFC2F5987F34DD2718A4642112BAFD7

62029530AA2E69E4C4FA9DC076FBD3507D24BCEF23B17767F9AFA0978B4169EE26967AFDD11EB1E0642737AE91FE0AE410567AAF0224FDF5BFAB8D96BDB2D014A1125D7D9BDE80C60B091CCA1C3688B54EB48523809DDF596AC9C4E367A827B63D34DA617C9941687BA7FBB70FB38E5511C6E9A0DEBD38493269212E6103E4CF2903D066BE9DF2294C4562FD545FAA87EF4D6EDE2AE710C4C4F88E225B7E88E353A603FB7E3CA799648EC5A26C824F6A83E7A578317BE0E39E4BB89638DEF533DFD0CDA2D5554FE861

43C9DA2318CBBEF2ED8A8F9CDC524BCB0E1CA4EC4312CC758400D2D18924BE0BAD405F8F49A7F2B2F4DB0EF8E35AE1B2076CA72A63116B8B8F6B0D1119309235708B79C20BDEE1A885416670F89B1E82AB77741EA56D9352EE2654E7B05C8065C3DE3612FDF407F183A74BEBCF57A30FC418E8C8E7B45BC7EE81485738E0F4D44930EC65DF87AB20B72277BFF12E4E43F3782B79F1DF1F6B77A54CE0BD1618A25EF94FF51FC3ACED63108EA0F623D8ECDF2CAB4984F0E5B363FDAB41B4E7C823375E347AA6A75C6478

E5C64AC6BAE2611CA6265AEE8D8408A277995B5350DED816048771D692CC7DA77BF2648B681EC33E08BEF01B5F4431C88FC3C4AF2EEEB7696E90E50A3C426F8080D4311B349C39910AD4D48F9090FE17697F684ADF001F47997975A73548DC35944528BAFE30EE582963B7768BB6A0F4A46CB1C67CEACB32DEB725018C90AF3F0C2C4DD22C261323CE4A9288639BF24A5902DD01CF74111CF206A0488B875AA23B9AD872BF26B3BEA7586067E3117BA7F2BE2690CF21E40F978EF9D1CECFFA936994B89B49DDDD62B7

F28E8C873CB6506D41DDA161A18E53D237EB00D93CEF3EEF6DFA5C9BDDED20867467AB90F0D6A824B1C0549D064A3DCB0D886BBC1CF688BED9D59F33987D7BCD0D25ED3ADC4F95C70BE80EFA9A27C7D34A8A3EDDA47429CB868F7155A2EE509FCE612D64365EF34F16526CD4DC0CB827633FACD627707BD564743A753D31E37A1F7EFCFAE2A4700111A47E5459A675771B44999925D3DBE537E53526DB621D07771DE90037CB3DF5215FE651ED80E997B1A140ABE6FE021CE0E835CBBEAC9C7C94732DF516B476FD02

9A592FD25925D8E9CEC3EC799868986E1E48616C995ADB6A070162645028D7598C92E9611FA8F39DDDFA6B0C4D32FFB9B1EF609826526DD2784DF329F97DB8265464156B022617D9E7D82FFBB6337CEB8B1760754D4ACF3D739A49E246A8D008EFB9C1F312681938F9A65C51631FB9386F2338E6CD7967CC6C66C5DC326966FF1B4928B693B7F6F85B5AA668934C124E1FC4C85DC18F0CB6D2E4FFAF1908EE4348865C9A682BC85B25487A9A16C00C407C763BD19334160420CC33391683B5EC7B9973BA569FA156CB

1AB0481A381109F0170C55F21FE799B746FC397DEBB5DB9890BC301F2C8C93A52F3A6BF6E6F47A89285A4F84FAE7FE9CD9EF3582E6D736AA2DE7EEBF3AAF64FD75340385A972465656DE16753F9706F372A18D05839FB803C0B30B5AAE9CE8A0AB9C920C6B6B258B2E1FC995EFF9BB579BDE101316D77961B45441A3F3051B111B39277205684F9E7BFD178231E74925A4662059289B7AAA78BB3FD83EC375F66AF0FF15F62C814C51B87E965A3E2E530BB43EAC9D8FF825BD5162112D2DDD2B171B2D6B8E825AE587

278EB37CA4B49BD00D18FF23C6A728898B2AAF7F5B38740FBC18E110C32C532D997715F46F60055D5AC833F734A570A574DA4742E12E85AB086E1E5AF74F59E7E40004B686BC5719BCE2C966E91054E202FE7375D426F8CA29F0D75F4413BCDC4150F5687EFF97D57AEDEF78F2B201D114AA341FEB664BA2D313A3A5700F6138D983A8CE4A086A91380CB55129B1BD01AF23D6B72669AE4BEC5B8FCD5E7121A054171F5A64336A1EE5DF1BC9E824CCE6DC78D9BD93498A0468C5C535C89181E2E8B38A8EC1AE818FE1

C70E4F0016886E5D9BC2DF82A04CE7349E39DB0AC8D85001A0FD27864B4B121AA9ED29C1C5828840781C62795FA5E0434393ADB34E4EE30D7938D7BFFC70856843AB1B798F654ED64C0088A8FA76F8EFE5C2987CD72BD3279B5BA0086B65836C27C5813FF56FA08FBB9D854887CA42CECAF2954600B75DA12B2D0A579E7A7AC82527C515F3C0A25BBC586F015E58C967E62D6CE2C55A8C06E6E9018493430779D073FF20A9CA72E565CC44CA946FA57B6186C6AB2EB7AC6E10C25A799F590106166E59EDE109A601C8

5999093ACEE39A2C6D7DEED115F34ED43EF549787544D30384DA9F901DFF2B525386CC0CCC2BC259F3A4241B65BF3FBD4DA623608EF3CFA2BA8F99454E9303246B5E36B191828F3B534E5846D24F0EAD726C966DB316E60DD1B26EFD62C7079289F8E60CA5AD75C33D35757FA8ACB558D2E8CDA979F3DCE357AE05299D485800037E5302AAA8FA99D34E17264A16C75D2F0A46FB2907D2272AB06625DB9DF52E60DA3A8F0B0D2876D89AA6AE30118E4E69CE5B4C80BB459455EA64164AE9DC1029D4B83C614FDE23E2

16FD2BD39A11107E01C3B43E23C0337B96CBAA01CA3C4172C0A18C63D9511261A2CBAEFA22DCD34A827C85748F865FE4CAF448520FE3D44A15B88D2FFB03C8731EE1ED17E3A55F5EFAB5F2E9460047A3A7AEB6385828268B617273E8614D6A9189E6E39FB989B5A5E07E886EFA017721289477CB5B11864CCCD1665E8A64D57DC04B6D706BE52F6014BABC80317FA0EB719E296F6ACD81B92F1A890935D22E73471AA9875AFBFCD97EA4C3614A3DAC89F0ADBA391037E40AF5FD3B58D7FBF9DC4ADD2BA6E17EAE990C

36603062E4C4B53CDFEC8791142A987B052E3C9924AC6A9281A67B4BD37497AC6B4A8853D37D3A722DDB412199CCF190A228630056A3CA756CE2D95CFD89A5E4BEBD04DECAD47E7135391C0E753AB9FB3BDD80A24C58049677E27847B4694DE36716F2E9DDD1D6948E7F186A815AED2F1CBDD0EA2B7F825EC5DFCAB4E0152FFD6EFF438B9AF2635CEAF625C1BD9A48F261BAEB4E09B7A15E6C93485A09BA44F43E503A7F7650AD66EC60147CCB6F282E8639A396546D10567ADC35A86424910BE1E4BFEAFBE0D67049

602027B477666729C5C2D8481AF0CBEEE6E41866690D5E651414E76B42486655DE2CFA312B4CDC1BEAA12C2E37814EB4DB3B2E02A308D348A1715087988171005D5530135A757CBB3668859D9E61C9F9FA10557B6001DEF173BB6025CE29613EB05A4C3F01F15A5AFA0E3E765E575E864421A7FB2D03D660D075F97C6C2AFF2A7CAFFE38C63E2F95C2E0A2C0FE426FDF6EDE56244B3020D0D4C75711C60290993F191F7ADF8C3D0F1AFC5A384814A2C24D493138D600948AC20EDFFC8905A45EA6EA99591C5E30E9A7

6B47997B6137B82E12D830437576858B27BB25C4767F343455EA8F96A3DC58D186C6D21C7EDECD561B4B8FF67C9B662CAA79B4B3F5CF51E10182E7E424BE48EA1332EAE65E4E7870149CA0C348886E6E0C83E73D8A73D50B6D178B31556E403EB5A8A64359695C754DB72EACC17CD4D4E2416158F1455BEDE6F67F7C9209A33022BB77C3C8C061F46836DDE31FD4748AC98C9DC75FFC94A0ED6D4EA374FFD05ADEFBC343E40ECFAB8BDF4D386BFD6DE8F8265B4BEF0687F41ACA67F24694304E286C9BF4C59D73A6B7

BBD90C16CDDC2A4BA11F31710AB23C9F487DDD79A9F121BAB12D73555024587D94F97A8F3809CA87033D0C281BF2C8A2DA2D4B284A0BB4A6BF3B23A5646F4694D75F32BD0DA6AA5DB81F0A25442E82CE6B9FDC325381D1ECD36B28A24CF7C1892D31CCBEA6C0185539509A8F1D9A374C7347BE52C3A6E50DAB88E7DE7C73DADBF93EC666922D00FD2947402A9AA2AB691D1E0C8C7F38ABD9BF48F13293A3FD240262CAE135671A8F4CAAF66551B1F2CD0129E16E91CAA2DA33C6E1D96BD7F9C3F80783897FDE932C30

41C94232F0B4440AB3F7C3909712CD38AE874604C5E9496DD1EE70160DE5BF8FFFE95A978EFCA52CF0FC87102088C51ACE6CAA6D24BE34856A1C8AC498AED33364C0B950B3FF868C00E8D9227588A51FB0A24F31355296064C814D23A8CBDCECEF68A056783D6E4AA2C580DBD0EF878A88DBECE1C579CA4927AE45606DC8FDA97F4B1922DE0DAA7D8D867F31324B7E1CAA5C6EC3B430F6C38ACE1885A5DAD4512C24B4D061C346E1B12DDE82A0398DD035F0BBCF5F5C972B39C2ED53BED3E26517D3EFF521B02C863E

B084FA78868620F19E280C563C7D5A97004B589C43166F29AB81B218DC7A0544DE5E1EC64AFAEB3915714BF889B1C165259A33D81A6B9681BD29695C28BB24692075B39BC5E18DC464133BCD0FFBAC0B92AD79D67D9D6361AEB18268A3F861C8A1D2DAB3C1023BA56521092EEC654E52E7931BCE13BC20411CBA3C5256A0CF6A8409A65C5C3DCAF9FBD7E90232377EBF63F9164EDC0B2D939DC72EA9555AA15F12C3B379D03A82986D6023DDAE102850CCCA3E76E2C7BE4ECA1DBD3000D763C12D2CE8038388F80561

F580DABE793D14EA152403EF97EA65A96041E9EF282E2F8D50BD267F3ABF6491D6144B31C90DAA3C9DDD3B447C6D14CD7D2143C3200B79ABE6D55C710122333AA7D831361EAE29F08B89909890977B603AE4B355964AC4A8045CFDB2E75D9A825FE90CEB3D1A8893D653DFBF95AC8893F27C655CD111A629E95678D78EBF965E8E4377AA929D97E5977C6DD445AD9B8F63D0AA91E638E19262A031C13AC6A5137B75E295D38F77DEDE8BF2045D1A5F82CC281DC99636EB7A8E19C8B54ECF6861D8D6B04699EB567818

F6490037B7ABA2845F57461495119642E73D1A2B64BA560B8759BB810298FAD10B2E3436B60F2111F683FD6A0C95C5A8C4A1A96128B9017E364DC628A13231FDA68EC804D2272C5FA12E7A8F45D618A967BE4EAED4899F17CB3804B89F57C46F66968842924509EE1418BED0EE786872E2F532449D95FB4EBFCBD7C7097ABF66DB9BAE5217B7B29DE91692B9659636BED9A7AB70D1CDD22FE94CABD1D9CDCC5E6070CE82DC5DAEA48532AC3D180DA9FEBC628ACAB898D8238FE6B7F94B17DAC99E05746D879BE53C00

91E2E3462CA977B82288CEBC86307B727F9090B2F100146B0563E89B3376E5305960D030DBA34C2F040BFF7EA0F9EE7EC87F1889FF43FC77D28E8CC134D56B45FB5CACC484470EB49A2A0EB2A04821EE83A44C622471CA1D2FE04F7E16457377F7D87F419EF2609A64278FB75563B05327B5A20DE42EB0D8A05947058C56D8F43E825D3E5A36396A08EF13CAE4014F459C123F11AA43B587D09652B692D10A20A28E97DBE02311088D98986ED7439D6A00ACE8E778FDAB99EB1F5B2C107EAD940448D544415106B389

3DB3D05658D810496F951505ACA9FDEE4A5D599C24F7D12C46D8BE5EEC70F6845E09726B895664AF9CAA5AAAE10C60DF27E0BD412A43454B3F77D6D8F4121E9FA05722F7DFDC04CD36A2A04A05043D0CF658A29258DD258871ED926B56BC5FD862BAD73FF502D2946317538557AC022BA8C512E8BF7BCCBD45D7B87827E1987AB89FA5C83528D623D5211D83148E3412D2F54AE9A38ACF0972B9FBAA26EC5C9D6D41CF35834A88168FF64E620C4E9032ECC959557CA396E1D9F73841A5441CEF6E388B745020013A03

3DAE43D70406413F824117599AC4B469B587378E0C17266A9BE44EE58184B46A0D59B09F6C4DB310DD2042257BEBEAF1112F7E5397852ECD5043BF3B76058A66D88AE6BFD45945E282AD9A5E1D1046CDE23C7C17F6E66B7B875F7FCF40F28CEC9A3E7D00F2387F81B4732E540CC8412D08ADB1498D417C7A2F2BBA6BB097B0B79CEAE28E7F1740482BA7077DD70E36FA160FF16AB2FCCE81F38132C8402022F7034DEA0F9E374A4AB781EEB81CF89C7C8CFE4757A345E9702B7A2DA6F788438361555AB0B0B6C34708

D7593B4DB54ED45C3608175A1783829E24BD733E73B63E2CCBBF181C1BF82262451469E696A4690CF1EDA82BFD5EDAB00A2CC7D6498A50A8049A3C896BC41938F5D475789A0E10F4DD96F6E7A31E1760FF6CB3AE72E833037BCCE6DC7DA3F7FD66FC6874EFEA029A5DE940FDF0CA0F0E302761C6E9316E5A9985A66A8C2210C14185C435100E9BE39B8CBCA5A0B73CB0A88371BC13DB7E237F9FE29CF101547466D79609E2655E3433CEDB42186E6E1E658F365309CE59692F84309AF7D8664C62D1066A5D5D6A2D0D

9863585EF056F61D3BE58F6EFB2D91DEE92F6B09C71A720E5A7DAAD73E9194B14D6EE372DE3A6C83E1EB63C0FE6460604D18435BF1121739BF12C72B99DAEC8EDEEDF3BD2B8773C46C31316B19658C122C1A57A84ACD2D087A6A999B09D6B871693267E8218FF35D054224FA908D9DF6ADF021F1F23A2D3221037EB49516630E8778FBD520166EE4940699FA2ABB015C4745CD510E1CDC13194DBDD718DC147A8768BA22951146E5076A32876F080FF9325A6D8C1FB487BC3255F62528CAE8BEDF0CF02B910A22C2EA

C0D4CF7B47A8B11B859163086A9C167447EE26246888BADB68DD5101E2B0ED4B7A9E6A061EA1E37EA190A94692E716C102E612083CE5145CA68E40F0E4FB87562B56C9A9BFC77578DE56DB67EA347B2F8E358D2A9F5BA144B0FEC92FB7C469C7BD15071D5A76BFC780640DC5001867A94D5AECCA95EE0CAD8AC1A518F6BE49AB2453096D1F5E7E96D207C2531450E2AE6DDCCA9B45216B7479E5651F5F36B718734323610BFB3BC0DAD7DD6DE2B6A21D006A2C8F815ACB71981F50AE68AAF2C2BE244E7DE5A697AB2C

6DEB6A4899D05587F0A784A80353DB46C1EDF5B4368F7952AED6DA002BBE02F5ED05B32F234DEE7D75E5559A8F6DFBC6B95AA19CCAE281D5E5585F9CCDC9B63A58EF0BEFBA31EB2BB69D3DE1B28811C89C78A68AA063BC2E05D0BA2308F49213FBB9EF505D75FCCAF3FD90C25C4DC0CBE804E0D52659E282B8D177E38E1BFF739D837D49A260236A392F9C44BDD2EB5897C6776B54C2F120BBAA04B1998F6B083FC365F022D9FFD3279A3CE919E57DBDF43842F998589D98B6B66768488044D413BEC4DA3B59F51E7E

A816983C7DD78638ECFB1228A34128079A103D68645181C2C9A288F478FB59DE97371A194346236DD435977060A461BC222AE498BE09CF855D57B4E8AF037572B873A1C3FFF1BD68286E88DED7B66CFD4A323FB702B9E2EE013C2EA076318B23E0FF122ED4EB70EF7EF496558A91ACEE68F667D704EA8041B32E7270355F05EBD275DD9EB4D9344A94D7BD88201344AFC2A7714BA30BAE58A83ECB10CF629435B744A41A5998FFCCCE882AFF5179722A569324B0FF1264451747BC23AD52F79BD02181AE4E95A2F9DF

F4C5DE7AFC17171CA91BA8C44882DF298E7C908B11AECE4A147DB6E448B4C9FDDD322F8B1430F42DE9075C029EDCF35E11703C72D583C1328A8F2AA307574B3A3066AFAD9A5CE4941B36B09A675DC87E7E684E4CA09B8F543EA54CD0519E9A878D81CBD455A68FD371A537E165C8193C34CD23986C4B81160000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


type42known not downloadOK and{userdict/TrueDict known{TrueDict dup/imagemaskwrapper known exch/bander known and not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA61CAEF92A514B7CC1814CB90B6B9205D0B3DF88D5DE99A9070A05AC0302E4E4D69A746F04D495DDFFBF76C70585C01B0E1A464FFA40B2D4CCF5423F22B35C8076

59A4A1DD16D91192230DCB3BFDFE36540C5F1721AB12DA4509FB2CB39A5261857092AEED57C01E29C09703D8D74233C0B6A9016250D02F77DB6B610BBCFF2858AA7723A60F308A9DC82982F84779E1F95156486EA5EF7AF1E00C23FA45B7AF54AE8A7CDB8FB0CB6E9A2BB3FF7CF552604D77474719BF8035D930EE272FEEBAC5FCC7ADE995DD229C8A9027668EF9CA145A94E2394ED86E4621352B61FBBA61220F9FD25B7B8F7C20DDE65C2FCB1C073A376369BB6DAFE6BD2A5636956FB5969A9F26A24B08EE097A9C

C695E614D78FE04FCF2792FE5C851B832B73876677D26DC83D6985FB71D746B1375DA4952471B137B9A39539FB75AEF7AA90BA5B5BFCF66043CF306289864AE79E26472A238D9E0DEAAC5529D6ACAB78B93BEAF0864EDE17348DD618597412F5FB411C67485C57270EB9A6DDBF25BACFC8732418836486E461554BF1808E88BBB358BABAD74EB03D181396ECE6B7A403219E9043FD83B57F269F49B8A59283A4F408BFD2DF378459FD69F43ED54DAC29D315A6AC200CDDDB1F95F55DF9DB846E5B8B693090D17E3A4A

CF8258523F161F379BFFB444B1D60BA885E57E224CCEEA78C69A78D482AAE6446ACB8D163EA7B2196B1236C00087E0313F9886B949CEE9304FE82D6561F871D3153FA962B42E24A015E3530FAB9F437E176452C63AB9719E3A8FBB58595A752D9BEAAC5F02FD7D4483C67E3DE0C89F7C524BEC1BA1841BD103F26D75FE380E4F190FE0BC5A3FD0D83223B19BF33F9B4519DFBCAE52EDF30214DDD0B615A02E78CDBAEF3A145C90E5295D0306E557595B903395178BD3CC3EABA67F7211473B44A6486C4636A40C7495

ABCF776991FAA6C75DD3DC5CFEAE5823CAE30730355CF187FCE2B4B7563D6E9EC586FC80B225BD79FD8C4FA25DDDFFC67E4F991360ADBC061172F7B9C77FC7B72D16E2A54D957EEB8252E454B47D6530E9744351EA9CFD418A4B30C7DDEABC1E9F60FF198CCCEB8175FF9F7E02F7661B72E1B4D76344BCC383B8D25C2A1B80E80F3D1742BA7575088E74D3F9218F54F0E8BFACB87FED886921CC3F27B41B70423738D3AF63D9F7EA43FD93CF3164BF1C4E8F35AF42F1B81EE2C0C0BE84A7CF8943467350D5720EB062

BFD7C7D9AB8064737E7B3E9B5BB4EDFA0116D6E4F0441352A4715FA901A5603BDF59C61CFBD5E8A2BEB3734C220D2142A12C49E39EC9D88181067A6B8BD3CE7C1207B212BAC72792E1A8529084C2D1FBD845744955610D2DAACF87FCE83CE4E251BCF9C4121A9A23319581E19C22AA96604E52AEA73EDAB9708B059420A4923B79866D878434AFA351B1760CF2DEF6F31A93360B8B3756C63B8065B883B10D6B3BD4AC3B84AF2DE460B87D52F9459443B94E61F4BF9CCE247E094E67D89CD5D237724F75D77DB109FD

1090CD4BEF00940AF99DEB8138D1E8D3EBB35EFD8670B39F183DB6294E3C33797C28C025983809DB3F5C0CAF17781522F8ED6F5CD89BEE3329DA0EFD043784C436CD6368D5315C3FE026BF95F8C5514D41FDB0486F211CA76FC5AFFA0979B41E5B98C7AD06B4C68A22B3D080822AF49C34C6CC7DE9943E786C8611E7C2EE99ADD9FA76D676833042D3BF5FB897D636758F3F801EC90E4474A303A03BB11E175F88B80DE36D6F2AFA8341D0F4DDDB15C872B729323AA32EEA5E6240F14C1BACD50227A60B3DC4862A15

4D7220610C6119DA413BB6E4CC8952AC5788BDDBA8C3C30317F533A87B018DE3B9488112ACCA3B5FDEC0E150D3EFC5493B54966E767C7F8F089F75BE27A46D1DEC6180EACAFF44D477794C3CDB6202100228462419EC4817E2FFE8C81FD593DA80EC4C2BA69391DE337457533F65CF81EC0D703342CE1BD1983F27714C08650CE5E026A6E0AB00FA8B99FB8C0F05450E3D81E47C98AA86BAAAE5FA83051AE2381870FB1FCABD8BE404F3F15425F7FD17EA356FA0CD316928721456A575AC91163312A9531D5ED40D59

A980E34689667933071E9F021EFC337C3B9F754D1B5027494DD5EE81D8CBF4A902180B951B067865045B603CAC5BC010402EC8C240A7C886C18E24873F7CD921AF92542C49DDC28C7E327C62E9B7B37BB886FC57BF9D386C90DC9DF01EBC080168ECB5D8FB8F308FB45245FAAAD626311F6F152D4B8A45E08522459D516DF91FDCC836376D4F244763D31D848A06AE248851929E2113AD0D10276145FFAF11246523EAE0E0FCFD6E9ADC0F22B0A9FE2DA1543D5DAA28A11812F5C85C5FCE3D4207D0C255A7C2F92061

F69D813946DB67A4083B71A5CB74DD7BD2DA8BC3731061FF6654E2FA4B842CA87E05E64DD71E474B73EF2B8E7B2E7E75777756349CEC3CCD230CA0A872BFCECE360D05D638D0F970A50393D887CE31ABA8895660A22CFEAA811F71DDD3A0AF52EAB66479B56F099F260F48EBDD96418A03786331C3638E144A89B6C682F364DFEDB3CF195557BB897DE30E6FAD1478D6CE7601656740234A46246169117BF3040493405414280ED7EA60487481E59B59C303C408A52D5B9F8A3E5856596D360DA611A9F9BDA4EC4752

683EEE4C8680E1FE733387CBBF3B79D8B702825F098E0CAA188D1E3366FC26F53716452A8B02860CE53805473376F9A5D073CA34CEA13AAA865F58F7354B5FF6F11634F3A11595FB4182AD472FB51BC9B4B995132329C736727E7141B869F4DBC20EF421040A85EDD24AB7F0F6F8AA33AC23D30477826A3E195B9E389E8F6B2759EC5876506A72105D886C50B732284F82B4A6DE702775F26961C49B2FDBA359ED62BD55588627674056A0627CEB82D95F8F0A8126D796A7D5EECF9E8DCEA78C7E741BE25F08DD3B72

6C4FD5221F2A65B3DE57535CA128DF4C6D933CF535C752A657479BB0969A099AC2AFDF61CC81F7C6ACCC8788BC6994B88289DEE8973C7C04F52EB9209F44E337489E2B98D8F0245820B9F977F729AEF2318F50976902A163E737D4661D4E65E81AE282F856F12C66320FCC63AE8D6A4281CCCF45545991326BC7BF0CB69E6278BA3323623928A28E6C1F5B2C68CF32CAA0BF5C1BDDA540E5C91C0E4BEC655CBFC5D944AF6B943D1A494F4F99952E546789CB4613B4333EFFC55D564CB323305AD1713B7AADC5D3F6AA

7F2C4ED5AEB726C617E535ADF9B3F2F5ABEDAC3F850669068D34B29591952A248799A2CC212E8D97E209F3C4B359C357A3608D5C65AF518887A2B1EFB1F18337A5F6656C20D6BE742BF0C15D14A4CB9F6FEC3E1AD856729D8AA88A089D2E34A142F3FB066F1F93DE32E78A15AA05B59839CA04FB25C50C1AFB6EF00F3E8D60E69EE62D9077BC4A8143F459760D910AD26E2AB848CD31FF24770264E1E015D43CE27002700AE499BB7B3C447A7F9AAA86BB41D35AF63D1455955A90B96227AC2C9FA91C444A02DEB1EC

AE53B42A299DCA83A4BEFBCEBD399BC674F449082E518A8A336143362DE0DCD7390332B6D885A0E361D4E225588C22625EE725BCE77986EE666DA584CC6A2E3DF1120CC71042F4868410E38EF7216016651E4060E7E633D8ACF2A086CD336424C5A237D0D7909C3DF6A111A03D80B437C8C7DEB7F2783B93C3A8628D9364AB9902E3198736B91D32F6E6F3AC9E16A68E749EF35152107F6BF908077F8BE5479DFA2B88121005ED0C753D6F10D64E59D040C2A6D11DAE163939B6C91FD494B5C7D4CD80D6E948EE3218

AA76B8F3375955C52BA64FF0F2CE35F94EF2FB0733056F922EEB6BD2BF7FCAAEADA4DC444AFD964A4F3E963D53384158A70639341D9453291C6EA6B15E3D76C524A4C2D8639242E647E44AC3F4F6D660D60E141C6A845861F6A9A4888C84EC4B3E814C136BC4DEB24EAF014AA0D17F7B99CA86E3FA6C28A0CCF0DECB21A165893FBDE1A3E528EBAA88BAEBEC4FFE1FC5F1458114614191FB0E9A53FC9375AF94B0B1B4A791005D90338226E5077F36D1CA5E3D8637D404F8EEC7B22C3B11982319D4C008C69B5D5F1C

369EC4C633FD05F4EDF122CF3134162D8B82D6A51825A8DB5F7B26B2EBE446182846CF9C2CD976C1460B422E0AE4666CD10698F3CF22FC62D5D5A5C5B8EA5810ABE08D1A4B6DDE1D10F23C7E890DE34C2796641250FC4350C165F40C5E3B8E02323BE839B863757AF64E7829D4BF75677219DABD9D9C8A1F1365F9513A321209305BF34E93B3FDBEFDEA979F196DBE8FE8C1A8D06F59A688C88FDD6020DEDCC2B06F239BB1B3BAD88E98A0094D200A3E7BE569B70B3D5F989EEF76EA398283CE622544AEAF0BE6C152

A630DE1A30F5211C2F735C22582DE3AA480D55C1428823F041F1781ED7FAE4A572EBA74F9CAB12CE7C4E0D65DFDB8783DF6DB6BE9BD385CB694F2F55336509892B707D21B363049C446C05E0D9C4A6C74C7C56D0B063EEE6FC970185AD6F93CCAD2E4E7B0D1C6438F9B4A9E34397880F9588CDE0A2D91B6497B6D428BBDA7DC3C2A79BF043E5BFF96F9FA6597099EE0AD443F771AACD70265268FC8737BBFD24F3631846EC8FF1D47E395F4FC12CAED1C6E3281E1BC70756DA2F1C0FA16CDD749C0C6F3602AC9387F2

D1BFC0B0B704A20695FF711DF0396B0041FD4B9E02475728687BD5AA702D91DA868EF0811EBD4A33E60D909FF984CC3B8FBCFB098F56B7914FEF1C83B2B1B863E83663CF176DF49E9F6F6736926D3841672D751974B3A032C383DD2FF2E92C6B8960B802C8A418B74F8B11059CB0F2B31DC7E9BF578B8A3466CDAE5481A7B99BE988D36F41253D898C17FD13B010E5E3AC2005071B5EF0DE7F37B3A9762D33EBDC6F2063FAE55D3F2B1E5EFFC8A955034EB5A72EA5ACD8F7866283C30FE677241C7B8890504E99BC64

22636A205BA1387B5B891E5200A5874B7C733A2051E2E8830AB01F456F9015A85E3389AC06835FCAFF06A0BEA8721E92E8EC94CA85A5B8E2676F19E62FAADFE8721E107A5BA98FB7E1F24EFC981875BD955C8ED7C0AE24CBC987CC7413321C6E89A632708E44D4F69E6C465A60F83766E029635C4DDD93BBFEA07E019C59B9AC2D31D1D2DDF3AA922314D8BA38061CF57584BAF63EFC8D2E0A05F1703CEE6DB8A1FE1C365375C48DAD9E8A2A962F4F36F27F00432947132747FB9F5C086E592EFD3D84E81FCAE6E395

689B888BB625F5C18C2FD777030D6062053416F58CEBD30429FD887D9A2B6531598ABFAB2A4C62940F1C917DCDABFE638ECD0143189F25865798F0C03B524B7C848E3B0E3B9DA5FCD1851CA58265B58C23D96FF0AE90B5405F8EA1C10BAD9813FEF3D236559FF9D612C6E24FA2DFEA7C878DB76635893C5E6B82A7F35541EAD9217E61B0492D1AD5B9DEB65834D4D349B8E1F1AB1A1528CBC282F5818D84ACF564C5758FC12FD618C004B18DA6BA4E45294BA83A08AD2B91B0A42680E09955CD66493D29F3D24BB47F

6134C34B98D9A3BCF68D4B14168C36D086ED384F38F0AFF67EA3264EA3A21D28CBAC684879899B1E28D3A7F629CE781CCCD054520384AF024F9F84462C0154B9F963A7CA9F0C2DA71EF866A71782805338FC171AF6A09C60CDF372F6105F4F6584FC1CE280BF817CA4E9B69966EBB9F86BC88947E626846EA766713DC4AAFD5338B5B94C479B56EE8EB293B391280A257F254DCB1020507CDEC909A56B2D8C0612DB386FCB66FE103367807188B3C6B3D016C85B4653B48BF36FA1FF8B3AD9C39FA286BAF23489DB0D

651B10AA1DB667CBE79FE5A4D823847A31C77967B5C084E6A766AF423E846A741E763EF090AF634A992500C241E295FAFF3B35EBBC205F5903E6B6C8E6A653C222CD4CF465185769A5404993A80EE2039B52ACCAF0766D116A58D575868B1007B6A681B57C8A154F8B1DA617A9EE0C77CF2DED95E3E02351A634AFF5929CEA8B8891021BA8929C114F1062872E0FDDF4F52F4F451C3D006305B181D77516BC4624E2857495E9347D6EC2A8CC468CFC45E6633B1273641B05F2741D6B2B09CAE6D64407DFBE75FCC9E6

DF0101203E79CF942E02B27A8E1BB9225DD35732263E1E134EA0ED4F882463C49E29CF27ACF6C175F1A548D3264E80C0CAA985B2D34BA7356DC65637A12FC83F8F12022E93C441B331D1102A5C6FA3F75450C783B0FAA4DE09E25AB6F9DC38F02712BBDEBA3811C29C17FA2AAD85C770C2769F384F1E23A9A7AC6D964F14D43656F8CDD41653205BFB325102640D9CEE76B0DB173634AF20ABFF778EBA43DD48877562175D680E4CD7657D9B89249629374A7E900E31EC22CF4CE7C7D99FF2760EBC7FD83B85D51ABF

B4EB8854B5E56EC9C420964E0BCD278DC60A0465EDE87000AE6B4BCBC7DFDB308734D239C0C89FC4A301890F789F1B13FA7C87A7B360D0065F315F87BF903ED337B8EEF6A955F9E20E827AE3EFC581551DCB3DF78485ED287774C19BA02978BEA5C2BF77DF396D5FBAF3A7D815E9E2800DC8834E2B6050D2F1B515B146D9694AAAC40EB64E77C18175CB3E40ECB35AEF0185C1F82E152EC9CF15175AA7DF9D9CD89517D6B8ACC23264E324B20A78EE1D10542A0E2D85F8E59EEA1EB4D361D6816274D6910A50F5C627

09D6CEB029B3F4D5FFD797416FC88B7EAAB262387055CB7DCD4C56AEA75BE6DB663B317F8AB39FB15B3D354AB1DD3349E78CF48724C2CEF7EDA2643943FBD4785D56DDCBCD01EE561AB50E0E56FDED50074A1F57B996329B99BB64433B8BC690EADED1A212E67FC53135FE38460E72BE49EA048A41646EE81E09308F77F607B78E06CB623FB9E15E04B898C653437583A112EA8287789EFAD5B47122FFC08E66885E254B7A59AC6B20D2B509F4283CB741662F591AEF65F89A8682E5F19BD5BCFF304FD211986A1B39

7224657B37AFA754B11557E34169244D27553341E92C1AE326D5C9BE80B3DEA9E0326C1FC4FDE527F0055546759570CADC4B840E7C9B22854864031555465973B81ED148D8B07A714CC0955D0FF76C508CE794C43588D7317D7A46C1F74ADE59804508007BCE8CB6406586CE28608B979EE97C755E9E996B1681DF9B83D49C21C72A36EA80EDFA0F9395E87C30B7173F05B877F62BFF004B7A41D990F8E193753E42382DFCB4A17534B490C27D6973CF6516F2CE6F6329654C93EAA4927CBE177544B4CD7C50CE4196

8071905FD6CD48BE6D7E8C3065146F8940C8D82525C383FDA6DFFD0F503193B6ABA20EDF93DA9F761AB43378865E09953378C2CDF04BC717DD8F609B2AAB58EF34E0A7C10FF63CF33695619F86CE4A2EE0D77BE56D81C2815AE8AEF8E8C3FAEB38E22CB0203C2D781EFA67687AFDBD4DD0680CF85D771A17A767D486E8A75927EC5E7D4A31EB8FF617A34D60982849BD93BE2570B0125D7E274A260E2FBFC3FA41652FFE3B2B0882FB86796D6288F876DD98149DEBA0D9D89C9081A40596D6CFE0E23519A1FC884A2A

420CB334F0125E5CB9BE63CCF96562352EDA23EC7A305BECD38B3AA879DCFCD48C44C98A4F538DC0D1BDC5F92CBC77DEF6AA88F63105567D970103632F8AB71CAFEAB25E924D684596F436A61EBD8FAEF3904730C5AE49AA677B9E3026584476F95813CCA2C1B255428F49BF4B028ADDB1AF3F2A1D7E0F9F6D6C007A1D34A3A9199DEEC5C17CC97A68F0ECDE9CCB5DB345BD982C7419BDAF73846121D07B152D0439AF1A77F88C3D22E37FC5384ED68DCF64A77B4BE69DEB54F03CD34CEEBB81660CF941A9A1F7CA95

B3ABA4C03DD70226F70A280ED9492C40DBC30C3447E54098B204F44138D1224BC73277DFBBE9D2E59A10AAB3F911CDC90D2F3F6B95AF58BD41DB8F03DA26D8E3504DF017AFD94BD8BC6F53D66DCB13248D8F5CFF489A33A9B2846CEC22A52357DD33D873522416630E9D33CA95B639076088D6F3ED1DB69DA5039A979E6AA65A7B7DC6A1F76E23DAC961A9DB9D932D9201FE31C52B76D30C04C24E0B1C0E435D0C2252D68E1B231C3FDEACC28F9D1E9F0CDE2A47C40A59EBE6110ED169A1B5D25ABB6550DC7384D0D3

105C9F494EC333C22730E3CB88EC7903AC9D39E0B31A8685CED105F6404C8E96BF0D81B6A5F1DA8311BD15FB6C36F0EC3D91380FCD93AA886D31E6DEEC8C238A9E391CB63B2917A63EB60E835999FEE85B02EB2DBA58DCEA2DC135EC02938E39AC37E9C7426427B184DB606157234B75A7255073DE0C93247A7C99721F854B9E4B365F892389427FAD03BF13AA67EE48D798A56164BB3FB62DB89346DA9AF3A41931857AA42637F9CA68A6110A82BA8EED44D7738D7223962CE35F415ED6BA981B1899C95F22C2587D

D99C33AD84C158986A695FD0B293BFF681C1C338CA86EDF7E9E0594771AA62D5D3FC6E19C734741EA55943786E9E861E0D5FEE289F0170281D4258B8714F5F06036734A3243BBB5B9400D404D1D08197F6614C4C2D8381585C85DB57F9E8776857E36DCA964A61FFF47C2DCC725364870345E3AF934D7F6ED2EF2FBF422ED9DC75C07548737E15818CCBD76B80BC55885111A0CA6C7F63965F5EA64F026A7A4368FAA5E8C99A94DEA76535D2DACF45690436881A7E91D87BB6956E6900140E5F82FB2B703221A2A599

23DA565526385D9DEBE9C28FA7B1AF23C1B0E6EB52CB6C6FDF51F7EB4F82D076C84CAE2010EC81D489DE462EEDB9F01F6FA80FED1C091946F7333D9275B766E3ADE2F414A78A15B16F0A88D078E70A20031F8393344F1FD25A805BF9541AB511BB498937EA58EA0394A524F2CD0D0CE62B85AD6816552DDADE8DA8360D968371002AE6A44B9A64631BA42EF8F6923095D4DED47D495B107A6D1E99751627D7734901B4E9A40922FCC6820822B4E8919151BE5913C5130F93D19F8CBE45C2F915618AC49A1B0EAB1D36

071F20D4464D05BA7BCCDE5757F12B596B9C05BD7FC9CE101FD1F4EA3D42ED2A1F48EB584CBE0CB831113D553244DF508983450A0DEC1DC73B39CEE44870ABB9F30CE72BD2C282C60E5DD00C112EF6B9B489EB4EAAD794A815C08C92CD4F415CC12DDAB4BE33F482AC0709F90A9466F882C4E68A19758942BBD851C06F53C2E05D120268CB58FE222C4DD7DEBB5BE38D60F9582635CF3393B488855A2FD89616671206AC738C95D627D9F6CF55154EF2A89D312C03680807EF955EB405F303E4B69897433B56698677

5E9B73835168437E592C83B011EEF7D61AD87BBB692D6E548657D1A7B1CDE987539EBFCBFC11CCA7C50DE520C7D9979D9C6CE0D9C3487DF44CE7E00EA8BC8F48266DE0E825D0BC4C3433053060F9133B8E0992CC6206676E26317AF23AAB21EDB7B8EA5DADCEA76FF2E0862642281EFE2D450247EC66D0CB66B2E789C4892B04444F1889FD5E1B44E20265D964C66E0C3BEB8A52FF57A7EFCD4BF2B7EA67749F2DE366829F31DFB108E9F308D50C081B13A24560F8D34D2A1B7B7FF7FE5DE7506612EA62183EB162BF

7D331E5F9DDBDD2EA2EBB3F6A90DC7D56A7657DBE83FD6A9EA4FD0A64298BC27CD95A0CBCD361AC8D4953ECE1DD5BB8327C724DA5CA3730CE8210CC75B6277D3DBC96560E610F648EABFA8BF64AD6CE1F868801F650F740351AC63B41F0120A959343D3FDE1EBA69212CA816D118538FB92017E7F3C1B9DA520F8CF989BAEFC0C6CDCCAD5F12AD90CA547199A73EBB5A4B2EBC5A8B4FDF48A8891306D4364EE443039A182FB875A8F81C87317BC2759B56EBC1A049B2D05AB520DFE54CF2FB16E465DBCA0D4DCF6111

0C35D15D72E93BCC76A034B39C6EB23E3859561A1614020DC74247C26AFCFD294DF25741522C50762B45E78C1D2D9A42BB8CE163C9E5AEFF8B8C5B51971BB037BF313BA1151C16189CAAC8CC7372D29686382C60F661A7D6929ACA7C60F16B7D000672A720A7C3F1525CB3A0A7BBE6EDCD7E75B190CE43F8CC4D48ED7B89AFD3D4C066996EA247AEB9E87A7A98DA218BF1FEDCD76BF9AA2F9EA7900D5DB1EE3158EFBAEE6ECA5C6E40C3F9F804A25379A1CF792A1E33B8BE32563E24987E3A36E0F5F5A76EA9BAC38D

01DB90DD06FACFDB0640F1723099CFFFFF07622A74E2FDC4356EC81E111E81B40DBF501C45687FB49648C4D723AF9AF0A9D15D5D1F04B095F6A34ADDBE233CB401B2CBE2B77894A2644132F42B7E05EA44FF0BDB960514F6F571E411CD3DF8F6DA0E5C6508A6F695E0123CD036BFB87608F298D5E58AA8089469EEB9CC6FFCE1F94C8C0C96F0DAF44BCE8798970BEC60BE80BCEB752A85B6431590B266E24FF48F46170A7E6639FBE9DC87E573003894D3C81A819F3ECE28E4563FC360A66D5C29B1A31D275FEC9DB8

E4BB4F5B7556DEBCC736711586A36C6D6F75043AC37485854C0F6ECB67D5CD4D74CD37A648DCAC8A13671F11AE3258D5B50455672973C43228BF644C75317C4092888E5CEBBC0E2DDE2E5BE5823BB0C9AA277E68BB392377BF6DC43968BEB365CB31FC773BBC0D1F9F425FEE9D027B718734D57E8829314BCB7EEADC501FF425BA727D07A3099D990B09783446C9917E61E25F645C8FF20E934C58452B51F481B42CF9E6C33095D2F48E42A651D64D88E4CD9D0C8FD0A53511D754AF25323921F995CDF934DD2EDDE3

7A0FA44097B97C288E1F60C3ADB8C7E3D1181E20FD040B3C5A4E77EEF26EAE946F4C24E147577CBA6AE28C4DAB38352FDB1536ED1D369B01751CA1F5AE89E806961F1B45DB49D51B373946C8A56DBC4B76C78C5326E3811333D0B993E319FAC371023E47E7BBB4DEBE640485E5634D0F2A206F97448C499B55CF08853656D5C42C16A3BC882630E248724C65F4B7833A181F43CD59AE6ABF209161A54F87BF48BEBE03DFD1735BB570CE14F4B078080597947C1CC04153B0FDEF757453061F8E81DE327FB5AE94AE54

927F2BD016DCFBEF7FE81B204093CB7654D505541FDB333FF3B5AA3918E2DF3E9A8E4FEAE6F42B79E8451A7C33383EE86FA2655B94E579A7D764D6B55EC0F80C35CB8C3107C812CC864C7A7F3D5181BF3E013AEE5BAF8AA86E54EEF84D6BB70CE6AE2FAC8AD8EB4DB11B6856C3DF7D86DB6C3A7CD981F1A86603BFA31CAAC14CE979029BE3C4AA4FFD3546F630CFDF76E713B1DB85E5D96F5C588471BCBD94784CD13904350DE788B7403D5C44D749DA4D26F9CAF65A7901EC84FBEA085B2DC01BD8E0F2E7A3FCCC45

3643A001448166C41EE1E5B8FF5B63EB222FF01432F07404D87669A25D3F1B9FFC881CF553A3875DFBB13C90AAB877F671B398924D89BCF7B12769F63A307C1B666E6FE7107F2E84E4B95E40E5FEA92F50BF63785726B4B64CD13E5214ADEF16AD4948AFD4CF6DDF496E2A8B04D2A40D19F0699EDCD1244FB7896E383DD46FF027A66CBABBD7D9BBC23CBE055206F7B995713EC0CAB2B93D42F7AD52C7A25D9C1E96475B472B8EE33A1B8340674894C9BC93A4BC2D50DE7FE811009B609747DAB2E1F0BC3D9F73D39F

48FC6E3B735A860ED1F20CEB4C0FAFF1D69CBFD3C79B94617D16CE483E8819292CD41CB4EE48ECFED6C15275FCA611CEA662328475F01A8E5B6F1A4DD8D3D8FB0B3B8C5611FE148E3CC5754EEF4A27EC7A9FA074C589C8A727415B42B6B6655F27B2672F2EB41C468B3C5141A9FB836C68848FAF85CCA9507F3C3FC7F533227CA86A6AAE12405A3427037B237E79E59227A7141071EE73174396E3FED5E04FFBB8F47B340ACB4F23DADEE4F0A9068423008249E45E2C98536B5B8B3384E8D5577EB129ABF45B63BDF7

E6FAFCFB9324D09E65F40D0C002E846AA80885BD0AF92743B7C25227FF1A2C98E7BF1141FE8B55CF626E4542F288AE2AD69D00FB9153E97149783D28ECAFBACC7D58B3B0322AB48E4BE4A6598ED13154475C53506D2A5B90955031A85A12211C068A72C25F18E3D388BDD3B8D632DBC0B1F7DD673B04E812F6BA078CB2304293A435907C6200D432F3228452C1DEBD1803812DB0CCB2DE815ED2F111D91513E5258EE3BCE6168A2CB6618B4FDA7B3CE1FEF03786E90902D81A241BD31176F513FB4D198E2AA5451242

C1F27739910EC1FD61A90E758EA70338900451AEDD8A5A669C497C711907AF87359DACF51F4BAA0F67C147D9C1B775772B0A52E2F1E2162A1B60382AB13D6697A78D7D9524FC78881F5F566E16E7AD310F561631F97A91A40DB4A194FB921F0EFB260E4EBBBC02BA2C3183383DCB0F77F3AA303546FC12CF75909621546B4C719FE16B50CC18CB0516FAADDA593A4214847E06A2EA2EC16236DFB38AB59E68FA6BBE254D95FBE6877F0AD6F711FC74009766FDD50BEAB2C460CC40771010B0069F4A51C62BC4D972ED

EF2F17A49ACD7B5780E4FF5DA3EA29A0596E130E9926CD526862C65F14B271D192E9117A837E00F9CD727883B963066B078AD825AC8BBBCE957B9B9039F0C94017ED42B713DCD448576FF49E8FBD7BE55FA9A667FCB2EDFF2CD777E6CCB6FF1FB837303280290391B60C25742C9C76A82BC866E730C7C904A78C94F8F2DCCB340FF8D3C7E21D01CBF109BE2381076CC31EBA6D4E4CFF21D73BCE9FF1DBD412127AFAD09B24837E3464479512C1C73EC117507D217026FF209E682A8BABCBF1AD337F2855E5FA4F8B30

D06EA6E39DA7045016A8F32298ECF3FCB3170117F6BBD175F0C51928A92D76ACE3EE6CD112BF33CA1FFA328BF3FC42FCC34383282BE0138CE54C5A7786E4024B584E2D0801EAE4D723F715A873E650B5A9DF865034610C673B696D27C041CEABF28AF691FEA4E3D011A6E3580FD6C8BAB7AD236831CB47C8B14523203731648717A69E1D20FC082D8DCCC3C34FED735B9CC1117A5C691299E49C7955561508AE0AAA3ABCA9E45BDE474FC95887D76823B4865810CB81958E15516BB3A99266209FE945A438A81282F3

35E407ACC2F291FE2E26CB9AE32E95DF39C9D88C81349C6428D33F10D9350BC760D6D86F67272029AF4A15BCEDEF082FD848801638D80736035D79FD03F261D26A2B0F90EE1DDCBEB65C2C114394316FA92A8BFC44075FD558CBAAB988283A0A67479916EBF8CDA6406F0598ECD6974BB6F1294411DAB84DA7EB62767895F37B1A20A7667BD013C1D522B8408EA89607AECE987EAF8E60DB535A4823A995DA3FF537442AD8C29C6F440C8BB4EAF17AC952D2233334939483C1BF09541609F52237B94014C54DB96DF3

30B06381DD51C16F346843A524AADF73F609E5FF776690D3371848C1723FA1BA42A80AE303DC42881E7F52A9119C4ABA5A773EDA54310E715005F3A39BD43F1821F66D2D41D85FB5FF453F14CAC9AD8ADA898241A8FD2FE46C0F524DE3CC19822A0ADA9039379D1E3C154BA22083D3EC5CA766E48165BB78CEAC3F4C2056A509360FFDBA65519D79880A5C42C121600B5C353BD0B55485F6A6EA8F5A078FA52D806D9B47BD4B8463FD47ACC2703A9CD0DA4D3CD98E3AF6C9522DB5A44DA208C1EBCB31134D40C4FE72

F0E77ABB98F62165DA408C2BAD34B12E22EE5F307A1B46E7E20BB3BAA610262210AC63059784E6884FDF8E98508D31DDF896E54271921EB0186099548946E72D5636C73654CD101F3585B24FDCE22957E7989EB74A8111AB77CDA12E70379DA4230F3376E57AB035357154C4EA508FF355B27A4BE648E8E74D3449DAB0DF106AB3307FE9BFC39E17DA06792B43458E9A4696E7CFD365BA981A4340D3CEEB446C668BF84C700A4EC31FC311FC620AAF88862DC6E4AF988B12112193AD29F49165A6214CF600A3104078

F7D7DF9A52239401AD023B2560B2DCAFFB70AA2B789B1F0251ABFA3E57B78B68C2F23A4A9F03A7B659E3D1400542132A6456D403172F8B3EB2E58EEF2AD47CDDE8BF08FF402142CDBCD27B23AD1F2ADA7A4D6D51C9B0C450BF2DA548736D15B19C7D314DE3B73025348763576B0F4CD26F1C952BD82AFDBED768F63717D82ED74D349596CD9E4FAAC53D672E6B4D0FC0BEFD98497C21201D93D4AE00BE90C94AE35053F7AA00C57C5CADF0F38D7571E11AFE7D60BE9148668364DE2EBB1592E1061131104761EE8E54

9D78E54EA54795C08EEF4A61805E9B12BBAEF754F74B15AE7F79E2D751F6AD67F4F40E275FFC3FF291882CCFB5ED8A4ED7CA755189029A17808778C80161225FAB383D508CE5C6F0BDA6FF4CF8CE8547F56A11C345A8D20B96552C0553B286EDA829E393C4CDACCCB8B979A430C25F3D055179480523FF74A356A285ADFF92912744732E561F34566E7D0DA06CA88C731FD1729400FFD670636CB242EA993C5DDC1CC1BCD3F52D2CFF3DD24107481945256C824D8952CF66571DD19A6C1EF014475EFEE45ABFD26C60

DFADF7552E5E5854975F7364C547581814C99161ED6674C15478315C6F7234E4C5E72DFB0BED502B21078596ADF5C02D8D1FA2D07279279E98B19C48A3F670DA9311606EAFA00C4F654DAF0B70F9C2533320BAE816D0FF6761EBCC0C583CF2C5D9D94195D8FBF559FF415439934184DC5881B8D14C1853EEABB69E23AE8DB29C8953D0FE18FCE7065EC1FD9E7B9D3BDEFDA8C87C39325C4BFFCC80A889131241E22E0AE7B947E0FF219A7116618A2510E03F2E1D0FFD95F26404819C53F3B6CA555C99D4F174F068E9

3CFB0700E43EFC73CA672F83E58315E86805ED57E7561987C55C02FC1E41C54BFBE09F44C0102609F8C59F96447DB8D64BF6A3E695DB24B3BCDC5F39C1EB7D5B34B67C824E2234D45F24A0CD8CF2B0832BE96E9071A5F15A115D4DCACCF68B5DBCCAE4A7E4D5D5407E3A275A9A3E913FE69C9D07CF8BCAB91D880B5435C905CEB345C27089661251DBB103DAC6AE3429DF19FBAF60EDA51FA35FCC8FEDE7BF1B5620A837A97EEE5B38205DDAE6EBF591AABC033DA33C12C4027C3E21D431534A3B0217B0043C1DCCAE

47FA01DAF39ADB5B9A0F89C913C9713D0D3A52F161F3F95719BB7BC78FD6358213BD61E724927C64D232486FAEB159226DBA9C6F1B9316699F3FFB38BBCD167E2A01FEF72F241449F02AB88303C49F1CC6E20FCFFCDC85349962A3FF4315FCBA2CD11329781C2404D99A15E3782C14BD400C5B8061A13DBEC3312653FB266013D4FE7F0E6719285D63234C4B1EC061973D809DBF5783510CD9A7E78EC059121291B8EE27A91BA071B82D9F95F31668E6C9861FB88B4499BC9B754DB6F52727A7420A4B44DB40EB50E5

ED3BDD2CFDB668617A661CC49E774CE8690C2B117C2A398AD627D72EEC05729D90CB677B5BD9DB60F8B9BC60D0A1682B684881FF074FFC973C6B298A3E3AC737B4ADD4AF8FD8450A211BA31DC50B6CF8D9876EBCBE31333E2461D0414D17366A82679F2914C830C94A81EC028C73BA018D7B2641E0DBF3585312CAF811541576A0CD56CD27FFA2F1147F4EE9DE6A96CA4A7D93E219FBAE54F8FF2D8240086E1AA0B140C563D93C1316194F4889E4A008B0A03698E050E83756F8A4885E7983A3BF3C9772B342C888A8

102B0CFC4020EC135BF70A64E6CB2F6438059DAF10D4A75AA16BC121605D1DE784CD939A2C91092B167A07A8AE4C33CC5A9EC532B261F2A422589E52D00A6FADABD0BF510A82FAA412619928BED3325699AAFAE757DFA520397BCE812BFCF17C3CE58BB3DFEE9F26EDE53C7F8A5890CF42240ED9591D9E6C9628F2E240B27309D0CAC7A168CF1DD6063C9250035D4E3EAC8047B3848D111A282F26C04687F857881439D909B3E258B0DA728257C1A0155A2A04CDEB43EE45B84F6F2D6F8AEB6070E7114016CA0C63A8

E282E62B7B703FD95EE5E551A12277EE569098114FA6B2B579C5B87355F8DE03082868646DB27A7C096A009055BE783B9667C5569394A60D53B72CB7C66AB5EA845660C52A60C6900EB6CF7ECB30FC560AB7E6F9D6B8DFA688A92CAF087D1338D6BE2C35BCD59E48DD72C87FA1AD1E9E76BD1CACC5CED3939ADD9FF6D63BDE214BCEC93A14D8CBADB528D080CA3A13BCBF3D04CEB3F1F1F2E4BD7C564463473D518D56B863A97743EF331D758189542B131B702930D6D98AFC64A18A25856059EAB2962822CF06D572

BCBBDD371A93C988F51FD04A9401EFC64F0CDA1EF9BE3365513970816664BD13D2B1A2F506A290A48783FFA1D2ED2DF1B18F1AE26409080136606961EAE32A95CD1CDDC1BCE647F429399D592C86F384AC05C0C5915E6642D2A71BE80BBEE1994A611DF88B565F6663D89C91F48D3FE8C66D7B0E45DCC90A6F0E24EC3CC9954EF6317D9B0A763CBCBC88D4C9CB8261D2FF8FC18E4461F7E85DBB2E366FDA16E0733851CBC037852CD57F7CF83945D3FBCF9A7F5421E1A59131FAC5F0359801FF8A50D57C6FF76B6D88

CCD47D362F16E86154EE4203974DD512C0EA60A67C17F1812FE1F6CEDC2C8B15F783B11EDA5CF5E79AE7728BF74FE9532487E51658A963B710430837F4D46F150624E6C5013C0448962DDBB46E304E9F02D4D4CA74C6D382CD21BD8564812953AF3715E0ECCB8AE09F4C5FC55E4925C07E08374DCADC29A70CBD17AC03AC09A3B84C6B047B331B6E46DED8E3FF0B5F6527D4D92D3372D885BA7F08C0548BAFE2F10943D2F292115057B48BB8C33E0DF92706B7607F0E42CC0D55CE918E63114FCF4779890A8D02D6A1

F3FE3184389485F94B95337D54987971EA46B6C5BA1C382132415AB28F2516DACEE33A466B90B7EA882C66BB783AA6E7DE70DF42CCBEF228170D4D796B1C51582DC076912FAAA6952E0BD36DD8E047AEE1B9859125CAFCC5D4A679CB9DE150C5325254260992A55F415F8D8EC6E8484D6F6194CF8BCAF95EB730AF60498A82AC6A2240F8DF9384A23607D9DC82BCAC3729C386BBD7EC363906CC72BB5F26E52AE8D4D6731FB79CAE2E16F330D3E28422D1807A6F8F17B03B9A5143EB463EE7944E7C533FF441F6FF51

FCFD885F858A4DD80EDECCEDC3395A2304EB0920BF5DA1526ECA86E8217D461A32DE953732EDEFDC14496E32F019CEEF1EEAC6A2B01E869A8E16DD7AA7380A787B16AF72AC1BC5323E8755D8D8C1CBB2101CB65C8C8974BB8E8B00FF3599348669ADD40FBD596576A6EC3C0F57FD89ECF89A9D07A939A83B5B372E4F09C1223A3512D322860AB0D2B09872B9FF61299F71021A2A37F4DDC2760C34132F65CEC42484B24309601369D96B24C4A2D38DF4419A6B6CE26D464D8057165DB7FE29192CFD98BCB32891D184

8BEFF9A979417108CFEFBD242993A279ED997F1CC9A69054775495B3447D0C79FFAE8F7E9D3B85CBF78C2652CC828A37A888C992F3F868A5780F490D77557F2099CF7A9382BB9BDA5EBF736880282C585B4CE6345C6CC4114EDA6DDABC885C8185A51915688C167400C41C1FB1D760F018ED12F5AE6EB1382CF5683BE397C9C6626104698EB6BF6B45E6AF06DA9B3491941213BA31EFEFCBEEC7059EFCF154D975A4233D9D6FD6C2927987E5EB8F89C265FE0C4E3A9B80601C2057D0CF798288CBDE4EFEA3DB3B8560

F9A4FA57C763E1E0828EBE0727E67D63BB54574F3C42379B778ECBFEFBE9CE0E877079BF7851ECA3ECD8BE53B67CDEE88E13B75515978C646F0FA9524F30FFEBCA0F650B3208EF0FC88446C1A9ABBF5001BC75E1D1AE6F562D9ABD9E6ACDE2FD54D9C994D833BBEC5B666F0BE281077F9492F149D5A4334C77328794A78B497778782E7EB506A4FAFBFDE750F94D75950BDB36C4A5218EB969D6BE579173BF52605586B15902EE93DAB0F821B1D8CAC5B84A52603A8C7BB8D15B06E71DF6CEFC2E9D8B8E1A2DBDE2C8

AA7C8F8DA6C188DAA87851A19A729DF7413515786902E1E77FB92834D1D697A0D838D21496FCA80EA7A88C35897047755B6ABB55B70036D7E4C9F8CAD1EC504EE2F623A06A00215C5FB6E8E74E0C73F23AACCBB014404A3C0E1EE20101F0E992DBB6982736DC4CAFA2DD83F043E5C4D57D505118DF7BBBAF108FA01C6A8ECF5C4D90463DF0E72024E66BD475FF52268D560F8A0E77D6AD4D0EF16B0C66949C6ACE856E1A31F7C999FA4BF900CF359986BA7C824E26F45EDB39AC9208C062580F48C9D5C864A00D63DF

D03E868570E650DD3A9B2AAA6FDFA2A003D16072AEA522BB6240EF0882A6B49F3F5B38EF1AF52D42AE44BA2E34021E840692853343E444F3624ECA5CAA3AC8D668E341984D99096A9505DF1BC5EB8FDC642DCE4B92BA51DABE4AE8DB78656239B39B59CEE31A13110FAC080FC140462276D4AC0B4BDF570D4F42AAE3D1E4EDDA055E8EE2957B9F8AE16B820B413D67893AC88013BD7F14FAE80F56491D14A04DC220D428C65A005A885B4C083716FC823DEDE79E0E86993648B44DDA26CF17368F28B2419A943C489F

0546DEABE551F97CFF9B4E979C15D316204FE5546BD3784671D0B98021DA2530A35DF1EA3293DA396FA5FE4D0DBC194DE55E0B89E626F47FD6C9E7FA74D4C0E923CC07594A309FAF16DE2D8128B2EA88ECE9599686A02A0B89353CF55924F1FFA11716DFF16AE8EAAE232B804DED8B1BA1CE0D099C53336262325C8F0C099747DB343BB6787555F96BE9AC6BD2C4D6EC3EBF5E135EC2A1CA89A400EB5D776FEA418A7A2304989BF0989DC2AE6C0B99845EB90E5C3A421EE108FDBA10E738566319E45A61C2204BAAEB

A3D40546A4AAC15438E3C78C9DD2B12A978BC29DE4D9E47ABF120EF0122B5A40ACF47B3030A9E61CCE938F498411E81AEEB0A9259BE9EAA6247D72BDA632576A2E8E1920615C31D704FE54B4693F8A8598403BCD0CC7BEC7283D61C2E24ED2ABB2326DFC2B012AD2B1C4F1BF0C5791E805BA66208E6E4B3E3B5EEB4DB1EA272635A62149E2DACEE2344A6CB038DB64D4FC620D9E604FCDC168D7AC4D7E84CB6B2ACFEF8E02293280FF43FFA2EA28710A29599C44FE6FF0E15CCCE7F3C4E227F31E8E4FAD25E23014F7

808FA21E51F3874042EC85FA7A093D02A9AFE7E0547893665728CD4DCF8F2121548976EAC157FFEB822902D3420613A87B5C3956D86268ADA5E76E9EB31E5D12F699AF882B3988279EEF011CA117731CD6FABCF2EB3B457E4390DECDD517A391D8113813F5D9A40C3E1F85CFE93F0C9F71AB86E6AA4C766559EC586A2044E25BFCB46CA640C6EF483E70DF80DF89E0FFA205A4CD029C884C6E2A6F1FF20F548C45ACD6E2CE3A5CEE61084E833953AE8D259B74B5B95BB827E3F4A376A5C22A793BDC1092A0D9D265CC

9942503C9CE4C4620A39BBA79B11FD1AD3A9917B2B4B257309F9A15A13C9262CAAB61C126B269CF93FC9F762E6FD3224D1A2A82916196BE7B6991B88F6B48073E6E2FB5824CB9FE6A2257BE730FDE868A495F529F6F4E9C3A7AABA320C1B31FA2E0BF88CE536850099DF07C1D6CBFB3543F6C69C266B0DC1185FCA856C356EFCFC1ED2CCED3212094718ED10EDF2461E38388CCA07FFB44BC84012CC9E84DEB87709E8FA0A14186FB66A6886EEB7450207853C9F6C055296C8A3C905B6CA08373DDFF10EC674B5EED4

15933157A84DA357DA75471FE6C260426827D5D29A936DAF0723445BC194A16C34AA39754EE45DFC105A76604B17323170CF53DDD0475D64A832E2E2516D603DBA3C4CC27F11E28A50FD45B9DB780590FC2F754511AFC520300EB264EBE90408673E54D8A78DC57D255E2CA9F6DD5D036B60A2421AB243BCC81E4E30E4F49EC297451B31CB1F2E1E4F13F9E4DFB783CE987C68FF9922F82C02726930BE1FCC83430FBF5654A640891087CCC7090EAA17D859A867370E353D5101411D061035D4B2A340A55D3535D7BB

42A0C3D795108A91A7E7C0FBE792CBF6820FFA641064BC8AE5BE90732F0D573C0873E30B75F8A84CB902AE45D41FAD1E862CC4840A32F21674AFEA1B115295D5F701057927B0B0890757D13EDD6A30B6EB14DC7B3AAB6968169F7345A73E3FBA945CC94F624D37F7BC8F92FAA80B46AB26A56624FD69C0FC50505900E97A009A76E1FCF31C18E4470E10F850B37C14A517C21227915EE022E30D6A4A2E482F333F2A385924BAC215F3C1D5384848DDE9A070A6D4683E9E10333F9E71D1DD2F34D3F1C4375CCB58A274

447C4C4F9E41675B8E339FB3A2F577A8A2D88B1B76BAC040EE2AA61C757D1CEC2F3F18ECE06566B175A71EE09EE44DEA86D18F10288D9BFB54BB276D4313F277BFD17A1DCAD3CB35A043F597CA911ED1241D0A68EE967690448213E4B2EE190210C67797E66126019879855C3BD34F36E34BCA633A71FEC434C1590AC69E554BF49E58AC6172FA417BB73E3469A74622B379AF41D3933FD539CA7E130B185CB24D9BBDD5D2FCF9A89A081AECED4D5918BE6DF60C53ED14093380F3656442B95C3499B60050B3FBCA0A

0670FFE05C6AE2B99BFB005796953BB5F3E76F083B995FA985E36D4E44F6FEFA8DB84DCF07ECCF75A3339FD8451EA485E6511718F7606D3830339B5097C907C72BFDA11066414B6AE572B19C0FDE1ADEAD43293554C26C3BF5523F5BE389AD31B7664C3FA7FECCD6DBB71A94731AAE36E4F3155A6A3D634562B81CF8DEE4607BDEF7A43C3667821741B43C16248EAA616D472940D569EC9D809A2DB04D8AD4CF41F21C9091A89C1F16E00568977043D94309A2C8E51BB628467DD1444F05D37E5F957172E33936D2B1

A0975F94B93C828293C2926DA71ED858483D3CA84F921F2D9EED913E2168F1DCB94F842D8B63D37CB4456700CBADA5851A7FD0C4A0F7B2E305228F2C2CEA4316811CE094A808EA01C72438ADE15BACE40F6A37871D9BE61FA9FAF861603B395924DE409BA3DC168F90DED3F80A29BA057EF8445B6A1692497953C72DC4318A48D763EE953911D1B2C97BA7C199E89B5C1A99AE024B90D3FB58FBC2FB8E9D1FD53752E6431F90E689A45069090A82A53FDC3C01C88CEFE1E753C50A102E6C87D811B852CE4E0C54F112

2DAD8E8145E7C0CBEBAE7228B078BE56790FB063BA00FA8A1601F1F03C4B99F978F152DC4E166D513B257B106474C6AEAD7FFD421B9EC8FA5CAFF1B89C1A963E4706BA6C4CD3E9A7285AB8614AA9EA7ED1F3FAD88D1FD35A4BE30DD1BC1B259D633D188BA39C74F23B84FB2E4A0B0971D876CE743987C6A1A1716BA65722C5D0148A261F2B5957BD0D84E2EF8B7FCC61ED0F6E689E0337BC921658790DA20B8EC8F49000BDBE2DCBBAEAA39435E688E04903910A85D83423E4BC3B58C749057657166C84879793F3A9

670DF0420E24DDC41D958FD9A2C20F8A2CB25CD0891B6509CD170463C3AC2FC882674BEA44881A1E0D60B9A4FDC1EC57DFB8057A772C273EEB9EAAAA6771FF1616A7D7BACFE69DF81457013C985F62756684EFB1BF1C9ED5972389DC5F6B4395FB8B2A8A31EF80C851DC0BAAD15980D4C07C75025AB9D8889054D032E2C11D1ED55E0908D62244ACAFB8E99DB571DBC33CA86EA9EE082646ADDB73632483CFA88549D900765B938C276816DC8F1CA4E3F5F5E1EC4CAC716A53E74B060C6A94B717EC226055FDE1B681

01CC5D2082B7336AB5E38E3CBB1365664A243525534B90D62FA541A9DBB53428949AB0D701274FA7A92B20A186CA5E1EEADFA69D22D8F68BBC7CABD9485BCB42868D9AD5C140F8FA5C658501D4BD218ADE30615312C5AD13F3A9C828F07490D770969EECA3A368A8AB339EE8F1BB4AC6FDBF6F0242281DCD366A0E2482B44C69271C8CD7A1620174B9C97BBD2197B9B59E2688BD13341527D62FA8B4CE8DAC18641A8C4A319AB7CAFF40814D5FCA121D6D933C8BEEA75A8BE5CE1A359FE3E899330CCCD14E5583ED6F

A6771B920C5EA6EE59EF80ACEC9BE23E648523588475A2916A9D69B92A319CD84CE930865C8092E30E391BEA9F268059135BCFEF666575FF4DEF2C9B9D4EEB8E72B8A38AF312DED9BD41AC518AD39DB6D68368590BADF1BD4851F8DDF9A537832E0C8A204504027250881F095A470EE59C553395A306CBAEF01069C56F6149B5BFD3B33F18FE2A41F1328F97405180D0379FA83229759CA7800E433017B4AEAA120DC1F6287C20BED2148CBFB4A7F33EE272140921A1A5B994BC8FED5278FCFE302346C1B93BEF7DEF

45C3BC48280DECBB235DF924DEDD66B279DE6DDE8098085E32B1BCD71D02497EF0A5CC76682967CE98FBBAD9EDF67ABBB099AC090172FE37C5BFE86DD3F8626F446ED02CAF01E3B6F99D0BD7B5429DC1034CD86ECB6AB4128BAD29CFC31D2834C998C82384E2A02AE77BF1C915009F9120D38EC000A07D46AABB110B8437E230846531C7C6B86FD99FC8CAEA13A19758BAC780A997EFD86578534B5FAE4F5CFAFE6FE0281F39F1175D8BB446D1618351272A2B6E93BAB57DFC2B5B38B495A4AF6B57740EF2732D558A

8F037A94FD330710E825ADFD29943D64D8E4B7EC65A8CD2492C686B6D60217209E92C309F5ACEDBF54EDEE3E1C770B82907F6761084D2D849F8A2F95166ECBFCF1B00E7FCCEF1CFC4BE94BDA13868CE10AC743589E7C157D0F0C95C997F6E99CA8CEE67F363903B4C07D3D5D93356F2BABB665A87F4C84C538836CA35AFA37327799513A30EA874ECB23ED37C5ADB154648264DC13353F41F9942900D8DCF2F16FB2C739EF58FA9A99EAA6C141A91370115ACEABFEF76F28C4CE5BE231B6072B398B444334FA2BFAF0

A2313D37FA908B0BDF079EB6D211C59C988258651C7C6D1256F87163F3B4A69B0F840F9CE059A3F8614CB8082B0741D97E7377ACF30A222F6BD3104CA504406EF6D6AE9296DEED464E181EB6189F384609934A93FE401EC2AF952F33467E42BD4B741CE2CC9DE9E00371CB981735D7D34ACBD6730B2D4971AE5AAB283A378CC274A032829AE9133DA47E9C5C46244EBDEA7BD3FC781DDC660723214BD85A2243E2890A164E4493333E0E92C4921540F2A9AC53AC0BCFF34805CB7410B3D48A116B96986739BE621034

57195ABEA7772ACA364D578F6246DAC27029010B9A7310D6258DB260064B80D9963A0037B5AD5C325C092985C183FC01B5FB5FF47F85E433FF70452E4508B6E8547E41A83343867850F6778ABD656C7ABA14505D6CE19EA5EB38899F2C1482395364A12C65728FB174BF054E9DF71FEB86016F76F8830E664798B3C761407977A87C72BBAB7E929014949855E51F6F66BFA881E4DB1D269F2325E784AD3F0553C5DCF9BBF7E522DFBD1D07C37BDCCAED78347B1000B08E6F7CFB2A3A969FDA8D016F847EE224AD0BF5

D7A9091363BBBCA51F982E7EE80B8776972E86B8D0237F6AC7144D5DAA6EA48FB837B521A53CE02E9B8D8D95F67763FA6658C4605558C80BF6DABBA50F47A140494B7CBC95CB58D55E03478B3077C851C1C0A87E5977F40572FEA4060023E9D1331D4FD9A80502A4AF1D0AC2B56AF27D097B0BE4F9C79DEA2E1FDF1BF44942641BE80A9A7BEAEA6DAE1805AE2188DEDB35F628428A98D1172D70FBF8112EB9231A8471BD676A500B12DA129C043BE09BB192096C220A3F22773D9662687B54A760DC7B1B01D659FC2D

863129FCC966F60DDB207DF61A67E2001F366461F602C809C8956C321FE40A945F50320C7F37C085C313648A434AA9AE729547C5F1C8F830A8810E4FD8E34586435FE687E7BAAEC7C495CA3F89BC06CB8AAD91F74324E871C104DE5C291C7A9CC772BFDEFE611FABB46D90527CD755C86891A91F04364416171726AA1C39E5F7C6813B66247A8C61AE96C5FAE403B153172A420A23F0BFB77175CFDFF22CF6D020B5D3776DD1BAED9FD7A2CD1B8AA42C2C2802A4442F32A63F167299A5A1353E57D4E9FE553DF81DA0

89E37579D0167EA4049F259557E70951C1B37E37D84CB903945F1E1BA8D02ACD94E323D25265C35AB9E7E641065F5DAED3E1662C7B3069C57372D9773CB7A870EBFC6D4F799B0DA65F4E021F8C60CC0B6891DB72F034823FB03F96C242FCE7B4C4B051EDBF55F4EFC848B738C3BDDA20DA5F7B5EFF7135ADF1615A63B777998E07D9F23BA4FFDEC562D0957053A1371489A03A9ECA35EF88DF214C28D701B504D58657653B19D92B3FF7AE4B254D33117979901634B825809BD7A9CD7843A58988C8918BFBE1F2E9F7

3D38DC7637AC7216285F8EFB1BFD45DEB65A8489EF3BD144FC7145B62857488199C04C303442A4BB51D62B082FB7DDBD3279703D5A4C528A0EFD2ECB325EB4126B5E524889DBA6CC92F54BA9834F6B2450DDBAF0436DAE8185D9DB1D01F45D6307A549272842F40E0F7094818FA921F2CBD2A9BFEF2A52F98F9B9A24DB7A795D0F2B7F6ECC8E8855C9C49CEF41CFF9B798F0D5AB3FC31BCCEE0E044373D58F5896FE4EF9DDE3E8307347C407501747E47095FD437698FAC00F28958A6B66A204FF7298D1ABEA3FC757

576FA2E307367808FCAEDA1DA899EE06B49C89CE294595FDBAA1834094A52E82E4B63FBCB91E40A2209C8102FB2D3D67DAB85E29C62532F7EEAE27A015BE68B638A28010367DDB165B5E9CF8CA029CB49D19761A6081DBB2519E54D4EC4BC7F2F6899BE0C4950E3FDB783E41C3BC85715B4541ABBB06E47AC993483C44F6F06C92EA72336F2A491609B1DCDC013EEC8CEEC0F582A8582A4319841BDE79FEE651E463EAFB3DF3C4F803F8A79791E5F941698D25825AC4BC0725D4ACEBF57CE87DECE1C5FE8E83480D2C

174AB3F901B4F9AF51B45141D023EC826F0A5B6BADE5C9F80A1B63319084551D787B53EF1CD26BC83E3DA7610AA13121707FA00ABA66BDC29C25E185DD4CE6A356A9DA636FF6D5836BE21074BB3037FEC9402C9056650AFDE8AA06FCD3F25B9261E53228E613708033B01B149E71DD2DE4ED4AA811CADFB393FDE190F61EDEF891A6534A568482F0508D73D8EA9A40E6BFA2551D43B3F6432986BCCDBD30E9EC6E4140DFB33545ED46C2DE9591BE0DBA9AAA00571A6B45F61719A9283DA3AD79D4512839C70415B667

1C96DF89F68D20D2E342C6679EDFA6DAE71908A70A69C110C553B46D6ACC87287EA66B139845573A463DBDED416EC2E1F7B99A038D89CCBF12414F32D6C55A1887FD00F681C4D978E75C4532026DC16CCFCAAB63209B3847D6F6ED9D89455F40CD9CD781BC314DE9EAC51DA837AC1851E13CB457545C9E1F86E771FFF6DFE4FCA06014BC70AA39660EF1EF98E37E87EA7C43555337A61E24E339A0633CA30C58AE4B2CAF0BDB91A074CDBB03F01A2D27F7E8A03E15BD4F0285C03B41FB9A63146FF46C5AA2D1908EE6

712B3E7A0E7052EB38B3B3E74C49F4642150139C8183D812BFA75F875458DF1D2D15CEC37EFF08CDD3896E63C7C28F32995C80050A7EBFB64997AABA1634A00812BD2228B67295548228DA9A1584ECACB37215E4E8B7DE0F3A38FD8E14F97FD58BB95ADB6929263D8E7C7019AA628406BF6F8F0D39495A7E8A63B23FE510DED39AEDA56DD0981B1C25806A0572DA91C9AD2B555D14EC0556F26BD1DC299721476674D30632CD9E2A6A6CFBD6532CE7F872306B6A2D72016AE854AC23CA86767C898632746A2E1EFBCF

924A54CD5B4107179F36B9AEE6F6D06B92CC6B4D2D172BC9B4F24DB856C21D8DFBBDB754EECF468853AD47D385D5B24A0895880D75B76C137261D378497FBFBE4FB642C09D8A5F6E78E32B1F389B5E8E310D5D9A264FDCB78D6C7E38BCD41AB41ADB3052527B559E71D45AB1E7191F006AF27F7BC8DB9E0F0CEB9DD2CF0BA9B08064A1AF2D8ECA79C684636F57008F918F7482EF665813002C64405C6BB765C998714147B59B4B09CCDB41295E2C0DDEEB853BEBBA2B109AFC8E962C8C3B81BC7985577BA89B69A008

D880FD7CEC2BCD185C1C5FCDBF22B8EE833801263106D2B66BC46A2A1F4B57DCE09F5D5AB4A5ED9EEEE20A4F12A6E1E33ECF670CAEAFDE144FF5F0303E692A3CB8FE56F9E6F030A20816A287416DC09DF91A659B5EB4AE32F5CA121A42EF2602195496A335EE6AFC86A36E308024846D7FA1033E53D1624558098A9101E0AC1D2ECA659CED88203739798D477A194D16D467F66EC8B19067698F5F537254DBCBDA5EA4205059FDC44803343DB14D99C91DA29B6D4B6BF4211CDD33E37001CD8CEE8DE94EFE5D8B394C

7FC06D93C0468B7EDC98CA6F597F77A11B953D2CBE9E8C1DE2FB07084E6DC56D2D3C08A02BC19851B0B116DC83F33F37BFEFE5382677315D87B081F36B42E4480A4C8F47B92D60E8ECB767FF9D111EED89E0C616189FC517E5538A2CC5E3B273E50BF8455C1416A5ABB9CD82BEBBD0D3C5643CF0BF8795992A7A559F588DDBEE20FC625AD3278AD00EB1C0622234767A53244952FDF9E8ACC0F0A6DF2D3F2C3E36D4DE87D46CEB1E7260A9FFE8582366CC623D1E91D6A16C509A08ACEC5925E8AD91380EED81E7D72F

15034CE4854B87ACFB9A6D6B819EAAD716FAD3E8AB3D36FCDEF3510E3AD778F73CC4B201BAFA3E04600513EE7769BE465C7BB03B3FDE1DEDEA1E23C1F7E3A3F6B7E105CFA1B4372819711A377380991423CDB1D79D8D73E81703B0D0DF037CE3931773E818ACD07ABD914E214D78E54705D0CDCDF1AEA8F74D0397A06E6063DE3F0401C712187729A1184FB35E1D8C81374F64558BD56262C23B2FCFE600D2DFFE5F35FF4C5E6476F7B4AF01B03301735B68A1C1AF3124D7DB7612C04A1376C228820F06E1F6F79C10

BAAA284BF1B095472E97166801133D15FC567939AFA245943826BF4CDF28113C99AC87A5CE3E4AF2B846A0CB80C47CBBA6FBCB949A0D99A7A175490FE9BBA390B341E3E801FB899898B3852FA2F284CFBD47E5A372BBCA7BF052093C6FD8A7B7FA4CFE45522B924BAC0EE117F72CE5B439F7556BCC784F718572CF5389D5743E363EE36FD0A50C660717AF0C1132B6D1BB0E405990E390FA94BBB5FCD93C92EE1CADDDB1B76992EEBD15D1A05936240F9F4636DE5860752D2E7CD2C5BA5104886362C8B156559FF41A

BF5D459C9603DFEBE1E2B5B102D26A4DA9381CD1858640E9DAB4969CA153765541468CAF67BEFB9AEFAC347A9879FE99E073BA4A31A9CF4DF3EF0323C9A3D6897C1F6E714967037BC0A9ABDCF898DE75D6CBF49E98AA17008E01E815FE2134F6FAF17BCE59E311899949D0C34A2907530926D6AB089354056EFAF679F37C671DABF06C9A5A11DCBC04BCA5AC0575FA45DF5CD403111147B9BA7153FA1953386D412BDABCEBDD32DA1B83646278C14CC9780D4058DDBD84D6C1B0173B1C6ACE5B6D0EC7FE454DFBB6CA

B3CBB3F61461B80B14C607D39A4D2CCB4F3EAF25058400B94E20CEAB3B2A436A90EFEF39B5D522A6B7D8AA5E459ABA6950388E62AA6BC005F63D9E9807215BE00D96338F286A153DD12E7B4F6B38C8CF95EE5E1901367AD7A04C0B1D2698E740935FC4D6D4DD68E69B4296A492279DB47C6F3CA5AE3581A48CBF60461013ACCB17EB3AE08EABBA084F6148EF0FC4D5C5E724E74775F5339F189C4398F800D70E496785B430F2837866F797CE92E2EC5BBDEF1E40CE93D81CED84E425C5C81D308100DB92AFED5047B3

E45FE6516561A8D9139C7FF35A2732AB5F09C65F3D482E5F13348713CD9F306CC7FFF5EE78E63A29B4E305C995EB95069421466251C59791656AA59D7302A6A083ECCF901389453EECAE57D9792D589246E6064AA05AE79C1FDABABDD8BFF3DD8750694F352637C9FDAAA3B4F9309E0796CE2E7C06DF521ADC9000D5E833BE2702EBE10D195D52D799414514A182E80BDAC9964903DA70A079A0A8852248510D14ED146C921178C21F45E47FA5DBBFE2FB2882B897A665B7804B24CD8AE5FE269728EA6A9ED98CFBD9

54934339114106703A6629B88B927BD325B88C6FA8775008CFD13399F91D3104B80A4A12142E40B055522209F4D564A63261C0DBA2F183E4D4A32C9ED6C65F40A0F6029716653C98262220F1F9E147C493B9FCB7D0D385C13635D54E780CEE3D7E49912AF281F4F36CDDD2795B08EEAFAF120920ECEC880DB1B5196FB2C3C68E7BB95DC76671DC8B043BE08D703B65826FE4282DFAAE6F04627BE928DE2121AF5683B1417F8163ED1B769109362C6C7EC014A24CB2DA794BEDA9E38E4C2AB6607DCCF2A2C1494A23DF

2CCF92B970DA1A9C0F126C1E940EF5F977ADBC1A5830C42BEF485D4D580647CC43241EEBDED4FC443CD59636956A66A11998BEB096C9241221A169081F9BE7672B3B28618FCF82AA4AA73B8CFB97454688484CB0C829EEEA071386ECF5A146B059512141ECF933C9E9BDDFC8C3E2CDFBE6E8CF91E50F96AE9C273C5FED6EE473D577DDC3860F4DA977ACAD16EFC1C3DA22932DF2A7388604B5459F2FF4F2C890BC09DF8D1BB82FE25D40506224928028B4EE9D140C861BE39225DA3BF7C19E93B60C70B8D114F401CA

31A1952BAD6226F5EEE6733F02CF441FB465D2A3BFEA0C2827AFF86385060A9ED6FFE207989819A5410A5CE3E36AE924A44D7B0D6681C905634942E0B05293DFCC486858441E20A2A2528BCCA756344F7B1DDED30962B585661001931C17E06408EBC7F8C5279AFFFA6DC0F70000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False

    1 dict
    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put
	setpagedevice
	1 dict 
    dup /ManualFeed false put 
    setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize Letter

    1 dict
    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put
	setpagedevice
	2 dict
    dup /PageSize [612 792] put
    dup /ImagingBBox null put
    setpagedevice
%%EndFeature
}featurecleanup
(luca)setjob
/mT[.67 0 0 -.67 12.06 779.878]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
fc
%%BeginFont: Palatino-BoldItalic
%!PS-TrueTypeFont-65536-65536-1
25 dict begin
/FontName /Palatino-BoldItalic def
/Encoding 256 array
0 1 255{1 index exch/.notdef put}for
dup 0 /.null put
dup 8 /.null put
dup 9 /space put
dup 13 /nonmarkingreturn put
dup 29 /.null put
dup 32 /space put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /grave put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 128 /Adieresis put
dup 129 /Aring put
dup 130 /Ccedilla put
dup 131 /Eacute put
dup 132 /Ntilde put
dup 133 /Odieresis put
dup 134 /Udieresis put
dup 135 /aacute put
dup 136 /agrave put
dup 137 /acircumflex put
dup 138 /adieresis put
dup 139 /atilde put
dup 140 /aring put
dup 141 /ccedilla put
dup 142 /eacute put
dup 143 /egrave put
dup 144 /ecircumflex put
dup 145 /edieresis put
dup 146 /iacute put
dup 147 /igrave put
dup 148 /icircumflex put
dup 149 /idieresis put
dup 150 /ntilde put
dup 151 /oacute put
dup 152 /ograve put
dup 153 /ocircumflex put
dup 154 /odieresis put
dup 155 /otilde put
dup 156 /uacute put
dup 157 /ugrave put
dup 158 /ucircumflex put
dup 159 /udieresis put
dup 160 /dagger put
dup 161 /degree put
dup 162 /cent put
dup 163 /sterling put
dup 164 /section put
dup 165 /bullet put
dup 166 /paragraph put
dup 167 /germandbls put
dup 168 /registered put
dup 169 /copyright put
dup 170 /trademark put
dup 171 /acute put
dup 172 /dieresis put
dup 173 /notequal put
dup 174 /AE put
dup 175 /Oslash put
dup 176 /infinity put
dup 177 /plusminus put
dup 178 /lessequal put
dup 179 /greaterequal put
dup 180 /yen put
dup 181 /mu put
dup 182 /partialdiff put
dup 183 /summation put
dup 184 /product put
dup 185 /pi put
dup 186 /integral put
dup 187 /ordfeminine put
dup 188 /ordmasculine put
dup 189 /Omega put
dup 190 /ae put
dup 191 /oslash put
dup 192 /questiondown put
dup 193 /exclamdown put
dup 194 /logicalnot put
dup 195 /radical put
dup 196 /florin put
dup 197 /approxequal put
dup 198 /Delta put
dup 199 /guillemotleft put
dup 200 /guillemotright put
dup 201 /ellipsis put
dup 202 /nobreakspace put
dup 203 /Agrave put
dup 204 /Atilde put
dup 205 /Otilde put
dup 206 /OE put
dup 207 /oe put
dup 208 /endash put
dup 209 /emdash put
dup 210 /quotedblleft put
dup 211 /quotedblright put
dup 212 /quoteleft put
dup 213 /quoteright put
dup 214 /divide put
dup 215 /lozenge put
dup 216 /ydieresis put
dup 217 /Ydieresis put
dup 218 /fraction put
dup 219 /currency put
dup 220 /guilsinglleft put
dup 221 /guilsinglright put
dup 222 /fi put
dup 223 /fl put
dup 224 /daggerdbl put
dup 225 /periodcentered put
dup 226 /quotesinglbase put
dup 227 /quotedblbase put
dup 228 /perthousand put
dup 229 /Acircumflex put
dup 230 /Ecircumflex put
dup 231 /Aacute put
dup 232 /Edieresis put
dup 233 /Egrave put
dup 234 /Iacute put
dup 235 /Icircumflex put
dup 236 /Idieresis put
dup 237 /Igrave put
dup 238 /Oacute put
dup 239 /Ocircumflex put
dup 240 /apple put
dup 241 /Ograve put
dup 242 /Uacute put
dup 243 /Ucircumflex put
dup 244 /Ugrave put
dup 245 /dotlessi put
dup 246 /circumflex put
dup 247 /tilde put
dup 248 /macron put
dup 249 /breve put
dup 250 /dotaccent put
dup 251 /ring put
dup 252 /cedilla put
dup 253 /hungarumlaut put
dup 254 /ogonek put
dup 255 /caron put
readonly def
/PaintType 0 def
/fcheckload{{pop}{save 3 dict begin/mystring 2050 string def exch/endstring exch def{currentfile mystring readline not{stop}if endstring eq{exit}if}loop end restore}ifelse}bind def
userdict/type42known known not{/type42known systemdict/resourcestatus known{42/FontType resourcestatus{pop pop true}{false}ifelse}{false}ifelse def}if
/truedictknown userdict/TrueDict known{TrueDict dup /initer known 1 index /render known 2 index /imagemaskwrapper known 4 -1 roll /bander known and and and}{false}ifelse def
%beginsfnt
truedictknown type42known or( %endsfnt)exch fcheckload
/FontMatrix [1 0 0 1 0 0] def
/FontBBox[2048 -340 1 index div -566 2 index div 2193 3 index div 1882 5 -1 roll div]cvx def
/FontType type42known{42}{3}ifelse def
systemdict/product 2 copy known{get dup(LaserWriter IIf)eq exch(LaserWriter IIg)eq or version(2010.113)eq and not}{pop pop true}ifelse{/UniqueID 16#00DC3301 def}if/sfnts[<



02005800B30143000600640040005400BAFFB500A6000C0037017D0223000C00CA0118004800700079000B002B0047007A0085009B00B200D100D60005000A0046005D006900BE0019001900240033005800570096009E00C900F40118000C0061009401320422FFF10037003D00400065006800790087009900BB0134FFCA000200050027004D006500890095009A0199044DFF62FFBA003B003E00410058005A005E00AC00FB01CB024AFFDA0001003600440053007500A000D600F7010C028C02A003F70400FF88

FF9AFFD200080046004E005000510054005B005D006100710073009200AA00AF00BD00D300E90190027903C9FFA5FFFC00080010001A0029003B003B006600820087009400BF00CA00F100F600F70119016C01CB05B2FFE4000800070007001C001D002C002E003C004F0053005E0065006600660072007C00830095009E00B000C300CB00DF00FF0108010A0111014A015501A301B401B6021D03A204EAFF98FFF30001000200050006001C00340038003B0043004F00510058007000710078007B007F007F008C00

8F009C00B000B000B400D200D700E800F6010D010E012B0132015D0176018C019701A001CE01E90210022D02400250030A03D405A505F2FF0DFF42FF91FFD6000200060009000A000C0011001F002900340038003E0044004B004C004D0053005B0063006E007300730078007D00900091009D00A500A800B000C600CB00CB00E700E800EA00EF00F200F3010D012A013501400144014801530166016B018D01C802A402C2033703460373038E03A203B304FE055F06A7FDE1FEA6FF7BFFA0FFCEFFD9FFF400020008

000F0014001A00200020002000200025002E002F003200410048005200590060006B006F007100720074007B008600870088008E0091009200960098009C009E

00A200AC00AD00B100B400B600B600B700B900BB00BE00C300C500C600CD00D000D100D500D500D700D700D800DA00DB00DB00DE00DE00E000E000E400E400E500E800EA00FC00FD00FE01010109010C0116011B011B011D012A012F01340137013C013C0140014001480156015E016D01A501A801A801B201C201C601E301EE01FF0208021F0230023C02630267026D027B02AB02C302FC035B0361038E03AF03B703E4045E046704B204C204EA04FB0586059B05DA0609060D060E0643073607B4080BFCE6FE6FFE

ADFEDBFF00FF2FFF85FFB1FFBB00000001000A000C000F00100013001D00250028002A002A003200350036003D004100430045004D005C005F00640064006600670067006800690069007500780079007C007F00810082008300870089008F0091009400960099009A009D00A100A100A200A200A800AB00B300B700BA00BF00C100C100C300C400C800C800C900CA00CD00CE00D200D500DB00E700E900E900EC00EC00ED00ED00EE00F100FC00FE00FE010001020103010C010D011301150115011701170118011D

0120012401300134013401420144014801490149014B01520154015501570160016B016D016F0173017901810183018901930198019E01A3021C01B401BE01C801D001D301D601E401F50207021102110213022D02410282028502860296029602A602C802D702D902DA02DD02DE02E102EB02ED02F203070309031A031D03330336033B034203710376037B037E0385038F0398039B03AE03DB03ED0400040E043104330433044D04500454047A0480049F04CA050F054A0554056C057F05A505E20642064F067306

C10712078E086600EA010500E7000000000000000000000000000000550028031F02BD008000430147007201EE004400D100A400A504290183010202AB023D00D20247046404C500830391020501D8FEC1008D03EEFEF50371008F002F001A022B00CA0332028500AA024000EC0182031800B101A30047023A024C0166012801050094FE6801CFFF5401F6011E00E9013B01CD033A033A003400F1017200FE00B40230024A00C50174022D011D00A205480071012904FC006E00A50152006305F4041300C70202005F

019300E9024B023204F70025055400D900EF03B80057012D005F00ED00B101070251056701E504B402E00171007800BE06170300FC00FFCA0362011F00B103C0008503B50150005C004A00AA00A300C600D902710089008800B8034E034700AA0251007D004F00F4FFFF006700990096011100BE0092008400900000403231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B046

60B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B0042651582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B10B0A432343650A2D2C00B10A0B4323430B2D2C00B0462370B101463E01B0462370B10246453AB10200080D2D2C

45B04A234445B04923442D2C2045B00325456164B050515845441B2121592D2CB00143632362B0002342B00F2B2D2C2045B0004360442D2C01B00643B00743650A2D2C2069B04061B0008B20B12CC08A8CB8100062602B0C642364615C58B00361592D2C45B0112BB0472344B0477AE4182D2CB801A65458B00943B801005458B9004AFF80B14980444459592D2C8A03458A8A87B0112BB0472344B0477AE4182D2C2D2CB0022546608A46B040618C482D2C01182F2D2C20B0032545B049234445B04A234445652345

20B00325606A20B009234223688A6A606120B01A8AB000527921B21A4A40B9FFE0004A45208A54582321B03F1B235961441CB114008A5279B34940204945208A54582321B03F1B235961442D2CB110114323430B2D2CB10E0F4323430B2D2CB10C0D4323430B2D2CB10C0D432343650B2D2CB10E0F432343650B2D2CB11011432343650B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C4569B00943608A103A2D2C01B0

05251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2CB02B2BB02A2A2D2C00B00743B006430B2D2C3EB02A2A2D2C352D2C76B04B23701020B04B4520B0005058B00161593A2F182D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2CB400

0100000015B00826B00826B00826B008260F10161345683AB001162D2CB4000100000015B00826B00826B00826B008260F1016134568653AB001162D00020100000005000500000300070052B10504B80196B2000607BB0196000200010186B50303000A0605B80195B2030704BB01950001000002C9B2020203BC010F000900EF021800182B10F63C10FD3CF53C10F53C003F3C10FD3CF53C10F53C3130211121112521112101000400FC2003C0FC400500FB002004C00000020089FFE8029105830011001D004F4035050105020503140114021403260126022603

860686079B089B09A908A9090F011110129218400C210D1F090D0C0211010015A21B0B003FFDDAC0C03FC0C00110D61AC81AD4FD2B39393130015D012736373613123736373E01371702070607033436333216151406232226011F1A05020C19270103036A694817C13C1A0BE6563E39415943373B01861126186E0100018C15214312161312FD9EC95638FEAA4F6041394E613D0002011503BB042005BE000C00190044B2400E01B80141B4801205030FBA035B00150283B7400D210E47800102BA035B00080283B4

400021011A10D61AC81AFDE9111A76DC181AC81AFDE9003F3C1AFD3C1A31300123133E0133321615140706071323133E0133321615140706070159448E0F36222935070508BD448E0F3721293507050803BB01AA2E2B332B0F1B130BFEA301AA2E2B332B0F1B130B000002008A0000046D0577001B001F0105401E001E1D0D0C05010306070A04020E1C1F1B1A050F11141518041019100B01B80368401C000210022002300232043205320832093E123E133E163E17771E0D02B80367401D05080903404004500460

04700480049004A308A309AD16AD17D0040B04B80180B212190FB80368400A0F101F102F103F100410B803674010131617030F12011221071D1C14130508B80369400A0A0D0E111205AF090109B80366400E4B0C0F10030B02061E1F15160505B80369400A03001B181705A0040104B80366B64B011A19030208003F173C76FC5D18173CFD173C3F173C76FC5D18173CFD173C0110D65D1732FC5DECC4101ADC5D1A1732FC5DECC40710173C10173C10173C10173C0103231323373313233733133303211333033307

230333072303231B012103210187574A57B32FB06DAF2FAC4F4A4F01234F4A4FB42FB16DB02FAD574A5799FEDD6D01230150FEB00150AA01A2AA0131FECF0131FECFAAFE5EAAFEB00150024CFE5E000003002CFF2203CE05DE0032003A004500B940341A452A3B2A456B287A288927061A151A35291529358510853906471B01313B45282719061832183216333A0F0E01061700001737B80131403C20130113040955080440322100041C401721181C20551F1CDC400140632D473A280F45040E331817161F2733FD

191C1604320001083B0EFD04310109003F3CC0FDC4C410DC3C3FC03CFDC4C410DC3C111217390110D6ED71D4D4ED10D41AC81A10D4D41AC81A10D4ED10D45DED07111217390711121739313000715D015D05372E0127363736373314071E0117132E023534123F0133071E01170E010723363534272E01270316171E01151406042707130E021514161703323E023534262726270141255482640F0D140445091E645A587A8543FBD4135216527A560E240341070116604D548A3949588DFEFE6423B65D77354B6D31

3F5A4F322F281856DECD032735264A75402C70

30401401F2174B8557B0010919898901212F2ABC2C3B350A15273C0CFE2A1F1B2485647CE18A03CD05D0044D833C3F561FFD221F4772403354190E1B00040075FF8306570598000D00340045005500CB4041290E3F013F0234083409340A3A0E341B341C341D3F233F2445084509450A451B431C451D54085409540A541B541C541D182E1010450F0E3434400E210F0F210640BA0233000602ABB4387F002146BA0233001902ABB44E7F215643BA01210003035DB40B0E0F463BB80121B40B4A164013B80121400B21

292B10342E262B1E2651BC0121001E035D00490121B12603003FEDF4ED11123910D4C4C02FC01AFD1AC0762F18ED76D4183C10F4ED0110D4EDF4ED10D4EDF4ED1112392F1AC81AC40710763C10C03130015D25341233321615140E022322260523010E01232226271E0115140E0223222635343E0233321E02333236371E0133323637030E0115141633323E0235342623220601342623220E0215141633323E0203B0FCBA7B76255FA9708189FDFA6403532A8335277D150C0D2B5DA8628789618B824C365F30923C

579D370812090B160AA51F173B3F3A704C233C374974FDF0313B3F7647243D393B664D28FCBE0125985F4F9BAA718FEF05731C242218163F1F529D9D6C8B876DDC7033243643654E03050503FC304891424550769F9C3F4C577A026D535A6BAF934E425060A39F0000010099FFE0067B0581006400D240263E3C08003C303A1A37443C31572D30294B2F5C5A5A590A08140A0A08080A4F5A5C3A40269C34BA01C70030013AB23A9C40BC012F004F012F005601144011479C130A5C5A0A034B08640D04CD60B164B801

61B50D87504B014BB80161B52F318230992FBB016E00570016010CB444CB1F8737BA010D003E011D400957559956E2575765661112392FF4ED10F6F4FDF5ED10FDFDE410F65DFDF6F4ED111239121739003FEDF4F4F4EDF4F4ED11123939123939870E2E2B0E7D10C4011112391239111239111239001112393911123931300116171615140E010706071E0115140E010706232226353437363726272E013534373E0137363332161706070607141723272E0123220615141633323706072623220E0115141633323E

0135342E0123220E0107060723373E013736373E02353426273506033C1A2234533F2B973C3B62BD7C9DA6F5FE546CDF311E343B2C21A2485F703E75360A070515013E042B5E3C6E887C6016281704231D68B25CCFBA82BB612D512A223B250C040C32163B87AF7B265D4924242304361D232F413C6F3E0F0B1A19573E54A2842A37DFAA86617C4607111C5F424C473480242F1C1C1E231A980509792928815E5B7A074C2D07549E6093C05E905133552A1A2A1F0C37DA373516100712293A2123320C0E0001010503

BB025805BE000C0022B900010141B2050302BA

035B00080283B4400021010D10D61AC81AFDE9003FED31300123133E0133321615140706070149448E0F3622293507050803BB01AA2E2B332B0F1B130B00000100A2FF01031A05CC000F0028400F000F090A100F12000F0F09210ADD0DB801CCB1041010D6EDFD1AC8392FC8003F3F33113331300526022635343736123717060211101701F968B03F283BF4EF32C2D7AFFF730130E787927AB6013DBB32BDFDDDFEC9FE8EE6000100A2FF01031A05CC000F002B400F000F090A120F10000F0F09210ADD0DB801CCB2

0447111076D618EDFD1AC8392FC8003F3F33113331300116121615140706020727361211102701C467B13E273BF5EF32C3D7AF05CC73FED0E787927AB6FEC3BB32BD022301370172E6000101160364037905D70018006A403B64107B127B138B128B130500050A0F1405071218212F1501151201040921070B400E10121A00050A0F1405020C060946131010020C15170421020C002FD41AC8D0C811123910C876D418C8111217390110D6C8D41ADCD41AC8D4C810D45D1AC8111217393130005D010F012F01372F01

3F01170337331703371F010F011F0107270232A2343705E1E10A3628AB012E472962D82A1D1AF5B20A3F340448DF053B2F9C64305107B901192126FEE59D19572D329631390700010068004C04760459000B0024B2050306B80106B50A0009010300B80106B20806092F3CC4FD3CC4002F3CC4FD3CC4303101211521112311213521113302B801BEFE4292FE4201BE92029C93FE4301BD9301BD0001FF9FFEAB018D0126000B0032B2012100B802A6B40440072106B8027CB40C04400607B802F5B30021010C10D41A

C8FCC81AC80010FD1AC81AC0FC1AC831300327361237363717070E01073C25487B088979215C2E8054FEAB1E6601456C192D1EAF52B75F0001004E019302E20263000D001CB305F50703B801C1B60CF5000A01080F10D6D6002FC4E4FDC4E4313013273637163332371706072623225A0C2B0E53ADFB560A2E0E73E29E01951364570D09116B500B0000010053FFE60170011F000B0011B703A2090B0692000C10D6FD003FED3130373436333216151406232226535B3F3B4859413D46724C61483F5062470001FFD9

FF1202A9063D0003001D400D01000302020321000403000201002F3C2F3C0110D41AC8D407103C0701330127023D93FDCDEE072BF8D500020058FFDD03E605770011002400384025191815222D1823226A02051EFD030215FD0E0D1262000001C000E00002001B62A00801082610D65DEDD45D71ED003FED3FED3130015D13100033321E0215140702070623222E011714163332373613123534262322070E01030258012BF9628E51294756956A90689C5EE94434472A4A4C3C4A372C2330542F3801C80177023852

82BF66E0DEFEF8805B68D43365563965019901

44C6625A1E29FCFEFCFECA0000010055000003780576002B007040161D001D01791F7920040F11100024100B470800060808B801D44022181C14241C4710182D1B1C24180908010B0B100F11401821170224015528F5250008003F3CE0FD3C3F1AC81AD4DD393211123939111239390110D42B76D018C82B10D0C81076D018C8012F2F2FC0C03130015D3337363736373637361312370F010607273F013E0137363717060B01060706151416171633072624232207065506B4280E0B1012204E3C0313EE59191322AF

4DD351241B25083A632B060225415F4C0C3DFEE02F3BB76747040F050E155C9D01BD0153200A6B280B0F8730154E2711121C22FEC1FDE0F2301311212004074703070403000001FFFE000003A005770032006940155921592202201A2202080140102111228F01010108B8027140091A2D2934401121100BB80254400A1216022228E25F230123B801C2B72FF5400121002D08003FD41AC81AE4FD5DE4C03FC0FDD41AC81A0110D6C0D4EDD45DC8D41AC81A1112391112393130015D273F0136123637363534262322

06070607271336373633321E0115140E0107060706071533253E01371706070607242322070602089671E5811A116F62405B241A323D7243364B5D6FB85B1C464E365BDD616C0113784C32100D0F190EFED6804A7FA201388E6E0107DA593C366C702B2E205E14011339141D54A06A406377593F59D7590C030107090F1D2E523A0B040600010014FFE2039905770037009B4038A81FA820B81FB820C91FC920C326C327F926F9270A880088379633032D29119F11AF11BF11031111171F1E1F1F1700022101A00001

003117BB02710029000B027140171F312F3102313910F50EFD12F52D14143525401F211E1AB8024EB725020107FD003509003FC0EDC43FFDD41AC81A1112392FC4E4FDE40110D45DEDD4ED10D45DD41AC81112392FC81112392F5D1112393130005D015D3713170615141633323E0135342623220727371633323635342623220E0107273736373E0133321E0115140E010F011E0115140604232226143D4306726955844C766B3F530A202024A68C645B305D542539721F1C297C456EA24949AC4702AD8C90FEFBA4

5C903901470646256C7260C96B7A7B1C0B6807AA6A56611D4F4718E01C0F151D497C4D4D8578170814A9757EE288260000020009000003E4057A002B003800DE4041D80FD810020B0D0B0E0E0F1D0F2F0D2F0E2F0F3B0D3B0E3B0F361A361B4B0F5C0F882E882FC90FD90FF932F9331435099008F0080208071A15241E0F2F2C470707B801D1404C1E12141E1D1512471E101F202F203F209F20AF20EF20FF2007203A1E241D06010731332F350D0A0F0919F515352C4009211B1D0810072007300703070701112F0F

12110224015529F525000C003F3CE4FD3C3FC0

C0C01112392F5DC4C4C41AC81AD4C4C4E011123939111239391112391112390110D45D2BD076D0183939102B1076D018D001C810C810C810DC5DD0C83130015D005D333F013E01373637053F0136123736373637170607033637363717072627070615141E0117072227262322071B013F01060706070607163332CB0AA8271D081321FE0C097F33CB481E978B6C1B1C1C65820E3B0E0A2775631907154F820D09A8535641445D49112164568E452B2F3E427646080211142FD0054CC94F011E6028BD1B291681A2FD

CB03010301089D0501A53F1017160C0543070302020401A35BB57C77C36741550300010011FFE603CB055E0035009E4027071A071B161A161B0426274016211BAF17BF17CF17031700400421038F00A000B000C000040010B8027140222E228021A021FF21032147372716160A1313695F2A012A2A243222F526F550240124B801C240101E40212120471EE21C0403000AFD3209003FEDC0C43FE476D4181AC81A10FD5DF4F41112392F5DED1112392FC0011076D65D18C0D4EDD45DD41AC81A10DC5DC01AD81AD0D0

3130015D373E0137170615141E0133323E01373635342623220607273712363F0116333237170706232227033E0133321E011514060423222726111121053D053B6B4345604816267668446A2B3F2C31170E0A7DD2D4740C5CAC4EE339563B885B73AC5A79FEF9B16658424443AF3C0821194A763C3C643B6774807F3A401BDF01008A63080E0913B60E07FE6D313556A95A77FCAA18130000020051FFDD0419057700280036005740233608360902340B0E0E19250004692725022CFD19090B2962F01E011E114001

21002731B80271400C8011A011C011E011041147381076D65D18EDD4D41AC81A10D45DFDC0003FED3FC0EDC41112392FC0C83031015D0127362607220E020706073E013332161514070E01070E0123222E023534373E03331617060114163332373E0135342623220603CE3C0A514D3968584A1A270E4B965384A8261A42395BA1595C925627452B96CACD5C7D522EFD5B5E4E3E29373F5B4C677B044E07595D013162975379605349AB946766485B314F44477DA45AC2C87ADBA653023967FC5B82702330DE70806A

D700000100900000045805640026005F403D381F38204705A91E040DE208300A400AD00A030A401C211BF5120425F52300082340002101010E1C113F0E5F0E8F0EAF0E040E081F1C801CA01C031C2810D65DC8D45DC01112392F1AC81AC8003F3CE43FF41AC81ADC5DC4E43130015D33273637123701363726232006072737363F0132171617321705323707060203060706072227069D0D522FBE42011E31203C21FE6F9E520A1A090809136546270C940129627C0644EE9752682E1A087F5519754901266101A347

2C0406070D7B2F350D0604010105074B5CFE7D

FEE998D86148070600030039FFDE03DE057700230032004000B240451B011B021B032C012C022C03503F50409F009A029A039B340C080F0810081113131314463F464065136514633F63400B24123300040D1E303E403E503EA03EB03EC03E063EB8036C4011153F304F305F306F30AF30BF30CF300730B8036BB50515051E0D37B8036AB73F1E5F1E021E4928B8036A40120D474224123300041B0A3AD31B092CD30A02003FED3FED11121739011076D618ED76D45D18ED111239392FED5D2FED5D11121739313001

5D005D0126272E0135343E023332161514060706071E0115140E0323222635343E0137362536373635342E0123220E01151416070E0215141633323E01353426018742222D2E4EA2A2568BA3404228807B72335DA3835C9FB72A5D4019015F7030243362383E6C375F29396E3F7F684976447302A025202C67485D91894099724A793923513E9E6441906D6B35AB85406D682C11BE4F50394F435E303D6C3D507BEB1E687F4E6A7F43864A587E00020038FFDD03EB05720027003C005340232B2D2B2E2B2F4A2D4A2E

4A2F062B0B0F0F251A05076900250936FD1A02400521000428B80271400AF01301131E0B32621E3E10D4FDC010D65D18EDD4C41AC81A003FED3FC0EDC41112392FC0C83031005D17262726273716333237361306070623222E013534373E0333321E01151407060207062322261314163332373E01373635342E01232206070607066C030E12112F499F734E784650533E494B925325185199915569AB562735E29C7B822745C36249322E20360E132C5032355219220D06012336483017A25B8D01705B2A20479D76

6E6141626F3F67CF8A9197CEFEC45B480D037B6C6F1D145C415F5B57733337374A643200020033FFE601C503A0000B0017001C400E09A2030FA2150B06920012920C1810D6EDD4ED003FED2FF63130133436333216151406232226033436333216151406232226A85B3F3B4859413D46755B3F3B4859413D4602F34D60483F506247FDC44C61483F5062470002FF90FEAB01C603A0000B0017003CB509A2030D210CB802A6B41040132112B8027CB71800920610401213B802F5B30C210D1810D41AC8FCC81AC8D4ED

0010FD1AC81AC0FC1AC82FF631301334363332161514062322260327361237363717070E0107A95A3F3C4859413E45F425487B088979215C2E805402F34D60483F506247FBFD1E6601456C192D1EAF52B75F00010028003C0494040E00060040B43703010506B80297B2010302B80297B4044F000100BA01620001036DB40603020305B80205B30401000710D63CC0F41732003FFD5D39F4C810F4C83130005D1335011709010728042643FC9103726801D77701C080FE87FEAC850000020046010D0493030C000300

070022B900040106B340078000B80106B50305

0104000810D63CD43C002FED1AD41AED3130132115211521152146044DFBB3044DFBB3030C94D79400010044003904B0040B0006003BB10302B80297B2000506B80297B4044F010101BA01620000036DB40603020305B80205B30401000810D63CC0F41732003FFD5D39F4C810F4C831300115012709013704B0FBDA43036DFC9068027179FE4180017901548500000200BDFFE8039705830027003300724041190519061920192119222B052B062B202B212B22390539060C402721004900162B100C1316032BA231

0B2E9228114027210025CD03031A11401021133011011109B8010CB11A3510C4EDD45DC01AC81A1112392FEDD01AC81A10D4ED003FED3FC0CCC4111239762F181AC81A3130015D012E01353436373E0135342623220E01072736373E0133321E011514060706070607060706151417033436333216151406232226019D38213E507E486452325B3126413E194E7D496AAD583B523E71521A30130E2CFC573E38415843383B017C3643253468507F7F3F425C24405B0A9A6630274A8C5B4E7C48374C36162A21191A2E

26FEC34F6041394E613D0002009EFFD506600578003B004B008840463A09333855375538042014171D400121001124441D472D113C171D17050B390549330B02142328403F2047404063282414282428242A242A49631A2A1A0E0800300E3646084D10D676CC18D4CDC4111239392FED2FC4111239072B1076C0C0180111123939003FCD762F18CD111239392FCDD4CD762F18CCD410DE1AC81A111239393130015D25070E02230400111000212000111402232226350E01232226273612333216173E013F010E0415

141633323635340021200011100033323601323E0235342623220E02151E0105740E5297C077FEFAFE5E01C20176013B014FEBA14C752C8B68708A0505D3B85966160B1B06C00A2E2616082B215B93FEDFFEEFFEE5FE900155E697E0FE394E6E2821463D495B351A0139E0483D52320201550126015301D5FEB5FEFDC7FED765676D59958BDF013D454917470E0A2ED8B76E42252927E2C4E10130FE61FED8FEEDFEC55E01229380AE3741548AA08F404C48000002FFBB0000057A05770030003600AE406229070126

2431473636860A081436350A07F5080A0820F52135473636570C0D140D150F820D0C0D0F0D0C150B07080A01010B360A30155F150215382026240C0D08010A23F521248D35313333362E360B0A022E1A1503015517F530F516192F030008003F173CE4E4FD173C3F3CC01112392FC4C4FDC4E411123939391139390110D65DD4C0DDD41112393911123939390710F0C8102B1076D0D018E00710E010082B100576D0D0C03130015D23353637363736370112373312131217161716171617152522053532373E013534

03262305060706151417161716170727011633

203703456A090E0B0E68019BE513C3232845220E0D080B1275FEC517FEEC5B26190E303A19FE8F72481E0A0F24155F07E601441C250127214E430903050A0EB002B2018425FEFBFEEFFE29CA501209050706430707430905121748015F0101C39A40130E090D04020443070274020202150000030015FFFC050C0579003000430053009E401C44825047408231315708071408100006820747088210110A4A752539B8037C4030101B201B301B401BBF1B051B5544464E0A080706040111214E3350F54E5F31334A4E

001240F53E5F14F5115512170244B8FFF4400A44465F2FF50155002B08003FC4EDE4FDC4383FC4EDE4FDE4111239762F18C4FDE0111239111217391112390110D65DEDD4FDD4C82BF076D018F001C82B102B10E076D0E031303337363736373612133635342627262F0123370532373633321E0115140E010706071E0215140E010706232227262322011633323E03353426272623220F0206031633323E0135342E0123220706030615056F0F09070E603624101D1541270F06013C12BE574794AB66417D4A168592

91485C8C54798B406484554B015326265D6A5B442B342A3C773339052D2675A143677E444479881B5105350E40150A07101F02150145D6361613070403024305050237835E4886641C092311458356629F6D202E060702F802132F50813C3A5F141E061DEDDBFD411959B35255732F0225FEC94F00010087FFDD0583058F00310044B4062A011922B8012AB61714030031012CB8012A401406092875B00C010C173101001A5519301701173310D45DD4EDD4C0C010D45DED003FEDD4DC393FC0FDC43130015D25070E

01070623222E0127263534373E01373E01333216170607233734272E01272623220E0315141E0133323637363704FC1751C34A637395CE831D273A38A3A276D1757BDD313F0F4705080D39455065749C7D592757B47B55A03D137CEF50365E131B5386506B84B7A77FC37244443A24C989AB170B13211B183F7BCBE9A27CC0622A1D094C00000200170000060905770026003B0073403510090006820847090957393A143927823A4710393275101B301B501B031B3D3A27390A09080604100139F5375F105514F516

110227B8FFEE400A272A5F015524F5200008003FC4E4EDFDC4383FC4E4EDFDE4111217391112390110D65DEDD42B76D018E0102B1076C018E001C810C831303337363736373612133635342E012726233716333237363332041615140206042322272623220737171633323736373E011235342E022322070302170660160C080B5C411E0F1B365F050D61856F9FC63EC901019174E9FED7AD399E5C5F4B2EE7CA372F70523A2B44663D326D967371576654400C0F08111A01F00186B63A1414080407480B03046FF9

AB97FEB6FA84050301781A0621182C45CB0125

7E56AD6F2D0CFDD2FE2E00010012000004DC0577005200B8406D480948114812580958115812660066010832321E2D1109000608470A0909572A3D142D2D383D2A3D47103F2A012A1A46554B471A1F551E501A011A5408090A060401113338358D312D0F2E01FF2E012E2E3F281E2AE2285F115514F5121802473DF53FB54BF550F501554D0008003F3CEDE4E4FDE4C43F3CE4EDFDE4C41112392F5D71C4C4FDC4C4111217390110D65DD4ED10D4C0ED10D45D2B76C0180111123939102B10C076D018D001C810C811

12392F3130015D333736373637363736131235342726272627370433253633321F010607060723373426272E012726232207030607163332371707262F012207060F010607163332373E033733060F0206232227242322120A62150908122A143C44090D2A1A6A0D012E19016B628C44310A0C1D07044402090B103D53333B6F4E460D10FF1A5B63061913B2AE114F14212306024E9C542F77341B132E4B120B240A304D8FA2FEF315C13F0E0F06122BE86D015901832B15090D06050640060402060C35AF2E26901D

12060A0C08050CFE9E415A05050C610105050374B8C3241F0C040C0C1428A15335C70C0704060001FFFE000004BB05770040009A40592F2F2A1D100A000608470A09095727351427342A352735471000277027B027E0270427191E551D0F19501902194208090A060401103430318D2EF52A8F2CBF2C022C2C3C251E27E2255F105512F51611023C01553FF53D0008003F3CE4FD3C3F3CE4EDFDE4C41112392F5DC4E0FDC4C4111217390110D65DD4ED10D45D2B76C0180111123939102B10C076D018D001C810C811

12392F3130233736373E0237131235342726272627370433253633321F01060706072337342E0127262322070607031732363717072623220702070615141E011707262322020570180E12101E6040090D291B690C012F0B01645A7F47310A0B1D080444020C29316749564D0D0D523DC88A4F091CA1D53B2E3B040717466C06B47F67460207051233A7022301653315090D06050640060501060C35AF2E26901F1411060E0C2D46FE2B0105090D650404FE9B1D311E1E1A0A0346060000010098FFDD05FE058F0044

0087403D09758026D026F026032614352E2E472B2B2B57413F14413A3F47106F417F410241001955188F140114462E352B3F41003B3B355538F53A36361F29181FB8012AB51310032B0129B8012AB10609003FEDD0C83FC0FDC41112392F3CE4FD3C111239391112390110D45DD4EDD4D05D2B76D01801C8102B10051076C4180110C810D45DED3130250706070E012320001134123E0137363332161F010607060723363726272623220E02070615141633323F013637363534262726273716333237070E020F010E

01151405360738698AB963FEE0FED07DAFD879

849179E43E0838030B0948070249435F7779A86E592722D0B78967260B0D081414208C0DB46B4FEE0B4030181212110664080B232F2201230100B1011DD98B2F2E36260FCD0E333B6B593718213E6AA0839E9DE6E139992B52301010170405034607074601132752564F2E1712000001FFD90000068C0577006400E7408A58325833932D932E943B9A3C9A3D073237433C3A4737393957255014252351255050472510290E615C161D8221475C825555570A0B140A1000070A470B10110E663B3A0A0B070E383C3909

013329251F1D04172250575C4E04015321F523F5228D55F551F5534953330143486103015564F546F54447620300022D171103335514F530F52E1612033208003F173CE4E4FD173C3F173CE4E4FD173C111239762F18E4E4FDE4E41112173911121739111217390110D4C82BD076D018D001C82B102B10E076D018F001C810C810D42BD076D01811123939102B10C076D0D001C810C83130015D0107232607060706070603020702151416170726232207373237363736373637363725050E010F010615141E011707

26232207373637363736371312353426272623222737330525072326070E010706070316333237363736373E01353426272627373305068C0B1F52210B070B09133D35152C3E800C8EC4B57E0B721F0E060A0C0428320AFEF6FEB80924171103192D700C8EC4B57E0B8F130C090F2556441011193836100C0B0157011C0B1D45280C11080C1F37D75460C5031D051508031015325B0C0C015605774B010D05090E2452FEB7FEE180FEF81F1E1605460808460C05080D300FCAFC45020242D29867110B131F0B044608

0846090B07111EC501E501744614160508014B08084B0107030F161FA2FEDA080814AB1B93312D131314040A024B08000100000000036105770029007440464615461665006501A915A91606151B00078208470B820909571D1E14101D151B821D471E821025212B0B090807201E1D1B0801101655105513F51511022555015528F5260008003F3CE4EDED3F3CE4EDED111217390110D4C82BF076D018F001C8102B2B10E076D018F001C810C83130015D3137163736373E0137131235342627262737163332250722

070E0107060302070615141E013307262322085D320B070F15285E331B2517680B9B865A01140C72190F17071235441922153A7609F4493145020D03060E3ADF02120125401819030204460606460805161935FED2FE7C94C531171A0E4508000001FFDFFE57037A0577002B0053402C6916691702110D3D022101010B470D820C0C571F2014101F161D821F4710202B055F291755115513F5161202003F3CE4EDEDD4ED0110D02B76D018F001C8102B2B10E076D001C82F1AC81A10C83130015D0327371E01333236

373E0137131235342627370433323707260706

070607060302070E02070607062322261A07071323111B2F0E1C2C0195433A9109014230AA7A0C542E120A0C0A113643182731634A383C2D351C24FE6D4006080919162AC20803640188481A13044D09094D040C040A0C223AFED3FE8893F2D1B94434181109000100060000060F0577005100BE407144354436023F443533351D35361B1D1D261B2633352D3536363F44390E09000582074709820808571A4514101A13188210441B1A474582104D4739502D702D022D5309080705181A1B1D33353644480D010E14

222E030E5529F511F513262D030F024D390201553CF550F54E3F3A030008003F173CE4E0FD173C3F173CE4E0FD173C111217390110D45DC4D4C82BF076D00139392B18F001C8102B2B10E076D018F001C810C811123939113911123939111239070810C90807713130333716373637361312353426272623370433323707060706070607033637363736373637363D0116333736373237070E010706070605011E0117072726232207272627262706070615141E011F01072423220609841A0F0A166C431F2E69060C

01311E56DC0B82190B060D284242872BAE95391D070435114330680C1C0152311F3DA55CFEFE01885737500776691F2F4A7E3780644D2D250B102121660AFEDB306E4903120A2451026901793A1D1B010348040448020E060F1BD2FE9A2A7927A9904221120C1A22070202010248020E152A9253F3FDDA79230343040408C053B0895FE7E5441715160C0202490900010033000004A605770033007B40450F0B00058208470B820909571F20141F10161C821F201047212C2955302A502A602A032A351C2021170908

0B0504010F21F529235F2C31F52E01550008170F5512F5161002003F3CE4FD3C3FED3CF4C4FDCCE411121739111239390110D65DEDC0D4762B18D0D0F001C82B102B10E076D018F001C810C8313033373637363736371237123534262F0137320433323F010723260706070607060703163332373637363733060706232227242322330B6F080B070D21580F3216247F0C39011532353AA30B16721E0C080F1C2421659862A95D250E133F4838103842509EFED82CEC3E1C05070E19B801F561013F1E18150409450B

03084B010F060D1897C2C9FDA10A1609121ABDEA7E0804060001FFD2FFE407DD0577005D00D94076194F0122132C480216482147472C530E0B000608470B0909134D474E10532C343A823D3E471C3F3E3E572A2914291020258229472A102F2F2C012C5F2C252A292F2108090B010E3A353F535A4D4D4E3F3E3D051613210E551FF511F5131C20030F02164748095A352F03015532F55DF55B3430030008003F173CE4E4FD173C3F3CC83F173CE4E4FD3C1112173911123911123911123939391112393939390110D4

5DC82BD076D018F001C82B102B10D0C07610D0

18F001C810D42BD076D018C0D010C076D018D001C810C8111239101AC8C05D3130015D233F0136373E01131237363534262737163332371617133613363736371716332507220706070607060703061514161707242322073732373E01373637363713060703060207060723260B012627030207060706151417161716170F01272E05600F0A0E1C4F623F293195073F6BA4743023B137A5746E872E19760E013309611E140D10140728631D33850AFEF32F40F4070B711115070B282F1E3E2329E164C2294F143507

428E3B10575A08270703111547201D060FFF490605090F4E01180160F8A01B1C2B06450707CC8EFD4E55010DBBBCE74C0207094A0A0711175C24E1FDC0A925261407440808490803120F1BD2FCB8018F3742FE98A1FEB9498E211A01080232E93CFE9FFE9E21AB2E1511150B0F0301034401090001FFFCFFF706A30577003D00CF407219573231143231191A313257131914133233131900060847100F0A0A8632331413324733103BB0370137301E1B1A471919862E2D142E10232B2D472E10311F3001303F2E2D2B

30241A1B1E193733323B0A0608090A010F1E24020F5521F512F5131F230310021931303B5501553DF53C0008003F3CE4EDEDD43CC83F173CE4E4FD173C11123939393911123939391112393911123939390110D45DC82BD076D018D001C82B102B1076D018D001C810D45DC82BD076D018C02B1001C82B76D018D401C80708102B1008072B3130233736373E01373637123726272E012737163325161F011A0117123534262737163332370706232722070607060203060723010207020615141E0137072504086E0A

131A12321A6118291811337407920F01161B2665A9E153A43D780A4D68A38A0A170A361A160B08137E40171DB0FD843F0E440F1339690BFEE8490604072255E38601F6913E140D0B0A4206062D43B4FEE0FE7B870372622015054204044701010D060D22FDB1FEA080C80454FEB452FE6877151C180E02490700020099FFDD064F058F0013002B004C403B1B0C14171B1E1B1F1B241429142A2B0C2B0E2B1C2B1D2B1E2B1F242824293A088905890812265F07031A5F0F09147500004000B000030021750A2D10D6ED

D45DED003FED3FED3130015D133412373E0124332000111407060021222E0225141E0333323E0137361235342E0223220E02029950523DB30107B1012801445A6BFE78FEF28FE79C4901181F395A8343658F662B3A4E275096656D9978662F02148701277A5A9564FECCFEF9CEBFE1FEF75097CC4550895B422842715A770140935D9A67464690F8FEDA000100150000055F0577003B0085401F162601222228300F0A00060A084706070757302E142E473010381033013328B8037C4025193D0607080A010F333038

2E245F1F1F00152EE22C5F0F5512F510150238

01553AF5390008003F3CE4FD3C3F3CE4EDFDE41112392FED111239391112393939390110D6EDD45DC82BD076D0182B10C076D0C00110C810C81112392F3130005D33373237363736371A01353426272627371633322433321E0115140E01070623222F011633323E0135342E012322070602070615141617161707252215077D1D0C070F1C476115181F7D0AC78442010F549BA55254814A69735F6C0A5E41448855357B552C6A25920D03172E18740AFEAB37440C050A1692016F023F3A171A0507014A0B08519B63

6CAD79223025491D58C46A50763E10B9FCC6671B14191706040445080000030097FE39064D058F0013002B004E00C74055193A193B2A3A2A3B2A3C2A3F2A40071B0C151715181B1E1B1F1B24152924022B0C280E2B1C2B1D2B1E2B1F24282429242A2A3A2A3B2A3C3B08363536368B058B081909003B013B353A763B4E004301434700470147B801B240333235143232350B35014AB532265F070330091A5F0F0932094743320321142CB24DBC147500004000B000030021752F0A010A5010D65DEDD45DFDF4FD1112

1739003F3FED3F3FED10ED5D870E2E2B5D0E7D10C45D003918012EED0010C05D31304B5458B0018559015D005D133412373E0124332000111407060021222E0225141E0333323E0137361235342E0223220E020203263E0133321716171E0133323637170E04232227262726272E012322060F01974F523DB30108B1012801445A6BFE78FEF28EE99B4901181F395A8343658F662B3A4E275096656D9978662F820348803E3E415BD29992343E50163E14303E3C452A2A242E3B1F63F58938375D030902158601267A

5A9664FECCFEF9CEBFE1FEF75097CC4550895B422842715A770140935D9A67464690F8FEDAFC825B8744121A5E432B5D5A14556C522E17080C1B0E398B3659720500010011000005960577004D00CF40391F572B321432322B2B571F2214221F2222261F2B1F263232321C440008100C0A4708090957414014413E404741104A3F449044B04403442639B8037C403A4F1C011C302601264F22261F4441404A3E0C0A09080401101F32213335353C4A3EF53C5F1813F51055111802264A01554CF528F5272B4B030008

003F173CE4E4FD3C3C3FD4EDE410FDE41112392FD41AD83C1112173911123939391112390110D65DD45DED10D45DC82BD076C018C0102B10C076D018D001C810C81112392F111239391112390705102B07102B3130333733163736373E011B011235342E01273717163332373633321E0115140607161316171E0133072707062327262726272627371633323E01353426232207060306070E011514161716330725221106115E1C0C080E143B3F3A1532730BCD4E2B17CC5B59909A5FB9EA35B4731B132A4206D777

0C18817336160F173E0829166DAD5A7782613E

164F282215031418236C06FE9E3146010B040910510153016901413815190B0249090307023A8C5B7DD62957FED0C220161246060501EFCA5C2617265F20034C9C676A6C0E6EFE44DDD5831D0C161A0508460A000001005BFFDD043F058F003B00A2403319122A123B123B14363236334A124A13084631014C144C1542335433971799370644124A310233123B310212310A293F200120B80276B729D4190330040104B8027E40110AD4390900033C1C3D3503B2040407F62DB801BDB5C016E0160216B802BCB53524

B21F830DB801CAB32F350135B901A1003D10F65DEDF4ED10FD5DEDF63C10ED111239111239003FFDE65D3FFDE65D111239395D5D3130015D00715D373E0137330714171E0133323635342E0227262726353400333216170E0107233635342726272E0123220E01071E01171E0315140E012322265B0B250442020220B064A48C17375366B2455F0142EB5B9D4213160F41020216172472475A834001013865829B7743B8FB9C67BE4B2AD7367215283055926B35493320202D3C539FC9012F2E2E49756F281E0D511E

111B274675574E52221E2D39825791F8843A000100760000056005770037007F404A000708470A090957292814272847291033A02E012E1A0E5511300F600F800F030F1A1E551D501A011A3908070928292E06010A1D0F27F50AF5250B5F15F5195C120233015536F5340008003F3CE4FD3C3FE4F4FD3CE4E4D4C4111217390110D45DD4ED10D45DC0ED10D45DC82BD076D018C02B10C076D018D401C8313033371637363736373612372720060723363F0117163332373637170E0107233635342627262322070306

0706070615141617163307242322D3087E1E0F0A0E0C217D283CFEFF492A4A1B180BFF7395D0F681500E2B0F034B0A131A2E9C49265827281B04021218237508FEFC556A47020B050C123AA002C9F00135C191C40C0A0406040911DA572455463318060A01FE33CEF4A32E1412171605074708000100A6FFDD06B7058F005900CE40723D4047414157292A141029352E2A472910269F26F02602261756194C0217525217474E4E570A09141009000709470A1012800C01100C200C800C030C5B195616090A0C070412

01524F4E4C044756403D414404473C2E2A2924041D360156355559F539F500573C033602125514F516130847B80251B11D09003FED3F3CE4ED3F173CE5E4FD3C3C111217391112173911121739111217391112390110D45D71C82BD076D018D001C8102B2B1076C018D41112011739C810C05D2F2BD076D018D001C8102B2B1076D018C0313001072607060706070602070215141617163337072623052736370607062322272E01272635343736373612373E01353426272627262337161F0133323717060706030E

01151416333236373637363736371235342726

2737330506B709701D0E090D0B1A67192A1214254A2B0BBC09FEF20A1E13A6875C7660483758182402040C14400E1D080D11162E4E080B1659EB0C31430C2B112C2E210776674AA4593A0A06232B0E37111C900913014B058F4A010B060A0F2D6BFDC497FF00241C18060B014905050C8972B148311D17532D464A20202E4A80015357B13B1B16130609030545010105070FBD5AE6FEF2BD46215C6D4A583A1B11CCF652014C24160A0F074507000001008EFFF805F40577002D00A4405D0409040A02181647151586

2928142914152928154715161414570402140404021628152829212D1415040402000A0A40152D21400001003021B02102212F28292D22161415010400090D1E2203095520F50BF50C1F21030A02152D0008003F3CC83F173CE4E4FD173C11123939123939111239390110D45DD45D1AD9C01AC4111239391112391112393911123907102B100876C0180708102B1076D018C03130015D05260326032E012726073505250F010E0115141F011B01123736353427262737173707260706070607010607060701FF0957

13411C100E1C6701080153045B281C051277EA9466230D168807C8F5073A17120C0F38FE0D5F230D0D085F021C790176A11B070E034706064206041919153E8AFD0101A8010BDE4D150D070B06420505470108060F1365FC85AA451A200000010090FFEF08910577004B012E40C30705071607170718051E160516171618181C281F361B491F560F56105611571A581E5A1F660F66106611152047211F20218642411441424120574A49144920214A4949464A4A571F20144A4B1F201F4A861B1E141B1E4A491E1B86

4B4A144B1A1B4B4A1B471B1E1A1A570302140303022141204142344549464A1A1B040302000A0A1B4B00900001001F1E204521462034303402344D41424535212F2049464A1A1B10030202000A102F35030A5532F50DF54A0F30341E1F050B02201B45464B030008003F173CC8C83F173CC8E4E4FD173C11121739111239111239111239111239390110D45DD41AD9C0C0D9C05D2FD9C0C4111239391112391112391112393911123907102B100876C0180708102B1008072B1007082B011112390708102B0705102B

081076C03130015D052603020326272627260737163332371523260706070615141F011B013701330113373637363736353426272627260737163332370723260706070E0107060706070307060723262F01030101AC0C1A17251912050B1B640593A89A7E12561F11070B040D3BBE5C010041012DCE282F11250B030A0E131F3C2909B34A5E6106092B1C09070B134060030507E2171A47AC16391E9FFE0A117C013401110153E52009060E02460404460109060B11271E41B1FD680186B50212FB96020E6D7A316E

330F0E11100607020301460606460106020608

2598E4080E11FDD93442BA64D5730248FC0C0001FFED0000062F0577005F00A0406E0B420B430B4C0B4D0B4E261D261E2A462A4D2A4E3939393A383B4608593B67426743113A5707511451513A202057075114070720075107513A200442104210421000303101316107513A20040110322D1603105530F513F5112E310315025B464203015544F55EF55C4300034508003F173CE4E4FD173C3F173CE4E4FD173C111217390110D45DD439393D2F2F18111217390708102B1008102B3130015D273736373E01370103

2E01272E0127262337170532251522070E01151417161F013F013637363F013427262726273716332507060706070E010F011317161716171617072505353237363736353427262F01070E01070615141716170726232213055C1D12202C01DDCA1F59100C1D1E4029051A01561001105B24160D0314367DA15C2E22130302060A1A236405D10E013605551C100C1E8C99CBBE5E34100B0D1B6305FECAFEC266221006090C23644AB72D830C061B148606E9262F014A020603172F01FF018B3D9E110D0D0203460105

054506040F090C0B3A70F3B46D37311C080806060A0406014608084601070408148BA1D6FE8BB563130C060B074206074A0503070B0E111E55BF8FCA31A2190B0B1A0907034A06000001006E00000580058B004300B8406809140915191119131914191506172217231C341C355A285A295A2A5A2B08273024250F36343025380E0F0C1800070C08470707573938143938473910183F3A2E304745253636303A3938360708010E0F0C17360C0C0117401721181C03302E023F015542F5400008003F3CE4FD3C3FC93F

D41AC81A111239192F18C01112393911393912393939113910C0011076D418C4D4C8C42BD076C018102B1076D0C00110C811123939113912393911123911393130015D005D2137163E0137363F0136373635342E0227262726272607273637363736333216171E011F013637361237363736370617060706070607060706151416171633072623220115072D61250A0E08160D0C0443494C2314181F1C2428064637301C1B11305328355628363E2357B8483432223E071259535266805123211A151A2B7208B67D61

470206131118397647531B0D29F5E28B2012080A0502022F2E27251204232E3CE8ADFC9142A30102402F150E0260550B323A8BADCA55B48F2F1719060945090000010006FFFE0565057700300084404B2D05010401050557171D14171D171D570405140404050401051C1D17100D556F0E7F0E020E1D011724552800250517320401050E058D13F54017211611022520F51D8D2EF52A4001210008003F1AC81AC4E4FDE4C43F3C1AC81AE4FDC41112390110D4C8D45DC0ED10D4C8D45DEDC011123911123907102B07

102B1112393130015D33353E01370121220607

0607060723363F010421323725150607060F010121323736373637330E010F01062325262122070622A5900294FEFE97D6240D0C1D1B492F080E015D01238033012928325556A8FDCC0120CC704E4235274A2218150A2C16FEF385FE4E56333B20C5B303360F0A0C1F4A63F9580E080107402B3A646AD3FD3D0807115D8C886F7808020802010001004CFF03032405BD0020004840260447050563151414141415141512172215141C0D040500080D550AF50C08101C551FF5001D12003F3CE4ED3F3CE4ED11123939

111239390110D4D0393907102B1076D0183130172736371213123F01163332370706070E010706030602151417161F0107262322590D0F214C3C440F0E765B5B930AB8180E0C04144510780F1446830B56D673FC0C3DB001F9016601D1820D0607470208050D0F51FE5962FCDD481A0B10030645060001010BFF1203E7063D0003001D400D03000102020121000503020001002F3C2F3C0110D41AC8D407103C0523013303E799FDBD99EE072B0001FFBAFF02028505C00020004F402B33113312021C471B1B63090A

140A090A0A09070C211C1B1F16090A0111115514F5161210015520F5001F12003F3CE4ED3F3CE4ED11123939111239390110D4D0393907102B1076D0183130015D073733163736373637361A01353426272627371633323717060706020B01072327460A1C8A2109080A0613883C1415269B0B55A0944A0E120C1F6630410B08C2FE47010C04080C1C4E037001D81F16180306034906040D4945A3FD76FEC6FE520A02000001008102330457056900060029B603000501020600B80294B2010403BC02940005000201

0600012FFD39FDC810FDC8003FC8D43C31301301330123090181019CA20198C5FEDCFEDC02330336FCCA0239FDC7000001FFF4FEB3040BFF2D00030014B900010105B4010205000410D610D6002FFD3130033521150C0417FEB37A7A00000101030461029E05CA000C0018BD000801E8000002060006013CB1000E10D6FD003FFD313001232726272635343633321617029E50F4380A1530251E32330461AE280C191F212E1F4400020050FFDA041703C1002C003C00C6407D0A19F5330250016001700180019001A0

0BA30CA30DA30EC60EC631C632D60ED631D6320F18181819021E1F2D0A090603262D3C472D2D63222314221034620F1440146014801404143D01268223472210401F211F20010F2001203E3C2D303726232229200A1E111B4020211F5B30691B064000210174375D295D11030B003F3CEDED19F5181AC81A3FEDF41AC81A111239391112393939111239390110D45D711AC81A2BD076D018F001C810D45DED2B102B1076C41811121739111239313000715D015D251706232226353437363706070E01070623222635

3412373E023332161737170607020706151416

33323736032E01232206021514163332373E0112040116F76A19280C0F3A7113539353291F33426A291EDD78532F77305C2117174429130D0A10212ECC2C52264661771810111A4BA672E440CA322C253D51E5B41A6E82251352638B01613727A83F1C1936183A60FEE4CB621B1511121A0275171666FE4E6E2A201438E101010002006CFFDD040205CF002A003B009340611B231A3A29082A2336083509460546067923892689279A269A27A926B926C9261040042105820808632223142782234722102B62101E01

1E471233622012401202123D2B2E37091A0E2723221E041A00009A01D14005210401377D0E072E691A0B003FED3FED3F1AC81AF4ED111217391112391112390110D65DED1076D65D18ED2BD076D018E02B10F01AC81A3130015D13373E01371706070336373E023332171615140706070E0223222E0135343736371336371235342E0113141633323736123534272623220E02780DC09B37180A1D883E283D8C8D373E1F3237294130B0BF5853753603040B33291230112E6E503F423C56691E1522257D8253053739

1E281914248CFD72562A405D2E2B44899799744F3B7C493567401C212F40010BF865010D2D12140AFBB758583950014E815C2A1E4CA2EE0000010050FFDB038703C1002B00754052AE00AE01AB2B03060E060F020B0B0B220B231B0B1B221B232B0B2B222B23AA22AA230B01210000291F181F7D1006297D050B26623F095F09020913400021011318E51720133013401350136013801306132D10D65DD4ED10D41AC81A10D45DED003FED3FFDC41112392F1AC83130015D00715D25170E0223222E01353412363F01

36333216170607060723363534272E0123220607060706151416333236032B17819C8E3C4F7E3E4C6059AC505C3363441111180C4409012C60333A502419162F574349C0F74059582B43805280010C7E376828171D2A46604E37330A1425252F3D2C54B6766165530000020051FFDD046A05C800390051011B40C3392139224600460148214822472F444B444C5630554B672F8B238B249B239B24AA23AA24BB00BB01BB03BB09BB0ABB23BB24C30DC30FCB23CB24DB23DB24ED23ED24F62EFA41230B4101190E194F

5C495C4B5C4CA403060F4D4D3A450F150E0A0E303A248221473A3A63302F141030456210159015D015F01504152D013130472F10402C21302D502DEF2DFF2D042D530F0E1224222129312F3003342D4D513A483D0E0D0A2104121F299A2AD1402D212C003D691F064000210174345D070B485D120B003FFD3FED19F4181AC81A3FED3F1AC81AF4ED11121739111239393911121739111239391112390110D65D1AC81A2BD076D018D001C810D45DED102B2B1076D018E0111239390111123911123910C83130005D01

715D2517060706070623222635343736130207

0623222635343637363736373E013332173736353426272607373637170603061514163332373E0137032E012322070607060706151416333237363736373E01370417139D10442E1D1B1E2C0C05478AC0794E344B3F2D201C155090753D3950220D1018245F0CBEDA1927A9330D090506092619C0294D364C251A202B2330141114172E2D4345334F0EE43C740A2D120B332D233A180125FEFD996160677FFE5F43221836612C15DD542A10130506013D04541398FCBCFC36111002021612028213101A13465E82B9

82281C0B182F446C4DC4450002003FFFDD035D03C90021002F0087405D7500014A084A095A085A09641864267C007C017C027C037C047B087B0974187C21742610221A1C62F00A010A164000210128A110162F163F160320164016501660168016B016061647314022211A1A2B1F2B691306400021011F7D060B003FEDD41AC81A3FED1112392F1AC81A011076D65D7118EDD41AC81A10D45DFDD0C03130015D005D251706070E0123222E013534373E01373637363332161514060407061514163332360136373E02

35342623220607060307168E315C8B38497B3C381C474269884C405D6774FEE1970B5B3B3DB1FE8F5F284E503B362B3261281FED375F1C332B3B6F478ABE5E763656361D5D4D5FA375184B385F4847011A1612224A79302F3548674F0001FF10FDD203BD05CF0041011140B2B036B037C035C0360409060907090809090919091A091B1E191E1A2B182B192B1A4A064A074A1B4A1C5B065B075B1B5B1C7232723372347235723682328233823482358236950B930C9133913491359136A132A133A134A135A136B132

B133B134B135B136C132C133C1343110220122221C12003E3D283E043E3E63292814292847101A1A1031403521343110401321120F10019F10011043060E041A1C16292F283D383E1310165D0E013E284001212400B80379B31CF52104B80365B53531385D2F0F003FEDC0C43F3CF4FD3C1AC81AC4C43FEDC0C41112391112391112391112390110D45D71D41AC81A10D4D41AC81A1112392E2B76D018C02B10D01112390110C81112392F5D3130015D005D13373E01373637363736373E02333217060F012E012322

0E01070607331637363717060726232207030A010607062322273E013F011E0133323637361B01262322640920842A050813111B3857D5433D282A28111E2A5020192E1B0E2417171B6B41200A150A2F6B43216F5071BD61332F23291C1B0B2015311E1D31122339913C4724033E330C25130F2656203235519A1D108778063F341C30328585010704061036310101FE1FFEBDFEE1DB331B114A5B3606302A253060013302EC01000003FF9AFDD4043903CB00480057006800A340654C5A4C5B75467547040B470B48

1B471B482B472B487504750508356202020A30

664066506660660466EC3B49620A3B285DA10A004352624028802802286A686158353839033F0200075800003F074C31060747073F13266919F51E181855B4130661B43F0F003FED3FFD392F3CE0ED111239762FD0C0C8111239192F18D01112391217391112390110D45DEDD45D39ED12392FED2FED5D12392FED3130005D015D25263534373637072226353436373637363736333217161F01163332373633170726272623220716151406070E02070607060706151416171E011514070623222E0135343E023713

141633323E0335342623220613070E021514171633323E023534260123360A7D382572A53830242E636A2D282F2E192A21434C194025140B17162543110B1717201C15394F513B1225120B2F5B9F53709BFC97C15222445F489D51462338302D195B3C656C0B643C3B244054883C62422B591E2F34111B492B0176864D9133261732210E0A05110C070403106804020401363C376D3025382B20170A15160F0D17333E6C734885587A4C753F27524D3C1D022C605918305A7E36674DD2FD5B312338502E5535461D30

4A2A375700010021FFDD041905C9004C013C40DA5030503150326130613161328030803180328542854495309031953293439344100632010B050B160B1710011002130313461047104810492301230223032927293B234623472348234934033404351C351D34453446AA04AA05AC07AC08AC09E501E747E748E549F601F647F648F649260D0D09820547015604046347461447474617471610401121C01201124723313B473C3C63272814273129822847271023474E464740493D3C3B37043440232728032C1F16

121717341F09050403010D0D9A0ED14012211100405D1F074901000B40302131742C5D340B003FED19F4181AC81A3FC0C03FED3F1AC81AF4EC11121739111239111239111217391112173911123939011076D6182BD076D018E0C8102B1076D018012F1076D45D181AC81A2BD076D018D076D0182B10E076D018F0C8012F3130015D00715D1727363736131237363534272627373E0137170607060703363736373E0137363332161514070607021514163332373637170E012322263534373637123534262322070E

0107060706070607063514332115493713071A0F7E0B5FDF5A150F1D33146045375248357D2D21232A2906132F590F0D0F131C5B17AE9A2C1E2908062D5C14101B29459B3C2C2814011F315F1B13AE9860017A011A8F370F1A0905023D073321113A7EDF5EFE3E693F5E392B470F0A2A2D252361A0FED0461913090E4136814D3235222D21A8015C2C14161727BA835EA64F340109130002003BFFDD0284058F000B003700A5404A3E0C3E0D4C0C4C0D9B2B9B2D9B32CB27CA32CA33DB32DB330C00B706061A0D0D32

472D3131631B1A14101B251D1B10471A0F1701

0F178017021739181A1B1D0420143332312D04362A09B80136B50300400C210DB80267400E14365D14074024212574205D2A0B003FED19F4181AC81A3FED1910F4181AC81A3FED11121739111217390110D65D71D0762B18D0D001C8102B2B10C076D01801C82F10C02FED3130015D01343633321615140623222601273736373637363332161514070602061514163332373637170E01070623222635343736371235342623220189513B323D4E3C353CFECB198969243A2D1C151825080D761C110A0C1A3B491B4F

C82F1E1C222C090B29540D0A2804FA42533D3247573EFDDE35654A14200E082823262940FE52851510120E1F32353881110B33352A2D3C9A013E380D0E0002FF88FDCA02A2058F000B00370079402EB20CB20DB20E0300B7062D0E24241C8219471A1A632F3014302F06107F2D012D392D2F3003362A191A1C03121F09B80136B5030040232124B80267400A1F5D2A060E0C1269360F003FEDC0CC3FED19F4181AC81A3FED11121739111217390110D65D2BC0D0C02B1076C018F0C8012FC4102FED3130015D013436

33321615140623222601363F011E01333236373637361B0112353426232207060727373E0137363332161514030A0106070E01232201A7513B323D4E3C353CFDE111031D2326180E180D12241C3637350C0911293F4B1AA95864281C18181C3D62635D554052322104FA42533D3247573EF9153C67062E160D131C9D7901090117010A2F110F15203937793E340C07232E39FEF9FE5EFE9EA85A43280001005CFFDD045305CF004C017140FF2C185A18020A2A0A2B0D3F0D401B071B081B091B0E1B0F1B15122D1236

1237242E242F36163617392E392F393F394039413649364A364B4C064C074C084C094C0A4C0E4C0F4545454645475A075A085A095A0A5C0E5C0F562D562E8A088A098A0A8B29892C892D893F8940AF1AAA29AC2AAF2BAD2CA82DC905CB08CB09C90AD616D617FA07FF08FF0942061501DB2CDB2E0243412C432E372A232C41434337482C1921180E0905470182040463184814184B82184817484717104012211013011323211F3701203701374E090504010E49484B45413C432E2C322C432745191D171318404521

18184B1D0E9A0FD14013211201275D1D064B01000B40362137B474325D3C0B003FED19F4181AC81A3FC0C03FED3F1AC81AF4ED111239101AC81A1112391239111239391112391112391112393911123939390110D65D71D4C0D05D1AC81A2BD076D011123918E0102B10E076D018D001C81112393911123911391112391239080772313001715D005D172736373613123736353426272627373E0137170E01070B01373E023332161F01060F012E012322060706071612161716333237363717070607062322272E01

2726270607060706070615066D11362C1B3B33

10080F110D801263E55118071E33453DA664B38040101D0D011D080B202D0E337530252E087F48140B0C1221343215A24E3616141211173236500C431A100B141407681719BDC780012C01097E381615120302023D073422152288E9FEC8FEDCC572973103040A6136080A0A2D241C3318FEA8850E070F18243A6C2F15080B0F5891D925472A1A274D772C2C07000001008AFFDD028D05CA002800E240AB340034013B103B113B123B1334284300430149104911491249134328691069116912691378107811781278

1389108911891289149C119C129C14AF11AF12AF14BA11BA12BA14CA02CA03CA11CA12CA14DA01D902D903D911D912D914DA28E900E901ED02EB03EB283418140F470A0E0E631E1D14101E01211E471D10401B21101C201C601C801C901C051C2A211E1D03251C0A0E0F14040618189A19CE401C211B004000210174255D060B003FED19F4181AC81A3F1AC81AF4ED11121739111217390110D65D1AC81A2BD076D018D001C8102B2B10C076D018D001C83130015D2517070607062322272635343736371337363736

35342E0127373637170B0106070615141633323736023C1EBD5032241E23121A0F17079A170903021127730ADBC4196C7B260502100B102137E9368034140E1720393253802102B1742F19100C161608013B1A4416FE32FDC5A432120E1514111B0000010029FFDD066C03D1006E01B140FF491D553B553C553D503E503F5040643C643D603E603F6440803C803D803E803F8040AB3AAB3BA440F440150440154002290329043C323C4A3C4B8B468B478B489C469C479C489C49AA31A533A534A535AA4BA657A658A6

6AA66BBA31B533B534B535BA4CCB2AC533C534C535C94CC952C953D92AD433D434D435EA4AEA4BEA4CF31DF529F62AF431F432F446F447F448F449F54BF551330F191A69030F07044701820303636A6914696B826A47266901691626255E5661825F475C825E5E635756145658825747562147824A474D824B4B633132141031164F218F2102212F3E3E3482324731101F2F602F802F032F7032312F3404372C1A1926251621064440171E6A695E5F57564A4B32096B6503040703010B400E210FB80267401C134F5D

2C655D1E0B5D1307586B005C015B000B403D213E74375D440B003FED19F4181AC81A3F3CD03C10D03C3FEDD4EDD4ED1019F4181AC81A111117391112173911121739111217390110D65D2BD076D018F0C8012F10D45DC4102B2B10E076D018E010D076D018E0102B10E076D018E01112393910D05D76D018E0102B10E076D018D0C811123939012F3130015D00715D172737361237363534262322070607273637363332161514070603363736333216151407060F0136373637363332161514070206151416333237

3637363717070E010706232226353437361336

35342623220E01070607060722060727361237363534262322070E030706070669142F134E0F09120C09111A641EC9573D2B1720080C4C7C92B46F1E29060A163C56557E825C422129264C270E0A080B1326480C1C7D475D2E19141E2D090D4932130E165A822C3D2935062B426717265E1A11130E181C43A35E3A03212F521D1C953F0149683F1C15170A0F4B32A82F21231D1C293CFEB5E185A52B251C224059E4A55F8C45313130458BFEE7BA1D111004071A310A335E33330E0731272431420118BD341816348D

4B6782AC6308141C62015E96612614151028D1C8F53601080E00010025FFDD043303CC004900FB408C2826283C49044905B529B52AC429C42AD529D52A0A3A1C50335034603360348331833280338534853593319332903393349335C91AC91BC642C643131904460E0E08820547018204046347461447464717101522333B473C5B3CD93C023C6326251425332A8226472510224B3C3D3B3A0437402225262A042E1F151746194705481305080403010A400D210EB8026740140A5D13405D1F074801000B40322133

742E5D370B003FED19F4181AC81A3FC0C03FEDD4ED19F4181AC81A111217391112173911121739111217390110D62BD076D018E0C8102B721076D018012F10D42BD076D0D0182B10E076D018F0C8012F1112393130005D015D172736373E01373635342623220727363736333216151407060736373637363332161514070607060706151417163332373637170607062322263534123534262322070E0207060706591A19162F33130A0E0A22731BC2583A281C1C0C123F5E926B6342322A2C0C1442210F0A07060B

1221343319A5633B332620921511161C3DA25F1823087F1C18414CA6D67F4319111057369C30201D232B3B5EEFAE8B653222302E243B5DED77553913130A07121C29387E301C392A4F02014A13151023C6D25D874A0A0000020065FFDD040B03CC001600260040402F0A140A15021902190329022903E602E305E90EEA0FEA10E91DE91EFB14FB150D23B407071A69130B17620020620C2810D6EDD4ED003FED3FED3130015D71133412373E0233321E02151402070E0223222E0137141633323E0137363534262322

06026553301E99B767568E4822573929AFA165778B36EC5D553953451D2A614E507259011C7C010C3B25794F3453744583FEFB4530753D5493607B6A377B6C9E907A6D77FEB20002FFE5FDD5042F03D00038004C00C74072030103050333033403350337034A034B140014011433143414352401243424352437353335343535A901A90516111E1C0431110A8205470182040463314B1431358231474B100F1A4F1ABF1A031A4162102920293029402904294E4B39453B1E1C1A31042432352F04050A03010C401021

11B8026740100C5D1707455D24073B692F0A35

01000E003FC0C03FED3FED3FED19F4181AC81A11121739111239121739111239390110D65DEDD45D2BD076D018E0102B10E076D018F0C811123939012F3130015D0327123736133637363534262322070607273637363736333216151407060736373E0233321617161514020E0223222706070607060706011633323E013736353427262322070E02070606155A1B3A3D210A030C0C121F34391B763D5F3925181D1F0A0C396041329C7334202B12196862CC885C3B393D1C07032534700144635E38534E2D22100C

171929387C691A12FDD50F014D72F40122A24A1D141F100F1B2A335D2940170F21221A3241E0934635712D223447557DFECD7C8A3E0DF497264204091502A1353C9FA780684A1812141C7EB24F340000020045FDD5041703CD0029003E00D04091A50C0105220523052405261B201523152415261B3C1B3D2906290725232524392036223623393E45234524452657217909AA2AAA3E19366240117F118011A011C011E011F01107111D07010A3E472A2A6320211420268221472010401C210F1D01201D601D701DBF

1DCF1DEF1DFF1D071D403E2A392D21201D2607010A0A1B0E181D211C2D691807395D0E0B260121000E003F1AC8C03FED3FEDD41AC81112393911123911123939111239390110D65D711AC81A2BD076D018E0102B1076D018D0D0390110D45DED3130015D005D0127363736373637361337060706232226353412373E023332161737170607060B0106151417220706132E0123220706070607060215141633323E01373601D213200607070F30054F36A0AD774D333362381CE67C4D3E6E3E5F2414142F5879140322

3975FD255B2538281B16262F1F381A131D71A1283DFDD52619070A1128D5150164E6E87550634A7B015D4C27AC421B1C3915294DB5FE55FDC8612B06180A13054F1617130D1F368B5DFEF62A25224EC94C760000010032FFE2034F03CE002F00C04070062C162C262C39034A0359036B03742C9904A904B42DC42DD323D324D325E223E224E225FA23FA24FA2515092219222922031A190D0D07820447010303632C1A142C2C1A2D172D17101521402521240F215F217F21AF21BF210521312B2C2D271A1917150012

04030703010C400C210DB80267400A120725271F072D01000B003FC0C03FDCC43F19F4181AC81A11121739111239393939111239390110D65DD41AC81A10DC2BD0C011123939102B10C076D018F0C8012F10C0313001715D1727373E013736353426232207273E0137363332161514070603333E0137363332170E010F012623220706070603070678152E272C0E060D0A20761988843B1C1318220A05440E4A983B27311D20111802173138352C3D4050239A1D1E1A9F97D96F37241D135C376E5D180B27251D331C

FEDFAFE426180A3B9D3B0E2A253295BAFEEE18

060000010035FFE6033F03CC003D010C40D7A50DAB2ABB07B30BB30CBA16B424B333CA07C40BC916C433DA07D40BE00BEB16E724EB27EB28E332E333F332F33317050C050D0D150D1601320133140C140D1C141C151C163C283C290D1A0F1A10162D162E290E290F2910262C262D262E6A0F6A106A276A286A290F2D0E2B252B262B272D282D29212B212C080E0D292A0422050F1E1F1E021E22691B180700001000020005693A360B0D0E09112A2930263F264F265F266F267F260526A10F111F11022F11FF110211

3A01FC00203A803A023A1B30094009500960090409EC301B1EFC1D301B011B3F10D45DD4ED10D4ED5D10D45DD4ED10D45D71ED5D1112393911123939003FC0FDC45D3FC0FDC45D11121739313001715D00715D1333171E0133323E0135342E01272E023534373E0333321617060723272E0123220E01151417161716171E0215140E01070623222726273637365F3E032B8B4A4053272439508C5D36171240A96143427D3C14113C0C307A3A2D4F2826268858172C432840963B5379463A2A680C0B11012A60324327

4B25253E1D0F1B37653A3736284069221F205B94632D2E2643273723231810080E3857324964781D280B0826294C6C000001005EFFDD034905150034008A40373A083A093A0A0317F5130D47100F0F6326281426012E822826471021401A21801B011B36282E3126090D060F171B1A1D23F5401121260FB80379B41DF5205B13B8036540094000210174315D060B003FED3DF4181AC81A3FE4E4FD3C1AC81AE410DCC0C011123939111239390110D45D1AC81AC42B76D018D0F0C8102B10C876C0D018E03130015D01

170E010706232226353437361336372337363736373635363F01170607333237170607262B01060706030607061514163332373602AA1934E0432D213B3A0A07472F0ADC0D5793020C1332309817213A67664808160558566A0623013E1304021A161F2D52010438299A1B1149382336290140D73D361233184770470B10351961FD0808531F081D9505FED25F1E110D181A192E0000010031FFDA042803CC004F011F40A7802A802B802C802D040919160D1648591A8B228B238B248C2D8C338C348C35AA1AAF3BAF

3CAA3DDB3DE91AEC3D120A1A0F3D191A1C3D42414242065943974302D6430101014B47474B824848634748140C100D470C1000083308F00803081E2B39383403192019471B1A1A631F20141F2B2320471F10401D21101E201E501EFF1E041E475139383403401B1F202303261E080C0D100413054B48474304404E1E1B1D0740002101B8026740114E5D0507402A212B74265D310B135D400B003FED3FED19F4181AC81A3FED19F4181AC81A3FC0C011121739111217391112173911121739011076D65D181AC81A2B

D076D018D0C8102B10C076D01811121739012F

10D45D2BD076D018C0102B10E076D01810C8012F7172313001715D005D132736373633321615140706070207061514163332373E013736123736371706020706151416333237363717070E010706232226353437363F0106070E010706232226353437363736373635342623224918B95F432A1E23070C2548100B140F141B2B842D4D54087169112776120B100D0F11185C136F41642218161D25040815392E2E4CC2522C242C3609062632150F100D1D02C138872D1F25282127408BFEED4E33191514111A964D82

0115620720117CFE4665421E1312090D433855303D0A07292915173457DB553E68B626143B39252F238CB96E501D17140000010036FFDD042603D10042008E40440B0D0A2F023A350B400A210B0F1E011E1E0F18014142210F0001000F622F35013518A1102A202A302A7F2A042A44401D211E1E241B1B5D24070F001F002F0003003AE23DB80247400C010603400B210A07127D320B003FED3F1AC81AC4C4C4FDE0C45D3FFD111239192F181AC81A0110D65DEDD45DEDDC5D1AC81AC01112392F5DDE1AC81A111239

3130015D1B01363332163332373637170E0215141633323E013736352E012322072736373637363332171E0215140706070E022322263534363736370E01232722060F013655472B26B038341E16171C3884494A3E2E676B2B2B0129211E2217252D23111913282414241316244256BB9F446C894A4C36853B364F5A2822152802AB010B0E0F07060F273EDDF76E6A5E399E8385702B3C0F301B2F231C07120A2F4B36554E807395AF46958B69BC5D43850D0502102C500000010032FFDD066203CB0065012840BB3F

143F153F163F173F1805091C09241A1C1A243D1C3D243D255B4C5B4D5B4E6C1C6C246C256E4C6E4D6E4E6E4F7C1C7C247C25732E732F7B417B467B477D4C7D4D7D4E7C4F7B537B549842AB1CAB1DAB24AB4BAB4CCD4BCD4CDC1DDC1ED027D028D0292C5A550C400B210C1F01416521030F00010011624055015528484A261C1C471F1D1D6324261424262426243622DF28012830A1203F503F023F6726242B221C1D151F221F210B4037213636333A335D3A070F0001005AE25EB80247400E030905400C210B072B15

7D45520B003F3CFDC43F1AC81AC4C4C4FDE0C45D3FFD111239192F181AC81A10D4C0C011123939111239390110D65DEDD45DD4CE393907102B10C076D018111239390110D45DEDD45DC41AC81AC010CE1AC81A1112393130015D005D133E01373633321716333237170E0107061514171633323736373E023736273637170602070E011514163336373612353426232207273637363332171E011514070E022322263534370706070E0107062322263534363736370E010F0127220E01070607322F1B063A2A2E3D73

3859391D5D851F13261C27191E272B42543422

16017E5C1A1A4A080B13433232496A6E2C271D211C533B2117231928295040CACD52477813401A283F7331242A597B414B3696232A13614C1D35160D140802A885602B0C060A172167F77B4B567B2E230F14324CAEB29F6A27161F124FFECC273A9A36554E01376B012A853E330D2F393F07111A584697A784EA736C7B37676E2B2E4A56110D908B5EB46047970B06010302062C1E2D10000001FFF0FFDD03FE03CA0054010840B9262126222B352B36294C294D33173318462646274C344C354C364749474A692069

21664C7920794C8610861F86208A378838BA37C50FD40FE510EB37E54BFB37200A160A171A161A1716202A162A17254E254F35170A0F4C444C544C954CA44C04372357239A23AA23BA230423374C0F042B004017211B34184418501803184041214218422B0040042103002B402E212D2B5623374C0F04471E2E315D2B2947145D1E401721181B1E07404121423D5D47475203075D00520B003FC0FDC41076D018ED19D4181AC81A3FC0D41AC81A10ED76D418C0FDC4111217390110D6D41AC81A10D4D41AC81A1112

39392F1AC81A2F5DC01AC81A111217395D10C05D10C03130005D015D073E012737171633323736373637363726272E0123220607273E01373E0133321617161736373E02333217060F0127262322070607060716171E02333237363717070E022322262726270706070E0123222610101401310D1F161815201A232D511924150F361F24501B2F511A0E294C225C6E2005045D16404E49211E26220C2C121611201F2D3525461B0F181D2512151B244C20763C4D33152A4A14101D664B382640231317082D8D1A043F

0C090E1721386728E1422F29322E1A832D22141472B71D16871D54441E105C8108380A11193D2B66A839613C1A0E134032643230103D4735B6916637261C070001001EFDD5045103CB0052010640427B3E0119412A4139163917391839193941494247495A426A4279428A3F8A408A429A3F9A409A42AB0BAB42AB43BA0BBA0CBB42BB43C514C515CA421CDA0CDA0D0216B8FFF640520452493128281E821A471619196333341433343634333143F541470C0D0D634948144947481031404521104620460246541E1A

19160423130C070D31333436042C0D413B4349484F46464345472C40272128B80267400F235D2C073B5D130B00020107694F0E003FEDD4C0C03FED3FED19F4181AC81A1076D4C0C01112393911123939111739111239111217390110D65D1AC81AC42BD076D0182B10C076D018E010D0D0C0072B10C076D018F0C8012F1076D418C838313001715D005D1337170615141633323E02371306070607062322263D01363F013637363534272E01232207060727373637363332171615140703061514171E013332373E02

37363736371706030207060207062322263530

7E1E024441274C4E503242603764503521263E0101170D03050403130B0F2038391AB94533271B24131A022D08060313080C1435785B1F2E119550172F5D4E2B46C7835E5D656CFE9B500D150E37512661D2C00107853B6A2B1D576E220A0DDF6E2B540734100C0F121F2E398C30150F1922421921FE6B731E2C130D0F0C20A2BF6293801F121276FE9DFED67DC6FEE94C36614F00010036FFE803B403C9002E00C6407DAB11AB12A718A62AA62B0507000719120A110B170C36014701570108016919181419181819

69000114000001014700191819182E011600400A0C1F0B2F0B7F0B8F0B040B462EA000010017222125231716211810172017401780170417304000212E06191C2C222C1F63270B174018211607010313000A1306630C0E07003FC0FD39C45D2FDD393F1AD81A393FFD39C42FDD393F1AC81A0110D65DD41AC810D4C01AC810D45DC876D45D18C0C81A111239111239071076C007102B10072B3130015D005D370106232226232207060727133633321E02333236371707013E0133321633323F011706070623222726

242322073602B14A5038D12112190E23395C37312A5B9B632D333E19281CFD66494F2534D52C1120353828243343312B1CFEF358653B3D02CC251B031A5005011F120F2A1023271068FD531F142604740571B01B0704454300010022FF01028C05C000390093404D0907090809090B0F0B101A0F1A10280F2810350F35103413341434150E2B240F100F151C00050533320606473232632415142424151623154724263B24232B32332C0015161005060F001C4700B801FBB5100F102B2C12003FC83FC8193F1876C4

1811123939123939111239391239390110D4D076D018393907102B1076D0111239391018D4C80110C83810C83130015D133E01373637133E0137363736373617070E01070607030607060706071E031514070306071E0333072E0237363713363534262726224243151D0E3F0D261D14173135355005372E1416083E101F182C2244322D1C0C0C43060101132924110BAA50300403064707181D160273102722304F016F4A521C140B1B0B09022702282B3630FE925B37291B1510101D282C2A2840FE7C28212F2B0D

0328032050632714018429282530140F0001021D000002BA05D900030010B60100000A03000410D6CD003F3F313021113311021D9D05D9FA27000001004EFF2C02BB05BE00390097402004080409040A040F0410150F1510250F2510370F37103912391339140E2B240FB8FFF0402C0F151C00050533320606473232632415142424151623154724263A24232B32332C0015161005060F001C4700B801FBB52B2C10100F12003FC83FC8193F1876C41811123939123939111239391239390110D4D076D01839390710

2B1076D0111239391018D4C80110C83810C831

30015D010E01070607030E010706070E0223373E01373637133637363736372E03353437133635342E022337321E011514070306151416171602BB4243151D0E3F0D1C1919212B2F3A590927391915083E101F182D2144322D1C0B0B3B070B1520270AA45721083F08181D160279102723304EFE914B452B1C1010090627011337363B016E5C36291B15110F1E272D29284101582A1F281F170C27334840272DFEA629282530140F0001006A0136047202C200190048B50C010F0BE316BE02570040000401E800C000

080257400E0FE3001B47474A0B0CC70001491AB80338B1C9182B4E10F4324DFD324E456544E6002F4DF4ED1AFD1AEDE4123939313013273E013332171633323637170E012322262726272623220706DB714D8C525BB4773625503D6F5A834C2145469536261A2F2B1B01367E8A70533739657F9159121E40100B271900FFFFFFBB0000057A06E10222002400000007008E0190015EFFFFFFBB0000057A0720022200240000000700DD01D3017B00010087FE430583058F00490089B20A5F10B80336B30F160116BA01

5800020159B21A2C35B8012AB62A27034544463FB8012AB7001A091801001913BA01B30007033CB3000EF80DBA033B001901A0401800B21A1A461F3B75B01F011F2A4446452D552C302A012A4B10D45DD4EDD4C0C010D45DED1112392FEDF4F4E410F4ED11123939003F3CEDD4DC393FC0FDC410F4FD5DFEED313005073633321E011514062322262737163332363534262322072737222E023534373E04333216170607233734272E012726270E0415141E0133323637363717070E0202ED4117183C4E2D807E3B58

4028513F3439302D1D27166A63D598423A43979A89C7757BDD313F0F4705080D39435267729B7A592B57B47B55A03D137C17175FCE81216105234523476E141D3F213224202C09189B4294C57CB7A791AE774B3B3A24C989AB170B1323191504044079D0F58F7CC0622A1D094C12503F5E1F00FFFF0012000004DC07400222002800000007008D011C0178FFFFFFFCFFF706A306D7022200310000000700D901C70149FFFF0099FFDD064F06EF0222003200000007008E01FF016CFFFF00A6FFDD06B706EF02220038

00000007008E01D5016CFFFF0050FFDA043205A50222004400000007008D00E3FFDDFFFF0050FFDA041705A70222004400000007004300E3FFDDFFFF0050FFDA0417059B022200440000000700D800E3FFDDFFFF0050FFDA044605600222004400000007008E00E3FFDDFFFF0050FFDA045C056B022200440000000700D900E3FFDDFFFF0050FFDA04170582022200440000000700DD00DCFFDD00010050FE43038703C1004400D640460609060A060B060C060D1609160A160B160C160D8E408E418E428E43AD40AD

41AD42AD43121523010A200A370A381A201A37

1A382B192A202A372A383D19A938A9390D0AB410B8024DB72F163F160216B403B8033E40121A422141413E342D347D25063E7D001A0B07B80313B513FE1A0EE40DBA0233001902334025001A1A421E3B623F1E5F1E021E2840412142282DE52C20283028402850286028802806284610D65DD4ED10D41AC81A10D45DED1112392FC9F4F4E410FCED003FC1ED3FFDC41112392F1AC810F6F55DFEED3130015D00715D05073633321E011514062322262737163332363534262322072737222E01353412363F01363332

16170607060723363534272E012322060706070615141633323637170E0101B94617183C4E2C7F7E3B593F28513F3439302D1D271668557F3A4C6059AC505C3363441111180C4409012C60333A502419162F574349C04E179C9E1A6805234523476E141D3F213224202C09189845834D80010C7E376828171D2A46604E37330A1425252F3D2C54B67661655341406B5100FFFF003FFFDD041605A50222004800000007008D00C7FFDDFFFF003FFFDD036505A70222004800000007004300C7FFDDFFFF003FFFDD03F1

059B022200480000000700D800C7FFDDFFFF003FFFDD042A05600222004800000007008E00C7FFDDFFFF003BFFDD034E05A5022200D700000006008DFFDDFFFF003BFFDD029D05A7022200D7000000060043FFDDFFFF003BFFDD0329059B022200D70000000600D8FFDDFFFF003BFFDD03620560022200D700000006008EFFDDFFFF0025FFDD045C056B022200510000000700D900E3FFDDFFFF0065FFDD043205A50222005200000007008D00E3FFDDFFFF0065FFDD040B05A70222005200000007004300E3FFDDFF

FF0065FFDD040D059B022200520000000700D800E3FFDDFFFF0065FFDD044605600222005200000007008E00E3FFDDFFFF0065FFDD045C056B022200520000000700D900E3FFDDFFFF0031FFDA043205A50222005800000007008D00E3FFDDFFFF0031FFDA042805A70222005800000007004300B4FFDDFFFF0031FFDA0428059B022200580000000700D800B4FFDDFFFF0031FFDA042805600222005800000007008E00B4FFDD00010091000003FF0578002D0082B61CF51F4700F52BB8037E402919F5164703F506

06270926F52327080FF51309021C3F194F198F19AF19BF19FF190619272B47090606B802544017161F14131623161F1F16033000A000B000030016162F2E1112392FDC5DC010D007C010C02B10C076D018C001DC5DC0003F3CE43F3CE41112392FE476D418E4FDE476D418E43031133E01351E01333612351E013B043236370602073236370E01072E0123060A011522262707361A01372206910C1A28D44E0E270E4E1F0E0F0D0C13210F154C0943E4180D1A0542B43B0E373413442176114E440645A2033016731D

060847013732020201033DFEC53C0905157425

080A3BFEBEFE853E020103460165015734040002004A02FE02EC05A0000F001B006840110508060E02AA15CA15DA15EA15FA150507BA0375001501F4400CA51BC51BD51BE51BF51B051BB80375400E0F02A518C518D518E518F5180503BA0375001801F4400CAA12CA12DA12EA12FA120512B80375B10B1C10D6ED5DF4ED5D003FED5DFDED5D31300171001E0115140E0123222E0135343E01330E011514163332363534262301F0A35959A05758A15959A355587C7E58587A7C5805A059A15758A05959A05857A159

7D7C58587A7A58587C00020050FF2E03A304AA0026002F00A3406B141114121413330F331030113012070B0D1A0C1A0D290C290D2B1D2B1E390839093A0C3A0D3529392F4A0C4A0DAA0CBC0C11160D0C0026042617192F27241804182507070602270C240225260002071121100D2F161C17181C021006402526082107061F1721182C621F3010D6EDD41AC810D4D41AC8D4C81A10C4003FDC3C10C4D5C4D01AC83FC0D83C10C0DDC010D0C82F070517103C0717103C3031015D005D013E01333216170F012E012B01

03323637170E030F0123370622072226353412363F0233030E0315141617029C113B142D6218392609485414985B7C4D022C75592F1329482603240A64AD6AA293612A497B34455B443E4403E203051E1DD101525BFCE13A2B441A38250C05D6CA01018E96AA0118903D27DAFED90B387DEC8172680D00010002FFDC04B00599004C008A40093A2120401D49460000B80271403C161D14161D161D1916160A40400A30402E2F0A0E210D000A200A020A4E1D46160000112B2F302538472021382B303309404041213D

090D0A115F0703003FEDC0C43F1AD8391A3FC4D9393939762FCC1810CC1112392F3CDD3C0110D45DD41AC810D4C81AC010D411123910C8D007102B10D0CC11123939393130013E05333216170E010727362623220E0207323637072E0123060207173637363332171E023332363733030E0123222E01232206070E0123222627373E0313220607371E010182091B2E74A3A04034852C1A38092F0E5B676767241A0956802F0C2F993A1585C20C2A2B382E6034304E501E3E411B353425303AA8CE822A26461D1E2E12

13200D1032327C55325357230814780332356FAF87652818134AA72E0C737DA6AB9F29020255020372FEC2AC0C12131506080B075A6CFEAA0E09311F0A09262C130F3F121564EE0130020355010300020064FECB03F905920040004E00F74040010C010D010E01380139270E270F274E081A471F481D491D4A260E260F2A472A48264E350E350F4A484A494A4A66466647644E782F7830138907872089400341BB032B003700170141B41E0F490149BB032B001700370144B33D026401BA01DB000001A6B2069C3DB8

01E5B34F236422B801DB401C2121279C0F1E1F

1E021E1749413704341A029901B100B112802A012ABE012E001A0126004B012F0012032A400C34239922B121E2348F0A010AB8012FB23A8C44B8012EB40F3401345010D65DEDF4ED7110F4F4ED10FDEDF4ED7110F4F4ED11121739002F5DFD3C10FDE410F4EDFDFDE410ED10ED5D10ED10ED313000715D015D171317071E0133323E013534262726242E013534363736372E0135343E01333216170327372E0123220615141617161716171E01151406071E0115140023222726013E0135342E012F01061514161764

3A4409328B43407F3D313726FEF56331302D1F482D256FB57057B04438430441804759681F1F3DC05C23343B58662E2EFEE8B96E5D400235323E213F75C2614349B2011503AA484943662D2855281C8B5A753C3B6B301F352B4C2D53B46B3330FEF804933B365E40203C1D3A67321D2B6F424C9E47295F378BFEFA291C023B186330244337456F555D2C642D000001014801E10392042B000F002440117803780D02040C0C080000B90804B90C1010D6FD002FFD1112393D2F183C3130007101321E0115140E012322

2E0135343E01026D4A8C4F4E8B4C4C8C4D4F8D042B4C85544C8C4D4D8C4C54854C0000030034FEB804F705760003000A00240079403B0808051F1C0405031B21024003800F01000E0F2110100F47100C0E261F2504211C1C13240F1A1B1003001747132202010E030524F5400D210C2202003F3C1AC81AE0D9173C10DC76C018DCC5C4C4C4C41112392F1AC80110D610D4C82B76D01801C82B1A07D83C101ADC1A3C1AD8173C111239012F3031090127011B01220615141601250F0101170E0123222E01233E013F01

13240035342421320402CA011980FEE73588A7D06D01B901412C8CFEE7AF2D53594A94B01E051C0C7187FEF4FECB010C01003D011FFEF8063901F9C603320308AEB0B5BB030E043610F9C8032C11050604200D0402F84F0103B8AFCD040001FEF2FDCA046905C800580073403C404E214D4C4C54055447555563424314104347420F13332D1C3B0F5A302F1718042A43424A3E5451553E7D0C000121550506262A69210B4E515D4A0F003FFDC43FFDC43FDC1AC83FED111239111239391217390110D6C8D4C8D4C810

D076C0182B2B1076C0C0180110C02FD01AC81A313013373637363F0136373E0233321615140E01151417161716171E0115140E02232226273733151E01333236353426272E013534363736373E0135342623220E010302070E02070623222737331E013332363713262322460722A2050A22112A3EEB954E5F8148CC0C10304A111918428A814D2E60323931214E2D47522461361D1F32621323275A494365323E7B402E67A8533C2C1F2B401E193D19273D2AB8392424033633083A0205892F2F48AA3D7F5B4C8BC8

3B1E1B273C5D182643234581884B1616ED6622

234F3B294F8C4E471C22483C761C34743C4C594BA0FEE2FDCBD79BD0B72C1F11E02B2850D603A80200040024FFDD05D6058F00340043004F005B00D440113B513B553357335B04390C390D390E030DB8012D400E1617141617161617121C1C20063EB8012D40116F20012020120630120112320001003506B8012D400E2C250F341F3402342C122C4D4753B80124B24D5D59B801244020475C401716121C1C084208424211243301121160000100263B40240024444A50B80124B2440956B80124B14A03003FED3FED

111239392F1AC8C82F5D3CD83C3C1112392FD8111239111239391A0110D6ED10D6ED111239392FD85D3C10FD3CC05D2F5D1112392F5DED1112391112393907102B3031005D015D01352E0127263D013633321E01171E013B01352227262726272E02273E0235342E0123211532171E011511140706070623271513343736373633321615140623222713200011100021200011100025200011100021200011100002EF3119050A220D29292329412A377720101C391A06112E20234C5130346F6FFE9C330810100604

0A11280EEA09070C261B47564F75132367FED2FE5501AB012E012E01ABFE55FED2010D017AFE86FEF3FEF3FE86017A014C29020709102CEF03173B5F922629101A7B38091E36160C1334592F3364332C02041931FDCB250B090507012902BE130E0A0105574C496703FCF201AB012E012E01ABFE55FED2FED2FE5551017A010E010C017CFE86FEF2FEF4FE8400030024FFDD05D6058F000B0017003D00884035142411331134361A361B361C451A451B451C541A541B541C0C7B0D7B11751475167C1F7B35063A1E36

212D2C002601261E2600060CB80124B2000912B80124400F06032E2D182119360022192209030FB80124B2093F15B80124B1033E10D6ED10D6ED111239392F5DDD2F1AC8D4C8003FED3FED111239392F5DC0C41AC82FC83130015D005D052000111000212000111000252000111000212000111000011706070E012322272635343E0133321716171617152326272E0123220615141E0133323E0102FDFED2FE5501AB012E012E01ABFE55FED2010D017AFE86FEF3FEF3FE86017A022036151B31945AC16C5170BB76

27280F6B311B44130E18563D648F5277452D51302301AB012E012E01ABFE55FED2FED2FE5551017A010E010C017CFE86FEF2FEF4FE8401C317361C333D946D917ECF6407021C0D0ADA491B2D3AA89970AA4B1E2C00020039022B07C90577001C004D00AD40393F1E4E1E5F1E6E1E043B354C35551D5935661D6935731D761E793377347835831D861E8A3388350F04031C21001E2C2F3D4010132E34353F12B80181B6214C1F1D293603BA01C6000001C6400C01091801021F34331D353628B8037AB333353436BF02

2D004500030139000B037A00160139B1004E10

D6F4FDF4D4FDD4DDD4FD111239111239003FDD3C10E4EEC8C83C3CC8C8FD3C3C3C3CC8C8C8C8C8C8C801101AC810C83130015D005D13352115232E0127262B011114161716171521353E01351123220E0107251B01211523220607061511141716171521353E013511012301111417161716171521353E0137363511342627262B01353903003E04181C28395B12170E45FE6454335C403C1C020448F9F701192721160305120F45FE944425FED116FEC40C09140739FEEF3C1F040807090D1C1E04A0D7D73C340E14

FD8D291F0905083636062E32026B1C383ED7FDBA0246330B080C2CFDCE450E0B083636031F440245FD1F02E1FDAD2E120E0502033636050D0A182402531E1004063300000101740461034F05C8000E0016BB000701E800000206B30AB8010F10D4FD003FED313001233F013E0133321615140607060701CB57F33D1C2312273320331F080461FD3F1A1131231B2A1B1105000200CF049203630583000B00170028B10C00410A016E001200060206000F016E001501300003016EB1091810D6FDFEFD003F3CFD3C3130

01321615140623222635343621321615140623222635343601483246473231474601D6324646323247460583463232474732324646323247473232460001002C0041043A03FC0013007240240401001104101005070A0B0E0406060F400F2110021209400521060D0914400621050407B80106B601400A0E80000BB80106B60E4010210F110E002F3CDC191AC8181A10FD3C1A10DC1A3CFD3CDC191AC8181A0110D63CDC191AC8181A10D43CDC191AC8181A0710173C0710173C303101072115210727372335213721

3521371707331502CC8401F2FD92DA6F95EC016D84FE0F026CDE6D95EC026B9992FF54AB929992FF54AB920002FF85000007390577006B007E00D940757B5A5C47795C5C06790706070706000A0A0A6E003B6C58566D56476D6D572B3B142B392E3B2B3B47102B1C455548461C2155201C80565C675A796E6D03737B07060112585A8D7B6C3539388D322E306C303D2973202BE2295F125515F51B1302463BF53DB549F54F55675501556AF5684E4B030008003F173CE4EDEDEDE4FDE4C43F3CE4EDFDE4C4C4111239

392FC4C4FDC4C42FC4FDC41112393911121739111239390110D6D4ED10D4C0ED10D42B76C0180111123939102B1076D018111239390110D810C02F111239390710C010C0077610C0C03130233736373E01370136373635342726272E0123370433323736333237170607060723273426272627262322070607031633323717072227262B0102071633323736373637363717060F010623252207373E02373E01373637260506070E010706151417161716330726232201133635342623220607060706070607163332

7B0B4B170E1B35028D250A0605080F1E82160C

010999E3DA8315CB210A0C0B170A4401070911305B8D444E1F0B318F42A752081E054A7FB442481AB12A81633C140E0B1E1A472F0F0C7465FDA7754E0C44271808042306021D4DFE8D61361F310402090C1A245D0B72AF7503B1521A10120B0F0617432A5F3EA1262FD2410207041C4A03EC38160D0C09050A04080444040402020C244080598A2312070B080E04AB3CFEDB040C0C670408FE88C5070D090F0A1D4E6501D0800B0502023D060D181509BB2611A50402996239600E07050C090E06074103027601E096

170E0F0705175E3A915FFD040000030068FF92065C05D9001B0028003600DD407C1900192A1A1C2A291D290F0E0C0F0E1A0C0C0F1D0D1D291C1C2A001B00191B0D1D290235200C0F02130A1C2A022F2700190217040427351304170A205F0A400E210D0A032F5F17401B211A17091D290235200C0F02130A1C2A022F270019021704172F200A041304277504401A211B00040104357513400D210E133810D6D01AD01A10EDD45DD01AD01A10ED1112173911121739111217391112173911121739003FD01AC01A10ED

3FD01AC01A10ED11121739111217391112173911121739111217390708103C083C08103C083C0708103C083C08103C083C31302526272635343736122433321737170716171615140204212227072709012E0123220E0207061514090116171E0133323E013736353401163D1C26222BD10150DAECA0A849A244202FCDFE79FEFBF29FB14A01560334319F5E6A9070671F25036FFCC71C222F884D6B9B7C36569144516D7A7A8CB40120A867B146AC464E758BD3FE5CFF70BB45016C036543473E79D391B5924102B3

FC952D1C27304DA09BF4D163000003002200E2059A036C0019002700340048B72013062E040D0028BB0126000D001A0126400B00352013062E041703321DB80122B41017032B25B80122B10A03002FC4FDC410D4C4FDC4111217390110D4EDD4ED111217393130133436333216173E02333216151406232226270E02232226371416333236372E0323220605342623220607171E0133323622AB9984A7715B3E72559A9ED2A85FB45F56556F4684A86E78564F884B1743455E434A660496735B508F4B60346C405167

022292B463816D4239A87A96CE5371504731B688698559571B61774D846A6B83716D80444C890002002C0000043A04BC000B000F0033B20A0009B80106B30307050DB80106B50C080E010300B80106B406090D081010D63CD43CFD3CD43C003FFDDED43CFD3CC4313001211521112311213521113301352115027C01BEFE4292FE4201BE92FDB0040E030096FE64019C9601BCFB448D8D000002002C0000043A049C0006000A006B40253A0456035704550558066A006A0167036705A806B906C9060C380068036305

030340020102BB01EC000400010106B3400001

00B801ECB2050608B80106400E07080603020305090C040100080B10D63C3CC810D6D41732003FFDDEC8F45DFD39F45DC83031005D015D13350117090107053521152C03C545FCC7033462FC5D040E02607E01BE83FE8BFEA37ACD8D8D000002002C0000043A049C0006000A006C4020360446045A035804590566006601690369046905A606B606C7050D0540060106BB01EC000400000106B340010101B801ECB2030208B80106401507080603020305080B0401008F09AF09BF0903090C10D65D3C3CC810D6D417

32003FFDDEC8F45DFD39F45DC83031015D0115012709013703352115043AFC3B420331FCD2616B040E03097EFE4280017C01587BFB648D8D000002FFF9000004AE057700440049013340413C153C163C173C18331D331E3120312133223323441D441E644364447A3D7A3E7A417A498B418B49141713122D49482E48472E2948423D2C4529484847482E2929B801D440121A151419161A151A1A1E151E031512471111B801D4405E0100141001413E42423D0703402E213D48433F3D38420047011003384B3D3E392E

2D35292C211A191D030111120B001242484015801945494103162C2D3E030F190119190B1D070B5509F5080A08213539031D5537F51FF5203638031E02003F173CE4E4FD173C3F3CE4FD3C1112392F5D173CDD173C101ADC1AC03CDD3C11123939391112391112391112391112390110D4D42BD076D018D012393939C0101AC81A10C807103C3C102B2B1076D018C010D011123907103C3C2B100876D005073C3C07081076D01807053C3C0110D8C03031015D01030615141E0133072505373236333E013713213721

03233733032E0123351725070E0415141E021733373E013736262F01371737070E020F01330721032107011E011737025E39042687180BFEA0FEB30B1346044F350E3AFE970C015D45EB0CC8530C3F27FA01190D19193E1C0602201E0CF770142405052A1F3303EC91094446554641E40CFEFCA5017C0CFE330B240C810212FECC1D1C34230C4209094206083A5201364601004601392A344207074004050F21250E100C7B7620BB23511E1F2704043E050542103A776F6746FF00460146317D21CF0000010001FE38

047C03E00042008340444F2E013D120537251D1D6325222522470905252E4028014F2801284412470F0F630509140509050902090201000243373D0C3A2E212F742B47173A000201323A0B200C07003FC43F3CDCC0C010CC76C43DF4181AC8111239390110D4D83910D4111239072B1076C0180110D45D71C8D00776D0180710ED111239111239313000711307273E0112361236373E01333215140E0307141633323E03373E01333215140E0315141633323637070E012322263536370E01232226270E021514C0A1

1E082C5A2943280640850F13183E2517062151

437E43293A18428911182743331D1123196E1E0456BE383527040B31A06B4E780C0D0C0DFE743C1E5CCD0167B8011CBD3B101E06034AF1AB7144767095CF9FF2630E1C0E056BC3BF9729444A4B1D2D587957532E38779B5F533E5E8B326A00020035FFEE042705A000180024003A401C04221F62131962000C210D00402522040416091C160B0D210C091003003FCDD41AC83FC811123910C801101AD4D41AC810EDD4FDC0C0313013341224372E0323220607273E0133200011100023222637141633321211342627

22029B760106D32F4E73834D3A7D251924E97001100165FEBDE6A4BFEE5A527C901F15D2B201669D0110C421505A572B422E18488CFE5DFEBDFEDEFE56DA90928F013B012F59952EFEAB000001006CFE6F05390577001500534027000B0B14020C634015211214020A470A400121040202000B0B1201010A0C15120503041311121710D6C8C0D4C0C810D4C8C83C1112392FC8003FC41AC81ACC76CD1810D4C41AC81AED111239192FC030310901352113232E022321090121323E0137330321350297FDD504961C4C

0A455966FE1301A1FDF40272665946094D1BFB4E01DC037A21FEB8505A25FD63FCE11B5C51FE651700010069FE8A067E0577003D0037401E08352F030E55093430030D001F551C551D023D571E2F273F00571D0E143E10DCC8C8ED10D4C8C8ED003FEDEDC8D4173CFD173C313001111716171E02171526232207353E02373635112726272E02273521150E0207060F0111141716171E02171526232207353E0237363F0111021504010A04132961A5A295806D260F050803020904132A6006155E2B13050901040308

04020D236E8096A0A65F2A14040A0104050EFB4FC5701E0D100803580707580409133A63BE0348C1731D0E100902585802080F0E1E6EC7FCB8982B83100B0D0904580707580307100D1F6DC804B1000001FFC8FFEE047603D0003A006C402C2A27631A1A10302D38305735400121353000010046400F2110213C0049003506350B1D240B14472D38F8172AB801C2B70CF84010210F0607003F3C1AC01AF4FDC0F43976C4183FC93F111239762F180110C4D41AC81A76D45D18391AC81A2FFD39391112392FFD393130

0327343E0233321633321617323637170E02070E01070E0115141633323637170E0123222635343637222627140A01150E01233236123722061424283C6A602CF932455C3E6A6157180C243C0C12362F04074A5E18320C0C3B9F306A63030252B03507072CA02A01262D105A6601E2102EBB9A4F1804020E1C0E153F6B170607052CA73DBFA80A082928327E805FEB9C040A4AFEDBFEB30C0E20F1015DAE75000001FF41FDF802F005F3003C00244011330D25140D07001B62033B621E1E0A283D10D4D4392FFDD4FD

003FDC39D4DC39313037032635341236333216

151406232226272E022322070E011514171316151406070E02232226353436333216171617161716333236373637363534AB0E0676CF6D4F5844332331100E13100A19141B15051005323527607C415358453625300C080E070A070912230C09060EFF01799363E70119854F3C3546171612450D171F95784B7BFE6D70D4A1E85943542D4D3933421C120C361308071B1C153167879200020061032102D80577002F00410081400B0A4001410B0A3030470A0AB8037B401027221427100129402121224727102938B8

037B402013420A040B2927262C220B41303B3340013C002C04643B0F1522212164331D02003FC8F41AC83FC8F4D8D41AC81A111239393911123939391112390110D6EDD42BD076D0181A01C81A10C82B102B1076D018111239393130017101170E0123222635343736370607062322272635343E0137363736373633321617371706070607030615141716333236032E0123220607061514163332373E01373602C90F5D6226161506012B5A734B411A11151A3A0E083D711A233124402A3B15081702073E0C060506

091F72163E17263E1B39120B0E121D78192503C0244A30171C1A1F05B99E5538151C36347E8B140C2A4F0A0E0F1222101A41091DFEFA30100B08061001840C0F3454B44B12160D15962C420000020068032302C305770012002600234009216A0602166A101509BB037B001C0013037BB1002710D6EDD4ED003FED3FED313013343E033332161514060706070623222637141633323E0137363534272E0123220E01070668373B69724864623335465A3E52645F993D2E263D32111B0A0D3123284034101503E1489F

414826615D4C9E324221175F4D36402750365759311721222B5C425A0000010039000005ED05A8004D0067B900430127B31C023900BB012700280011012740112B82290E821036F503F538010503340828BA012700390139B73F31323F75221511BA012700000139B64808074875154E10DEED3CC810F4ED10D4ED3CC810F4ED003F173CE4E4D4E43CE4FE3CFD3C3FED31300111262322072627331617161716171637352E023534373E0137363332171E0215140E0107060715163736373637363733061526232207

1136373E0235342E0123220E0215141E01171602A7A96D64E5010E530C0203070F3D86BFA3E7714232A96AA2B0B8A972A95D5F9C5A4661B37F520F0B040107530FE56475A14B273C542F75B96F6F9B6330335A3B23017FFE81070768E545070B050B060B025A1794ED8997795A8B28393E2D9BD08082D580221B0D5A030B060D09210C25E5680707017F0F172372AD6DADD2605279AE6473B3711F1300030049FFD8059D03CE00390049005600A74010130013392000200120390527081A513ABA01500015011F400F

315B4A4A052445692A5B1A7D240700BA011F00

0103104011377D055B515D0B0B0827424E3A73316315B80192B54A474A2D0E01BA022400000233B242A12DBB034A000E001E0349B220731FB8024640094EEC0F0E600E020E5710D65DEDF4E4ED10FDEDF4E4111239762F18E5FDE411123939003FEDF4EDFDED3FEDF4ED1112392FE4FDE5111239393130005D2517060706232226270E0123222635343E02333217363534262322060F012F01373E01333216173E0133321615140604070615141E0133323601363736373E0235342623220E01070527220615141633

323E013736054019BF86584B597A1F7AA04F606D4875CC9A1223087A6F1E3E2134250F4725874574AD2362B567636578FED487122249293AB2FE9E4447341A223D252E342A4B381CFEE9419E9C3B3A3960440F18EF398534225A5E6E4D70614F90542D013727707B080888079A331B254B5B50575D50648B600B7B3D324C264001540918120F133E562425392B5250D301825A3E40325634570003001EFF940431041D001C0026003400C9406F1B011B272627341D3411100E11101C0E0E111D1D342626270100011B

000F1D34210E1102130B272B26011B0219040426341304190B21B40B4010210F0B072B69194000211C190B1D34210E1102130B272B26011B021904192B210B041304266204401C210004346213400F2110133610D6D01AD01A10EDD4D01AC01A10ED111217391112173911123911121739111239003FD01AC01A10ED3FD01AC01A10ED1112173911121739111239111217391112390708103C083C083C083C0708103C083C083C083C313017372E013534373E03333216173717071615140E03232227070126272623

220706021F01161716333236373637363736271E7A181C2D2050B3A35F344C4F6F3D6C40455AB9B068774D7202A31A1D2B3D5135484802111B202B402D401F2B1A22130901378A2471337B996D6F8344111F7B397A4D7B7EFC848244347E037A32141E3D52FE96566E3D171F2027384D668D4857000002FFF3FE3202CD03CD000B00330065403426112612262B262C04400521100C200C300C030C460C22091D181F2203A209070692001D4033210C31CD0F0F261D401C211F1D15B8010CB1263410C4EDD4C01AC81A

1112392FEDD01AC81A10D4ED003FEDD4C0CCC4111239762F5D181AC81A3130015D011406232226353436333216031E01151406070E0115141633323E01371706070E0123222E01353436373637363736373635342702BC573E38415843383BCF38213E507E486452325B3126413E194E7D496AAD583B523E71511A31130E2C03534F6041394E613DFEA93643253468507F7F3F425C243F5C0A9B6530274A8C5B4D7D48374B37162922191A2E250000020006FE31020F03CD000C001E0044402A1A0E1A101A112B0E2B

102B1145154516541554160A0E1E1000920740

19211A1F161A190E1E0D04A20A07003FFDDAC0C02FC0C00110D61AC81AD4FD2B39393130015D01140E01232226353436333216031706070603020706070E01072712373637020F20443138415049363F971A05020C19270103036A694817C03D1A0B03582859334037456D3EFEA01225196EFF00FE75152144111614130262C857380001005E00F2045F03200005001CB10002B80106B303030601B80106B1040710D6ED10D6002FEDCC303125112135211103C9FC950401F2019797FDD20001FFE100000453057700

0A00454021010304040006050A0008090602090606070A0401010003050A00000703070C030B10DC10D61112392FD8C011123910C011123910C0003FCC3F3CC81112392FD4CC30312103233525130133152301015FDBA30160A3018FE0A5FE2502B24426FDF6046551FADA0001FFF0FE74041C0598002B0062402F201F140C0B000A0B0E6224221F1F140004030014162115142D2429220A070B220B1F0E0E29110300072915141C1103003FC9C0C4D4CDC0C41112392F3CDD3C1112391112390110D4D41AC810D4D4

C81112392FC0C0FDC0C01112391112393130033E013F011E013332361B0121372136123332161707273E01353426270E01072107210E020A010623222610031C0F14122C1E4149284DFEFD06010521D4C84E7705552B03052F394A591F01240AFEDC0C1A1F4BA4C04E1221FE901F5E2B021B1EA60117029952E1010E2818A1090C150D293D0105D0D75259CCADFEC6FEC39A0D000002000F0130045503AE001800310078B71A9419279426A41DB80106B32F934722B80106401119A4002AC02A022A040D940C019400

A410B80106B309934715B8010640160CA40F04010419400CA7211A0D33264000A72127013210D4C41A19FC1A18C010D4C41A19FC1A18C0002F5DE4FD76F418FDF4EC10ED10DE5DE4FD76F418FDF4EC10ED313013273E0133321F011633323637170E0123222F01262322070605170E0123222F01262322070607273E0133321F01163332366455657C3B5B64B45048375D3C4F42943A4D69B9643B34332203584F42943B4C69B9643B3433224A556580395964B45047385D02855F7D4A2245213A515A686026422323

17845A68602643222218585F7E4B2444223A00020022000004C2058F00120015004B402909140B151B15032D1501131515060503141310F50E000214400E211F0D010D1505064913400021011610D61AC81AC876D418DDC0D45D1AC81AC8003F3CE4CDCD3F3CC8085D3031015D3327361B0233161B011617161707242322072721014E2C1AAAA5958A2A84C32F2E202A36FEB795AFA29F02B6FE9D523A01BB01BB018D6DFEB0FE0F766F4B5F520702A0038100020059006403BA039B000B00170042B40410AC0612B8

013DB6081408078C0405B8010DB206DA01B801

30B51214138C1011B8010DB312DA0C1810D6FDF432F43210F6FDF432F432002F3C3DF43CFD3C31300135253637170113072F01262535253637170113072F012601E0011A4B482DFEF9AF3210AC84FE69011A4B482EFEF8B03310AC8301F12DF7434327FE8EFE801E13D294132EF7434327FE8EFE801E13D2940000020058006403B9039B000B00170042B40814AC0612B8013DB6041014138C1011B8010DB212DA0CB80130B50608078C0405B8010DB306DA011910D6FDF432F43210F6FDF432F432002F3C3DF43CFD

3C31300115050607270103371F01160515050607270103371F011603B9FEE74B492D0107AF3210B67AFE8AFEE64B492D0108B03210B67A020F2EF7424428017201801D12DC8A142EF7424427017301801D12DC8A00000300A8FFE6071B011F000B00170023004640120F1B1B03A209152121090A2547474A12920CB8017CB21E9218B8017CB50692004924D7B9014900182B4E10F44DFDF6FDF6FD4E456544E6003F3C103C4D10FD3C103C313037343633321615140623222625343633321615140623222625343633

3216151406232226A85B3F3B4859413D4605555B3F3C4859413E46FD565A403B4859413E45724C61483F506247454C61483F506247454C61483F50624700FFFFFFBB0000057A07420222002400000007004301D00178FFFFFFBB0000057A06D7022200240000000700D901900149FFFF0099FFDD064F06E3022200320000000700D901FF015500020061FFDE0810058F0048005D00A140595375195E062426100D0449395D474949573944143A3A433944444710003901392C005505012C2F552E2C5F1024495D040B

2740F543428D3EF53A3C3C46382E34E2385F2A27024F5F2003575F1509014744F546B506F5080B08003F3CE4FDE476C4183FED3FED3F3CFDE0C41112392FC4E4FDC4E4111217390110D6D4ED10D4C0ED10D45D2B76C0180111123939102B1076D0181112173918D00110D6ED313001330607060F0106232522040727363F0106070E01232227261134373E0333321E0117363F013325321F01060723363534262726272E0107031633323717072E01270316332036013635342E012322060215141E0133323E013736

370724500F171F0B094B63FED806FEB7130C0B071A42263B9769E67E9B37277FB7F688579B622C08050E6102271F500B212642070C0A204615F71A78612CAC6E09216A96A2793645013351FDA21E4E92588FD397448B5A559B671D152501623163863A08060302010E1B1354421A292D77910106A0B27CD1A55F2A43383F430803030E70C64C452114051007010401FDEC020F0E67090602FDBC043402BB894D408249C2FE23DE839A5A4A7A523DA80000030062FFDA060703D0003100410054006D4039071A283A07

35002C1A424D422601224A26260B4D691F3D69

165B1F0635690B2C7D045B0B0B32620F554AA1225626732863803A013A463A5556111239762F7118FDE410D6ED10D6ED003FF4ED10ED3FF4ED10ED12392F01111239123900113939113912390111123939313025170E012322262706070623222E013534373E03333217161736373E0133321615140604070615141E01333236373E0125141633323E011235342623220706022536373E02373635342623220E010706070605AF1ABFD34F4B72286E5F47516E8D412F1E55ADB15C7456332D55263B6E37616389FEBD

5F0C23472F23462B118BFBB760503E5454345D534E31465502956C1D33463D130F352C213F33161F141BF33A8559403F4920174B95548B9C62757C48311D463C1520215D516FA078065D2B304C251112084E40747037A7011056806D3045FE9C371B0C14334E33272230371D39314545660001000201B60424024100030014B7010002030501000410D6D010D6C0002FC8313013372107022603FC2601B68B8B000001010C01B60719024100030014B7010002030501000410D6D010D6C0002FC8313001372107010C

2605E72601B68B8B00020087033804150589000E001D0069401E060206031602160316111612270327042705591159120B13041809211708B80374400B401001210F000213401718B8029A400A0F212010011004400809B8029AB30021011F10D41AC8FCC81AC8D65D1AC8FCC81AC8003F3C1AC8C81AFC3C1AC8C8C0C83130015D0117060207060706072736373E01372517060207060706072736373E013703F71E35760C1921902D1D5418534B31FEAF1E35750C1922902D1D5517534C300589224AFEC66B020927

0E209C278A6B3643224AFEC66B0209270E209C278A6B3600020087033804150589000E001D0075402809020903080A080B080C091109121A021A031A111A12480A480B590A590B690A690B111001210F00B80374400D13044018092117080213401718B8029A400A0F212F10011004400809B8029AB30021011E10D41AC8FCC81AC8D65D1AC8FCC81AC8003F3C1AC8C81AC0C0FC3C1AC8C83130015D1327361237363736371706070E01070527361237363736371706070E0107A51E35750C1922902D1D5517534C30

01501D35750C19228F2D1E5518534B310338224A013A6B0309260E209C278A6A3743224A013A6B0309260E209C278A6A37000001009B03390266058A000E002EB304092108B803744009400121000204400809B8029AB30021011010D41AC8FCC81AC8003F1AC81AFC1AC8C031300117060207060706072736373E013702481E35750C1922902D1D5517534C30058A224AFEC66B0309260E209C27896B370001009B03390266058A000E002EB2012100B80374400A04400921080204400809B8029AB30021010F10D4

1AC8FCC81AC8003F1AC81AC0FC1AC831301327

361237363736371706070E0107B91E35750C1922902D1D5517534C300339224A013A6A0309270E219B278A6B36000003000C002B0459047B000B000F001B002CB31692100FB80106400F0C0092060C0D130392190C09091D1C1112392FC43CFD3CC4002FDEED10FDDEED3130013216151406232226353436012115210532161514062322263534360233364D4D36374D4DFE10044DFBB30227364D4D36374D4D047B4D37364D4D36374DFE2498D54D36374D4D37364D0002FFF8FFF403FD059F000300070028401404

0007050303010602030503060400030207010810D4C919DC173CD4C918003FC9DC173CD4C105090601FAFDFE02020203FDFD0146FEBAFEBB0C02D502D6FD2AFE3601CA01CDFE33FFFF001EFDD5045105600222005C00000007008E00B4FFDDFFFF006E0000058006D80222003C00000007008E011C01550001FEACFF1202A9063D0003001D400D01000302020321000403000201002F3C2F3C0110D41AC8D407103C05013301FEAC03827BFC7EEE072BF8D5000002002C0001048E04630022002E017840C085008501

850585068B128B138A168B1795009501950595069A129A139A169A17A400A401A405A406AC12AC13AC16AC17B400B401B405B406BB12BB13BB16BB17C501C505CB13D601D605DA13268309830A830E830F8A1A8A1B8A1F8A209409940A940E940F9A1A9A1B9A1F9A20A309A30AA30EA30FAC1AAC1BAC1FAC20B40AB40EBB1BBB1FC40AC40ECB1BCB1FD50AD50EDB1BDB1F240F101211120F002220212000211109080607060917181A191A1719070F12171A20000609080315104019BAFFF00019036EB2211811BA03

6F00260370B5152140081008B8036EB2212207BC036F00150371002C03704011030F12171A20000609081D0C0740111011B8036EB2211008BA036F00290370B30C224018BAFFF00018036EB2212119BC036F000C037100230370B11D2F10D4EDECFC3C1AFC381A3C10EDF43C1AFC381A3C11121739002FEDECFC3C1AFC381A3C10EDF43C1AFC381A3C111217390708103C103C08103C103C0708103C103C08103C103C3130015D005D013E01333216173717071E01151406071707270E012322270727372E01353436

372737131416333236353426232206017B33713F3D7232C689CB2121221FC783CC30733B7965CB86C81F21221FCC89BA8C63638C8C63638C03982022221FCA86C833703F3D7232CB86CA1D223FCA86CC33703D3D7132CA86FDD0638C8C63638C8C000001005800640233039B000B0028B204AC06B8013DB50808078C0405B8010DB206DA01B90130000C10F6FDF432F432002F3DF4FD31301335253637170113072F012658011A4B482EFEF8B03310AC8301F02EF7434327FE8EFE801E13D294000100570064023203

9B000B0024B208AC06B8013DB50408078C0405

B8010DB306DA010D10D6FDF432F432002F3DF4FD31300115050607270103371F01160232FEE64B492D0108B03210B67A020F2EF7424427017301801D12DC8A000002FF07FDCB050005C90065007100FA405F1849170062614862036262634917144948471017170C5340562155530C4010210F0C2266B76C6C253C47383B3B632625141026322A2610472522732225262A042D1F3E3C3B3804413540312132742D5D350B040A031718144951486159626FB80136401169000F0C145D0A01400121410003486200B803

79B2184703B80365B71F075653595D510F003FEDC0C43F3F76C418FD3C3C1112391AC81A3FEDC0C43FED1112391112391112391112393FED19F4181AC81A11121739111217390110D6D0762B18D0D001C8102B2B10C076D0180110C02FED10D4D41AC81A10D4D41AC81A1112392E2B76D018C02B10D01112390110C81112393130133736373E02373E013332170E010F012E0123220E010F0117323736373633321615140706030607061514163332373637170E012322263534363713363534262322070607062327

0302070E020706232227363F011E01333236373637363F0113262322013436333216151406232226570CB31B142B6B856364294B3E222B0729215F23172A22162BB474432969371219250B1267320A07130D1422403815C49D2D1D2D13326E19170C0A1C260F192BE84056422C65AD3E2B312721211F1E12392016280B130F1D2326764429290384513B323D4E3C353C0338333A0C6E6071634A2C1B39932D013A391D4561C90109051D0F261F222B47FEAF9F2B1C0F1115122129348F4B322D2167A2016C4F0B0F1A

0A0E020502FEE1FE84C784ABA71F16115E7D07272F16131E4178B1B902660201C341533D3247573E000001FF05FDCB052C05CF006500FC4075262622194945442B454C4545632C22142C22471021215536403921383619401A21175719555A120F470A0E0E635C5A14105C015F5C475B104059215A675F5C5B03625A0A0E0F12040617179A57CE405A2159004000210174625D060B4D534C21221D2C342B443C451A551D5D5301452B404A212749B80379B322F5254CB80365B539363C5D350F003FEDC0C43F3CF4FD

3C1AC81AC4C43FEDC0C41112391112391112391112393FED19F4181AC81A3F1AC81AF4ED11121739111217390110D61AC81A2BD076D018D001C8102B2B10C076D018D00110D4D439391AC81A10D4D41AC81A1112392E2B76D018D02B10D01112390110C81112392F3130251706070607062322263534373637121336353426232207060F012623220E020F013E01371707262322070302070E020706232227363F011E01333236373637363F0113262322073736373E02373E01333217060736371706020706151416

3332373604A4198C3953361C13213109073582

381C19211F2010081E534E14211F1915246F6031091F4D5932284056422C65AD3E2B312721211F1E12392016280B130F1D2326764429292A0CB31B13297793585E3627280C06FA7C1828FA2005130E0F120EE335602232130A39312B3223C701E801018220131404374807731124555BA302070811670305FEE1FE84C784ABA71F16115E7D07272F16131E4178B1B902660202333A0C68647C6B41240D1E2323311882FC52A21C161216090700010050FF8C03EF0577004300B7B608F50B471AF517B8037F401105F5

00471DF52020142C3EF5414726F523B8037F40273BF5384729F52C492C142F12F50E144432F5352F0208053E3F194F19023B2314172023472F2C2CB80254401A380B1435380E004147380B0B381D1A2930004000021E383845441112392FD85DC0D0C010D00776D0D0D01810C02B10C076D0D0D018C00110D85DC0D0C0003F3CE410D43CE4111239762F18E476D418E4FDE476D418E41112392F18E476D418E4FDE476D418E430310116333236370E01152226230E01152E01232206073612372206233E01351E0133

3E01372206073E01351E01333E01351E01333236370602073236370E01072E01230602024718363E8A1C08191BDC3012250E481E1F3A190E510829EE140A173F974B1331152AA76007142DB2491023103F1919480E0F410A49DB1E09150348AD3F113701A3030806146A1A0C66FE32020201032C01392F0C19681D070759FC810503126D1B060854EE37020404022FFEEF3907051A6C1C080C4AFEC20001006601D4019A0308000B0016BC0000027F00060003027FB1090D10D6FD002FED3130013216151406232226

3534360100405A5A40405A5A03085A40405A5A40405A000001FFB1FED5017C0126000E0032B2012100B80374B40440092108B8027CB40F04400809B8029AB30021010F10D41AC8FCC81AC80010FD1AC81AC0FC1AC831300327361237363736371706070E0107311E35750C1922902D1D5517534C30FED5224A013A6B0209270E219B278A6B36000002FFD8FEDA0366012B000E001D0067401609020903091109121902190319111912081001210F00B80374B71304401809211708B8027CB41E13401718B8029A400A

0F212F10011004400809B8029AB30021011E10D41AC8FCC81AC8D65D1AC8FCC81AC80010FD3C1AC8C81AC0C0FC3C1AC8C83130015D0327361237363736371706070E01070527361237363736371706070E01070A1E35750C1922902D1D5517534C3001501D35750C19228F2D1E5518534B31FEDA224A013A6A0309270E219B278A6B3643224A013A6A0309270E219B278A6B360000060046FF8308530598000D0034004500550063007400B940102E1010450F0E3434400E210F0F21066FBA0233005C02ABB4677F56

0040BA0233000602ABB4387F002146BA023300

1902ABB44E7F217572BD01210043012100590003035DB40B0E0F466ABA0121003B0121B5610B4A164013B80121400B21292B10342E262B1E2651BC0121001E035D00490121B12603003FEDF4ED11123910D4C4C02FC01AFD1AC0762F3C18EDED76D4183C10F43CEDED0110D4EDF4ED10D4EDF4ED10D4EDF4ED1112392F1AC81AC40710763C10C0313025341233321615140E022322260523010E01232226271E0115140E0223222635343E0233321E02333236371E0133323637030E0115141633323E023534262322

0601342623220E0215141633323E0201341233321615140E02232226130E0115141633323E0235342623220602F7F2B37770255AA26B7B85FE315A03492A61343A54150C0C2959A35D82835D847F48345C2E7D39527F380812090B160AE51F15393D366E462339354671FE6F2F393B7345213A3738624B26035AF2B37770255AA26B7B85DD1F15393D366E462339354671FCBF0124985F4CA0A8718FEF05731D19171916401E539B9E6C8B876DDB703425343A585103050503FC304C89464550779BA33B4C577C026F

535A6DB08F4F434F60A49DFC9DBF0124985F4CA0A8718F01564C89464550779BA33B4C577C00FFFFFFBB0000057A0736022200240000000700D801D00178FFFF0012000004DC0736022200280000000700D8011C0178FFFFFFBB0000057A07400222002400000007008D01D00178FFFF0012000004DC06F50222002800000007008E011C0172FFFF0012000004DC074202220028000000070043011C0178FFFF00000000039607400222002C00000007008D00470178FFFF00000000037107360222002C0000000700

D800470178FFFF00000000039E06E10222002C00000007008E003B015EFFFF00000000036107420222002C00000007004300470178FFFF0099FFDD064F07580222003200000007008D01FF0190FFFF0099FFDD064F074E022200320000000700D801FF019000020000FFD10595067C0021002E0039401B2E2B0221050217141A2E1615040305242B2B2424101E0D09101E2F10D6D6C4CC1112392FCC11121739007D2F183CDC2FDC3C10DECC3130001633323633321716170607061514161706070623222623220623

22030235341233001615140607060706073E013701E2D5232DCC4B7B6036355025438E5B2658858334B73F3FA7349D9797E7B0027A023C4138372347029BB304F23E46422641443560747FCC1B7B86C94245010A0107FDEB0128017D140A40984137130B0698DE29FFFF0099FFDD064F075A0222003200000007004301FF0190FFFF00A6FFDD06B707580222003800000007008D01D50190FFFF00A6FFDD06B7074E022200380000000700D801D50190FFFF00A6FFDD06B7075A0222003800000007004301D5019000

01003BFFDD025F03CC002B007040282215150E

47090D0D6323221410230125231047221F2D2022232504281C0F0E0D0904120640142115B80267400E1C125D1C074000210174285D060B003FED19F4181AC81A3FED1910F4181AC81A11121739111217390110D6D0762B18D0D001C8102B2B10C076D01801C82F10313025170E010706232226353437363712353426232207273736373637363332161514070602061514163332373602441B4FC82F1E1C222C090B29540D0A288F198969243A2D1C151825080D761C110A0C1A3BE7353881110B33352A2D3C9A013E

380D0E6535654A14200E082823262940FE52851510120E1F00000100AA0461032A05BE0006003A400B0301020400050604044000B8013AB2800502B80206B60100040402060710D4D4393D2F18C0C0003F3C1AFC1AC801111239391112393931300133132327052301ED8DB05AB2FEF16505BEFEA3CCCC000100B604A30379058E0018003EBB000E011A00160380B38F040104BA032C00090380B2126400B80206B30D99400EB901FC0100B30099011910D6ED1AFD1AED003FF4ED7CFD5D18EDE6313013233E013332

16171E0133323637330E0123222E02232206FF491D7648224B543C3014192E1848157B4B1F37A031141E3404A3796F1320170C253472770D3F0D2900000100C204C8036805460003001AB900000105B2030201B802ABB200030410D632FD32002FFD313013210721E202861FFD7905467E00000100FD0461037605AC00100028B10700BC024400040256000B0206400A07994008DD8001CD001110D6ED1AFD1AED003FFDF43C313001331E0133323637330E0123222E013534010148086A6A5D8A204A2CC673547E42

05AC5B64655ABE8D427B481B00000101A1049202920583000B0018BD000001340006020600030134B1090C10D6FD003FED3130013216151406232226353436021A32464732314746058346323247473232460000020109043A02B705A5000E001C0030B549094916021A410B019A00030014019A000A02060017033B00060011033BB10D1D10D4FDDEFD003FFCD4FC31300171013E0133321615140E0123222635341714151416333236373426232206010A0A7B6759680A8060566E6E2E2A3142072E2D334404EC5D

5C4D490D6068534A0E0C07032C3A565430364D0000010009FE4301D90007001A0038BF000B0376001101B10018015C0004012DB200080EB80377B300086E14B80229B40100001C1B1112392FC9F4FD10F4003FF4F5FEED3130013733073633321E0115140623222627371633323635342623220727FD535D18183C4E2C807E3A593F2850403439312D1C2717078905234523476E141D3F213224202C09180002009D046103D405C8000E001D004F4024291B291C291D381B381C381D491B491C491D591B591C591D0C

2A002A01290F2910041607410A01E8000F0000

0206000A01400001028800180140B1101E10D6EDFCFD003F3CFD3C3130015D005D01233F013E0133321615140607060705233F013E01333216151406070607025057F33D1C2312273320331E09FD9A57F33D1C2312273320331F080461FD3F1A1131231B2A1B11059DFD3F1A1131231B2A1B110500010042FE7001E7FFF200160038401C5B0F690F790F03010014474005800D090D400E0E010800210111081710D6CDD41AC81112392F1AC8003F1ADC1A76DC18D4C83130015D051706070623222635343637363733

0E0115141633323601B7305A2D464F41481E251C58585329352B203CD81A591B2A473D2945291E494A46202A351F00000100F70461038905BF00060028B2400300B8013AB2800205B80206B60506020204000710D6D4393D2F18C0C0003FC81AFC3C1A313013331725330123F75ABD011962FEB78D05BFCCCCFEA200010026000004A60577003E007B40450C08363B82044708820505571C20141C101319821C201047232E2B55302C502C602C032C40192023140504083B04370C23F52B255F2E33F5303755360814

0C550FF5130D02003F3CE4FD3C3FED3CF4C4FDCCE411121739111239390110D65DEDC0D4762B18D0D0F001C82B102B10E076D018F001C810C8313001072725363713363534262F0137320433323F0107232607060706070607251705030607163332373637363733060706232227242322073F013E01373637360120E218010C220D2A0316247F0C39011532353AA30B16721E0E090D1D2314012016FEB9470F0A9862A95D250E133F4838103842509EFED82CEC830B661011050A1405023E5F5471C44F01101B1618

150409450B03084B010F07111A9BBE7879558AFE61594B0A1609121ABDEA7E0804060A3E1A05100E196D180001001CFFDD02EA05CA003300EB40B22A322A33340D340E340F440D440E440F683268338A238A248A258A268B339B33AA23AA24AA25AA26B51FBA23BA24BA25BA26DC0DDC0FDC10DC11DA23DA24DA25DA26EC0DEC0FEC10EC1125061E2E1F2E20243224334B1F4B20493249335B1F5B2059325933691D6D1F6D20761E761F122A252147181C1C6301301410010F0601473010402D21102E202E602E802E

902E052E35060130030A2E181C212604142A2A9A2BCE402E212D00400E210F740A5D140B003FED19F4181AC81A3F1AC81AF4ED11121739111217390110D65D1AC81A2BD076D018D001C8102B2B10C076D018D001C83130005D015D010306070607061514163332373637170706070623222726353437363713072737133736373635342E012737363717030607371701F33C3003080202100B102236401EBC5131251E23121A0F170740C713EF45170903021127730ADBC419450E32CF140316FEE6D5132E180E0B15

14111B31368034140E17203932538021011E69

477D0138742F19100C161608013B1A4416FEDD3EE26D4600FFFF005BFFDD046C074F022200360000000700E100E30190FFFF0035FFE60388059C022200560000000600E1FFDDFFFF0006FFFE0565074F0222003D0000000700E101550190FFFF0036FFE803B4059C0222005D0000000600E1FFDD0002021D000002BA05DA000300070018B50100040A0307B80106B200040810D63CFD3C003F3F31300111331103113311021D9D9D9D038A0250FDB0FC760250FDB00000020017000006090577002D0045008540410D

06242B820447060657422F144230822F4710423B751018301850180318472F304203434403028D2E450103000706042B0005250D42F5405F0D5511F5130E0230B8FFEE400A30335F255521F51D2408003FC4E4EDFDC4383FC4E4EDFDE4111217392F173CFD173C1112390110D65DEDD42B76D018E0102B1076C018E001C810C831300123373312373635342E012726233716333237363332041615140206042322272623220F0137363736373E013736250207171633323736373E011235342E022322070321070115

C315C0340A080F1B365F050D61856F9FC63EC901019174E9FED7AD399E5C5F4B2EB40658190B070B12250E01224B15CA372F70523A2B44663D326D967371575B01621502B06A012D4D3A261414080407480B03046FF9AB97FEB6FA8405030108400B0D060B0F51C54BD7FE61911A0621182C45CB01257E56AD6F2D0CFE0F6A0000020062FFDD045D05CA0028003D0091404B22072209260D54015402051801190229013A014A0147034B06070B0A0A0D02030C0D01000003010C0D0A1207000326060706263362123D

621B3E0D0A180700030626262318060700366926B80150400900230123062C69180B003FED3F5DE5ED3FC811123911123939111239390110D6EDD4FDD0D4CC1112393911123939070810C0C0C0D8C008C0C03130005D015D010527252E0127371E011725170516171E0115140E0323222635343736373E02333216172E0101141633323E01373E01353426232206070E021502D3FEE727010B2E4A41524C5C44011624FEFB371C28314766AB9F72A099312532259AB5691D231C0C1FFE5860552A47361C262C54512B

5217264428048D8B4783353F2B5F27494C874683533C58D5778BF68473449C9E81906D402F7249070A4F58FCAA5E632542445BF55C5E742B1E2FA7CE4F00FFFF006E0000058007580222003C00000007008D011C0190FFFF001EFDD5045105A50222005C00000007008D00E3FFDD00010019000005280577003F008C401C2E2E333A130E040A0E0C470A0B0B573A3814181E2038473A10003B33B8010F402A25410A0B0C0E05133B3A0038305F2A2A002138E2365F2121001919135516F518140200055502F5010408

003F3CE4FD3C3F3CE4FD3C1112392FFDE41112

392FED111239391112393939390110D6EDD4C82BD076D0C0C0C8182B10C076D0C00110C810C81112392F31302507252205373237363736371A0135342627262737163332370706070E020F0137321E0115140E022322262735163332363534262322070302151416171602C20AFEAB37FEED077D1D0C070F1C476115181F7D0AC78181C7095F12201A09130DF7A9A84C698EA85B2954424935909C848834555142172E1845450808440C050A1692016F023F3A171A0507014A0B0B4A0202030F156649054E915B6BBF

834C10164718F6997A7C05FE39FE893919170604000002FFE5FDD5042F05CF003200460089404B1815042B0D0A82054701820404632B45142B2F822B474515401021118210153B62234845333F3518152B031E292C352904050A03010D0D9A0ED140112110013F5D1E073569290A2F01000E003FC0C03FED3FED3F1AC81AF4ED1112173911123911121739111239390110D6EDD42BF01AC81A10D076D018E0102B10E076D018F0C01112393931300327121312371237363534262F01373637170607060B0106073637

3E0233321617161514020E0223222706070607060706011633323E013736353427262322070E0207060615523B5E2A3B1E031A296A0CBFD91A1B0C084841020A6041329C7334202B12196862CC885C3B393D1C07032534700144635E38534E2D22100C171929387C691A12FDD50F0131010201A2F10156E51510151602023E04541362341EFE9AFEBD0639934635712D223447557DFECD7C8A3E0DF497264204091502A1353C9FA780684A1812141C7EB24F3400000100460203049302AF00030014B900030106B400

0105000410D610D6002FFD31301321152146044DFBB302AFAC00010095008204440430000B007340160A02090B060703080B06040308000501020900050800BDFFDF000001060009000B0201B40306022102B80106B5050309052105BB0106000600080201B200030BBAFFDF000B0106B202000C10D63C19FC18383C10FC3C19FC18383C002F3C19FC18383C10FC3C19FC18383C0F0F0F0F3130370901370901170901070901950163FE9D740163016474FE9C016474FE9CFE9DF60163016473FE9D016373FE9CFE9D

740163FE9D0000010054023002630571001900724011760A850A02560E660E0200050806470505B80373401C0F0D140F10400C210D470F1015101B100F0D15050106150118F51600B80372B70C060808090D0C02003FC0D4D8393210F43CE4DD3C111239111239390110D4C82BD076D0181A01C81A2B102B1076D01801C810C83130015D005D13373637363713072737253637170703061514161F0107262322540D710E220A68E912160103424E21126F0716256D0D626BA10230370A07103502295F1A4D4B14240B

59FDBD260D1512030637030001003502300290

05770023004AB71A23F52140012100B803724014130F210E08130219161A0205010E210F471A0105B80373B2161E2510D4D4EDD4C876D4181AC8111239111239003FCDD81AC810FD1AC81A3CE6DD31301335373E0135342623220607060F0127373E01333216151406070521323717060F01262335AF8074413F1D29140A14273D51425233797D3F3FFEF9010735430C0F0517A72E02302CA779C2433B401011091F3B13AD261974633C803BF60A101D0F51030000010030021D027C05770034008340353500350164

00640104191D191E3501350235033504391C391D391E44014402440344044C1D4C1E0F290E5F136F1302131321310731B8037240151A21022926108F100110102D011D1E022101002D16BB03730026000A0373B12D3610D4EDD4ED10D0D41AC8D4C81112392F5D111239003FCDF4CD1112392F5DCD393130005D015D13373306151416333236353426232207273716333236353427262322060727373E0133321E01151406071E0215140E012322272630273705494044683D482E30121B1C136B571C2536314A223A

5434543648693259784C542F57AF6A434126024FC521163E46765E54420F0D4B04674024181F373F1B8F1F1A2B4F2C396D310B2D5133438C521109000003003AFFFF05DF05760003001D004100CB4018010003020203210000434237343820231F2C212D47381F23B80373400A343C4304090C0A470909B8037340141311141310401021114713101915422D212C2631B80372401D1E3841F53F401F211E080300080201021513111909050A19051CF51A04B80372B7100A0C0B0D111002003FC0D4D8393210F43CE4

DD3C111239111239393F3C3F3C3F1AC81A3CE6DD10EDCDD81AC80110D4C82BD076D0181A01C81A2B102B1076D01801C810C810D4D4EDD4C876D4181AC8111239111239011112392F1AD8C407103C31300501330901373637363713072737253637170703061514161F01072623220135373E0135342623220607060F0127373E01333216151406070521323717060F012623013603828BFC80FE770D710E220A68E912160103424E21126F0716256D0D626BA102B6AF8074423E1D2A130A14273D51425233787E403E

FEF9010735430C0F0517A72E010577FA890231370A07103502295F1A4D4B14240B59FDBD260D151203063703FDCE2CA779C2433B401011091F3B13AD261974633C803BF60A101D0F510300040054FFFF05DA05760003001D0039003D00FC401B0100030202032100003F3E3A26241E232D2B273B24233C3C472323B803734010302A142A2B1036303F04090C0A470909B80373402613111413104010211147131019153E302F36231F243A2B3B4026212F2449241F293D3C272A29B80372401B1E361F38F5371E0803

00080201021513111909050A19051CF51A04B8

0372B7100A0C0B0D111002003FC0D4D8393210F43CE4DD3C111239111239393F3C3F3C3F3CE4DD3C10FCC0C0D8C4111239762F183C1AC81ADD3C3C1112391112390110D4C82BD076D0181A01C81A2B102B1076D01801C810C810D8C82B3C3C2B1076D01112393918C00110C810C810D8C8011112392F1AD8C407103C31300501330901373637363713072737253637170703061514161F010726232201373637363F0121350136371703331707230706171617161707272203331323015003828BFC80FE770D710E22

0A68E912160103424E21126F0716256D0D626BA102ED0C711A14090EFEBD01A4465F13648A0419890F0306040E126909EC1DE1E64E0F010577FA890231370A07103502295F1A4D4B14240B59FDBD260D151203063703FDCD3901110C324F32021A0B1B0CFE000F574F0F1B15060A013904013A018300040030FFFF05DB0577003400380054005801644090030003010302030303040305091C091D091E1200120112021203120412051B1C1B1D1B1E1B1F12343100310131023203310431053C1C3C1D3C1E31333134

45004001400240034004400545334534270A371B1E1B1F1135143611381342185528372A553E5541425A515A520E3508360236353837373821003520350235355A5955413F393E413F42563F573E57473E3EB80373401B4B4514454A10514B5A2926108F100110102D011D1E022101002D16BB03730026000A037340192D594B514A3E3A3F4655564041214A3F493F443A5857454244B80372401539513A53F5523908290E5F136F1302131321310731B80372B21A2102003FCDF4CD1112392F5DCD393F3CE4DD3C10

FCC0C0D8C4111239762F183C1AC81ADD3C3C1112391112390110D4EDD4ED10D0D41AC8D4C81112392F5D1112390110D8C82B3C3C2B1076D01112393918C00110C810C810D8C8011112392F5D1AD8C407103C003F3F3130015D005D13373306151416333236353426232207273716333236353427262322060727373E0133321E01151406071E0215140E01232227261301330125373637363F012135013637170333170723070617161716170727220333132330273705494044683D482E30121B1C136B571C253631

4A223A5434543648693259784C542F57AF6A434126F103818CFC8001F70C711A14090EFEBD01A5456012648A051A88100306040E136809EC1DE1E64E0F024FC521163E46765E54420F0D4B04674024181F373F1B8F1F1A2B4F2C396D310B2D5133438C521109FDC80577FA89013901110C324F32021A0B1B0CFE000F574F0F1B15060A013904013A01830001FFD60000047505540040009440542F2F2A1D100A000608470A09095727351427342A352735471000277027B027E0270427191E551D0019401902194208

090A060401103430318D2EF52A2C2C3C251E27

E2255F105512F51611043C01553FF53D0008003F3CE4FD3C3F3CE4EDFDE4C41112392FC4E0FDC4C4111217390110D65DD4ED10D45D2B76C0180111123939102B10C076D018D001C810C81112392F3130233736373E0237131235342726272627370433253633321F01060706072337342E0127262322070607031732363717072623220702070615141E0117072623222A056C180E11101D5F3D080D2819680C012111015F4F675E310A0718100442020C272E654A524C0D0C513CC18451091B98D9372B3A04061643

6B06AC7F6B450107051133A2021A01583114090D0604073E060501050C1D91592A8D1E1410060D0B2C43FE360205090C630404FEA21B301C1E190A02450600FFFF0098FFDD05FE073C0222002A0000000700DB01C70190FFFFFF9AFDD4043905890222004A0000000700DB00AAFFDDFFFF00000000036107130222002C0000000700DC007F019000010059FE43043D058F005400C5400D442F4A4E02332F3B4E020A5F10B80336B30F160116BA01580002015940091A2F4E27463F3D013DB80276B746D43603302101

21B8027E400A27D4001A091801001913BA01B30007033CB3000EF80DBC033B0019033B0000034E40111A1A521D1D205539565220B2212124F64AB801BDB5C033E0330233B802BCB55241B23C832ABB01CA005201A1005610F6EDF4ED10FD5DEDF63C10ED1112391112391112392FEDF4F4E410F4ED11123939003F3CFDE65D3FFDE65D1112393910F4FD5DFEED5D5D313005073633321E0115140623222627371633323635342623220727372E01273E0137330714171E013332363534262726272627263534003332

16170E0107233635342726272E0123220E011514161716041E01151400020F4317183C4E2C807D3B593F2850403439312C1D27176A6CB43F0B250442020220B064A48F35321583BD455F0142EB5B9D4213160F41020216172472475A854244462B01057B43FED81E6405234523476E141D3F213224202C09189A033B302AD7367215283055B475424A16091D2A3C539FC9012F2E2E49756F281E0D511E111B2746814C495C1C1132418257B3FEC50000010033FE43033D03CC0056013F40692E462E472F482F490429

19381902192F1930164E164F292F29302931254D254E254F6B2F6B306B316B496B4AA32EAA4BB32CB32DC32CC32DCA37D42CD42DE12CE12DEC37EA48EA49E353E354F91CF91D210A360A37025302541C361C372A362A37264C264D0A0AB410B8024DB72F163F160216B403B8033E40201A4A4B2F2E0443260F3F1F3F023F43693C39070021102102212669001D1A0B07B80313B513FE1A0EE40DBA023300190233404A00001A101A021A1A511D2E2F2A324B4A51473F474F475F476F477F470547A10F321F32022F32

FF3202321D22FC21201D801D021D3C302A402A

502A602A042AEC513C3FFC3E303C013C5810D45DD4ED10D4ED5D10D45DD4ED10D45D71ED5D11123939111239391112392F5DC9F4F4E410FCED003FC0C0FDC45D3FC0FDC45D1112173910F6F55DFEED313000715D015D7105073633321E0115140623222627371633323635342623220727372226273637363733171E0133323E0135342E01272E023534373E0333321617060723272E0123220E01151417161716171E0215140E01070601A64B17183C4E2C807D3B593F2850403439302D1D27166F4E63690C0B1102

3E032B8B4A4053272439508C5D36171240A96143427D3C14113C0C307A3A2D4F2826268858172C432835A53E2A136F05234523476E141D3F213224202C0918A31326294C6C2A603243274B25253E1D0F1B37653A3736284069221F205B94632D2E2643273723231810080E3857324064841D14FFFF0087FFDD058307580222002600000007008D02120190FFFF0050FFDB041605A50222004600000007008D00C7FFDDFFFF0087FFDD059B074F022200260000000700E102120190FFFF0050FFDB045005BF02220046

0000000700E100C700000002004FFFDD04E305C800410059014140AA5B535B54A423AC53AC54053C283C29461545204521445344545903590459055B0A5B0B571457156B036B0466147D037D047A058B038B048B059B039B049B05AD29AD2AAD2BAD2CA552A553BC20BC21BD29BD2ABD2BDD05DD06DC0ADC0BDA2CDA2DDA2FD956D957EC04EC05EC06312F5555424D2F352E2A2E3042058203414742426316141410164D6210359035D035F03504350E211716471410400D21300E500EEF0EFF0E040E5B1200B80230

403610032F2E320503410A17141615041A0E55594250452E2D2A4104323F0A9A0BD1400E210D0045693F0640202121741A5D270B505D320B003FFD3FED19F4181AC81A3FED3F1AC81AF4ED11121739111239393911121739111239391112392F3CFD3C0110D65D1AC81A2BD076D018D001C810D45DED102B2B1076D0C018E0111239390111123911123910C83130015D005D01233733363534262726073736371706073307230207061514163332373E013F0117060706070623222635343736130207062322263534

3637363736373E01333217072E012322070607060706151416333237363736373E0137033DF510F00E1018245F0CBEDA191430BF11BE8B150F0D09050609261947139D10442E1D1B1E2C0C05478AC0794E344B3F2D201C155090753D395019294D364C251A202B2330141114172E2D4345334F0E04384D562B10130506013D0454134FE14DFD647D5721111002021612323C740A2D120B332D233A180125FEFD996160677FFE5F43221836612C157713101A13465E82B982281C0B182F446C4DC445000000010000000100009BDC33015F0F3CF50009080000000000



AA00990556001506AA009705C700110473005B04E30076063900A60556008E0800009005C7FFED04E300730556000602AA005604D9012B02AAFFB004D900810400FFF402AA010304730050044C006C038D005004730051038D003F02AAFF100400FF9A0473002102AA003B02AAFF880473005C02AA008A06AA002904730025047300650473FFE5044C0045031D0032038D0035031D005E047300310473003606AA00320400FFF00473001E0400003602AA002204D9021D02AA002F04D9006A05C7FFBB05C7FFBB057B

008704E300120639FFFC06AA0099063900A6047300500473005004730050047300500473005004730050038D0050038D003F038D003F038D003F038D003F02AA003B02AA003B02AA003B02AA003B047300250473006504730065047300650473006504730065047300310473003104730031047300310473009E0333004A040000790400FFD80473006404D901480473001E0473FEF205FA002405FA00240800003902AA017402AA00CF0464002B078DFF8506AA006805B4001E0464002B0464002B0464001A040000

1A049C000C03F4001A05B4006C069600690464FFBC0231FF4102AA006102AA00680625002605E700490473001E038DFFF302AA000604D9005E0464FFE4040000170464000F04E500020400005904000058080000A80200000005C7FFBB05C7FFBB06AA0099078D006106390062040000020800010C04000087040000870239009B0239009B0464000C03F400080473001E04E300730156FEAD04D9003C02AA005802AA005704E3FF0704E3FF0504730078020000660200FFB10400FFD80800004605C7FFBB04E30012

05C7FFBB04E3001204E30012031D0000031D0000031D0000031D000006AA009906AA00990652006906AA0099063900A6063900A6063900A602AA003B02AA00AA02AA00B602AA00C202AA00FD02AA01A10473022902AA000902AA009D02AA004202AA00F704E3002602AA001C0473005B038D0035055600060400003604D9021D063900170473006204E300730473001E055600190473FFE5



0B39B739C339CF39DB39E739F339FF3A0B3A173A233A2F3AFD3B093B153B213B2D3B383B433B4E3B593B653B713B7D3B893B953BA13BAD3BB93BC53BD13C593CB93D543E093EFB3F2A3FAC4064415F420C42D642FD4337439344BB458445F5462E467F46D147DF487F48DA492D49A54A324A9B4B3F4B8C4C304D014DB84E394E914EAF4EEA4F634FEB503B508D50DF5138513851445150515C523A52ED5305531D538953FB5431546754AB54D854E454F0550E561356425670579258A65967598959C15A2C5B2C5B38



3F1F6DB80118B5471FC6DE2D1FB802CAB6DE1E1F8B6B3F1FB8011E40176B251F0100010100090102000800464600000012110840417D02E3023600AA000D022700AA000D029601B4000D028001B4000D01E101B4000D01D201B4000D012C01B4000D02750135000D02230135000D01E20135000D01C90135000D01BE0135000D016D0135000D01620135000D01280135000D01230135000D00EE0135000D008E0135000D00810135000D00600135000D029E0111000D02990111000D028F0111000D02

6B0111000D02620111000D01EB0111000D01DF0111000D01740111000D01680111000D01100111000D010E0111000D00F00111000D00DB0111000D008F0111000D00800111000D00780111000D006C0111000D0226009A000D019D009A000D0157009A000D0154009A000D0122400C9A0D7B9A0D769A0DD10F0009B80289B275211FB80286B275241FB80284B2D90F1FB80283B2752A1FB80281B2752F1FB8027FB2754A1FBC027700750801001F0274B2D9181F4109026F00570401001F026C01D40401001F026AB2

D92A1FB80269B2D92B1FBC026800620801001F0267B2D92C1FB80266B274321FB8025BB2D9BB1FB80258B25E3B1F4118025700D90201001F025500D90401001F025400D902AB001F005002510060025100700251008002510090025100050251B28D171FB8024FB2D94C1FB8024CB25E1E1FB8024BB2D9411FB8024AB25E1B1FB80249B25E1B1FB80247B2D9321FB80245B25E181FB80243B25E161FB80242B28D3D1FB80240B25E151F410D023A008D0101001F0239008D0101001F0234008D02AB001F0230B2B49E

1FB8022FB2B4621FB801E4B2D9101FB801E3B275391FB801E0B2754A1F410901DD0075019A001F01DC007502AB001F01DBB2D9161FB801D8B257E41FBC01D101D40029001F01D0B2D9351FBC01CC005E0101001F01CAB25EBB1FB801C8B2D9471FB801C3B25E791FB801C1B2D96C1FB801BFB25E411FB801BDB25E3B1FBC01B900D90156001F01B8B25E2B1FB801B6B25E291FB801B3B25E241FB801B2B25E1F1FB801AFB2D9381FB801ACB2D92F1FB801AAB25E161FB801A9B28D361FB801A8B28D381FB801A6B28D

6C1FB801A5B25E121FB801A4B25E121FB8019EB2B4721FB80176B2D9101FB80173B275BB1FBC016E016F0401001F016BB25E4C1FB80169B25E261FB80167B25E201FB80166B25E1D1FB80163B25E141F4109015E008D0401001F015C00B40125001F015BB2B49E1FB80158B2B45E1FBC0134016F0401001F0133B25E891FBC012F012E0025001F012AB25F1E1F4109012500B40401001F010C00570801001F0108B2D99E1FB80107B2D9431FB80105B28D3D1FB80104B28D4C1FBE0102008D019A001F0100008D0201

B21FFF8DB802ABB21FED62B8019A40171FEA5E191FDA5E6C1FD48D811FD3FD201FFDB4BB1FD2B4B802AB400A1FCEB4CD1FCDB4AB1FC2B901D4019A400F1FC15E811FB763211FB6D9791FB58DB802AB400B1FA7B49E1F9E8D561F9C8DB80201B61F95D9321F948DB80401B21F9275B80401400B1F90D9AB1F875E341F85B4B802AB40111FB469241F6E5E1F1F665E291F5E63301FB80131401363241F705D301F60697069806903905DA05D02B80271B662241F74080E1FB801D4B262321FB8037D400E5E371F626324

1F90630163571A1FB8037CB275371FB8010F40

1E75241F7557381F9F57AF5702AF59013057405702595E131F552309230990BB02B900070090014340490790D60790C407909607909107907C07907207907107906707906107905A079058072408220820081E081C081A08180816081408120810080E080C080A080808060804080208000814B8FFE0403200000100141600000100160610000001000604000001000410000001001002000001000200000001000002010802004A00AFBD02E300BF02E300CF02E3000301734BB0C063004B6220B0F65323B8010A51

5AB005234201B0124B004B544218B9000101FF858D16763F183F123E113946443E113946443E113946443E113946443E11394660443E113946443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B014B5079410B001F027D0007001F02700007001F02530007001F0229B3071FD0072B2B2B2B2B4B5379410B0090027D000700900270000700900253000700900229B30790D0072B2B2B2B2B181DB0964B5358B0AA1D59B0324B5358B0FF1D594BB01053205C58B1B4

B44544B1D9B445445958B12AB4455258B1B42A4459594BB0DC53205C58B1B4B44544B18DB445445958B9026800B4455258B900B402684459594BB8030153205C58B1B4B44544B15FB445445958B9087000B4455258B900B408704459592B7473732B2B2B2B732B2B2B2B2B73742B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B

2B2B2B2B2B2B2B2B742B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B65422B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B0045695342014B5058B108004259435C58B1080042591610703EB0124358B90B0E3F0A1BBA00B103F1000B2B59B00A2342B00B2342003F3F182B103C012F060CB0062342B0072342B0124358B93B21187E1BBA040001A8000B2B59B00C2342B00D2342B0124358B92D412D411BBA04000400000B2B59B00E2342B00F23

42B0124358B9187E3B211BBA01A80400000B2B59B0102342B0112342012B2B2B2B2B2B2B2B2B2B2B7474007373747474737373737474747474742B2B7374732B

00>]def

/CharStrings 258 dict dup begin

/.notdef 0 def/.null 1 def/nonmarkingreturn 2 def/space 3 def/exclam 4 def/quotedbl 5 def/numbersign 6 def

/dollar 7 def/percent 8 def/ampersand 9 def/quotesingle 10 def/parenleft 11 def/parenright 12 def/asterisk 13 def/plus 14 def

/comma 15 def/hyphen 16 def/period 17 def/slash 18 def/zero 19 def/one 20 def/two 21 def/three 22 def

/four 23 def/five 24 def/six 25 def/seven 26 def/eight 27 def/nine 28 def/colon 29 def/semicolon 30 def

/less 31 def/equal 32 def/greater 33 def/question 34 def/at 35 def/A 36 def/B 37 def/C 38 def

/D 39 def/E 40 def/F 41 def/G 42 def/H 43 def/I 44 def/J 45 def/K 46 def

/L 47 def/M 48 def/N 49 def/O 50 def/P 51 def/Q 52 def/R 53 def/S 54 def

/T 55 def/U 56 def/V 57 def/W 58 def/X 59 def/Y 60 def/Z 61 def/bracketleft 62 def

/backslash 63 def/bracketright 64 def/asciicircum 65 def/underscore 66 def/grave 67 def/a 68 def/b 69 def/c 70 def

/d 71 def/e 72 def/f 73 def/g 74 def/h 75 def/i 76 def/j 77 def/k 78 def

/l 79 def/m 80 def/n 81 def/o 82 def/p 83 def/q 84 def/r 85 def/s 86 def

/t 87 def/u 88 def/v 89 def/w 90 def/x 91 def/y 92 def/z 93 def/braceleft 94 def

/bar 95 def/braceright 96 def/asciitilde 97 def/Adieresis 98 def/Aring 99 def/Ccedilla 100 def/Eacute 101 def/Ntilde 102 def

/Odieresis 103 def/Udieresis 104 def/aacute 105 def/agrave 106 def/acircumflex 107 def/adieresis 108 def/atilde 109 def/aring 110 def

/ccedilla 111 def/eacute 112 def/egrave 113 def/ecircumflex 114 def/edieresis 115 def/iacute 116 def/igrave 117 def/icircumflex 118 def

/idieresis 119 def/ntilde 120 def/oacute 121 def/ograve 122 def/ocircumflex 123 def/odieresis 124 def/otilde 125 def/uacute 126 def

/ugrave 127 def/ucircumflex 128 def/udieresis 129 def/dagger 130 def/degree 131 def/cent 132 def/sterling 133 def/section 134 def

/bullet 135 def/paragraph 136 def/germandbls 137 def/registered 138 def/copyright 139 def/trademark 140 def/acute 141 def/dieresis 142 def

/notequal 143 def/AE 144 def/Oslash 145 def/infinity 146 def/plusminus 147 def/lessequal 148 def/greaterequal 149 def/yen 150 def

/mu 151 def/partialdiff 152 def/summation 153 def/product 154 def/pi 155 def/integral 156 def/ordfeminine 157 def/ordmasculine 158 def

/Omega 159 def/ae 160 def/oslash 161 def/questiondown 162 def/exclamdown 163 def/logicalnot 164 def/radical 165 def/florin 166 def

/approxequal 167 def/Delta 168 def/guillemotleft 169 def/guillemotright 170 def/ellipsis 171 def/nobreakspace 172 def/Agrave 173 def/Atilde 174 def

/Otilde 175 def/OE 176 def/oe 177 def/endash 178 def/emdash 179 def/quotedblleft 180 def/quotedblright 181 def/quoteleft 182 def

/quoteright 183 def/divide 184 def/lozenge 185 def/ydieresis 186 def/Ydieresis 187 def/fraction 188 def/currency 189 def/guilsinglleft 190 def

/guilsinglright 191 def/fi 192 def/fl 193 def/daggerdbl 194 def/periodcentered 195 def/quotesinglbase 196 def/quotedblbase 197 def/perthousand 198 def

/Acircumflex 199 def/Ecircumflex 200 def/Aacute 201 def/Edieresis 202 def/Egrave 203 def/Iacute 204 def/Icircumflex 205 def/Idieresis 206 def

/Igrave 207 def/Oacute 208 def/Ocircumflex 209 def/apple 210 def/Ograve 211 def/Uacute 212 def/Ucircumflex 213 def/Ugrave 214 def

/dotlessi 215 def/circumflex 216 def/tilde 217 def/macron 218 def/breve 219 def/dotaccent 220 def/ring 221 def/cedilla 222 def

/hungarumlaut 223 def/ogonek 224 def/caron 225 def/Lslash 226 def/lslash 227 def/Scaron 228 def/scaron 229 def/Zcaron 230 def

/zcaron 231 def/brokenbar 232 def/Eth 233 def/eth 234 def/Yacute 235 def/yacute 236 def/Thorn 237 def/thorn 238 def

/minus 239 def/multiply 240 def/onesuperior 241 def/twosuperior 242 def/threesuperior 243 def/onehalf 244 def/onequarter 245 def/threequarters 246 def

/franc 247 def/Gbreve 248 def/gbreve 249 def/Idot 250 def/Scedilla 251 def/scedilla 252 def/Cacute 253 def/cacute 254 def

/Ccaron 255 def/ccaron 256 def/dmacron 257 def end readonly def

 %endsfnt

%beginsfntBC
truedictknown type42known not and ( %endsfntBC)exch fcheckload
/TrueState 271 string def
TrueDict begin sfnts save 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 3 -1 roll restore TrueState initer end
/BuildChar{exch begin Encoding 1 index get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get dup xcheck{currentdict systemdict begin begin exec end end}{exch pop TrueDict begin /bander load cvlit exch TrueState render end}ifelse end} bind def


 %endsfntBC

%beginsfntdef
truedictknown type42known or( %endsfntdef)exch fcheckload
currentdict dup/FontName get exch definefont pop

 %endsfntdef

%beginType1
truedictknown type42known or not( %endType1)exch fcheckload
/FontMatrix [1 2048 div 0 0 1 2048 div 0 0] def

/FontBBox{-340 -566 2193 1882}def
/FontType 1 def
/UniqueID 16#004AC281 def
currentdict
currentfile eexec

617FE59BE6FE5E5A04CA7887DD024B396E870275CFF3101EB5FB5E61ED0D1175B54CBE48071B090AA641ADBE8950392E5D5AE6A411B14BC990633E3211F182F342F846EF9919AE1AE4D383D89E600938C446679612814BE748E8F39453A94DDA4E17B9B1067940E68A10527780F8099AFC36103884900068D4DECDF48B63E75BB14A4B072F3161071ABC338E64DCDCD3379DCC437133EE9AD09ADF63A1ABB2CB16B46FF0CDD0AB6B805BAAD32365B8BE417EC418E01A3EAEBADC26EF4595E788B017267A4193FBAC05

87B473F2A704365FEA71177860541F891FADA66BAB3799EA987FF3575139C33C6B8E9F1D1518561F383AE3FA567C4821F2D62A08B5A69FC69A4AC83094B8B636514380102860F5136D3A17757194460D02C8C245565B19161FE8649ADA47D8E60080EC28E5F87197C92C8C3E2EF1CEF10443BE4752309075F89DE8C93B00F2B32DB3D242D63C7495416B1580A55BCE5BCB289DB3C138A65565425F272C2A3F9386B8DF2FDFD0AA1D417F47F03937FB514CB42E979A407AC54096197DCE98CC0F46B4DDA5CC9D6D107F

723E9192F163BE891D3428AB180D39E6A4A19D522987FE5B4BC9E1A38C157670FFC6C431FBE631869B7E3D2DAAA08D11E496FE5C3808B93D0E9E2AE664AA508C60203920EAED68BF29FD2A3EC45C3D816DB23EED12969BCF1C4BA29C64C73DB7D93491A79FE54D65EDDC3209089D11E2BEB00597DD2CD502D93894329A9F03B3731A16D5BA33940975AD294F35996240D43080C2373B07A82B4FC9F74CE0DA6BAC0BC428EBDD52E4071782BBF3F4765F743DBEC5ED6FA2FA73859A489E483C159E41096F8A96807D01

C64AFDA67801AF4866EBF2CB426186FB523021CE12D8C6A8606A524B32EE76E4454E98F2EFE9C588A298AE925431C045762A411F8442461EE73C0C8982B33C8C3F540E2F654D2364C08E07AC93D48B64EE9248D563C508EAE94744E08A79C810C37461E509E4EF1C6220CBD5C3B166E9EBC6FA1F65016467C329F656FF7E169E488EE04689B29077FB0EDFA49A248D9C286F4B189D448C00744F346FF74125C5CD762D941D0BD39B5FA9685A37F0F108172E8ACD7BCE885C8A1157E39A28FFD1BEFBEFD65E5E548DE0

16286A6EA462755DD86484E4CC17B829F15B1A1DE5E3E4B422519FA48BFB443DE14B4BA49A97506F155449227CE15C8E50649D4F373156F1247543D3EAFAD0BC66EE1E88E6E46AEAA88D1DFBA109FD6CD5837B044C26F76FE40A3611C90C184D9EF1AB3A5B23A74C251E76EB32A4F0E68711A41F4E5DB1A0FEC6D53DF6805809C4EC8544B2BCF2C22E6FBA3411C90860DD72EF911EA980684EC3B9BAF14784AF5FAA55727A42AD1D485C5051CFA064509A5F1FC85223E7CDA51AAAFE0401638E160ACC1C436147A1E1

CD69FFCA4B874DE0904BB81865AA3F981F6025
A7C2758C6A76838AE6366684D7A5A9710DA606807B9266D111081119205F6F585F85879747E135CF4207F083C00AC89990D88FF198411D85DA36C06C83F2B08FEAC42E7658C94B6F393B6B8F9C2F36802C3691236351B073AF12E6148DDBF49C15093CC0F0DBC70021B2C02B7E3E858E8AD4B4D709D2DDEB86F0543D430D564DE796BECC68542CE5BAFD5099A99BFD7CA25C903142F229914FFD76D362F165C92CFC0F211588EAB5BE94AEE9F5B451E5AB126482EB9D872BEFE16EA269CF7D2C085B9E2029FFA5004E

DEBBA51BEEBC977878E1753F3D534B2046E1AE630DEF75C0ED421D0740FB14D6A35155AB225E60976C8B2537F4DE118AF628CDF46487F30B2A9E0DC2C66841F2CC8A4396A853466CCB6CA49D9E79D32460992F1D49BB05F3CF5914BDCCFD2D364F6C3B76D10DC3B74E74352B6C3D73C8EC216509A4834BAD8841A5DD63CC6D06672EBCFF77788F36AC2116A8B71269E87BA91DD00A4EF3957DB81EA0EA3C56C5A52F4BE6589CFF38058A6C08CAD0E7D709833201E7DD5002C620790CFD95DDF4DA8A5AEE294A90B2F8

6F392BCF6C65013D29F1987BA93399B88A8C51F64FFA16DB5ED6AD556B827C65408F68B2C562A47D82C4819132CE5B7BD2C7249FA9F64453A52031A83FE767FD0B9E5C3B9B3996C43D308034EBA11FC28B7A68C913BDFD8460877AA87FC6AF8F94E34A026983DCC4F900B1BB9C1EB6D1A86CDA6B53A7CD68FF4E4B86DB656B1B8F68DDD232C57AA44F01978D11BCB7FDDAACCBF81D9C45C3E9942C515D4867DBF28D945E6345FE1588DB7777005B6A6B4093ECF718991930F4E3FD26965B5E9C591C922385D26C5845

A7DD2D0EC1F342CB0ADB12B3C62D317A032F9E347C48D7D9646FC55E2BCC31A054EFE1EFA1DDC25F3A7C1D65777AC0A123AB5FDCAA0306D8440C18CA2C3FDD413C101FEEBDB418198E7B012AB5E181F3D49741CCCFF7BCBEA98587CD7BEB04E4662F28BC264B2EBED5DAC39F74FD211C966FF4D2A0A2575A8E3111986653C6978FA53793BB8D24F07FC56958A229D40053252F548627584DB909F9BEB176EE6D81838B87A1B4B3949132B17D46F49DD11DB0E6FB0D1EBB73787B768AF2A363107154EA72DFDD2BEBD1

EDD7AF0174212F26998C2EE082EC05EBB6C0F194864B0422E1AEB1581E4725EC9DDE03BC3FBDC1D7FDD2B3813028AEABD9E3C38EBD2DCDC4FC55F2EAFD0854A8DD026D84FBA66B1776BC0BD37B989EAD2585CF15523B0376BC15C6F6114B4A5CCD423630201341D0E7F9BE475FC166489EC2730364D3F64E776465F09FB5499CFFBCE43BE571AF72938C5B48F16C55A568DBC5F7F327005B578993675CF6C1FC936E710E0C30390E0F7588BFC1497B85222744C731D36F9DEA697EAADEA2492D0AE508BC43C0D945B0

EDB65C36939235EB21623D73F47EA6B7AC1603
FDB34A5EDE5F9E8E5A0F10A605D8BC1CBC379C309D687EDBF57DBE34EC600E8CB39FD1D7E1F9487BF0AD66401AD17CDCAD2AE4AB4794D73065AE84819409A89D5FD4FD3D01AD6EDC8BCA5C886DF095F49F97EB7BB199AF440D6CE39A1219CF9944D7B24AFF98AAEF498E66567ED21960FEFB05E6907E7EA899150F734BB080D458E332B22285654312E17B5CCACB565C89A2DB7DBCD13FB0D4432954B52CF7B1A53FF526284E7DF8612E87D23E4729634CACB4B208D5AB8B5B551B27722947710EC47FE9513F37A8A1

37168F443E3876C093C63F0F7A2DBE9D199DC5B14CE2E90D9C10F06B113A25902D363CABC80E0D279BC571690031C29F22C6E32F244E622BFE16CBA5838168D31D69C6E85275810F9678C0A51DA3DC562F705DC6A93A237743C9C9E985F82B0161D493BE1108A9F7D8F033089192F73A92EB16C58E5ABAE30CE1DC50D585FAB967EB6408A07F23B247D0FA234927E8E2A6FC406C306558A63E50A7355E2C1A95E35D67943ADB19DCF5C8D6A8034666CCCE122B0F00AC4A81EA285D89D816870E92B4F0C727E5E7F1B7

0E25A54C5E2211CBE3E5EC82E5F88F4942FC47C69671DE0C9624307C31D3D9256DF8404332578AD766D3B11DF3417E4CA1678ADCE96D16ED437B236277CDF22A800E6E802911D421EA0984D31BC9E91CBDB37066140CE9BC05E11A64633574EACC5192E265CC679AFF46F14733E7C938DE8C1E5967D094FD2F5E8A52779EC189CCD64353C008C8B13656A69AB6B31EC9419FB4686738CE5B6B49034D11CD9FF190315D28B149F806AEFFDAAF10237D9302BC8BDCEB9F2CD9F95D32A3BA1CDB6320893D4C149AD397C7

9FA7D103F5E64D14F67E0E93AFCFA467F2A06A65B2B3B51B9504372E348DDC917C053A3D6F021070BF61BE1E1F7D524B8A556C933054183BCA72BB6F2D0A410345E5492F5440D4A8790EEE14CB9666D7B6022E274DC996F0D99054CAAE9F58847C4A489D2C97BA8D3B1701F49983CC1DA625300289E12F5AED65BFB64EE0CCD55D2B3D73E536F78386B96AC57920C668D9083E69EEA1C6C8476110E78AD56BC1ECC9051596D57400D250CB0F32F7F6C9D27827C7BEA4A2B597515CD31795DD54305088DB0035FBCE9E

2E14C14B20D214E148C69D72A9EA147C2E0D9DD7233092B42BAFB6A8AEA24C7C103704EEC4D10B646BC165A3665C2ED2AE5080799B76BF397057F233249A3617E6A8DEAD5782A8DC431B512C6E07DD5C3D7A7BF619F24DA9FDA13D82693B0F9F8A3CDB065AC04CB0D10388D251F45C019DD0C38834842B53C6F6C0F777D6D4C25960C17ECA3B8D2797CA0338B43E55BB699A46A6C156A752AF3BC5A12EEA2F929EB9F8EC2C4012EBCC08964073FD75C5932C995CAC3AF3BEA36ACC09A2593DF64E50BA33C2AF3068D3

73780864545FEDE6CD616B32AD7BA8054A7382
83BD23CC14793412AE60EB9F7741239B7E6908DCC5EBE1746D7A2C34B093A12DF4780F8E8F8FEFC47930D769462271930F6EF883AD874B7473A4FDE14AB446A4A57343D17C361615243330689075E517C4E049BDCACDEA69C1C1F28B59BED1C54F5D516FD121E8265A53FF5A858F6C7499307A3C86DE2C7FC274EA7923C5B33FC700A303701356FB88230E2E45E28CC0A09C36949A406F5AEE30555B270376E9A176D0FF231274071CA6FAD3A42DA18AD1B49410AFC835C758D0BD6FE9D2AB56B738BFD74C97D4B92F

0277F0981169FAA55A81C6B22BC74494D3CCBD3A4E35F1035852856A6A2D407E65B5BECD8964140A87EE264CCA87D70C8C4CF383666FEB5829BB0F3A89125FB62C33D1B5037B42E923D1183E8859698956EA39FD9FC40FF00A10A974AC228D40DC442BE6C41E8B579E6F51F2FE230782DC571328CCBCB0836DFDC9B287EA2A546FAADFA00F44617E591B903F046F278A6DD3362FB5A12A2CDAE8141323562A925F8E6F3559FDE8197644D3C59D06C6C10EA14F3C603ED1CD370F05E08C4DEF6C2221E8D73170A29EE4

5256DDCF4AA9A2B022C5D1ED4097F0B48CBBF2E6D789AD1AE07D4D63DF8512A46AFB035A4EA8C4987483F4E09AB9444D893E1B3F0C04DBEC2E628DF39380A20AA1BCA719D549DB9839007C7A15E22E4B1464E2546F7CEC212E97AEBC83289422561BDA13DFD6CD0FFD6B28899F1EBB1F5F755BFB49DA224579538C81D2E955EA7C41E1C8F5F29DEC6376A0F38079CAC796299CE00AF2094AA9FF96B4E3D1B31B69177BF25FA3EEBC9F7AA42E6C2D1EEB4926C21AB889439D3B138733B3845D15EEA8DC664CB792489E

F3CF0FF790A4480391895FF10BD67932A6111D306E9D1377ECEDC11B9CE543D3C09E0357E2361212E002F2D35BDF4D6B2DF02DB1A6D191E610A88565AC057987D7A436EE979D52C731C831230669DCBFF263C0FC4C03034A8A3FD4F606D1BB1FB6DD3124BFC6FD93FB4F2BF216227A61E4CAD22A4838C167B771154687FBFF2D7EF677A3E6ABFB104382571B21AF09E30BC9F2AE73F83267543CA52FD38386568AC1402EADCF631586BF5A4988AA1388E05F32FB8DE7479EBE1F863EF12A230C3E933AD9EA26EC58B0

188EEFD93FEBE30CE9F0074BFE098DB143F79D8C911DB7AD43BD75FFC446703C8A3F24B61E2199A807002FBBA115EB870F37DD8F135F46C1D3B1AAB3C297F44F55FE5BD463B1150076164B721A135E714E1EC9E33878543408000DABDB25A20F3AB118EB6E4EA75F886D2251CE6207304E65DB3462B98A9C6C4E6D838FEEDCBE9EE7C6CDD1183C18E5D3DE82E88B21DCFC49201A61FBC043DCAE8B35DF6885718C8F06981801F754596B83CE034FD5063674FC2222F85ABABCCCB8FF8EF1AEB4FEB967773AA961E791

A400357C085ED0847298677F35CC08BEA008D5
7BAE739D993612432A6621D6E3C275EF58A46FB7B84E69CEA6988CFA9EAA9170C38CE462A3B4602802508AFD8CEC2739143ABEB87928D39276219BF6D920F96A485279307DC856DD64E7DD835FB23BB3983CC401C809FCFD4A5A977172C481DD3E99D6570404B4508F4D51408AC9800AC5579E7AC377343E6C2E96D2C977DB041F7EDD7F59B986B39DE65CF96E28F50185E08E0CBCC67E948FDD3FD888657B7004BAE083C1CB2925962E9A4CFD9D333BCCA15424732C0C30A1673E39651E33EF66B65A9D951F3CFB70

B0D9236A4D4746D35B71B7B19B61F6479BE6301E1B36B03573A137DE7DAABB4AB7BB5982C473624CABA7B06D81C071F518129832853CD9373A9947B5ECAC5C61E834C522D008F177F192D7BE57C328BF98F3D7FCC0763CAA686A6125C311EC98B76F0B6A2DE7950E1FB1D1F6473CE7083B9953097AC0335C31520C720702C6115324CFCFE967F656AAE674C37B7CD92A0ACC59ECA9FBB6591FD79F281CDA65059FCD4BC6E67AB227EC15365B7AC55101C31F106CA1A984ADBA4BC007A5ACD1630617F4714671D8CF37

7D4751945F1AEDE3C6D8AEB71718571CC07E92536761DB8137A6802A42DD9FB914D16D3FB52205C8F64169B5B884F6FFF647D0B4EEBDE4D51510B51D7445627E8BDFCBA1597AFDFA03871ABA22208801DDA2EA8E5272F0B70FDD5A554BD1B98AC8FB555B8591B544E519EE87F9EF675F0F787A08DF05743148AC1F04A4C5F3DF42EF07E83274AE34632F76C45843BF0641D458D22F932D594D728216A617247EE495B4C4EDAC281AE2A1D2DC46058590A2E4B66B335104E07E18D636AEE336F538AFD60E1B0881659B

2365A355AFF86E96513FCB84E7B8961BECC4F2B26AF73DD2381CADE81EB74EF918864119394DB3B0D956F2EFDF8249E89C973556FD24D9D8725D18DC5A88E27051B18DD7E811990434B037D21B8ACA20D0AF4D5A0309C83A7EA171549D5619888B00A531E8023C024B33E0C5888C5D280F4499604A8F68E9542F8C0EFDF20459D7FD61AA9B7A9EF73F27330B2CEBD00179D04D21B0C380F6F90E23DBA17F4A01BF6C6F515886CF7826D8BE6A5573B9D8BDBC1FE2734B2008B99AB1C0ABAE904006B2947566F7CA9156

86473AAF56AA5FB2179B5E4867CF4812558FE6B9B45679BFA9522547ACA4746636B030FFD727AA87559EC855FF2CD6E74688A452CF9F739AF5D82D60FD0B7CB5088DA88621F2B7F0BDD00D72174D545D0F2CCEBE9B1083EA3C8ED1115754B08BADAAACB4011322D11966D594A1406849669979FA49DA79E6029531FBBAC70C92035674A349C4F12BAE449F7485D6F754C0BA9BC52B675A184D82F6E1230FC4614BB298705B508C4288E69A5AD8144FB7E9354F08169EDDD75D64B59AE445E935CA27F3539E487D5DC1

951684D0AC6D6C3F76EE0F8EC7EAE34617E800
CE28671D1E89ABA041AFA28A1864E8F1AFFC0805696D5117819B0A49ACA0EADCEBDA845B710297A8602B2B27CD9372C9C3BAD30B1F3FA70AEA176C966E57AE3DEC28830594F2C778B9D9A0B39F49274BA46E0A3ACBC8F87EA90009DB1842D2783206F83ECF0840AD1A4BB01412F2320A402B9A1FABBD46DABB9C4622DFD0854C1838C29C7567BB466CC2BF8C3F8AED46E1167CD1F2BE5ED5B2D3E831C87F5A9CE58D8476E6BA1114B4EA05168227A01B22BE033CA5CEA8DD3088EE4AF3594690F8FE093E43570D72D4

85D918DD7F879A5CF0B107B17FDAE76F1D8100CD6798955D68E3D77DB203FC61BF327A5776740C41409EEDBDEE768EA5211D9429685CC18B47C6618544392BB641202D87E20392043D2258AFDCBF362516DB06986BD82BF81A3BB63D6B46114E271FEADFD518E715FA7D16B1B7CF9A944FE3C01A6ECE8509C207C9215A94F0F6709FB4B4BF13E39E649E6D19B4F4291D3E0CAE23C28669841BF0B3600B80D0DBC8238890374A62DD52B8FBF909DE584655AB9C31B90DE66DD4A49FF3FAF794D3BDDAE272CFB7E6BE4E

73B379DDA48246924B07F634838BEBF95C468E507E99F450297186C4B910ADAC231682A35F3B9C68C7FBE1240652B8168954CF001C24B3E6008CE6779BE1E29FBE1A4EDF1179F3B157ADBE5795AB1CE062DCD9664D44B0ADEBCAAF5031308217DE10BFED1C07E775FC285F6A6629423A93E1D099DFE136A510470A764AD5FAF4A630BA6E9B574C6C8B0CE249B6438A26034C25499CBAF4F8BC341C40E21A53AB85C579E3CFC9AD2805063BE5E336390886B82C87F472E4185CF417C87A4A01B36546B8AC13337FB332

1166FBF7A1D3E5D464A78E4EF9CC68F278BB05E557C501E9F8F8A23D354F2EF470B449C05B4D2D28D2AABA5F433D685CC782083720D9743490AC60965772D85388E4C764B9FC7CBB87D1A543BDC064009348F2CB467E8C8742BA90C9D8291642F52253DBB6ABF3AB5E5CF4F06239EB2D7750E567FD86C29B9BB7E85FE9C5DA094E0601B87445C9A7D43F9CB68F365E7CD21815EB1424A7AB60BDA906AAE11365D0E4735A59F14970849B929B43A34EB595E2F2EBCF4A49B7E0A7FC492A43DB27245E572BAF40924991

D82D2F8C1A6ABEEBFAD1A698C74C3C060BD44D1716EA7C6A53590FA6733B138B79A23F70D7D1E5C70F3F8214DACA9C54AE8E387052B4E7527993F1B502A2ED67D69246CD882360D695B74865234ECE1C94A40C53999F62F2F8D3FDA1EB9B58551D17CF3342A0BC640C7E26469EA74FC0F56E731410A9318517CFBF519C8133995AE6E9E94D693D09E47C43F2EAD409DACF26E7A24DE1BE5644253F2CF584B57FC2854CCD0023126D9A81E3A221265D3393383D35FD330AB97F17BC8C7CE3E91FE8709B4D15EE669735

29E93B6E9A83FE58336BEBCB4A17B94B0E347B
8B430130CEEBA5B6EA5A3BB78F17FBF58276D0B303CF1D441C4BBCF20EC4B1C8CBB308C94432B1252F00D1CC13BAF8A3DC11635FED69462B0C1FD53B477B3EEDE2D263D4111EE70EA05FA46950F35CDF52C73DE4AF05FB12642561271F2BC617593553066E7A4A68E33467269ECA66B226128AB8DC3163E153A66455AADCFB3ACC0D5144CED07121C436038A5B7ECA023ACE63315EB23350F08D0D1AB55352694148D2A00904717539351D360202641F460FA1058BC4418C358110315CC3337324A3E9055E65223A1D

8130FBF34B4062C5528D79007BF62982B3EB51AF1D9E5D57B8D291FF6A6B5A353AF2CA6F2A3B0800C081B7466B0E2342500DC31944D352D4AA96CDB996BDCD47F101E3DB1E268C2DE2F268B6F7734F26D0542EFB90029C2EFDBC13B0197D8DDE68DCF2C324C0BC8267F7B7EB8B858731E4E2C4D9593913B09B9173DC9F840F5E8ED1D9C40F9DD717FF697FF677B585CA11147F021375B90700FD3BBA68064687B91A4EF4767DDDB8FD7E4564F6C9F99BC625218EE9E003BA2FF7290FCB7086167652E7B2E4CF3F7556

99210032FB2A9F6465A0930935594D2195332901CB7FCCCBCCD7380FA6EB0890BCD609EA728479556AD5E381C5DE8A85A8D80CC6D8D6F697DB6D5F81AE95DFEE0398AA19C2238BD53828E9160027A4427214395CA558E9BA56F444B486468C2FFE1B98B8F85F5D7DA7B187E8A2E7F08C295B8EFC944C933960CBC26C29A38DC41C45A62406565D8232307D0C031F0B26F14F074DB3FF11B0831E48830F43927845482345F8986F3AAF255CE905940DF2C84C8B58471827B84B373A49EEBA09F70C3A1D5218CAA1AC45

D5BD4EE7EDE110B81FAB2AE055C75B59D223967D6CEC69E48E6F9385903126444E69083621F10C0B706556E022AC2CEE874B2D9CE21EFE07787CD7218FA77CCB95169EC477630B6B2AEEECA1463B812DB658D2AEA5202A2D9869BCC2EC6CA5F73AE0F7D59C2E61D39947D117E1339E25DA9A35ED48CD51C5AEFBF3784BF8F9D7291A14DC2974C34C0131D572F2C1BC80C41C9821A75F2F32C91812ED16715A7C906608091402BAFC036065A962BE2BB0BD6466C7D562B65F59B197E016C3CCB8B76B8F40A0E037B2E3

C5447336BB8DDCDB0A9AC26B95031B50FFA09E3264AF3A2AB78647EF2C652196F47C8E36EA555D18B6FC673A23BA788AA9B720B051505CB2401F43453ABDAAE7BEA8F3BA82656653FBCE351DBDAEB6E1110825F5229BD9C45AA37F2EA459CE6005C9C09F2120AB0854F758DBC2B55A70794F23E27FD940E835CFC10DCC559843346C60EF6E4FF49A8A198D1FAB8229B4B6100A0788A84849A5656104E750C3BCD5DD199920EE1B2D794D33BEF3C10453AF7E333775C3AF7C1D49504423BD8873C2B6A03C48DA65F167

15A0AA5E73890A0610EC9A9788884C8019DC60
74E40E0EC2DA7BC0F03764756CF364E1E2A92DC8BD400D5DBC4A97786C521B0BA5F5AF02FC7E9C11DDB36F4CE58029D4B630AAAE5F71C65A8A87BD31513542A24C47F73457D6F3E4853FC2C3EB83C070F21C2C3F8098C1D521DE6D26861A6B8A4EE255CBBF384176C6FE9878B8E0D840CFF84E73FE27B9ECCF41CD3C8000221BCD32DCF0E246CB7F90B1726750FD2F1B7C041B0B4A949608108249D2BC95A71FBDDEF018C5712101F4DB1F307E381E24539B910C9047B0F182AFA64A34CCAAF8B83068BFBB12A28BE5

754A830C50307CDFDE6879600E2ED1FEAAAC1BDDEFE140F58D3FD27EF3F4B82185348A171874A1C26AB019059FEC55960BB0C75DEED5E7C8206419F56689CD4DE44C4725500B73FA0B8B20458F181D5DE59644527B62024B34273DC7E7AE2480B70455CF62FE865DD04058D205A8B52A2AC5A31B90575F657AF97282FDAA4BA0B188B1AF21D4FF60CEEC10EA519A641173AC01F3EDF06B80CBEA84048531231D341A21E66CB05A3D7328C889DCD0AE447EE27E26A3BAC641937943B8C8F57CBA700E9D7F2002C10C9F

CEAAB8639D7C22B7AD291549475714C7A6016D389A6058154A24B299D19CD428D55CD4949D31F83E28CB2E8AEB22A6FC7035B452014943427F5E6D62CD425BBD7315A90AEA51219B43B4F44DD8EA53FD598614E07193019EF8832B2FF4ECBD62E3E239094DCC2EE2497D32FCA47FED67B947E8831ECC0A22637F69A372A5D8CB27BF874CC6C3A3913AB4DA2AA7DCCD7159810BC6ED5A4B5C4F317E6D142215FC959DB80C59F5AC8A5AE75457F361E664BED98DCBAD0F6C0E2006003F7AC69445272FA8A5A37E9A8BD6

1F17671ACF4CDEA1777C6DBBE1333974D293AB29E244B18F3D6483DC51DBC7B186C1BBCEC463A2E301FFC647683C942EE35B8C30ACCCC6C66100BB74C72D68AA29D11C51CB14F78B81FF9833B89A1FD1113AC1E54CCB5FCC99F055DCB871DF524F0D0E2B7C0F169B73DD27D33D3C348D81903430121189DA2EFA5B96A1D912342BD9BAADD8F2527B75D8AE05298668534011F2CA878045606BE967B8A2C16C211849F097CA5456AB6FCEEC133A4255258B2F22E1F20E4B25A3BAE4D68A447A25E2D79250574DF9106F

9E8C089BEB47A6E63483A294959C4EE040D5D43B19EC0E5A9357B1A7BCE284A3FE6E16BCFD28619FCEAC6B6325D4648F219EAB7B16DE9D2DF2536AACAF31FBB7129B0123AEC9B7FF96C071D75199CAC0A84A6933AB06718CC48E7749E8CF49A79D2856E242DB8E98E548D4D71A8E25BA01E560A231BB63264C8D458315E02CE9EDEC0DEAD440795481FE223BA0EEC83B79F78C16850AFE726634AD55645A3F856AD3D7ACEBCCED9C9307353E18D1F25730D4AF141EFC186EE6100AB08909E478207806A50400993003

796B562F6580734A67E999D3A4627480364D36
E6FF3A9678AD522E92BA7F118238541D188180D3FB77DBE9F4A57A5BDBF53D83A6E0E12564A31B862E9815DE7A4572D4236DD4770A967AEECB108D29A3281179A0F08C6BBC5DF4395039002E347955F8221360888D90FE59DE8A99D84FDAC386A46574B4762A609E089EF3CCD43D9AF03FA11DD44A286FA705E9ADFB210395971D840C9FE799B0CD526494C6BA7C7FD35570547DAB10AF6F7F90348035CB61A875D3E63B07F9EE338577BA9F56818B7B995F7565FED5628DEB84B5A866C6C3D125067E4B5058969AA3

1C2C671B3264A7D609B712D142535B98CA583B62ED0F8B0932EC5038BE586BCE756E094A1E46E9422EAC7CC2465D9A39C845349D1CF1B7AD922000162115425C11C649B3C5B9815E3B9AAA49B12863359F3AF670AAA1CEA23F8B029A04F9FE0F7A792567E385677C83031C00464688380CD939B6766CC57A5E95B76F9422CF7864B1869DFD12D81EE67D4496751B293B596D8B0018083DEE1B102083A00FDA9895E040523F8AA41490D6B0CD8DFE3C798B07AF0803E750FBE2C6DF9D24DC19BE8A34010F8CB9960EBA

1941E89E6ABCBE0A9B3F0A3817B6AD7B6C2ED3EBA0374C67A06067EF11E25521CD475C09F0E3550E981094206E45EBFD177BB1200293450124146AA34D38F56FBA252DCEAC510351A401E6BBB1628D36AAE67F5072E5A108DFD66AE33E8749AFEAFCC6DE3E59EF6E440CC41A5C43536EAC88601D3A696CED41B3780740BBDDB3F9C171D2079DDC7BB969CDF0634C66076C7A0EA95C9AFF098F54297325AD5104BE8ADA8C48B893CAA57D0745CC632ADC6CB17AD4E5567AB97F0F09090E9900B037727D3F73A4A754EF

AD67551BAD644393A3BA99CCC606CC44F0F4894AD0566F4F0C7E717EB065C7D3D13D83019BC6D7A3385801C7867CCAC7A921024FD719F5A0EBF2F3E147B5743E7CFED27AEC96865C7AD4D2EADECAF53D13289D761357B30699C0B938C84229F79B43C35ED9C349DCE07604411647BEB209B9C2B382852A700075894DCBBCBF98360EC8A927FA72F3EC9B838D2F569A4257854CCACC37C820870A45CBC4CF813780B0A774D3B9D459EB382B3B509F0D7A7D7709A43013E52955B5C8F4AA82780FE503006C40FA2239E0

41532BC188AEA8C1E418F7930A716ED1DD7475E2E15AB6A7077D809C958514BFD08D309CEBA7ED44B76BE3A700B7FBF8E356597D856935D9D2BA913634877AC939B2629AD0D9EC8CFEFB33571B4AC80A7088543886D3EAFCE70D142CB016A4AAD49EAF728B65C3083D77BEC1A6F07BECF21B3913C0B4205FF601BBF86A5D69F941E210A91564830CDFEE59460176604DEC0CA111A37EB8B69419D2C1095381B7EA9FF5DA508B720F2CF18C7DB72F6B5F9E8B85AC3F552F13AB8F584C7987A06358436ACD0ECCE8951E

D521541151FF72A5075F9BE0C9709D3746DD2F
57166FACE0C94DC684703E748FCE1692552CDDFA2FD5099CEAAEFFC1E5E587936891A79441FF27015314E32C0C244116C45ACD67F389755F52C87E60B192946BA741237A8CD20CBA1A2F83056CDC3F6A5897C62AAE4E93AFA42D4CBE3A22185B7D0D8BCC7605E6118C0B1F971FC5EE33854172A9708C1413B536E26D7B42DB6540E22933AA74015B1D5031CBEB6796F15D868EB1788260F145E157B36FCDD95A7EF1FCFC0D10E71E7631DFBCF110CD387044522B2D9FD60D264125244D11B7E2C13AF773627244B57D

DBFB4F34FF6793F4FD2B2A0E24786C8DBEA95ACA1AB338BF59D4A903F6CE4EC8CD1C37355815D6FDD7FE160646263BCBC7005F69A9BB41EE0DD56EC644E7EAB8D9CD535B80DC2C4239A1691F631CBF7A449A3357EDD7A4DBC104718EBBC2FC3FA82D9A2C0DF3D629FFAD79D4EC6A13220CFCD0965FF820C5AE4BB1D66A3277761C7688EE54016DEE22067AAE824099D08E147B172EB04E3E69103F2E29ED204B84BE88CD55BCB213A96036CECA0C77229A9ECDF266D18F231B33A04FFC2B826C5627B5BA176D7D772B

8D49FEE7D5AEF7264DA4B4CFA2B0C8393BE733B1E5BF69736602AF5ADBB77B62A616B42D49476E1C58521060825F048E4A2016C6D73E0FDCF6A4983F0A5AE2DA956764D4329503D34B1B9CDD1F0507F983E1D6B63EB00DBF5608BC94C3518E932672E0ED8F5BDA214B4008D0EAA0674D81998EC15F9086AAE15D6630EE5B660788E61F0B0A09611D28078DF8B870C9D68E751AECD3D20E67C053574D16EE6672E79F9CC810E0EBD86359E13D09F87652BF9A836AE6E58E5A923B0A4AD5C6C2E2A3F652314941DF9B78

B62B8B663FDFC450975AE7BCED12B1523D30299F07DBCB7FC7035D27B9475B69BE1FE17D4073C31E207EBAB490DC00550DBBACC107C6B1936998346A390EF8366C191EAE7CB9037D0EF2DF2C0E47C9C7D33AAAD03AD6FD6DDE0DA06A04EF0A4034F1B2AD771947E72C2039BF7DB1F27CED2EAD5D8315AD96BAEA976688F9F3BFAF8230E725649B81AD6A940118234F8978BBB9C55A4A65D7C470F37E0C1EFF19CBC58ECD38EFECAEE0EE56BF238D3E1029625EB44FDD363CA10B1CDE7512914FA1A73691A8B48233DC

A2BCE0F80F8F2CD98137730C99DD1E2F9C6916BAC442C36159646BBFAFE05B8D8B719787C7642BD8C00699771B9513FABC81DFFC1E11CDA9E191ADF679ABE7C66ED0C2AA42ECA4863F78E0B78693E3727EDBB022A49E538577D7C710AAEBBCB00AD5B4365C11EA09BDD0A199A82D62B97377DB57496AACC0647A673FF1777A546A41ED25164580384079410F1116DCEABED504FD9CCE4BA9561E68D1A7705A51BF11FFE38B98D54D19C2BE703667E9D08A523CC1FD2F3BC2C7E40C50355B58EC4DDCE29F32FF6F7207

6BBAD1D02EC30E10D1103D0FB844A818A73E3F
F7032B8108A108D8EB8CAB8D7DB784D34DB6D585ED5696ACB1E16820E62D2EC02A1F4B64103CA98AACDF919BEADF1D58CDA6EB498FD9588FBBE22AE5F72DACAF370C7EEF41C67A05AADA15D53BD54ED878ED29A746B538CC2B8622143AE8AAB04D19CA3709294C00BFC1D9862186CBE2F32954946FC4FF7DBEDE1DCFEB5FA098A02EA548A2FCB20B8FA130B73CC75C374027BE2670815619FA8B26909CBC5C6FBF6AECF997B854742F772497746FC0856667E11E54EF36A3C1F87499449C3E9758C173E695E1AEC677

D098BE6FCD761DBFCA60F45842AF3471ADF449D58592FD5AE2965BF2383B30EA9DF60AE7A1BEC140B5B0E31542DA4AC15BD2CD7B0312F3DDE37B5A9CBDB985063EF0FC74973EBB7F6AAA05CAA140491B428EA24666A97D40D4F418C0FF9A47FC65E1C1A6361E8535AB332DC975209F8A0F50113079077B2D81F2578EDD05A2DC3B6715DF9E95B98134731327DFDA4638DD8A8D318A158CD30C090F9A820D9063E67B293D69FC92D37CDA8DA4F64E43521BA4A1A4E0E5122E34BA8BB9BCB43AEE86DDD11900C86177BB

F2AB1CB0488F249C7817993C17F4E9E7AE2563ADC0A13C01BE82DC79DE373202D30D93AC050C630DCE59E73B097DF222315298636D214D1EEB0F4016AF65F51F980E0BFBD9B9B367E38CCB729344BFE80DB0DCBB2A8412EE82B2B6B63B20CF62DCB390340B1C63997C636F40D4265C3B4E72C40DF57658CE1606CF624786EE9BAAE3A14DB6B9DB2A3BD911BBEF6AAF05665247DA6D75EB8C684073D5132DC87E1C32189CAB004095975BB8062F4C32B6BEBD8C154FEED8D1C26B9832F1E0B142A512D7E457E84E9368

8426C4ED4A4D34A6DB4EB3423360B307A8D2C410481108BB58DA2711ACF68304AC6CB292280170BE954519FF575B4416248868F88E5BB651E8A90239B7732EC9FA5D7A43CE899F088CC485DB035ED0019E8334FC374025B785CA5C32595E1578473A7356D8E81C86007DCD2A6E0536C80536C41B22C79EE7049207A2D9A93B31114233FBAA46DFAFF0664F8B9EA6F86EC04A504A468966C4F167A6E8CC39313518C0CFF24FC198A66392041413AD713E8BC241E8794CABBA2055D842D0A20F911C8217541110665FA5

C92A995F92EA6CC1B4009054267C112BA603859680598592B0A3011FC057D46E54DF89246309DB0BF5D2AA974EE91AA51D7A3EC51E5A6CBD366FA74895FFE961DC6F31CFB6EA120D2C54E027B21A8235EA69CC5FB454186C40F5F0D0EB40CA0F12F6FB0A169C6D65019AF363BA4954A0A7290E2D27ED14C7EB3CCD6EC8CA6D68FDCE8FAFFC1DE8BED0537E0AA1D52310FE3F6AFE2AD9BFE42240DEF694A45984B3DC8E48FB762D99E0744CE157C022C5BDE4550D542F051610BC48EBEA5188DC8E025330EBD96E6706

2E04398124DF1F1D703671E00F6DC320E0E41F
99B7AE14E4C8C4C2EEB1BBC933914F3C2A6D62E942F59FF1267064B73BF51E69D60379E51A2C58F0B7BD706D5E207DA70D19618A81D31D24B83AB04E61AFC6FE9AAD4A5E86B6929F8B6C4DF179BD6106649892E06D620C914875646E5A5B7AEB5B3D58BB81CA9BC8919D0DA5347956255FFD99A9871AF1040BFE0D3CDB7DABE44C9506D0D09DD6955B8AB09A5C002E9ADDA12B7D5146CD5EE9EF7D52ABAFA832B26AB25504917DC999FEFA61A5CA1A4BA3EA80534E8D1547459D5B5B5E354BB2DE4162A12B310B6562

6DFB83F5C844B30F49974465DF3231DC8A67B387125D4995ED19CEABDEE2EC9BA0120288C2B6CF6BDE1F4E907C2B0B4460DACDDC1A1591BD1F4F040697D08732550AA5BD6988538E589094FFF8035FE13E0C6745BA6D7659CA8B85516C37B35A2173A7CF9B26B6427821B56E610436732A2AB43C0510EBBD80581A1BB569FE35BE9FC61BCE39CF9FD3F9AEDFCFB570874EDECF1EF5DAD4813D1E37058935F65C1F2E343392F2AD43C10A9EC1087B2A9C79FDD62CD21F6A1025465242441D22B4E77BD066C8EAE95893

570089DA88D82FED8A4AEF893FD01055B97B09A7AF9A459B65307C264532F63E5CCC11183EE4F03C72FD6C0FE9A606AC4DB3D2B568332602836E40064C31758574927AD247C82FCB3A50F380C894B23100388F034400769100BFC91EC0346175CEDA87204279D835B6B38056FD47F249CFACB95AD089137B1D6A3306D0F506E89E41EBA86133ED11BC60011BFE6818B36D4D363F58C16B4EEBA96C46BEBF1BB85E64EACA72C8D447B743E99645C074A52C28237C622EF3F7AFF58DBBC0C3829AA1CC3F4C77FDDE99A5

4A5702DD95FD9789F0BEBB41C9D84900DDABB6BE15B62A097029419FDB3C162CA89CBF116D785916D70BA79BCCC284F701D43E4CCA1096EEAB8E44632C45244D33487E5C40B7FA24CD68CAF832CEE3CBE414A920E6E7BD69FE685C84F57D69A31CAB1D0E70507A0DC65827ED115DEFF77ED5F86F117A7D7DAF3EB1D5F35F04D73DA6261F90E7E9DA96462D7BEC635225044557DAFAAD43732FD8AAA54E951CBEB40B909335466A984C4A246468BA27D8770E54506FB19ED7CB13ED756CB9DA0CF78831D1BBF4CC589F

E8BC7EF36DAF6B341711E8F33EB87F8A189CD8ADFB72B7538DF4294980A59A9373DFC807D99614962FF618D7AE51956739CFE9825288AF598B16049A090562A72FA796864626A8C759888E88589BC1F4C5C3F387E7C45DA4D4DB08661F123E6546DC3E5A2308790C12F47FD93606550F62A8B9271081FFE32D0617CA95DE0E784D6C85F5EF185A83991FF471FB74972B338DBF24AE4C395597117D56BF64D131C63D66430F420F2F1D2CCB51EBF51D3D9B9EC26EDEF7D5D6DA43E6888F0AF7D7FC43A0AEDC0D8D6220

AAE91F1A7F4CFD5CF8C726DC2006D99CF30C5B
3643AE8B8BBD97B9E19A43C521C7212062A8DAC0074812844B36B82ABF66CEF391ED23E5D78E27BB380370494CF5036DCFEF30C9C1C2E7AD97F95C5ADB3DD26DCEE04CB7CE14741109304790F446EDBFBD33E5E52C59AB56DCFA07217EA1F268EFC47764725DF1407A6E4B33575AC720B6A4BD964463431056FA4DAC2FED587B775CAAB00462EC9761A625486647050EC17ED94471EE37A5AEC23B8FF44CD6F63BEE7D63036CE63C80D1626C1B4E346135057FE43B441CF26084371CA4B6BC2593E1CF72F6706B82FC

685F0C68CF9B14A3AE24497850DCBC04A1A0D05F36AFFBFDB1996243501480D68C489512D097D1784438A78190805CB075060402E7CA881FC86882315F08704A06EBF3F01A1708D94D69B1CEABF4C438B367919D6A6336655E86E009DB9E96497D1126E12D1E3DAC8CF35E7D03F70C39D2B5EFF43B448C08B14C6F40FF08BF197B0EEF21ED55C54C48C402F03FE6884E3EF713BD7E9B6C778A1ABEA9193F77D20B80518884272C1EF78C1E15CDBF93C524D0C1C168039B0002082096AE9F107CDCBFA8BE243F790556

FEEFDBC118F80A83984599061BE41F0AFFC5F31CF05A8CCD91FB629931E1C5979386B7444FE5FF4D3E2B7F118B9275CD00D750AF0AF0FB987B96BD0EAB310FDF88BDC0A91A879A4105F683B485F70AF710715C94BA845FB1AB892D4F50321F849A578AC7BF8FEC2B77E82709BF2E7EAE35F876880BE395933540C60F24EF75E33E15A9641C926C45A176BB86975FCEACBDEAB8E35F49538DE7E40D70A31549502B2E799F64DA131E6C9B2E020FC3E455D10A891ABFFA778E17EC68082A2CE4058E6AE5DA5D3740115D

D539D3CEC472F550A38F4615B37B8C3FAB81FDF2EAE42A72266F0B0BB9038CF68B63A0C66C7F97BC5C09751E303A7A3092FF532160D5A6CCE2EC642C95D223C27F4470A18A4E690380BEF9F57F691D701921C4D76155E414FB762B7D3DA076E5CF2C3702E4A000B836C4E7DBBD74CD508FC5CE82A0F02E8C37AD473822CC12E5708149B48C426F0F6A8D281735DAABA9486FFA7356A034168315EA6227A6B1770FF163631E261915C995C1D4C03D52A9D31CAFFADFC8BC24840E6A48AFAD559158865ABB2F37D1B9C8

95789A16A46FC5905742ED2A188DC6D8935668A524C81225244528B9EE30F3327CE0C2212E909FF2B8A7BD92AD527EFFF6735350F4612596E619FD2FBEEFFB69652F8E74F18B09450D23084FDBD2B2599526D9B31D040CCDFC271623041C4E25DD25493585847AEE0BB58CA08A5DCCCBED4463F4B8AB8B827000CAE99394C3C7DC493DF3A47C2F0A87654DADE0F0315BBA8F25742747CFEC738216ADDDBA431C7C414C650898C41E31BFF6357D390F7492A48F9B1FFEFAFA9CFBA40469BAA1240F63B961734141E89F

481726BE4DA9B49C245C1B31D5859BEF3E7F9C
09D88AD2510773BCFCD325AA3E1D42DBF6A54FFC5C9997F7D4D03575AC85C86912312E642FA773FC37EA9F3399799FF1645CDB522E676FB3F6FBCFFCFEE6647A77B8C603B85FA5141F42D5FCE47226C0DB8A392CB8A7D6C73C62C82B0515911A4C31B4F9F4A961D195E647DB6A4062855E53456028961B2F4FE715A5FEE1BD9A5E442C3865702C5FB2D186B5AA4B086A08D1B02CED24CD57E820717513D45C059C1F6E5318730ADFE13170DAAE582A55AC85BE25C07DD14FDBA4A1CED2896F55566573B4695351A188

E3C5642A9092B64137D8068B64BD92B14998EC3C7884A0B7599980B43E8C0E20D42D00EEB380689E37AAD0A552DE4B0A1C1CA9FD9143A37D4F690B9CF1B4A18C5F35F82EFE8BAB3359D601EBEDDD6907900DC66C9CDC359739D0BCF38E4E8242D3DF811BB5D9DDF5EEB318ECD126D0AC7D84450F85249B096708A404E409C425389A9FB6C8DA91D578DA24DF306CBFBEDF0534444B40BAA53F4FF3256BC7D19EAE4DF4CE214F305B876C4D4386AC2569BB801DE89848313A9141E720C9B1FCFBC519F376765BEE5C76

4DA64E38D67F911F1C46ED3B645B14DD9D471AD617316EC846D5FFE68C0879C0AEA4BF4B37AF5A72731965620ECB85F6CD8AB7F8C0E4417AB82600152309665E80E59D8C40C1FCD953F256CC5E4DCA6723634B8DF3BA38FDC17D5079C7CB5D6A398AC6F59F0A83314855F139A7742B534A9F4AE5B008B550794820758730C4FE8F20E001C30B1BBE872AACAF739E516695F80E39DA30BE9484C7E9AF0A7672B675C9349D5378227E1C7248F86924B5DF80EA5736CA46D98B7B2DC1485789247A6B4936DF6921ACC81C

4BA91D358101498C2F01C6991A4C8E7BDECB46B64A150358BB8DB990367C57195B8C4A2A06F24F096B015D2F8F6B4FF20A40C7D8E0E359F8978A5C217261F52A4AA210D9C2D4286D958A9E761A09D15B9DA4DB358D2AA98AA352B394830B8903BE9F12C0CEF677889319BD165BC1E295F40C5366B48B512F11B3CC546424B65BA9CB68F283DDCEA2CBE56942E5B1D9B3450084CF2E097B93B239A067F8E335094AA5FFF20C669C4BF7B8E94F3B97D73F7A022242FDA50F5A3AF3F4CE102DA3EE3CE3A8ADA46F74763E

435F5FB440A1EFE52599EB2414D3E4E7626047677E3324BCECA5A717E2B9D321F64DDA59E0F9DEAC16AB932627BB332DC988704D6410D424F1EFAE75A91A3E53C47C441D898A66C2528CC07BC8109D0875AD4C13342F40FAD673536FAE891C832E00D3CF47B0E5B14B6FB15B5FC6F323F179B04868562BF04B9D97DBBF304C1E0F28EF038168C9D3EC529AC306B1ECDDC1C7152DB1E2913BB8BD804B39900B3DB103DCAF3DEB189EE0121701AD1192C10168E4A4D9379E815EB3FE3508436F566F57D4A9CFC8445DFD

8B5E5DC950EB2C434EAB60C8DA4B1488352DA1
2F9B72129FF8116D68C68B52C3481158776B75642011125330E0B690FB76887CA38A2430F21AB30E37E24790185109E1225ABF8D1E04A793F189066B80596D4D27A79CD2E3EEF8C715317E39D92EC624DC6AE9FA32B0E1894E728FCB59F8EB6FAA7081C9041389CDA172FE5187234BE9EEACAB0A189ED458D52996449B0A2CB9DCE09C27C0E995B41D72099A2F05A1EDD64C6DA4BE8FE5F47737423799814D1865957B2990F9974D30415F5626300E2037745BC5F77132D9AEC71DBC21DDB0CA97C8226608280E12C2

E6084FD005E966D338FBE6D6A5A0ACC9966A2B8DA4957219929198C2DE20D2722AE9140A842EA12FC3F5257BE1ECD82A930B50733292B003D380D12B81746511026740E3DD312C759958F73B84FA4E164FC7E1864F5CF94B490952C7307258C920ECCE58D0E0742B5C4549AFD3136FF75CB8C7915C7E84E47CA72D11B891E562017A258AF1A52AC215A6EBEC4E1509A01F83D07DE55F36904AAE38A8821617D1E70ED40DDF514D895CF07CAE91A57340F702C7E30D9B93A67953CE57028B1A7C3466E959669495D21E

EF6FB3981D791EE94783554323157DDC53AF28D4F3181BAC1ADFCDAC01F16C5A2AFD0A1023562182B5D32068696F808E9567F0E2B9DF5520DFB6B419E189E847995A744A35C794B5AA2EB555A50EB9CA7E6DF58756BD971510CA6C0DAC4AB19099B52C3F0F0C8BE9C2AA3D5A815D11DC51412BAE1899BC5E774A06941954CFCA9235958A8A4CF58DD9B4ECB7FBCF6F6841447461A385FDB3455CDB592EC4DA77149A0E97462AD7128F1AECFC6EBA2BD673C792F7586C5F302D4FA815AB802E1DB4D9963002D8004F52

A7BEA2A79AD9C89253BC523303AF290B76FB1AD7F98B9AED901AEF2942FF74BB850A970ADDDBFC601093B1ACE17E1FC169500B724C20817FA87CAAB693B4BE0595EFB8C025D2850597B383E844E4B2A644082AE5103E93D6436B1553D9E9DB598EBAB66BFF4DE0C27B4BC7EA83989B7D1795B8B6D4084F66A9B85B6183B4569A6C685E378734BB78374B744BD69EBA7A904B1FC9F4C0308CD747A3A47FADFFF31A0342CFDF30E6435267DD478BAD9B12D12F8BAC87C8307E2866D5872BCC8562DC3CAA484B8648F7DE

C269BEEDA1DCA39C01E2D583B842E702ABF8ECF7488CE068B2D4B83ADEBE2D0FA96966183EFBBF33663D253E9D6BF481EC44F448881CE041778F43F665EEDC02CC14BCD09CAF1DE0E66ED194939F987E8B9CABA3CC8E7F1A3C0CF701D3812B78B03512EE46D2441DFCB5FDA05DB3E079E75705DE336B64E393C74406E36F4ABA70592A541B56454C6BFF8FE57A39BECB1BCCEBBA7CB6B84A04A6A57BE8B314CE72C215A0F325E75CFAA8B82D3E2BF0801093E3F167A0578C42CA1275F2742736AE0496E054409E7B0C

409C85490C582299EFC7AEEF2B299BCEF0E159
FF4C20FA2D1B1F4C52D822767706C78833C62046A3A5640A058555832EDBC217CA34864C27E9B66D8FEF287C7E51A7D8609460549D1AD8A09B6ECEF729F44E4790C15EDC29179C9490F08FD6D688B40D8BE6A578D74ABA7DAF40E31867D535E1D599B310BB19C2095EE481B1DF31A924CA7D4DAC9D9977F18639A7A13DF64DD5D7940F3143FF94F313BE70231C999685697F8A03CD77EBA4D50BEF00ECEECEBBDEE8C90345FF5E19B0941BBE91F77A4E8531641EC06941002C53318D51E1ACDF0338C848340489B2FF

D4F5A0D5A1B0B1CC564D22DF0F5FF9F827FADB44716F53F5341984A2E33C8D9C0FC84B7FFDD7E55BB9FB3E6EC62AF4BFEF6E51CCC95DB5A3B0494E2AB89E04CD0EE50C91EF1F5A7D532BC5AA4B4E1EF7FA41A0596C141157F2B3D70BD593EDC83EC722555CF7CDD513BFE1E16BFF51E4E7725BA4FEB5BD1FB9C27005A5DED0BAC695ACB6B61646547577B4039312F38FA345B88D86F9CCB7B93F5528FE34B9A1FB00C5D275061DAB18219213F2B25B62F374D68E46484E4E5563FB6C1CD327EC5C275FCED93EDECF27

CC5A4CAB4E4BB614C28057AF8585A6F2A7D93E0CAA25997BE118EC0205CE56FD9C87EE87B72CF01FA1A203FE38CF1D1F05A61973AD7BDC44449DCB7E8DFE3E3FEDF60FB7D74FFFDF407E8E323146F78AD0A51D06EE4B7696A6AA9B0B0957E7A872D4E3C48DD16C04EB2D395A0C709918EF0624C6EE125541D64EDF295E10D7A62FE86BBD6B94A073FE8840076136B7ABC5439047D02A6B1309C2DA6DB51CAE385277347986ECBF609125E3BE51AB229760C8269B06B74A3116469A47618A5AA12DBFFC0F844567D142

E410BA6782E7943459F8388EB450F103A20D1FC4DA9D9FE036DAFFCF07E5429AA33C666E084E25107835A0D4CD768550BE8397E12FCA4773DCB2A944847BAF3B0B12A71AA7C80BAF5D9724B539544E6AD0EDCB8EDEA49086CE7D0DF5ECB25B1F1FA705F7A62F74F2084EEC788CA53FE06B4AA79D0EEDF275AB060962A251DB1D80DFFC9651033C486B9761166F67528C2C271907977575AC2F261F7ACF67A543DDC5EAF54281CACBDA02AB2B51675694C75C966A73C26AEEE09001636D52A587D059CA77A63775698E

5E2A143F03C525A201BDF06DC81A2C6F03E50EF6887B9F31C703AA5FE568DADB064F0794FC343D071BD63071011ED3A662183435A829B7FDF0EB131730342F44FC6EB84F8CF30DD8E346125A35B62B6CA662DA74C8D41C92B0D93AB01DDAC9B7AA6E19E221721965F244C72230C5CB3BA49E1636E9C500BB3A31E39947C5F67C8DB289F1DAFCA86C9495EF7AD5E8FF844BB4DFA76F3A407B76A4C4A344EFD77BF4D58CF4516C27ABDAF7AAE32CCF2C72B49FECD3D407B44D7FC757BC458A332004CC6DA4ED9CA93C37

6833ACE8F01F5E0B0D34B4157D11BE96B4007E
ED06686999FB271CEB731C20B964C3122601E0C19B12A885B7D4E12FCBFD7E7C7B24003EC53E776E3F03799309D5F680772D86AF2E2551D8A65815D17045C378BC399F47ADE4AA49D18539727005C517438012949E01EB512D9D76CA51FA295E3FF9A62EBF09C123EBFD50D8B43F2F4179B1F17192E8DB016993400973C32C162202F6EAD76634B212F8CA706BD8AE0B89B6843663DB6CF8854D91DD87900C6D08C031E24D315845EDE8F6623CEB28FB2E0E4C7EFA6CA7320DBB283F86894A786E46E4943390F5D30C

D55F4DD2A83E25778B41AA45CA8F758CCA45C7A739C20B45A6E56510AA85ED687EEB1ADB56484FE725815148C0988A0BFEE45F087A088AD0E6E09A4BC68A49D9CCF6295803D80B82DD6470B713F14F248765D2A40B6283E5252F529DFBB3F556D37029949B048A9A43D6752AF14E3A484FFA3C9CD4CE6BE7EB9B7A721A2AC80B668E083D74C884426B8C8776CCBAC8779724F1010D4446394925ABFD9D0B8B8B1CE338DF95D282D9E56A805A75C7DA269510DC0E97D6767F79840487FA7CBD475A5634F7E43B11B712

D7C305102CB5D4C94BAF53823E09F7AE9A3940A6C7358819C1E4671297746F68B05FFBE41746C838DB75C730A16210FD04E0ED7BB13FF9B7F19BAA49E77AA847276C7B96CA44E95E741DED3D48465EF784EB5F8D9A27C72BA616264913C77B130E9B5E3BC8F0FC42E7CB4C5A5244A7C0115A465763E49C585AE48B86B2D741A07FBAAE8FBACDF257210667ABFA10779927BFB1688399918CBF4CD155E960A82FF9CEF5A33157BC820098ABD9784D79E4545A8E7C19860CEEDF844E94E3EB95FD85554AF37D30014F24

0AF1D3DB923D1B22C7A4A04047E47A91655D6CD03EC4EB5143489B500DE9AC7C75DC5E8EE24C9B566715E33A19A62C2DB9376A18ED2614BEF62A7655DCF10227DAACB039182C2A80E46A9437F648BE18C4018734876AFCE48BB60F30D1E811EEE0B3974706EFAD86EA25911A0744FF916EDD195ACCBD82BD218F7D48F301521BAAC29B5B6E0E3A3148F469DD45AAF069C21742F239BF63C8A65B044404380B76012484ECB3054F7FACFCB8D06D744D4F1DD7535897A5F55D08B23A331E067E42F415F82F2253016016

1E280FAC96912238F256F93C22482AD2DBBA94A54E2C83E2C1BDB4A6499656174BFA5B64DBE060BC5221CE6294937BF79899D29C1E2ED6D94698E721A411B5657FC4B02C397BF105A37CEF765EBF60915C4328C89FE77D8D454AE760E0FB33D497D17AE3FB88F018EBAC60A3075A277E1FD81F825D7FBF3CF9B5500528A6417F7524AA3533DE29DBB76FF342D49B456A6A613A12ABE2B419505507A45828C17BBA7E120692BB778CAF144C39E1AC19FCA2837E44E521AFB9088BAB0D5BE6053CEFE41F7047F311F4A9

1552653555E942CD0095463C3A8EB7A7D12DD6
072806EA94EE5D5C834C87EC57BF263A6D961413B5A9B94AE2E0C0878627B2253393680D675285E660BAEA425C2FDFD4B81CC38F81752DB738D4324B96FB6A04C06649DD01681F47BC7D9DB61D3C5B11E2BA138E1621B53DFD9E232DA185452542BC4617FD9D954C7DBD4080BCB220AEAB635EAEF5FA7DEEA4610DB48F25AB7F8273DF419F2EF5F59B7EB2EA441F6599EA642E810539E2A4D5A9631729096FE3E8DCED2EF571A83C269924014E9BACF3FEF9ED24C41F14F06022E7BA613D4896CD1AA256E14FEF390F

9F1F193275B80A5F2E014EB90982823FA73A43AD3294815ED0442244B5AEB07F9A93074D81B23CB915F767611276F07F275394EDF5481293C569B62D1BCA64D39721232503B14B81BE84DDB59621DD0625C5408E312A4D4BCCC39AA0C4993DD867F112F5E3813D2727FB8A5275A6CF83A8090C96BDDA4397C2237ECF51D1CC5F2564B6C74869AA2C0C96BFD44DAC215F6BD75B5C81C448D57B790FD4A2DB887CEE461AA8F1A350B9EE68E06D7A2FBA63E9DFE5220262B06A908CC6066B0DF5D2C414F95E689C815746

F80C955E9E8A59201C7788CCCD75A95FAED51605E58DCD9F58759BA7334EEC4D65FEEC35BE2DB266739C0B1D1106BCF87896D87708BDAD4140BD4EB1F5F6924141EDBBADF7CBC86C6C420398639151F0374CD694FD7969029F411A89C0DAA32619647277DA857B0FA3B5314B81B75BCEFE809C80448DE8D4291A9A8A16558CAD3899AFF0EFF2EFF4E605A291BB2AA15247762BC2293A5671F4D7F9833CB6A288C0E6653667C8CF02B8E61FA3D78F181363E63D51156BA7593B6A7C9328E820F65C6A065C7E34259C34

160BFB6B2F20B5776392AE490EB322FFA6D84D738D795D5A34450D94D88C552D82078F774E8A50824D15F1DFE4FF8F461E130953197FED970F0A5D952A9503B2C344593F5405AE37031080D586834321AEE92FBA65EF402DD95ACAD65DD228B0CAB6C6D3A5B0CC29F73F3F012634426B08A2321D15EE7F234318E557601B1F3CA49BB2004F2EC9DE7BF1CAA0FD8CD4F212016326F37CA470C013A1C1DF2B6B1D8634255861BBD3D8E975BD0C89B0BFE5703A3DA66C30D28C3D3EAE86B561B5C4D4EE1F2DB734F5C54F

7DEFF5CEB313018A222034073BEF3E7D0E2B170E0E05CAC5436CBCC9A7C5178BE1053197EE3AC2517FBB57F919D15022FFAB8B40EF45D5182FEFF7EC4A36BA0371C35112E8575EDCC436C5304882B711F1E4D7D863F4F7EC43074C1B7FB5A1CE3A313389A30E24CADBB7EF6C5DA1589B5B59C28104B06C8D0CC86362E84F285FC3FD1F7D77A8F8B3A8C296D0C89DEFFF8C8F72DE65D2463139DEBBB5C081D6CE174BB13AB6A6D7EABF0429177E2B59E96BEDB4736288AE04F5A533EEEBFB82BB68F9C329ABEF0D453B

5071DB157C1C1D80B8BC5CF54BAF5B273D20FA
B0B6DCC606456D36FC20368F06134280F301A5057A813D18E94DCEF6B06A3742B07D63223C2F0BE41ACF45667225E269C91661C817B471B2BAAF41C8D7CA5F711723300F17EA9DFC60DE769EF13D797B18FDE81FB0CD87CFF38D0FD02B84EA844E329A1C91912485CC51D008831D6A7BA3447F4941BBE482304EB03C05D817557C53888B093C8A701391CA28E5D5BD6F3DD4FD51C35C425AD6B2895513D52870EE75A4176FD887C10C5CCAF8FFE7F8405D9DC4718DF498202FE55524742889ABED6ECBABBE57DBD765

08A501D7AF0F62B6AEB6DE32018031D1ACBB31FD7A08A6A39914545F9AFEBF5432149E9BEE0E950E03FA6EA2230A5B40BA0ADB84372A9DD36A767EB5BD1428681659F5CDFFB2DA3330E9B5F7B60257A3B5B5C5DDA8C999CB0704D8AC2252E7120FBF728E5F54F6208C021A63316A00846B501314548259966C202E3694029435604C0E0310CFC5074B2120C4A1A2D7FC4F3D873B19C3EFAE6CFAA82BAF01E36B3276FC4422F3959C27D726A3680A7FE421CA378F71AC8BA418B8A3B6E9E249A178D1D331B40DC80B22

F246B3648A24B0075C194CE1A7A10E3D1525A856A07490E6FA33CA68FA4FD34CFA04CF2A65FBBF08D909A270E6CE36EE319D453084C23B2BED6DB3491442B4E7FF4E1620F38B04371A624BCB3CA97E86BF9967D1BAB54BBB342EF9C800C06DEE39E07DCFF05ED0E5BF1721F62E4F52D7B04A39AD31A6EA95112BA6C37D1AB084974E1ACBBF40E6F35012C8853A93E1D39AA8281243C3A4D95B83CAAA15434143B5009DC4B7EE22F57FB886EC6F6AEF984F3C3B3DAC595CD9EEB0AD102429E61055553EFA1275E69BAD

0B1AACBE8443DDB5D8C7879E0EDF3B6B16BD107FFAB799E7620D0124099BD870B1278A91D3921215940AE03EEE2F0E93B6E0F2D170DA7E39DC4C78AAF5B3F038A8362E35BD37E0D2F253C4E8216A36E81B4A25033453800C44401F0EC8E3F58EB87D1F2E48C4248C52BAF449EEB2B38370D4D6994B531EB07378A8CBCCEC0F81CE7F42A1B2F27F3A86B76E3299D2989A5701B270577AA5E5B1541014D160A636CBA521E0A5ED5D5C1B34D38410FA480D6A35F768BA277D6296B2C580EA4D73FDADA08A059CA84F777C

B489ECE64D85890AFD9AF3121B2C8D2DBBF2A1A4CBA858074C0C574697CF9ABF516E463609658D6536DE08C4547E9A188C21FB33EABB6B44FEE0097ABD3119F6CC50AADF231529039F3B32EDE9D472AC7EFBC392C249C2DA7E7E015427525E08CA2E86B16F6279A8B0F1C9D8A04F22306E8C68C7756B95B149D65738965B34D7564E849DDAE4B344E2B73F11CC869ED99C656013F4AF5844E3F096AF9667A12B045F6CA03E661DC0900E7D9CE5F5827272E17E6CBB139E382161D2319A740F9B8F5D5028AEFCC89C9F

18E98C89F09D344A9EA5CBDC37F3F7ACCE4FC2
58A3704A524132BCB8E464BD7D7F990F120A67DBDB26FA2F01882F333D27A4049B628657E7AD1651FDF82D3B0509A6C67F86076DC63228633276D1CF39B865AD4F0DB242798800C9EE4586FDE2CE3E0D08FD5BFE47F635E93C25B2193DBDD02D0B7F2E14DC32B058A438356BF3E6883CD4B4932DD09D2B3854DD389C025A77718A2573AD0165D4FB635CB45C6BA6FD356518EFA4F0D7D972F6953AF34FD1EEE47342F2DC8C790E63F2F05141EC636A40AB9ABF11AC2331C0A6668B874EB09DAD9E7DDCDC6A91779F14

F9FC49CF337EA4FE16BE06575B59068A57E0C9E92C39A7ADC4B3459D2B9DBB08B7DD013A2D73156B37021173A2FBDB44FAF6F187BDD5D7E67BFA27DA70C84EA1039D06F8FDF118E94A97C51D9EEA6058FA7B9AF0C0C98EDC89EEE74D16BA397CB847DA13597020FE6FF0D48DD4C445EA4737A44D68F8315DC000E2018440AC343F55F2AB418E61E13AC9381624717FD7868166980BDF206D5534552A4D28716983D086A281D28572D226BA6D7FE8F0526033F57E8D2225D70CB1EF60A7B5C758EF6B4FF99199772AAC

A29F7A448F9779A4D4B96E748A0B30E462E196E1C70814714250834C92FC7E31EB5C8D3057A1955D2F27172E35AE052A10CD1F5CFEA30269A769899BCC019C514D78B77D94191C4B942151358CF49E90D3653AB0EB04B74BAB851EDC7B045724AC77620BF4977A1D7CC5D64E88B420434170BD4B986B2F4F8067D06C665A84077A8122BF766139A7BA4B1463997C87D2F20454F4E5390B17A0AC6017A0B4E8A768A3B8676863827B7FDBB4D06138119311B95EB8D24BD71B51F2A40ABFC9A2192871186CDD6385C7AB

A02CB12894BF9E7C033A7D6AE589B4DA6B53845CDD6D53AE305E9C4A87352D5959D3A1A7815FE341E41A4C4813B6D6A0F32A601E2A8B216A9931674C727150F71FE5ADD1618CA6BB2A9E8F9AAEA43150414F893281B820A89D5A70E92B5CB43A8770ACC312EDEE8951D25D06027252E9B81C1A269E57DC0601279757361D2D14AB97B843DB1847EBE4C8497CB3D0748CB328F385384761E7F5B56D6E7672E370F356AF338DD7DFA1AD926A70BFC5C1BF28699E5729463B233C71FB46C8297870F14C6A68AA96DC892D

0494661B8DCD8D5B19B0F6346EE2A41322AC3DFE68F2C298ABD22153DBEDDECF484E4191ACD031620548F7C2ABF5D80FF4C570F900EE6A71B5909F893203FC0EAA3D8AEE4024F766A6F5B17E9DDB3305502E64E6C951045491EF1CB7C5E465B18D7B61F3C3B3B7E38373DDFDEADB2D41309A23E0BF317969C36C1D25CA2D4CA7301225AA9083F55BB5FCBC4249F6EDD7D05CD207FE04B86E54139CD9BF2E21C2D28AE060CE50F30BB2F9FF8B01509E665D5C037265D686CEAFB2DC9657DB718C3EB333EECAC330AE7A

4D5173A94AD596382A984BC513A0C2B83477CD
88AC5EF3104DC4C3EF037A17FD6118FDA490E06537B3BA1B309C9BCCF1FB1512C6CB798F17AE66F33999A5F001B0D080D49DD746CB1B5790EFAF04B7E965C964DFAE5182DE21130B8DAED0B1AD1A1F9695C66694E17C021821D6A1A92D8FF7F2E190CA72298CA72D268DEAF3E1000412832B8632BBF6D22304679D41963433B5E61EBF844020E7FFEB18219058852D184DE7AF942F477E4F8860EECABE85E4315BADA3700BDF57B9E8248D13701EA152910DB23328C5B3C753E7238D85206FB152FE1C32A07080004A

5F62BEFAA1A839FD1F1D006999FF78E1367CD34EEDC36E279AF18CA7C0EADFB18BEC059547AAAD6918A1763755D6CA50635D39FD83A09EB4774B6A51EC4200156756F6112F7AE18B1262BA2BC3A92BC2757BE28B3D917E54FB40F54340183263FB940D2211B20823073BF35A217E5900A7AA4E482E5FEA5B47EE279CC1652A41BD46D24CFC6153BF709108E3E0FA66A14B720979678CFD379EF3486ED244204D71EEA0CB39C80C63C5707ABFECF75BBF322BA712386067125DC6FE75384A5C5E194498F3E4F19D996B

ED2D228797EB9D26BBA45E2ED134EC12AC2E73B6E019FFB2C958FCD6D87884C1F09AB9E6FDA0C8BDAAF6360E3A9C77D3947F73DD55EF95692C82945F24DA689C97F4EC9CD8B54B613C002491E8B25A1A9BE27CD7C4A99ADD57053D43FD0A1F6EFDFCCB12DC64745BFF57F7EAA28D12CEC9B434391685235B78816E7C9911FE59633322C02A87F3CC2E2C5B9FE2DB0AC60AEDC65E1F0E94CE34ACF625110784FE5B82ED51AE135967C8EC7D94515E40D7AB554C1559505A1D5FA0D4E0F8389A8196098E13572E0E1AAD

51A36C45FD11BDA4DCC6904689F9DDD0885A036963CB793FBCAFB33C776DA5177AD046C338EFB5AB2A71098EDE06E0D9702595DA56D893EF5F3F33CFE53A099DEB97393F26E017CA02DBDBAF8FE4444479DE9509973EAA61B828D1F45BC34A5ADE0B9360F0912A222D766979AEFB76C28D64B9265FE79394D583D346DE7C2230F22C9E22018D992EEBE6ED002326A1C5BE39DD360FE6337D7F90C1C94EDA652F4F2C753652CC6F3A19902B3ADBE4F8FB15C3D9186A3C67A88F5A678B5DEF69D54B557C13D289350C9C

C89712AC7BE6696D2EC0BE54E696CA3B3697E20061FAA4346FC1DF213CF1B6C39AE25AC2008E3D418EEBDEBC8761A0EC2C5A3F584C39028DD96A1FAB31024836CCE075A8A6EAEB5504CABDADCD9D87445E14D1691C43D881244436CD2D66588EDD1F8D93DF283CCECBA29A7428A08218A52905BA1E07DA7203105ED3B94B6D92FE753350F1C2E63CFA110899DAFE929FD4DAC6557985C4625466CA2AB8E43912C7B84040A1455BC5E803DCD83AF18757B279B7A44E6CC2859EC040F877C2D1FEC5726E187C7D8527F3

387F009E62C97C8873E6D4D158747A57E4F2F7
DD3F1752E5D93A67FEE564CB56E20CC4D5AAE2346F146E84549D88BE1B66B3B3D4C1F09CD19BCF34E09BFD0FFDC61F337AEB98601687B50069320F892CC89D02384808DDD45C4CDC0DAFE3670B1FD4CE875E709E4CCA8CB784EA2A515B5B4BFD007A1CE214373A219CD6BD50927A3C26D136F09B15F212CE5A07D563B7940C9A40E21598579D979E25E23EEB3BA1B5C5E7E8E9184D0B3958CF39FFE4210B012A06C1ECF5FCB6F6CA006AC947C1E83C7C4392ACDBB6CDB7EED8840196FE7D03E70DB21C428C382FF1CE

0D99E9E829FB6A6F9F6E2D1857BB8DD5936D48CFC4D87EACD5822B45FB070E9C442B64B36A95E9CF37FFE9BE3F4150DD8FE79F335455E819642DFDB3D515FC111ED7C60158EB4EAF8C8AA06BA0296AFF434AD340F1557DFC8F36ED0CF581D53CD3D3704F6D43612FA268C6EF889B3A9F1BE65C91AF29AE4EBF707D354D2C455C3936B779501C374BDABCCB59B1D968856ABC49BFD0DC3E5AE7E024997B7E228145A0D1F1BC4329D80162205EE76E21426E55DC7B2AAED57EB9A88A0539718B31D53DE272D8413E7669

08EB071EB36E148B0A5713698ABE1E2F4C1575EA9327659287FE716E12F21283434F38756C2B0B1A89AE4055A6F13F8137EB5E4826EE6E2003F022E5B7FABAEBEFC18F7593C1F1FC61018EF9B0040C925999EA3720259F50C9365C15C436EB6EFA985309E9B8B75BFDAC38461D01F864231ABA072682EA59E246C2CC44894856D24877F6EEB37BE2DAE049C66CCEDC33EAD98D5B7ED1F19AFFE010C7BBCFAABDA208178D09263E83B6256B553D370C49F6331641318FFDC69D16B7FDB325C42257409E54EFA54E1D42

BE239848A112CC490E45081B7BBC6E6B2D985D6A01876C04B1F7F397A72126496CDFAF9F3EB66403F17FF352E01591811D87FB7EA35D893288982EDD06888199E1BD1D40C096984931C13EDC45E909030C72DBE245B042B2CC9D74068B8F99A7C09CF41C20AF1476489C5C80780061E06B48C485641BB91B2488F98CCB9FA7395350BC73B80A210A6F61C28245089834D92A1BB09BB957DB5DE05AA917E3DB50D0B559F13179ED8B1581CE928E22E60E9DE08ADA8BD6507A9D02FD124278222BB3616D794A416CE8DC

67AFE0A51439A002CEBAF708E824C83A5A1CBD4BB66EC8D2F020D35B3EFEEB60C206DC74254FF31071F5AC423717893BA6AF287AD60A8AB60ACDA971ED3ABFEE8607AB9628ECCC27E77081D051F58BBB57AD6BF26307CCDD5A8378E59FCD2AA73C782278655A3BCC5324BFFB0E6426D2BE3C70A69473A86FBA84E2451E89D49B0AD825CA0B266D8F1AF4AABC486AF8D89A24CCFBA92938D93F249B90D37B0B3F128670A9200A079F8C593AC29F0AD5068ECFEB77DE55050BFDE2264FA7ECBDAED27D5B9ADE293F7F60

E75E66183C6EA745CB85C8E89F2572BB2B0275
F58D475C4635526BC71E64E150F7A1E8B742133B985A7BCD5B2BB71B357980796E6C9089320591C54B6D74D6CAAE23B6137BA34F93BC28A8F97C1E7A6D534DF530B2B42F4CB14F9CD60D4A5CCD2E59C73955329E1B9C62196191E6AAB5B1FAEA36AD1C772552513BF80D3DE1D7EBFDB43EFA6FBA6ED06BB3CE0AB0680644068D6634CD941A1990608070DB04E75BFB8369231DAC90F34AA7BE08B08D39A002E242A595CE919A0231A6FB6B4865441A62D70D228ADEBBB16D9D1A56683DA4408441513912FE1AADF212

26F82B78E3058EC8DC914C11E27FB623201462CAEC3B016B3F7C2329F08C5BAB19B1EEC49F4E845B63E2E04CF490477A1B81E63842005C96A808C2BE69AD89DBE6028C8BEE6AEF1F28FCBDEC828953F50CD2E0FFBBB2198DD68FC580F922F12C2B9BB204C6FB88304BFC49D200330D41869DEEA7966A995C8E21DDA09AC9E8C1754880235C7ED10EFC2EFC7B35583E6A1B7CDF0EEA626A00FD5144A08FB331D9F7A17BB37BD5248F337F433E3D75359F234239BE94AF2EFC5A606EE80E3EB634BFF57945ED1B1ADF90

A89F317FEAA825AA721489B14ADE9A2CCD03EBADE69ADF1A6675E713BF6F79D8F2F1A288517C1BA678AD7732AF1A86C5FDE15318412024A27EF3AEC02CF0D25BE7BC202DB83523C0E2A9E9F53B1B95730CF19EB531EF16CA2C24F9C0E2FF68EFEBB31EB360FE343EEC086266568FC8B6F64510FD93D29229E4B981ADF56CA9E3F4FD41B444A6D6C09204B73A3B750C7A85DC452D03D8A8EBAF35801B0686D1196434859536A33733235187E17E4F3DDE7C8EFB644FACB93DB0178784DD4E0D49C419EAC1167863AA7F

D3F9D5166FD37EE1224CFDACF10A5D2A022789EBD7973F0670A9513C321B843B362694DA5108932525A76F95551E4592F922A220C506A1D8CA18BC7840B63841F1A8CDD569787D68B0F76F53085918B2D0476A8ED9D027209DE87233F2591BAC880D80DB725FC093DEA2C05B5E18E7BEF1E56B617FFC695AAAD755FFBBEEEFB024D8B02435E78C64F5531E02E9A25726A4947A1B829602EA703F065E2BE6A0DEFAC19B7EC734A357F549CE1A437EE61DCBB0D15F3D9921E33A5EEA8BFA3751D57D59844915E86E4842

BFE2C89AA3C228FE82E6087328847CCD1ECB585C07C542F1A7AA26149822BA1AB32ECB2F61F2F6151D3BA00BCD7AEE3D31B19844887CD175D278C76BBD91C8EEEFBF28FF98F8786EC39A90823516D7D182E9186273C214DB66356F6C0C06A79DC3C5D6B04865127271D42E9FEA097630B1F26EF188BDA24EF6A6C4CEE713AE68F3A00AD6426D8C418FAE4AE9E57080B4D39CCB1D30D83ED546F075171A616F68690948FB93A651B353787FCB9CD3571660B5DFB6C219EB5B6C4954F817F94A7DF8B2B0CE9CD76B4C3F

6EB7195A2A753A75AD72241C940561E7E98DBD
1861FA3169AA5541C4F1DBB616DC7F013F21BF5661ECC87D189A224A78AE38A497767D5D3CAA4B92991024A517A11A417902374F3ADF972CA62228E2C5F0DD4AD4E6DC00F0AC362AAA29C353DFE1CFB67A5225E1961DD1732DB418ADF87841CDA11E7EB7EB111C41E1E10642ABFBE053452FAEDA339527DD3A0331BED0BE497920DFC88565416FF5E12E9C64A317B312C775D3B4945668C53A0C85886F85D75D360A8F789244E3912026A30C0BFA9170FFDACE929DC41855698FE1B01DCF11793F07573003A11692D0

97BA0C1BEC5FAEF400620DE79F783D828B6F8621364F8FE6D9543C5302B71D9403509031BEB5BB6FC806BA88E64222B267DBAAA014F84B4E9284076A6DE4E2F813BB1A36DB94216496AC75D24148A7E641B324F0794075C27ED176992BD65E4C0AED4537B1275CFBA47A0A4FC67A3DF49518941613C0A5D986D47A37F566A8332D186A72E64B4D444228D170BE63AD7F972483DC0AB6FE895EAAD3006D2B7013B0BAE8F5A3F452A4BAE8073910B77570A0DB19933EE1EC0D7FD54F89F97D554BB1AAF86DC50CAFE2A4

33CCC701BA4C7C932C221559ED6CD6EFD92726C7ED61C3F3E80C5C24DBFC0AF6C9178A8D08DAB97C7418AE1D9A1C4E1F4E09F2A7DD0F363D36B86E1C06D01F9720A24B710C26CD467FFA42CDE7E72007571F875A2DC7A138C8063EC75CF3DA7C4AE80F202C2909510121540BF162B63E311113AAD93A6AB7BA21E87B709388BE662F769C535C3394F0E5F219DB2D4939B993B188361594532BC932705FC1B22B93A6723DEA2BBD31C869E5EB499A8FD65C6D7713BBB96F3DEBA7865AF28D6DEFBA15D60DA087AB9D58

E0DD3ABAFD7A365C46BCE99F4139013EAB1D9A0F3F563BA8BF6B3FA2675D58E0529D438CB94ECFD8760B673E8A74B857C959200013D756B661B6C1126B84FEA1F74C2496EA6E03625F05496641BAE47C4E6263B4A99E8AD32A07831605ACDCF7088F4DD1FED5102AAB8A14801844DD5524D36C05F895606974B3A2BD3DED30EF0CAACC8B6787D8EFCB63526457004573C3449BBE1271607FAE8F7D983158E376AC2613D5290F681E10E7B9A517E63142D77E40BD777E3D44F24C6932A495031377B60ABB1396E789B3

39F309A4BF30DD566E4C9F8E442AE91BF18D80F9BE3F120E33916C62D88EEB2CD025A580463BCCDC32D51FA52E51A249986A12575CB45B6CAB9F17C62C7731D1C9D323775EC9DC8E2F9F4196E56020F9DFD42F3ACB822CD29C6B73447FC28C45D4BEE0814E193CCAE5ACF5069F9F3D082BE3857301FF2A28DA0775A77AC30717161F0FB7173F0B1B39F9FBE0772D8AB21EBF8BB9022E7DA9E223E242DB45A9960484F46E1A1E992C60B9550E944EB45FA9B5312CB0BBD9EE8121AD661AAE735548436E3665C2768BF0

B546C8F77D6F2087265A2FA177BDE18930A4F2
68FC04AA2BA33D9276DD74D67D0004050EC8DD720946F4D809A7F7D9819063D9D175C24FE02FFA42B8B34763A4AC0BA1EE67731D11E12650C0046546C07FC218A4F6FEBF7BB9661E3276A2C75C6D33B66B503E97B959ED6D276EC517BAEFBBC3C45901DAEC8EA7254608867E618EFCBB661BA79F2821A6D5DD9ED8C5BD4CDFD1B6374FD6AD94B9C4F11EB4C80D339E9C3DDEFC4A0391F138BC989B8813B8464EF11E0C50882AB1333C3A156A08BDFD823A4F98C0738A289FAA1C213F7E71BD280758F98385332607FA

547CF53B107336B195C457E470291F172524DD4FF9223C912016EE1171506E9C404FFE8CA7E1D0702D13E912CF11FD6045585029CC86924F2F59467AE93BE470F3D862AD2672EA256A09922FB67691083D41D95D6690A8C2A3FC818D6E23601F9D3796251B274C4A9E320DB037FE421FCA122E040AD2269604302D2FAA4262F34FF65411001F3BBB890AC192049140B1D4302FEC8D7969E8BBF77C6CEF27DBF3438874473E664D2D6CF8DA6B7E3B2AFFBF78630A8049334F5045D3C00B30BAEF1E9F7666DE7A30A5B2

A2966CC1F859BC1E8B1FBAC9F7F16E2B412A7761C88A44460994C93584960FED4F023D635EB12816FF4F15AB07F937CD4274A32DD694827E7D46936A91A7BCC0FE83141EDE4D2D60523C22153C5C0EFA246DF8E57D600080681ED51CB49F2FCCCD9794C0B25A49990230D923CA699EC70A7CD782CFE00BDB6D8CE06C7AF7A5F7320921F38FA2C8C1E108106123C970C7E63104A2F8A7CF8501CB5A01D3E6CC1705355F70545857505E3759CA3F7723A4C2D5335A9C0E5A6C45544B34AB8948C6EF7D83BB31B23FAFE3

4177E95D0F6569B756113EB9925CD1C4FFB2750922C1E9CB95AC7DB349E7A8038F4DE28D3056B9B5B4038D64482CDAEBA5902EE13501C3C2266A93149238F8AC7F40612EB159D6505BF2E3EF9A3D7964ADECC3C489AEA6A29817D22C32CCDED433D9272D1A71F17513F186EE0ECFAC06CCD3070C70D67B9EF1A6B75782BB0AB775FDC9348474DD706E38CDB2F52AE11D728E4468BD940815A94AC2E2D8AB01E201FD1605511A3DCA76ACBE1244D33C8D0B7E9C3E65FC48A88A6BE454166DA34C5F1A600B27309A1AF8

68DC7B132C2F796DE4167DD85FCD4C1C3E13CABFAA374D6D39BB93272466781DF62A9D74E8FD94FC6A0F755F1BF157E005BF3754CBA9F8BF367559D7CB8BAEB48A3BB5F3A3F99DB078ECDCEB4780E4D639A066886C7A4B6696D4F28C37832B11B24F0C6A28FC1B1BE0197980B6BE7B415DDA55C2B0D7443DB6CF71329DA1F5AA1A89745602B5DDD345EDEA70C164C26AF288E28E3932C96A0D3332AA986C8F01223A8A02F53CEEEDD8E8928F52D2A038C7A536E625D0AED5BF1C7602E52A2070DE6136BEE7BA9D0790

07A36C3A21AFDE35382987C13A793366EE8A0D
7A2CC15AD8B8C46E0F04F3E4476FA590D9592C9B631C65DE7BE4127F28D20724F2ACE47E630B4418BEF7AD862D0FDCC168B9FB7AAA4D2114D640D211EC3F8944F9086E4FE2B41E98F6E8844AB44898BF60AE775EAE0C951A086FED156D479ED315F80F29A02BA57486E7B2002F073C620CD32A5D80AF24C9D866D213121F0749E878C89328ADCC3A2750FC4CADE3B9E7D7F62835E8EC969842755ED0CD8A85D7C43B6729E588FBDAE8DA7AD1DAC5CE2B9A2FB5A4B87500C9672EBFA9822BC32DBF0CCA87844F03E75B

3B72220284EAF7C1B0F8CF384E7E0F570C71EEB63F6645F009135F705D7160F6AE60824003CF600873E0390AEE4BD087F49C2F4DFD37D19488C21322E79F4732C4A2E7289B12FE31ADFCD81D44A5A56CA42138E8AE5A82470492F717F638B9CDC5148CA5493D28A64236317B4D77909569D11A1785BE611E15F465562E99D3C3A46293170C7743C86F7F6F5DC4FD5FAE36384A0B6FFC4855A9AEC478DA28F4CB3E0B95AD08F836C37E9CC40C04FD4335B3802E46F1B1017AA099EBDBCA5DF4D11E6C03C229DE2D75C0

647C390FB994B94338A77D24FB9F099E6CDE79E9F20FDE0812ADFB5F58CB795D2F4E785D641FB322C11AB6B03C117CEE920D6E7E056817A375491BAD587BB777A2575FE2EE6072611ADB90FA7492E99B178A1C62C4A5B456FFA0053B6496E4A7692C81ABF378FC6C52D4FED291E5905C95882567C268FE1E86920AAEF0DC6F8DF4378C8CB49AC73051990437C0D0019C7A9C696AE14E8520128B9849E82F02932BEEC8CE47D50719A7E26D04EC42E576B73EBC26941C2E5F0A7098940DE3F4E5987035E4AC927A6848

9EA52ACF7A8FA4A18EC2B64386C2A70BD37E57BEE775D85A6690E39512AC9E7C6961F9AC1BD8B935107AE4668760BBE56583E3A1677816B10EB31085B5D3E57F0DA667FAAB3FE8ADF91D3182EC1B69257C198A350721CC82135E12BD251EF92DC491A14761E0CD78EC77C1F537AD02B8B6E47CA9E45859984E08E6D88E3E6F8D6331896172DCD3A5A37B862661A8E34B6886435608CDA30A30463D5708C584CC8A930A984F7EBE00A8B03C1B3C700DAC1E30FAE94A5461188CBE9F29A0733A2BCF678E913EE0C74DBA

511EC0337DF7BDCBE3D44FA25F6A1CFC0D5743F1496337B2033BAC74CD666C53EE9A990B729C9398F1955EE3A3B2630B6A6B2364E7E21A2A116D577C6A366158622158D224C3EA75F5EE39EDB8B1CEDF5C8786C30D73ACB92A66FC210FA00E5893C474F5E2F9312056711BEB8D44B98E38465B21A36D75482AB0FD784BFC22E1B9E5AFA5DBC123D417C05A4ACE1F87E2DD1CBB3D89902B46C97B9E4BE475CBFBF9412DFDB259C0B7084B152A3FA3FCC68EA7EC154E10CFA990A28041539B92719FE71A9C1BD26B1FDC

37E0ECC4B810759C53D035982579D0144DF87C
FBC615732954BB19731DFB4F9424858043B5090A051D50886F048F44393DCA7D30FCA5F42176DD3A762C2CC7DD893492E64A43E7BA70D6193A5B7836F18761F294D54EFA20E5C09482889BB3811DBC625A8E3D17C9DB1A968224C50AA77C3A0DED88861ED0B5C995766534B04B03F01C21472D9276CD9BD680D22AEAA79056A8C1A1A0077A7D77F20D198A0FD70F02746CA7708F7DC21D9B88A5076E3BF95C9E87F4AA8AC103BFC015D42CBE27CB6610B0127A99C86EFBFB7A845CA9CE3ED89B49C4EA9E3557441F94

4D9FA7B4B93782D7C6B0315E3D1D39CDD6AFB0D7B5FEAB9C125108419D7B8084976B191399E97B2AA3A27439F3450840D661184387F1C579BE6509AA3FE8E24DDFE382F642824F4A03E39805A87FF2A4E4E4C2B796AC6F9D9B253A2B4C45B040310CB9677E8F7CBA44F6552D6877442A35944CA77D18293F954ABFF8731CDA7DE2E32A8EA7B14EE0077A7A1A9A9A26B9D8AC9CE4522BE02336DE51690B529FAB7936FCC76EEE18369744CD39B66287B33A3B5966674A8D0DE266A002A87251921E1E6CAE014FB694AB

D23CBADFCB028151D1DAB06C7C9A328C677D103E49CC5745928A955234A85981BF4E6CDADCA01F52F2744865630EE0D7517C30AE5CA0C94507D81DA0E1E8BDD9FC3CA6ACBB1971C66EF92892B928D0BAD2C424CAC37975E3AF3E4DF16B01E0D47DF4F07F2280697F38393634350F7E3FAAFCABB15AB78CCFDE532622431929FD6282254CC118D1B624999115E727CEB8406EF3741A572E7F4657674C9ABEE0C577D21D6432080552B2144A63FFC3D054894B8FBBDF5C3143F08C02C726751CC6CD75A106D71397AB21

50DEE0B83539B8B4B699CDF04F1D463068C51BC7DA8DD62856464E97B786216805102E93485C916F53BEDF18B8C68C91F393B56A1D1B89F23B8658D7C56805586C421413ED6B19431F5A9FD0DAB54CE1F16B0E65CBF2F44481EA32BB12849951B433681F18F2007AB1257D7503C6C3B6BAF8AB0938C12E27D7348B2F3185DB084CB688D224143048D40C7D89E25125AA009B18BB83205318DB83907B629604950637D390D41D3C6F492989F80E2F2EB844DE34C9813A01D428D254A5510068A513A3F6A33B5FDA90F1

5E341B8822204E75167981618406E5FDAD7E3CF9BA89CB9122ECBC270EB6AE4BDC4028C6F1C446D170479AD983A2837BD6613AED2D8624A21DE85E869DE82D2897F8812E524CBE3454EB5AB588880E2E57F8C858DB1A77EFB4C4B820E3C3D81458F405AF824D76FA0461EBDE6EA26ECBD2C0DC92C320A0F119FD86A87021B511ABBC47D21F7820437037D4F9AE21C463B4E71B8706EFA9AB229B89F611629103CF00627CB54806BC9199AB523F359FAA413433C5A3CA83A9854332B36C4CE18BBE43DB64CEDD32ADE9

2FA7137812326268F23EB0B634701D6DF719D0
A6035FC6706039C6CF38FC34890C999AF55EFA135977D126A6953DECA222CEE67227100C05703972A01BBAB03C45BFC031688F9F02A84909998AFC5A3B8718CA0FD010D1E176BD37BB311B8D3C7B1A847ECF9A7E37E7B9CCBF44B39D82CC6CF1A1B158EBBDE28EC054A2B4EC8E006FC237AE1FF961848399DECC179D13EBCE6F240A7898C6DADA4147316876194E9F557D289F1F925CC817522CD395B90F8A1CEE69C2A63CC8BCD83C2CD32C37623A7265ACDE6CC04DAB9EDB3D1B6E53168F985AEA20C7211B953071

307939C50C7463CF681A5A1BFE71E3B226E407E8E2633998E7676405C58E8892BC0C00DC6B2834389401147EDA987348A141A760BFADC596F9094906D530D6F74C5462E7AD40DEF47FC4AAB6D4D410630B1FAFFD044F992749DC5C6B7BECC8AA0E73A07ECA553E203E521A67CD83794651F8B2B96687695B5F3B63E229077CB7E4FBA8A1EE673A74DA97DDC8E7FF32D5BBF3BDEE2F80328B9A23BA8BDC44BFDB8161AC29CF33E8EFECB076B48D7E601F1AA9980EA89278C58C43022946F83A3225560B94E83A13155A

41B069C7003CF25B62DA241B287AE3BF4A917C75167EF568DD989AD3415479F552DA3016D6246D72DBB349BE9E588FC88205A58EDCF8A4C83DCFC9E24796694FEBAAC4021F917F004E289A1CC5063CD33F7D5A89F07A964AAC37E5152A1069C36E33F649BF3182A65152BD18FD6E89CC49E264A32C2FE85DCF9E35B1D1B760E6C4FB68D7575FB8AABA5C8AA77D19373020D23EFEC90D58DDD80AC686F3948AB7D2CD2D198DB19F29ECEACA97D01B43D6DEB7B19F7DADFD7D3997642A075EB6FF6EAB76960024D95B13

4DF4C660DCDB5A535F022C52F1B69CFE77F29009278F2F7A54C79D999EB41A8BE9A2483F6959A55788072F8DF6EF01BCC275FC2EB57F3C7392928A37BE5A7E175A292FEC727602F9048B1B934D7704DF0377DD86B522A8E075BE267CBB13B1ECC408AD39972880451E100CD561F122576DDC3F3E4561DE19B550969799F2D87B2FE35AF32C556B868167F453138AB1667685352C308DCD98963742BF665CF6BFC216549C91FDE5A38F5ADB3E14E72B21562E613C6182742DF8ADC5B11FD1F1F7778513104670308B16

28810A365A7E941326B74D964C218AE2E26843E4465D97244A375FE88255665D4CD5594ABCB534326B081665D09F2E84275BF33649D8125D116654B8863D06F14DBF8816B50C537A4F2442178C797DE10F6F7929B41FFA3AEA2D06C7A8A8B94787D6A08ED89D154C1B7E34B94A799C67560752D2EE5476BF144681C670B33CBE8278BDACA9537CC75B0F45A0FE2429DC36AE084BAD2124B0F8D58CCBD14F3C35EBB29458462AFD810E039C4EFFD20989D62C05DDA2821C85AC695E51FF315DCFA50CAA82FFF2663826

6AC9E0BD2B7B225EE99ABAD5B331A17B9180A0
DDB88A45CE922F7957CCFE4119BD944D4120C5949CEE703F7B5555DA72E01D8CC4ACA1C26EDC37094E9BA966854A859E152AFC3BA118631FCE00F15D284C454814F70C181EB7AC09DE3B227CCD9BF537041AD40BA5DC831AC9DA2FE05E6426334032E567FAAA2D871A97917CB576A2D38C3CDD94ACCF7DF493353A2C06D75142AF2C5D273EF51A3FE47D7A4420EEDBC18BB7FD46A4122CA9FF78C9B4D504B3726FE025860D14291F31B5234707E5F091EE1CA07A520A66FE86E9BAB14526DABAEFC5A6B9CB1AEEC230

9FF2CA523D5FCA7CB06C135C948B6F9F5E5917A2E43C1602B4C2F8E21A85C21324F30A5739A8830F95F7BD79F6F5CAAF982613CD1AEBE4B274DF40F78B6234EEEA47CC014EB3E1679CE33C91B989D0ADF8EA8AFBC34BD84CDE4DA72D40E02989F903E315B8D3DF3054CFEF797844C5CCD49F22F3726BF612A91FB1B56CD4C22DBFE489FF4D11A70CACFE3F7540485C3CD8EAC92CE3285759E1A168486CAB494D8275B22F7321BE59EC49F56E6AE77EA0E44C0DE0387BB726CB25E1DF1A3011DAD8D06313AE2EEF3F76

5033FEB8FD94253F6F88D3B588F57ED7A74EDC62223B2FCF14E994A4BC863448D854C038D895A479F556B2ECC219F7504294D50656657CDC193A81BEB2D27D6A95AD1FFC35F6113E90E466338B95E7324646A796FFA1D899204DB1652732B2D74E26C6D9B0745F71A7CBC2CB5BAC2D852F191A8E780A66C94A14AA740AB2729D5AFB3927EF6DD2DD9BCC62FB84D6E8EE315C19F4DC0229F264BBC39B60785300452320A3BF946E1FD2DB1453972D206B79B4949CCB6F85B5E4C60ADF3A6065188CC7C9199A7CB01378

1E2CD1B891558054396DEF8CFEF329805C9841BA00C6FF1765215AC749A51FCF701EBECC375CB5653EA1F6E9C018934254009D6D7AF9A7184EE8C9D0B6299961F15BE3F851988937ECD6A005A34B34ECC5CEE8ED92456E954A7CAD2798028CB8F8E0D25343137AF1CA952681EBA3D4A2A67B17A418F5487695510287C5988EB0159CB5099476113CD1AE5624F1C373169167B67EDC16F85F6EE91E999B2DCC30876554BD2E14D8CD4FF7D4E17EF7F9990AFFEC06860E5F7559C3285E233661047C27A46535F0E70125

AA86A7FB3CA14F12977FFB5087D359FECF5D1FC9B087B0AE99098B98E4591505ACDBD5B83320A90C5BD879E2BD34723813856B93D078A92716C32EA0E084AF11F47292BE75481DFD2133BB37C73F5F168BE2D8A12B1D21E77DB35D42546E964E0D187687246DE880B2EE5C186925E1BAF8E717D8719C6F61CA76F63633E5324A6A5CA2C708429286712B7DF8DC0522440E854AE6E356C37ACD3D20CAA8AD76F669A828E9E5612AB8719DEE0E32832572F95539C0AB9C51584F7C2E15664AFB171A0FB6B6DB331B47DE

3A99856EEE2EFDCA3AD991EB402B131CEC5F6A
E9459F6C061E5E6AFDE23E761329159BBAA725DDEFF2DD8F129DA8D20BB268A7A851AA50DADD000DB11DB437CFDAC6A6AAB47E0D5089D5E1ABA839B4BB73C6BAEB085E925E00989C69FF9448F6D3750912B9B07E78C124AD4FE5935601E8C91393648E85E91E94716A1E7E2264A5661A357DED6B16EADF760A4F3A65EFFA857E73D8858FD6A62974F388E59B910A5158068E3FBBD34294CA296D5B43BFD007EB52769E8AE3C863525934523208B365DFE1C5DB21DA8FE436B7B4EDB7413640059463C57F5485A4FE33

BE7CE69ECC0F34F980662A50EF2D695574A40E8D2E5B576D78AE01477D81F602041FAEF80D291260ADB0417C311926B92FEAC032C31EFD01644E5E8AED16805DE79D372E488DA7AB0E17EC85559D9A443BD3261088767F60E6ADF260E54E3A2074514AE8C285F24929CFF7DD6AB529DC987A97B7603D9A9E30BD9E74C6EE42BF11098B1B89C1CD988BC565D22B92F0751987AE44FE3E5E7FF0547F775DB95431A0AC773190995E97DFA18894294A2E19AE4DCF6FC12989D8E75D1C954FDE85DC9F8E1F025F3254BCF4

13A9BF2E7D877F98835FBD4D4D40D02B74A32776FAA612AC0AD874C649258B9E15207874CAB91C04BE786F09AEDBC9025FB626CCDCCFEFCC0BE837697C588A59E2AFC7E71F9E51E53AC0B51FBAEEA6FC4FDF222AB74C1C63110A88DEBC308E9437773A2A5BEA39B4D6A86A73C73A505197C83BC4223A1D9779807AA366314D503CA68E36AA64D189E758A9D883BFF7BBB1139BCF2E1832C8CE7128E95AD3C8D06534F03621D302C055A547ADA2A873E570AAED1B968A6778702ABB85FBCCB7CB20B3ACEC60F605940C

6A75A5E112FF58BC89F6A95E928602D111E724468D71B6C2E7BEE4F7BC35B3CE843D9EC68D8F042F8E735F5F5043F1D2ADEBCAD87082BDC7957DCD48D90A64FF864BC142849EB36592DCC1878AA5D838AD4E144C6ED10E097442E4B7D60FBBCB6EE0707905BE1C60D33974B79EE8436D8BCCA779A19A00205F4FB3DA42ABC88670A67FF8E2C04123269DB78A11F258A64B3139DE7AFC6BFC6466D803FB1E2EC81FB80D8452F437F59BED02125D400C83E6BD8C41DBAD6AAAB18C5B6A045547821237B9526EB6552888

B2DB1AC383154499DF6D5F2DA9B121AF967658341D9DB465FD8DAF29F2770C88CEABAA39BD0F570B93D737C4634D964EE284F7B535E2EEB2A51BC0974CF94AED90DCD9BD875FD1C2B939FE9E7F3F465220372FAB5B3D9F5D1879A4C9BBED22F80BAC2FEAD1DB24C891D82DAA736FDD2CF3383DC2B0C201C6A922F735F56596E0777D0A9431965D645A172172B4A695679AE2719AECB7B41C80851EAABCC63A24D4E06489896F2D1D01273D975BCE27F4DC7BE8D275795643B229259840EB5D7F7EA17DF1FCCDC159ED

E5BFEB851FCEAD31F456B30BEF9623E9479C40
4BE46D0091BA9C2B18DA42AA4F715179E68DF3273CF4617BA182B1C6E4BB76CD411CC3F403318AD729B39CE850C2A7610A210D261490594F8B421DF77EB94B186D47EAB36C684C5C4089E5B5162ACEC27B2A46E9126C4152E8946503695BACFDD7C2F8618052780084F326B024C6C0EFEE13E38E788EAE0442DAD75E82F5CF0F375F19492E504565377225AA336B4036C7209966D5A82FDC37EC1FAC7D7A243915216BB1D6AFC2A955882E300FB0CA044C9FF345CE329FD8A5A30E85F70A069A15668C20F872E01A03

63803844DBAAAB951EB70538E3ADE96436FFC6AB5D1F46922CCCAE14DE95DE27CBCD8140F1D5B086190FA4C197EB38224970D29BEBF25FC0F3882BFE72DD966015635E24455EA326207B4365646FC06D200495D423524FE99E04BF78A3DF8F6B90AF0F62D4C0F76F4F17B3FDFB372222C3E8550492875F437253E916BA62AFA6E87B1848ED2C4E712163B0E9D03480D8C8F837B87CF36495D2A66F9D1636AE01D6C966EFFA85A993964BC637427AFB66FACECB0110A0DD9F90E6F4BBFD921CF5AD344CCFA288597DA6

40ACCF0308B6965DA877C2E550F445133DF86957FFFD5741053E37E6B74EC578CB3BE0E741F30F2BA83FE35ABB741427FBB73CAE20406C71EDE0DCF2D4ABA9A5F65899A08ED9EB8FE3EA1A057EAE5A7DF8628E60942B55A2B0CD3DB194E754A93C7234A6DAE4EE4FFF17ADBAA6C6F3F9E38E585E2E31A85313707B1C48168FEE0C5C06C0FD1F3FB3D8D3957D8459BCEC6A4364BC75AA78A6F896AC989BBBA57F0B2481BB869D6D72526A938F3313DD3A5CD2DD05E928A19D513645B91C286913CFA4C1A626B51B5FB1

4DF01080142A623E5DF4133C4D1924A08444E0213BCCDC05CAF0D4A9F065503815D548B87B5773DCAAEBEB9FBF41786B061E38F95EDCE02D68BE30CB95EDBE48EE78A511F75A42B3994EF1A94B1E646D02EA40A6E28E047E1E0EBEFA77B6F12BC5FB0E3A998DC6C436C052934A33EF903B43F8088A95F909A34774D728566C620E14A267130259D2662750EE0606A17840CADB0B1E032DB973EF82CA8BBDE0D377992E4FEE0BF1BB601FA46BCB4131B3D8152745F0B7CF1D037FE78E1E661DCB1BB0C5EEFF53473193

8210A21DF2F8C646922AA8099AEB2442EB1E546B07FBD3C0680D0F3A13C61249603FEE2ED2600901D9F3ECBA4F299EFE323C7A1BD57063BE331B4AB895ADFF4D1EE8F96EE94B9BEB8CEFA846F84003E5C5CF8C00BCF52145FF4683F9D7BBA6B8291DFA9DAF01C0BD6C9C084950E65AF2962A361E94E2D16639C7DB50636B05F7242519F6763B47B6A06EB6DA0ED29A538E62FD1F69705FBB7AFB729DF7480AF5C1BB56F32F607221574E4D6DC0C0CE92E5CC2599865B8D3C21B6EA2608B0932D227CF291E963A1CB40

E5BB6C0F2555BF8BA4ECDE27613808A5BF0247
5DAE3C1EEE5F53E47A65EDC0B07E09BB17F50A91037786CFB30D9375E7EE73F05961BF2BA1D132B59E88817A6D623EE956FADDD63C2AFBBAE7552B00DEB78FC20A08A98C3D677BE3F33CF6840D4A08AD41282518B6F8B5805276C0849F2227DA84233383BBF1F077517A5F5D6D8751D1CD4870BE7194F5F1E519CC4DC796690C93CAE23DC9E3DE1E713B74483DAA325EDEF7A7AF100762D431FE60C3D1EEA958193D0770D46C1CB92F731CD7A58600CF0374A98A16EE5BFC056EC9B1148FCFB48DEEE85972EAA23DC8

58A707602BD92800478BA2D78556D23168FAECCF83EABA32B2CD5D368491CACFF27A6A07F9288B72F5CD5DC181CA02F4BB5293D973EA8E6615D684669AF943F8770F1AAD5AFA126B0113A87C33CE1825C49BEFB4A8944FF709204259F4F67A7A4457E1ECF26C78826A147921FB076841B092B3F96A8B481504A26E2C9BFB3FA4D8B423A7291D3FD1416B315D2843A62077349B582422F8312A5246D732E791AF43ACE9DD549A62A7FD54416D3DE81747687563C67015A4027104A3D2ED47FCA8B7966D90001F7BB00A

5C858C3908CCC961B6988627837147B48B301D9F978B65156F7361B7B6339BA381697C52F9E0BBDB37ABAA4EAD2FCC38807290729CF67A3770EC58A0F5DA695EA5B5E81E64E87947758D567C3F90A1E070EFAA1C4DFD350FAC21CD89B74BCB7F0E5138E4E7AF19F129B047BBAF82D36E05FDE06A9A3D4CC7C296110CFEA83747C65D442162ED457A67BC2BB0D9A68EA6F45E7244D47725B4B85A9A4796A57854A3F98F707CD3DF32AA8E9C7B83C925E62C21B4B3D4AC2DC48162C45E5A2F998C6E8AE85AD17AC78A8E

533275EEBA6971C3A02E1EE404F01F639C4B37D689AE87BC0A25A5E596CE9C2195EDC62E90774AAED9B9184ACCA3E98311F55B211DBA8F02449FE99DE9A76FF7B9B95D96F2C16500265850AF24A9DCFBD286914FCEA5D84529313648511E8D087B246A9FF6B8784C0462CC230FE901197BEDB7AA6F4905A579D4939BFE347D853C5E9FF5CAC14F35AB4CFD11799F392D6FF69A4C843DB4334143B6E305DC81B384D256EFEF0FA118CEF6D2F9AC205AA84A7651697F28BBA63D10AF7B1CA855512144049DA6A73E31F4

EC729535615676D442BBDE6E152110B8869333535D56F32CB3A011ED7F5888A0CCE9FC819E9CA5C0C5B9D1F3880200E941B64918A13C52ADAB4F7063A2AC7D788690BA2171914162EB25582DF45F4F8497A267CB1F648517A8FCEE80E76EA1295C430898925BB28568A584D2F0E2F9C154DBD657D2383595DB30BCB347BF0E365BD7C04583FEFCA0955AAD2AFE233E0847552C572A96C641967E4AD11BD11D4436BDD557D4CB3A5026F91A6EDA8D6C6B97BA77A953225EAE83718535A0FBF7BCC45354104C43AC8625

4EB5C8191D56B3A12383C1C56C2527FC986E99
BF0425BCE1113AD906ADE13D8842381BCF466D79C2AA24AE43ED18A0308341F9F59C650ABDE50A196FD3F91EDCBA0054D9925FFAD5F56F7CE3B39D5F3516E8BB164DD6306361A490073C339035BAE3D74BA15E810A2C0B88DB5AE81388E273BAFEC744CA5A789204F5B7695BC680C5E8CBBDE42AE494106DEDCE2178F35AE57BD21EF19B15B4AACDC7694ECE9396570C689E43668226F55BDC9C9A65E95B5EB25DF8A3EB4B0E745BAD0F17E3966331380B4CF23D0A559425593F475AFE8EB91670BBEE1584BD499786

5E2430A2E210593EC6E21A826C1949A2829FAAE7E41365D390A0139B38B1C1CEB0F28FA56CEE67BF8B167B49270B0FB779411DA310A921F0025A577350C32B7D64EF88D6879CEE02C527082A31EA9C669F62300C28650A49D4FEBF8A634D616CA7915FD6827B55C96CA7063EB3DCBE2981CC416A93367FD483E92A1C0B72B479006F5BFADB12AA1993B2C51139D11FE8FF353977B1AC0821974B113D344206EA8D620E85D56DCC10ECFE85816BAB41AE1D055D94FEC5E78C941852F2509FE15625BBD9500FDE8FCEC3

891151D607006CFB32C9305011FE74AC3168B280FFD768CBFADDAF2E1E62517779705F6919B2DC15F6AF191FBA435A5DC88DBF21DCD9C4ACB63D5B8B803A2E8D1B4E754232A1B957B75E0C3977FE4121D7608CD94CE48C200B6719384EF87FD6CECEE4E1B471BE0AA2AB3B0E197DAA98BA64ED9FA6AFBD3F017935041CFC12BF7E2F1FE4E02C9062357C1AF4EDB6C3C92A34776E7182EDFD980C4FBAB4F9E35E565A299D34B5E451BE8051CA65FE4E34020D62E5DC69A02D08201C412666BC28BC63C45DC95ECB8C15

3163E5ADF37F83464AF85B33C07C5C1CF96744E021EAFA4F2BE1B03C90026F8E9AD1900D2100DA251A2F2E7824B1C234D3509185210A0FD70F2C26E16273368143E0071116E80C2599C93A79BECA1D4515AC8B50DFE9B3F433237FDAD3B96A40822B5898A7ED79A17BDCBEF6F7963093116A5F45C320512E3DE2A507C4112D859938EBEAC40DC960A3217617E6594A75C189DABDFAE1967E59E5DAA5F98C99A32B46002A6817E44B877505F433F581A00F8D31A8FB4FB51D5A7FFEF51646B3308A3C501B0218CD3C3A

B24B3814A316BF84C114F81E39F6CE0A6CB799475D9C5910615577F80FCADCC055439C4EC953AB325CF3E5B9A7E2129BDE5FC70A1C8DB97D40E342E2B38B551F024EE98BC4F72EAB55994D33AE983911B33082120189D8481BC0CA7C6B43479CC2CAE0474C7A45424AEDCE86F969AB3668F2536CB7B5D260E43ADF1CC828D1037D95DD7839DDD8530A5C17A99594E9AC10C81A91C928CC423085011BE9403328E5CF6FAEA594CA0D43336874DD8501112410B69ACA7CF7E683E1543A4F39865E4EFC41BE4E9AA2F6E3

4ED05A360088A57934F43B252B6B78D11BB564
283EB20280469B848875220F2A3E84270D07D7921D5EC253B40C63FC6183BAA02E761DE65EDC7D406402CC065BF146537C8EB94D0E1E6E8AD698641902E6CD35E5B8518322FD0AEAD87EF11A1AA34B7A6AB00E28C1A59596650FBE492AF608702CBC6134E9EDE1AC8ED3DCAAB812A3F338CB2572FB056195A5C8BAF4168937E249E5D587D1334D00C7D8ADE652EBDA115087EEFE40CCC7C03105AABF78B83FAAA2BAD887DB0AEFDEEE945E391CB07B9DFA859AB37F29376CF252BF8DA5AAD5B9C1326C6BE27E33CF60

C4A55C97CC8FAAA4DECD7EC79E40F178B3C188D5B21EE824E53982ED23644533E715076DEE406B2AEC73607B6952DFE2E9F9322F0DD3DDA012A24DE0A7EDC75F37FC22B474BC40B0853075DA8B2F87D0978318FF72E1C0602E4515B0AA4AEEAC5D7A72CA60B9FCDEC3A3690AE4A9B910003F3A36366C701933E470CE97861883F8E85CFA2DB86F807CC190735A49CB78E52D7E4087CC3E4E2E5E3CA9F2D2D16BC83A768B2A48395262AFBDB2782745512E01E806A59F867B5CF5831D7283197F5C7D11EB1F4A5D733C

AF88DCA6DF437505634560A19C2E1DD946FF057E026BE0D7EF0D656EDF374D53FC1C717B75190E44F289D6206983D920554A46B6886751CADD61C75A9CF4B6400FC624BA1A4F54578A9DAE5EB96EF54F92952967F5D60DD2CC809098C452599BF3EED84D5581B95A44EE38FE2ED2FD41CF975DD8B36C702BD49B8DD0736107B5117291465B7571B267AD29B4B0C93B38B2075D5B6246AB498FC5A2D5CD26B12E119DC933691D977EC291BBEBDD6D7ED97344DDEDF76BB181F6ACD30A60D1F916EF0665E0A38E5B77C5

9918DF8658DC03F25E25E861E2F0CE91A93A08A755C1B0C02BFD991860534DFA641FE19CBE1E6784E2595EA8640301DC46C9B72AD5B77807D151714A6CD2E59C3BC62FCD7BE26A1C6BE7F1AB4DE1E74ECC743DB42DA2F72DE0AAD1D2FDFBC731FDE79643D6AF0E72171676F5A2332D76DB9ED01CFDC8FFC9961CCE7935CF47CF42EE2D0DC3E3E991B4DB2288CA8D0C044A14AE9B2BD464F47A4A3240DE4BD976CC1D5163ABC9ED576F8A18792E1E59200C44CEF19BE20E1DCBAEF8ECA4A138771D1DB88F383C282FC8

8B57DEB52D4400753751F74B9E2AA356D230734E8C85B0DFE71F228FC1D45252322C4DB4F5B9FB7964894CB86ABAA8F123955231CBC3DD5C31AABB2275FD5CB5CE9C35F90D099B79BFC09D54742BAE908BC7EEA8D933655D553F36B031880B0C273475D387AA778178EBD50D6C37BD0279BDBFC001AA4A3AD4D1F58DE3D462FC589075491F223D2260DABE2D5DE7B5EA8A4A973FFEA9D31CD6C513746A8EC8D38B9591E52F32B088765FE7AD902E73EDE4109F49CCD21F2A9F7CB7767F33C2945CD27899EA360B3296

D45599AFF6EE7017EA50FC53CE1D998581F4BD
CB3361AB1192E261F827D00D4E1C7E5B5721EB8DA55A5C778570138DD67C7F157C35BFEE20E2B49BBDE682DF5997C080AE20B98B23627BA49B33CEF6E721A9C5D7C957B505F7BE4A4718F611C18A81FA458F3979D1B0B0A4A189E58CFB0C2610B8A4D2A9F7549B1CFB14D314F3083618D79E9B08684CC0EBC0784B7F88B78D06ECD5F129313C609B826DDBE5D28FAFA002B483C6F1A439CC4D5329A2B4E1926A6CD369E953E9179CCC7437AAD1DB1501450D70E11082ED1CE8A9BB63E85EC5D757FEFCBF0FA58EC3C8

94F9987A9BFE14068EB58C7DD8A89695954A09E3BECB5482498EEB7565860E1849A9EABD9B9ABDD9563336528E36CEB62D8CF729D0305A4C1F920B72136A0925B8BB5FEC5F7223EEB8C87761244E21C0EDFCAABE639EE132077D3C6DE4EFD1F28B502316F46E4011BD5672DA046B4ADB8955DCF1C8AEA460A69C61C3B3FF02A3879201FB94AA707211AA78AFD1E782246AD233BE2A1FCE73F84807D847B67F062BF7B183B3E4C080B735C988783688BEFE93B255F05192C7521678A658BFB7B1A4F14A4F533009BF22

4BD604C4A6713E97B29AE59741DAA29C92B05306A872ECAFA3B94E83A99167E7FFC7BDB55FFBEC56FF929AB403327433328A08D6AF50EAA0B645FB97EAA2AEB4689519ACA26A0AD12492F721B6BF9CD055263A88B68FB3C88A6646763A71064093D32CF8CE0A9347E79B23C3EDD23F5E6AA5E2CB302B5ABD806D8E5550FCFAA486A4A41AA476378C0A17D9C349F1599A7464AC9053F6200CF2C2EEB14795340F2B8E891E6B3FC19E5F4338DA25BC82B501A3AB54EE6055E55C20687CD1820CA84A68C89088601111B0

0779F3ADA990D97725F490A8124EE43BD225B5AAD91068AAF21759827DF22B685C3AF99E61F62754A7D59889BE58E4DE240BA6B6518959E9091B3A0D33EB191058BA3BC248E429EECE1ED34C8EBBE2EC6C0E452B942D295AE6EDA6A6200F27BD70562280B94DA81236444AB3B39EA0AEC970BFEE6C89DE4234FDDE152635E8353F562F9FE5AEEFB104192FA0006CAB95AD92E8CE5CE100363F1CD38DD500C8C06D639B9A995E3FE0FD7963987B628E3D6E4454CADD54DDC4E453D357937B4F3124B4635DA53FFFF1F5

B93FAE0FAEA7F4DAECC6C17CCFE1DB28A674BA32F46095DA7857DC6D2AE097DFC8FE0DA6B69D27C6E7AF7977FAEF95711F11D511324425617E84936CCE72F435EF0EC4905950EF3389408AACDFDE4724B11C8D75071BC31B6003F05339035D175841902B93D35B90298C86524F54E22CCEE6776CD2745F7F7AA3DF76463D9F10086A3FB7EB4E096B5169B8525BFE6B83E6911A3ED687BD34A1507475D805983471E639E44D97A086022846D030C8ADEB0656C7074E8CC00ECE0CC3B7A5A236D51D69F17DFA2C66507A

98E2CB23C9DF3820589CE8EC57BEAC1D5E0909
4F7ADCB840BCB8B2E416458756BFD87D3A90AE7B75D5133A8881E15C2D4EF202B8DC53CBC9020A32BE8F4207AD25CB396B6EA0F6E6E58E6F0409CA0C43244D02655BDE6705CF63FC85E1F7727FF1293C4E443BF376EED5EEE1C0656DA1FD370200370ECAF608061D764DECAA54FE0D2252B419DD15A560A4EDA4667D7EF2ADFAB9EFCE7EA7CAF8EF8DF766A855FED84E17672F2A13406B4C7E06E0260D18E70D9C001DA1D227896F85BADE53341E8E4BBC623413A6F809044FB3E88C5F2B4C8E755F19EE7B71D0C814

72130A6B77D1697E821765EF56FF8C378C8C90DB1C6F89871904DD5153FC5F3393C6404C3DC1B98314A97CA0892A7F64BD16D6905909C77D3704B427EF9CDFEDF7F7B0C5D136B5120A340D5FCF952CFD5D8B7443B9FD1A9B08945F56EF784476068A9E499CA8FAF8429D29CB53D00D3C8E0426C1B5D66B85D24F85F36ADFD2E9EFBD94750F0556BD028671D0467808DC0BEF91CB48EB73A055E9642D28D7E1952A23509DA950074269C69CB055286CB4E8BF229D55756AD6ADC17000040DBBEE1D35C724A0485A209E

2624080F360D69625E6C19F55F6BF3A447948D4AD440AEA138CCF8B771CFCF4577A52F7CAC7B4AC3234A3F0DF904AB2CE29AAF2254C3A98F17358D65485855D2A3FA358E8EE682D55637074EABB7E569446F8482102329A2A40DF029C2766E97E768C7465E83EBDD7D14717E5C93ABB22655CA683F517BE03C8F79ABCDD5AC200FD1498FF24313E1B1CA3FE051E4CFE899886A68058C20C9006894EB96215F2A55FEB7EDBC2A10AB62314419A26031EABC53AAFB4C6E6900A6B67D53B6785B1BE6A0689F85DA6AA2E8

689B8B582F5D9F873BD5F5F0D8F2CF8590B0EE881853331AB6EF759416E25FBC1935CB937605A4B0DBFD279530D1FEB286BEAAE8C4368169B338D4413F22853E7D81FE7DF1B241AF494EBD0FF1AF9E487D2026FC869EA7663E28B8E8A7BC1B11DB0E06A161449A981A286F8C01AB28AD0FA3D3F8DD5D6FA4228FD690A274F82B92C77A41D15F1F266EF3E251A09F75693AC276E7F25060E3C3FB40276A1A25BE1536056A4A657AD45E2AA70172289036C98CB925F2C83F9619954D9C2D7E4B6E382FCC96BE52768C84

EE5D7A2190F239A09965E287415F38763C946CAE98C3FD7B3B347C9825DEECA25D095B482BAD866E158D499F5996C28C526CFB1AF616D9292AC36E617538A15CFAB7E94243334B546F67D043C234EA44A7690E564A1F2C4FCBAE4744142CA81EF4A3746D733BC3F8CEA6E7D501BB252077327D7D15784E976E593E4000C05683B1BBC85679F1FDEF256A04C130B260ABC5DD017E3697FB496763A14144458188A3FB1F1B9D668ACE60381517C3F824C8D1DD911D2703108C52675A2636FE2D440F38BC0703330125AE

5EE0F89A0C2C392B2DD43DCF45A241A90B1F05
F0589AA296F5513EE2EB03BFEF7170771374075439C4D59313F2EC14D5113C1A8C4FD9CDF6F35B4CC8BE77ECF9D52C850CEEF2401DD763F93AB6205A9634FAC10116D0D027693586F0104437E66047D7DB4A10C9676D06734ECE473624681EC6496DDC19AB8818B3D7192DCB164A9D1C60CDAC9DBEEB606C9D8D24B10F613F6AE2C277C6A03C3256B5F551C334C9D9196D4DE1A7680CF35D89CF387A4DB608A5894F9647E93F76E27673D113A730E9A11383F5AFC9290BF1CC5C3DD7377753FF0FB2ACACB2C307A2C7

1A34CEEF14B07161F58A9612855DBA2B9ECD5CF72FCDF6B36B8CC712DB27FB5CBB4781F4D327F91C7800C5B9EFFDC0BE4DB73FBAF5D679EBF41FEEE9E843B0A071C259EE41B435211A3D7977C904929F284453827798A31D232C60B13EAB11394AE3E4C03AD5EEA3F6BDE76BBFD5E662A2A0AB7B7C05B7CDFEC931C019FE81BC6517BCD51E3767B2926CB381FED8C6C9949B9D36B24F862610D792537F3CF12CB1868606766EDD6F6625219D63A808EC6C5DAE98BECDE50632610C973FC6955B941654D763FEFE2EA9

823F9C21B256B0051973A0C9E14BC09B31504C1AFDF0E59AF550AA7BEE1CBDA6795860A3207636E8657988B6A89BDED393B3FBC84DD15B9C6195D281ED287DE6A03E1302FB6D1472D538353E816197280926F945CB5B385B542A45CFC36DE4BBFDDEE6EA7D730DCF1A63AD272AE0C1283905DAE491B9CC0AA1BD76DE06B77154523F6138156CA9EDD7ECA5A498D1F9E2296D715C5BEBEBABAD7EB3BF0094718F923937DDF40938B9233CEA7AFBC3FEA718F51CFC29B4E80647E6A5DEEF8D845A5B01B8B4E37905031E

D29CD663E8D1CF10C828BDC67A0A4E292A3BA9ACA9581AF3DE4D798B9691090501B49D149668033990FF8DB652FD99C4BB980E31740AE0588C0460D91E8B28C8B5BEFA60F9443DA4C7760B7D4F27951A3AD9086E27FA84124324CCB9EF8C83D5CA353E0D9DD127BB149BE939A2F8C47EA334424F3456B6A8107A95D0B1A245011E7088FBA37C3A573AA74EFAA7969F51A6FE3D215BF57B2A1E28A884822A3BD07A7122368A64F96B6816C5412708F86B2A6BBA5555EA7E64DE917F4DAC40B458C24754F3E241871A65

CCD8B9341B49C6C4778723CB7352B31FE789CB65D55D735A020CFD7EBDE4E8BC2C590FCAA10ED1E410FAD1212990DEDF4A1B7489B68079A4170934C8879692708F41431C091D37850AA834DD101A3998CEB47336256742DF8C2C3BBEB19F01B8BD91580A460B8CBA47961DA2CF6DDD40229CC805A5467D8C786B140E29048C0C19CEB001FC1ABACA8009CAF33FAC20E551E33E7FD8A8B02A8F4053E69BB48B6FF4C9764B1BA5795FDB641F1E7E33888DBC359D15C623DC08385D4B8653D071703CB9263F0B41FF2335

0B34BEB4F51377D9E7C9AB5C21B62A838F50DD
9E0BF6C130DA31424DD64F414761163AE471498E193EAADE8FF744754D53EDAB3B5B92BCD9CBF70B843CBA024883A74DD141B828D17D87583CCA5BF0CCCC10152F1F006869D2AB7E659DD4C9E04216149BE36F8FD3B08B4875AE9CBC7D3A40A14C03954192A1023BF03FDA57C0AA48915B940540DDF0ED6156A3D52D796B2594C40463B96F02545C4AA1FA2B2E9FA65B23064B58EB62A4E524C05DB36D5F807C9BE7244E840ECB94A0D616F6F56A9F1610BE0036B83BD96BB02B959DC794B370073E200ED2CED42FDC

DA6D0505AED35B15DB205F262C8950B5E29F515060624512A0C628D3BEE1F4A6830FB66453783A5119723541EB93A99F5A915EAFBCE414D4ABFCD22200205CD861B833A1483C173372603DC3F60AD8BD2B153483DACC6EFA21BDFBE7671C322032837CE75127EF7227F6E8356567629AC9140183B9666CF5A440436CA5EB4AD07C707007C343BC71E549ABF1FF3275B15390C48EA62B3B6CDCD9CFD146F0B1A776722E5B787DB659753CEB81C794966F4B16F5836E3DED5CE421D64575B0853BF4F1A4A716373E1030

7C5F022C59CBB0EF0E169560E7F49A8B526819987C343F7E7C73BD768DCE54393C2D7274F99222CB91A6786008539A6E6233767A0DB6B4F500BB02D74B5CF18EE151DDFDF12E2A87FC36AAF03235BE2CF58089CBD41CD50FF3868388F94A3231BBFA7E580E3531ABD1C8B9DBDF8DD08EAF272459C565223634FF946903B98C9E698A3F53C7FB78C6C16BD60CF40F62E4E53215209A29DAB3B298D66FF9EA46865910BD3205C89830F5FA8311BEAF95306009482E34C192D1CD04EC173378322267D8BCAB9E5FF993F5

5DF5E2F53874E31CC608E4C6548B6CF53EE955C4A682585D2420D79C825231CABA232B66024455075B1C7BF7C0B7D5C3AB4F253F59EFC84B78E9C4C1FC3734789AF41E89415C625A7C4928E65F03B66C37AE67821952CE8C14D389EB00334F83283E27214411B075F2C66F7753AB715725811B7E74F46ADAB04BD6AC99F714E4BF1234799C19118DD56C7746D0369AC2F141CF3678483DD9CCD42BEC221C9BC76FA9F85F4FD75A8ABD05E79905E4459A5A1FE5C493723ACEBA7E0D31C8A76B87141BA9435B40DAC26A

CCC62622D242D3276C72E974CEE6BEBF18D5BA80C1CAAE26C2F20AEF449C39A31D7DC5E311AA622D04F4F0264DB62434EAC95CEA14F897C64CFC0A452DC755DF6BFC3B14542DA67E816FE6F85D18CD64A5F776A6897E5253C27BA0A84E20958814421F92C6A630D8F486C009646F550A333B391960B2D6E2AA0528986E0B63AA31464AD67A8789565134D2CD12264E7917B9FC732CD53294B7D23CE3F6F6B4F55BD530069D0AD509B064F7358C7E510DADB3CC265A4B84C156CB22779F1070BF935F9812DA8A78DD11

B6CC4ED660CF51092AB4584470E5B780054A34
BC9657DB2A15AFC635C4A386BD780AE0DE03AD4027D27DC4881F9E73E50921A04D7F2D3CFB34FCBC64F0D1C974FCE576FBDFDCB088746D58C02CD7D5749CE1F1B738200B177D6A1E57DE65E8C8B3C972D7E9DA92FE2A56839857E45E946199773DCA9E10637B99605F5A167EB5A831D712AD2B94B6E5D236F982C1CD7AB9B7C7B1C7D1E10E0789203D59F3E4CEA77680D7E5200DADD377075C0643EEB0A04D6BF3EF895E69C5ACD72807735DA6782619254FCA2FAC3DDB85202DF62A8032BF41918C3A57069CF39781

0D1383B37E086EDDF8E6404072B309511DDFC3FD247116E9B91259E959EBD338F61E1B6CC77F9963D53884565642CB662533740CE21ADF872C02E156CBC53449D7E03C3FC3E2EABCB869A38C12E900635279242C08F921D1AB603F428B750A7CF82E08A0E19D069D6D02B6364409FEBA07201B42CBC8D8F0D0EF92540F2AEAEDA4A4F8713D8409806E990A0AC1CDBA0D6071561D5E7C2C0AE58F0047B48E85E7ECD0BE2800DA9481E8A49D4B931178F802B21B8DF67B9702A2FCCE2DCDAD37C6996E923CE92FB9B1B5

612944B2C2BEE45A8E38C8DD6D4FB0FBAE29FFCCCC2491AF82CB17E6EE59B4F2E54D0247C7DA1E89E13212AEBAF85EA71733D962D514CA14ED1B6B14E7F98C8C7357E79BB46AF38FBDCDEFB1402AAFB85A9BDF51023EB956031ED79B97B97FAA5B1A7F65C10FC3734D5C6B5F46FE5B85B0E55C61A60885CF8731D2423F963565E6CD757DAA14E31D5F3954D1405E79D22020067FEBE9E16FDAC9311B209FBEAE3A640E0582E06D0F9809E108F48A9522A463CA264402FD49C049098831EE0B931D8666C2D9D7557AC9

B04E9E9831B82B6BAC8FA6974B67FC120FC2C592B9AD30EF30BBFBAE1E45DC33DCD2A41BEB00B11137D5F2836E18183F2672CE1436E5ECC6121914E63EDAF1878EA01C7C1634D5E3F48B96FC0169396B1EEA42EE8EE5947E4F6113BDD2354DB6C8B7AAD1261C92518B9B8FA176FD6C6041FA4E080D7C4FC8B1243F01C0B9BD02D9077CD96378CBD917C9C19434E70BB66363F50FBC92F197C602C570B91F256151C79114FC67942C9277B962F6EAAB995CA0CDB1357AA0E5E09A3857587D85211E5014BA05FB8FC247

6A743CD168C491D56CFA9B8ADDF5968F991EF5B71358C08724424CAB1FA82329F1E7D6C13D4C2D9AABBA89D072701EB851B5DC2304C73CB7890BCF5905672DF1AAAD479A704A0E93C35ABD7F8611A8044A4B06B4120A979A3CF5D7D9105544F22B5ED4E28851EC587D9A50C5406896A4F357B4E21EB833DAFB212047F991A8E88CDD448586C836652EE54D4AD1AEDE37E58BFED1CDE869A9BD1EFA275D1F36F373CC924A60A5BB863E01904F718C775DD15C4B8A20AC84F5ACF21E1F8AAA1397EA04C3D97E27DF3B37

AF82528A28C44D535D25F2DB5BDBF9B782FAEC
B54C9A52610520DE6F8443E2D53F258B8C499607D5F142653D507CD2DD0D1DA3B5F9A8D51EE776597B1990E38B0BE5844E7371B6CBB76AE8F7E93020F7FAD3F867BFB1CB230411E16B27732B0A3025FD5C2477116709E5E5D074B80187F4889673AFAA94017A7A19861BA83E2FDB3A00AA75608F4036A79662CF6F3E6CEEDDB8463A98B931B5787508A8F15992E2560577342B83ED4AA2F663A53FFF7A9368BAB8445641E2EC65327466C5B513D43688B57E0146F86A2AAD7F6B282721B48FC659C0EB836C69093462

06DA5124E22FBBD1161CED634C27A5713F1C7212B73D7E9BF9B108D96BC8E54083961B82BE136756D97D78A1B47CF53567C71E7521FE2385B4EC169BE498C08C10D3B7BB0FC10EF038010DA15353D7C7CE5DDE9249E1591D20C1DF45B9C7B671C572F3AAF3A170EA1767684FA2012F00B21816EAF074F9AEAD41A369AF8FB3A2672B4B04569E07BB6449CAE14BD9EFC40EA45BE97F6CF7E82F632A4B548ACE23A316547F59EA8C338EAF1111806E1A02399AC4ED99B6A250ED8CE3A0F892CCD2E4DA3538665CBECDD9

3010F8DB445BB1A130A5140933FAD1F8808C9B594A634F8FAB85C4752AD98D545405A103C33C51469D986831D63A1F08869E8EEBC6A1A1089F4357B3FEC859F786B4EF64326D4A0D60C98006B3E07BAA16CDDE532A6C9472C391F2449B31FA1F2C22A26950EA966366DA4BEE9C812FF09184AD7A365CAB0357D65F8B0FEA4B2BA883AAB0B4809147BADD1ADFBB366B2B7F6B2F90DC9279127F99CB51BE3497842562A7F2D2A2CF2A6FB6C43F59088F7E76528E62A201522DCBDA366F50397364FB5EF92BA70A724896

AEF61FFFEE29A550A292FEF41043D2BCB832C584BFE501DA530382968D884F569AD218061C105E1E02E11AF1B3751FF5C6900689B55D3F7E845D0BCBC8C754EA8667E787B7DCB44EC586FA27EBCD11565A63B4FF353ADA35FA6D6FCF2A66BF66475192359615B7EAE78E95EA8E2801923A33139CE417BEEE1153E010E265CBC911D2F7C8F38490F4D5E3E8BC5C8CFDE0040F25A89EC9B7C4DF5FFCA9489A1A39B4062C24A3B145BD1FF349046D2C8A8D14F0CDDB85B0CE3DFC0C4BF3531071655AE6D325D65B0261AB

83F28F99E9FEC8607489CA71734DF74FE564FE2955F41D2AC310E932494815629264C4B56104FE2E8B3206F83C921A1236D98ECC443C0A270DAB454A2D39088F762C20B4EB334D648CEF203F16BED92AC270DB17F49DD454F8AF33B559480B321856ED216BE112251EA87B0AA48659B7C44CC5D763546A363604FC716D11FBEBF8040E62EB2EDBA25BB820A49383E6698EF5BA622362AAE04A7E8798ED0C859C0B39A1CDD6D9CA4B560C639132A746B906E19A0C008BD1ACE91E3A1EF934FD321E9F4575989534FCAD

54F328586891806D9D9C97CA8D980D1FEA6CF8
9996D0B0C19715BF0AE50267D1E782DE13134C16C35E1BCD44E4883F2E0C67CAA1DD48B1A95B94B633B53A4766C9DEA3065E69D79510BEF375085801B59EF752A08504F8ED723982D553AF8CA2DA834893573CA5D7EC5337C35C12C8A6BBB3880F147F4C0142F92D271DCEE701078664263CF7852BA7AB3D23DBCAFB34F0DBCE92EAD28F2EE1E4A4C6CC762C3A89A017E0F02BED0C0922D998BBDDBFCACC5DA3BAA2441776E67642F4BDC6B1A8F3A75F5ABFB0341539094F9C32A5693A87757B85AFA52D33B22EE129

2476E18EF3C091B7EDF697740B2FFFDA8C21ABA0CE915B00992D0AD264F7D4DF58ECBD55579607E9589CC9C0A7478AD8568C6F92E65BAB2422C92849EEF1CDBDDF81B25EEB601979CF103BF8BA2488872CCEDE4295820520EE531A06F5F1F0502DC588AB0225CD11360D7556A8E6FD80EF9282005B56DC55F578CFBF933505EF38C392022AC03D046802254C5C8C0205527F115B296D118AE2B70ABD988FC1CE180E8C469F2171385595C704C6086EC02D8F26CFDCEB112E4F659174D4637FEA91FCA723B79E460FB1

69F1BBE55AE3BE6AF141E6E248AD0A2A8703C6CA8630CFB22E03A05E22BF0F02B619090E4FF0F19D81748EEE118A3CC4AE335E70C9B35C29935FE542C4EF90BAECA92374BF7278EFDCE609130A7C73D88F1A979EE43846F9A5F0DCFBA5BAE9EDE7A03FD74C646729884467C5E3553EED77CD7E4FCA97FE412A6AAC85854DE4FB137B10E8B7BA62E99ABED94AE54EE1E7C78C350BE8CEF1D94BF3DDAB2A8F465A130BF2491371AE471093DAFB5922B1D82A43D1F8F5006B650C482AEDFC4D34DE36EA143CB90D7131D3

5D4936AEA490A7CFA74DC82529820FB00175220F28E4AD5838AB71F3CF0C9DA69446D469B88B3D64C29B18AD3F99C8893C9AEBC6CD44CDFFC1F1C8471F6B47C3A91ABADC609EF56665CE04B53383952A9C974F3D6256D09053FD186FB9BCA28DAC3DA5E7DBE2EC94A4F18D8A08FB3BF75AD03D77BFBB5D78205CEA0BCB481616D20AD13B4FAEEE167CE458C03ACF828A701257E7B27A50A6F57D764233B0994B7C81173B9C5883D2DF9F7CF5F2515A56E02B3AE649510DB239CF7B3AA3BF5FCC378A728311A032FDB8

1CECBF51632F54CA7EF140B7EC0C22E2EFE5A3E2E802226AA82C11C778A58D4E86D01BC040F0D54891E35B9B2F990947CB61C6178DFE432D3C35FFF328AFE3C14274FCB39F5B41844F194F2D29A2B709BE5F9DBDE80BFBEAB7F4AA7BC5C3EC964F1CBE5E80A1347E76D11BBD112F0A546B962322C5088B02D8F45B029877C627D9938A44392F952D5974DFD2749B83AB3D1657CEABB5539C32B8556517B14C1CB85E129068CF6EC4462AC487E0FF54F90767C5763CF5EFC9B52F46FABC189921DABECB1A757016109A

F908BF0525BDD2A04451F028667BDBE3973687
D7E143398C590836F5493BAAD988EA30628FA71505E0F36DA3BBA7EE7F90724B898638DB2BC2F281E5BBAD741DE9BEA3251C544C43FFE3334426281B96C7A5C14E308A3CF9E22ED2D76E98ADD078BCA000888F6647171E4D78765F2EB46FF7571BD4E60595372EABC39DB0CB59B8FCA7A2DAFDA9AE62702BBC0F1F957DDCFAC82DA42CF8A088C47311EE586AF3954124B3DDD222B35DD36037E58AD3F60DFA813BB6A8FD991766F9C70A3E1E4559DF4CBB66D1EB726B359D26B91221230BDA5E9796D8B2DF2EF37C1E

795AC0193EF3DA7785E55294A78B296C1B688F53DF61DE1D663EDA23A68F21A48BFF4BE0A9B9E5D7A1F41713B37A097D4B00A065EA15EA5ED5F1B7E9556B0D87C993E3DF1F2AA9864229CC3EC5FF770C3A6EB679F4577A71E23703FAB9ED49053B65324373F3FB23C8B1F976A7D3F3CC1EAC9B8555138BD2B390D7CBE3BB69AA08A9F71268E0CF0B89E3C8303AF0C168838F8863702195EE77AF8D09F6DE46B1EB61F3B386D3D68B73EFD4DE2B94853630988E60137C69ACD72D72A435E4677E50D79978B8541C947A

346E005264E614FB274625F3D60C73AB0C356E975A3675DFA4F07AF9A970858E7818CE5D337BC9AB948540D4B416C82768DA9F3EB5AD4544C3E7328352D34A318DD8D5993598A9491CC2C8C58219BA62FAA1443B87CE626CC880A6A320968213C338B033B32ADDCFF6140B9DEA0F3E0AB88487245D6E1551F373EFD5789C7846CB656328F69EF91EDD02ADE8859C3CF7231FF584BF25FEC24862169D37176FFB3349E88D885C99E1A05AB0AF024B88BEB630F9064B25155B7E45B9F10A27BEE670BCF932A36C5D2506

50586B01A87A33C389DC7C39E356066941F462E1EAA2A8AE1FEF798229C96CCE9A8B8887895C5CB8D0E9EF887FB40FE276A21F63E0884D810B73F4CEE1727F603830499E8B316D8D9E8B9578372BDD7348B57916FAF93BF7C768246B27E03D9BC015A18E82FA3EA201759FB77BFE9C25357D1BE95531B2A8F6A64CF57A819FC19F113D3B434D9E67BC4C636870CE58E08CA58B010986B5D95A9F646D3FEF90A9A091084531053185A9C1F6A5F262425934FCB0513EC79D6183036192D3B1BA79C14F7C1830B7176DA3

97181BA1FED9E3002C3DA392297FDE8C83E1CD12E1F8DA709AAB458CB101526D640F93FAAECC379C23385AEF7F5A2EE4875EFD997086A07D7ABA64009BEEDA55C86E298B1790324E794DDEB4C12B2842171C8E4D0F2B5BB5895D8693968C88D3E5A44BFA9FF90477D57E6CAB88A2D667081DD68BDE20F8677E8F5B179401646315099C2A2FA086987C3B84511C95DD5814B5106252CB96166B2AC56A661D738D11EC339816A0B73D36E380865075EB647ACC9AFCD69308B938220202A243B7707DDEFA45C5D96D9A90

960990B0A436C73726CB4B654C0A5697FA2558
374DBF4F0042FED0DB869841C967D961B6EBF582758CC72E40A7E51B269EEB883755D02E3F62953C502846DC9E6BA65A0D426392DD0068D633E433A31044368C64620181BFCAA2D8508CF671D4BB99FB904DD0EBC0A472C6ADA8E2E23476FA2753CA583046EFE068142F325FA382D7E412A5DD4A8EE7AA33CE00A66088852C53EAE75F9401F5B12964BF14E5DF282F51E80BB6773937C30961E633022025D617EF1F02E8A57D0AAF8E0FF10FB1849B1D681C39D218C05D9735E44DEAF8C4CDF6A6A070C826D1CC2F15

441FE7DFC29847357EDF55AE50630D373185B6D9D4E0430128A3AB2E5AF984DD8D862EAEDD124DE4F1AAC13BA18C902709681A28C73C9B92E883BF53FD81B269D1C38455806070FD49575DD496AC98A56C52B7CCF279FFCE5B20F41227B59E7F2097A1C4BE3FB470950476D40753BEA03F8CD704ED991F8791705DACB754CDA3D5768EEE582D07266C07C545D5E15E9C02EB47F394CB321C7F15D3B100FFB776AE918BDA430F0ECDBABCC3AC06AE23D61069FAAAF12A6FF2B2299FC86587AFA6FC51AE133945A9CA3D

4222AD9A010D4AD361224A96574559DF1F2F6172CDD4251A841C30A2F1901D4D441D8674114C94B355B936029B8D8EA56C3AC41E5D9D729D93801A9C0BBAEFF1D9AD358E7E828E5149F648CBAF05708A859EA6CA95CF87E4CE56DAA685CFDBA684D9DE5D6E76F42D580024EDFB51715A9D8F07C32DC9D6F0BB8CBB91210EB16256E1CFDBE5FA3A45B23A28512CCA0FDB0F9BDAC723C1B93F11E9071786CE0BD822BD085B28AAE17E5441F4F1D3A9CE33B81C9F61766515539A81609B4C41A8C8D552374428BBF67092

55578C002F54CD9CF2634ADD96DD9C245A240D58F24D0F3CFFDC0F6303EC0F9F22C9E9C030BFE2DF5383DDA4ED696CC1B0AE4DE799036165A25520E001A240989724C435EF4A33B12F3CF052834A4FE3F423BDABF47F50EA104143BBB70E4DEB377982A91B490023B15646DDD5D859051E41E6C7602DBA1E70B4738AD47B5D905DE7BF06FB798B0341374BD478C6F866CAD2C61F13465D2EC0DB0CA94E6EAB69DE3259A31676DBEDFF2CACCE86EF4D16D5C22B0DAE95D39FD2C96B21D2D82338FA03955018993402DF

7C838BED648A07D6E2338EE5B99D632334F46965B0A9B5F264C3810074A3252986A438676A92F171CB3D10EBE042E2C90C51FEF7BA66EB8278852C95F5EA74738876497163D6A23733CD6D38DB64EB66A516CB2FA62A939B7362DDF682B11591B3DC3792C8EA6BA2920FF3583E4FF3BD6206AA0CEFF8C1AFFE79CF3F2FEE2F714A0AB42819A54801A14945BA509B0A9363DB625DC6D2C033990BFE381A63603E1F4F3A9A52C508E65047328FB639007FB2299880F9CE7C5ECECEC8D92F1CACBECFC081F7C507FE5B20

F8F466A68BE92A642C49AFEABCA185DC0B8026
DDF84CAAE3875547609771D302C4206E6A0EF904062B86C7CE267138D1D40B149D75EF54B9FB131235E8D07B10D3B583E0E7E0613DF0293F75D723171E397225C3652566175CD2640FB86FC79782F1BEAB2D00049153C2B46A219CA201C0EBF8C7391C4D68F3045BA473C7B519BA04432964EF736BB6CD752896A8EFDB9099EAF69841FAC97C053B6B1ECF11A7AA4AF97939010FA9F4FADF1015D179BA20CCA4D5EA9EF63822F0EB1D8EE1C7CFDF75F4F974FA1187F026C6D1F3A94081D51A25B736F336F13905B253

B8AF0A4D67DF90FB9B0D2F543F96DD1F5A6CAFA230BD1E58448AC08A54F492A7882E60BB385D3B1FF4A650F295D8FCDEE924B8C5AA84DD89B336BD487E115EB025581802398FE891E97C5033B00414AF66FF0AB3CF0C6A281DB50AD1EC0E44F39745E8099E07A6D1E1E57959BE66CCB7625034CCBDCB64EEF654FE136B1E87CA0AF4F326AD034137945AA7B02657088B55C2832BF63974D657FE54D36FE89102596576018E817CE18AC79F0F93978F7A53C79ECBBECA3DBACC05404B837FCE5EBEA400C5EA477BF8BC

112BE03CE13B8BDC0C34BC69E45368F874C0891FD46CF3F7CFE192E2D43CD2D4DDE37F54A4DD68BFE9A062BADF761DE48DAE39D57122A95238F6546DB2DCAC02D02FFDD0713F7110BA29C8341C8C289C0DD98A149CE2B7ED46C2107ADC23F184FAF6C058E363FC2BA03FD76FCA30869FCE2454F9CD12BC51195618314AEE73A71FFC73F50A2FC4ADC3A8D16CFD11391DE9C94D4B63E88494D8225643BD05B58ED652B3C6D9A1F2CE7885F85FB9B66E50B76B09F81F45D74DCB6218C7099205618A450B705C21EB3081

544540E099F02AC02A1B52B55F2F8B92A932ABF298B39168FB25CABEB48FEA88F7A612C9BFB5741D552A26717A3B826800D0031C869CB708C15C9B037CB25D71358C111B3D30C070D0B7730BCEA837AB74245BD3EE5C25331E13E75E9C8F2AE5C51C844B3BCE21E10025BCC671B87CE518930A80FD7AE92FF482E46A999CF08E1046DCFE450C7769BC1E13C47635FA93A1EE094FE49D82849C86551C55BB408733ED83754181935CCD554A862FCA0410E106C1272A356743594158ADD3547DAC6F74DEBF935E8EB449

BE53A83B688F926C6B234CAE13A16AB78962B200C8D76DB1F2CFA803C7DBBA33C2B64420B1ED99EE3C097751886ADC9A05CDF7B3D162B8BC73E5205164801133E5523187808EA40761A803E87760E30A6071CC8A1CD442728CEC30FF857CE9BF81F9E507687019E9DE6F45CAC09308E56C96CAA961C51566C4B4C1A36FF08A6B86A930FDC77585E422FCE6C363588CC68A01C49A646E1A6981FB73491310FE7690B85A6DBDA41A3A07223AA8E3EEC786F200BADA5702F38DDDC4DC73F171E93D5942568B4847E3BE36

D0B10400301D01DA1D6EFB9EC97E53D83B2B03
3EF9811F0AC02DE463FD50563C787AD0CEDC9F6A648DEB587289ACF96EC2DF43ED09A3985B814C237479377D434DDD36D7CB9C5465E0C774C3C7C30E7D34AC93595A3F4928B9DEC6C5BD4B0A1D77BBC4354ABBB910E2FA6A7289EDEF237795DD47EF16C05816C3FAD5BB3A92C7F3C639B9F2CE1242E802999FE196DE997FD552116A287442D1019399BBC25E9094097A33C58160D5EB888E92A5F815F8BB37B7C5D778DBF58A0DCD0DE83A741AF02E63A266294776C7C54F87507D9B97C6AD99A827A2EFBC6AABB5B7

04765D9F16373EFA6E11D25FCB2118D4914DE123732AAEA76B80E41EC9B54A1A603C39AD9592D060F5D295500143C29EB50D3900924D6DD178EBE43DAA4D341853E5FE052B9E0D44D81018402DF8F2EFD27C199A2E03FA6FE6F7A851321CCDA5A856D1D919CDED39B9238E6F0A74371373A927450FA363E8E8B97E93926E1ECECE033132079675186C38174EDEDBA3A22062E1367461322383717B8F076B9DA3C96DA69C095924
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

 %endType1

end

%%EndFont
%%IncludeFont: Times-Bold
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Courier
%%IncludeFont: Courier-Oblique
%%IncludeFont: Courier-Bold
fc
%%BeginFont: Lics
%!PS-AdobeFont-1.0: Lics 001.000
%%CreationDate: 3/7/96 at 11:59 AM
%%VMusage: 1024 32454  
% Generated by Fontographer 4.0.4
% Lics v1.3.5. (C) Luca Cardelli, 1993-96. Free for non-profit.
% ADL: 816 184 835
%%EndComments
FontDirectory/Lics known{/Lics findfont dup/UniqueID known{dup
/UniqueID get 4364290 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
  /version (001.000) readonly def
  /FullName (Lics) readonly def
  /FamilyName (Lics) readonly def
  /Weight (Medium) readonly def
  /ItalicAngle 0 def
  /isFixedPitch false def
  /UnderlinePosition -54.2194 def
  /UnderlineThickness 8.15332 def
  /Notice (Lics v1.3.5. (C) Luca Cardelli, 1993-96. Free for non-profit.) readonly def
  /em 1000 def
  /ascent 816 def
  /descent 184 def
end readonly def
/FontName /Lics def
/Encoding 256 array
dup 0/NUL put
dup 1/Eth put
dup 2/eth put
dup 3/Lslash put
dup 4/lslash put
dup 5/Scaron put
dup 6/scaron put
dup 7/Yacute put
dup 8/yacute put
dup 9/HT put
dup 10/LF put
dup 11/Thorn put
dup 12/thorn put
dup 13/CR put
dup 14/Zcaron put
dup 15/zcaron put
dup 16/DLE put
dup 17/DC1 put
dup 18/DC2 put
dup 19/DC3 put
dup 20/DC4 put
dup 21/onehalf put
dup 22/onequarter put
dup 23/onesuperior put
dup 24/threequarters put
dup 25/threesuperior put
dup 26/twosuperior put
dup 27/brokenbar put
dup 28/minus put
dup 29/multiply put
dup 30/RS put
dup 31/US put
dup 32/space put
dup 33/exclam put
dup 34/quotedbl put
dup 35/numbersign put
dup 36/dollar put
dup 37/percent put
dup 38/ampersand put
dup 39/quotesingle put
dup 40/parenleft put
dup 41/parenright put
dup 42/asterisk put
dup 43/plus put
dup 44/comma put
dup 45/hyphen put
dup 46/period put
dup 47/slash put
dup 48/zero put
dup 49/one put
dup 50/two put
dup 51/three put
dup 52/four put
dup 53/five put
dup 54/six put
dup 55/seven put
dup 56/eight put
dup 57/nine put
dup 58/colon put
dup 59/semicolon put
dup 60/less put
dup 61/equal put
dup 62/greater put
dup 63/question put
dup 64/at put
dup 65/A put
dup 66/B put
dup 67/C put
dup 68/D put
dup 69/E put
dup 70/F put
dup 71/G put
dup 72/H put
dup 73/I put
dup 74/J put
dup 75/K put
dup 76/L put
dup 77/M put
dup 78/N put
dup 79/O put
dup 80/P put
dup 81/Q put
dup 82/R put
dup 83/S put
dup 84/T put
dup 85/U put
dup 86/V put
dup 87/W put
dup 88/X put
dup 89/Y put
dup 90/Z put
dup 91/bracketleft put
dup 92/backslash put
dup 93/bracketright put
dup 94/asciicircum put
dup 95/underscore put
dup 96/grave put
dup 97/a put
dup 98/b put
dup 99/c put
dup 100/d put
dup 101/e put
dup 102/f put
dup 103/g put
dup 104/h put
dup 105/i put
dup 106/j put
dup 107/k put
dup 108/l put
dup 109/m put
dup 110/n put
dup 111/o put
dup 112/p put
dup 113/q put
dup 114/r put
dup 115/s put
dup 116/t put
dup 117/u put
dup 118/v put
dup 119/w put
dup 120/x put
dup 121/y put
dup 122/z put
dup 123/braceleft put
dup 124/bar put
dup 125/braceright put
dup 126/asciitilde put
dup 127/DEL put
dup 128/Adieresis put
dup 129/Aring put
dup 130/Ccedilla put
dup 131/Eacute put
dup 132/Ntilde put
dup 133/Odieresis put
dup 134/Udieresis put
dup 135/aacute put
dup 136/agrave put
dup 137/acircumflex put
dup 138/adieresis put
dup 139/atilde put
dup 140/aring put
dup 141/ccedilla put
dup 142/eacute put
dup 143/egrave put
dup 144/ecircumflex put
dup 145/edieresis put
dup 146/iacute put
dup 147/igrave put
dup 148/icircumflex put
dup 149/idieresis put
dup 150/ntilde put
dup 151/oacute put
dup 152/ograve put
dup 153/ocircumflex put
dup 154/odieresis put
dup 155/otilde put
dup 156/uacute put
dup 157/ugrave put
dup 158/ucircumflex put
dup 159/udieresis put
dup 160/dagger put
dup 161/degree put
dup 162/cent put
dup 163/sterling put
dup 164/section put
dup 165/bullet put
dup 166/paragraph put
dup 167/germandbls put
dup 168/registered put
dup 169/copyright put
dup 170/trademark put
dup 171/acute put
dup 172/dieresis put
dup 173/notequal put
dup 174/AE put
dup 175/Oslash put
dup 176/infinity put
dup 177/plusminus put
dup 178/lessequal put
dup 179/greaterequal put
dup 180/yen put
dup 181/mu put
dup 182/partialdiff put
dup 183/summation put
dup 184/product put
dup 185/pi put
dup 186/integral put
dup 187/ordfeminine put
dup 188/ordmasculine put
dup 189/Omega put
dup 190/ae put
dup 191/oslash put
dup 192/questiondown put
dup 193/exclamdown put
dup 194/logicalnot put
dup 195/radical put
dup 196/florin put
dup 197/approxequal put
dup 198/Delta put
dup 199/guillemotleft put
dup 200/guillemotright put
dup 201/ellipsis put
dup 202/nbspace put
dup 203/Agrave put
dup 204/Atilde put
dup 205/Otilde put
dup 206/OE put
dup 207/oe put
dup 208/endash put
dup 209/emdash put
dup 210/quotedblleft put
dup 211/quotedblright put
dup 212/quoteleft put
dup 213/quoteright put
dup 214/divide put
dup 215/lozenge put
dup 216/ydieresis put
dup 217/Ydieresis put
dup 218/fraction put
dup 219/currency put
dup 220/guilsinglleft put
dup 221/guilsinglright put
dup 222/fi put
dup 223/fl put
dup 224/daggerdbl put
dup 225/periodcentered put
dup 226/quotesinglbase put
dup 227/quotedblbase put
dup 228/perthousand put
dup 229/Acircumflex put
dup 230/Ecircumflex put
dup 231/Aacute put
dup 232/Edieresis put
dup 233/Egrave put
dup 234/Iacute put
dup 235/Icircumflex put
dup 236/Idieresis put
dup 237/Igrave put
dup 238/Oacute put
dup 239/Ocircumflex put
dup 240/apple put
dup 241/Ograve put
dup 242/Uacute put
dup 243/Ucircumflex put
dup 244/Ugrave put
dup 245/dotlessi put
dup 246/circumflex put
dup 247/tilde put
dup 248/macron put
dup 249/breve put
dup 250/dotaccent put
dup 251/ring put
dup 252/cedilla put
dup 253/hungarumlaut put
dup 254/ogonek put
dup 255/caron put
 readonly
 def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/UniqueID 4364290 def
/FontBBox{-86 -220 1204 921}readonly def
currentdict end
currentfile eexec
D8061D93A824650EEFE2785F13CD28A8A226CFB0A1A99075777537F54D30DAC903425F9EBFBAC49D8FE81A6632A5509BF6C72E2949336CDBBFF97843B20F4D17A8DB270CE98D637978F63F6495D3656E646BBB4B8378EED7A9AC0B5CF6A7BB8D4D2886F0F277049FB3C8C7A2BD8034634B00413B635D5D762D5A0BF062B7F712F0BEFE765F3F213F7BC7AC98134F362D9157EEC81EA72E291BFBE80BE3159667FE437B136801C37632F540966B6A9BF87BEF790357E4F6F099B56FAA26FA43972CB88275BACBCC84EE
14FB1D9292E47ED9E4A021BCB1F0E1837161C1931CE1136BC1E630FFF054DB27A68FDCEDFADA07D97149AD7B4E11A7FCB17F8110E845DEEC71FC2B78F35B35D0170C3BC6C277B494A821B0C71751DCACCEDC4E78A09CE9CA95D0E461AC0342C8F499DC065FCAB3BCF1C6054541291698C1670A15231D729B3C80FB765490D9CA34EBD66507843F8251D3CFA6D45403B918C8E86678B30EDD659B89186E61E4AAE37333DCE5912B70D73EC623502486ADD7E79EEE63C494F7429F9B703308F2C51FB229B93F2867F6F8
4C9D38476F3C6901C775A3CA9E0E52BEA063BF688C9D262FF4B52DE0E043D77C5467BB238967704621125DA55AB0C855B02658803D199C7CA240F8A0379DD61D7EA1381AD170B4889F89BAD13657B5B881443285B3A07CC02E7CE15B37EC0A86FEC07556E6A19A1C929C51C29B7DE8176BA0FA1951D3089EBBDB14453D3C910EEAADB18AE21364520FF782F00EF4ABF885E36CB0C3F678BEDBDEBE47F12DE22993B5868E266E60EE81F8438C48B6E6A2BDACF28A70BD4C012ED9AB92A730585C0EAA870826B598EFBE
2C884D8F0E321A39A6B3844C53BAE60493A25236F43A7A7DCA3969657E78BDFC2708D98B1E9D65E1CC15A76A63E61EBF0C545BFE9A91F83FBDAC9E8A4B7AF746EE3603FBA739DCC3E5B1BA916602E1D0C8F657CCD08AD78036E073C1813C234AAD2DEC1B8ACF696A92CBB5486966C13083CC9EB7869A7DA88C444063FDF3B91B40A58B2E3601EC6F620857336C56A12A4D4D5A6E66BAE08A56CB2C9B461DA7D8264EAA3FB77C65736CF4DF71B427FA318D320AB9A2BCFB80BFCB29330B1CFC46C8A9C1E2E74BD0EEF6
348EE843781A518EADD644B6D5C22DD5AADF68D3FA1F4160FA060533E24A2642FEF4523974378514C66F615F8936F0829DE687C179A938A8FA49751A32D3CB3FE53F0AF497590874ABAC4DF32D20CF0C3F0441A1F491C6FC0D46DDF0B3770281FB263755D48BE8B98F89835DABD16A1E748FD8C94F267A501DB490E867582A10D6D7774A7DC8EF0FD4CD5CC7F95CEF00303E6EE19D51CC53D849C83E3148F9801B074589378828BCA63DF4C2DB002702DB945854759B88F19CDA17AA5505278DAC16A5E4A38A858192
0DA186071356C23EEC389E7D901EC8B0A622BFABA82702DC5796BC2C9C9EC2F76EE1B5CBC88BC0CFB80E8E89BF3E88A73D3DBEC0463D3E7577E17BC1FE66A4F9B17990549344185105E1A62E2007C15E089BCE48DDEED6F1C95715FA72D1FA1A40AA2E71CEA35319A4C5119D18652657757B2CBE27595D3609DD0DADE4C5B4EF086A61AE213F6D51F6E8B6DD63FC0AEAFF6CC9769B93BA1E47F72FBB3042979C92F7B741863483C2A64D50F3790D82AF2D4551DFC9DF710F89BD0C52A24FC38F224831E45343EDFF15
1EB9BBD88E0D861179AED4E8026FD17F17F4159970E707D7682D32BBEE86F2DE72C2639F89F095663FDBA85039346335571F6DB7B48E88B9BA91991963E4BB59E2BF8C79A003F8BE6265DBF077E904A8901512FFD4EB852AF6AC529EB5288EE87EE6F6DDAF013F5C954100A3B913DF0074C1048EC6E78DC974A2F61440D7A66AA5179AD0E97C99A07EE7FE551A94021D1B697CA8C53161DA869CA086DCBE664F8EF853D5870C30D375312B6BAEE946A284BA9299FA9B7F8F1AB6E24298BB7E516D6824E4747DEE6CC4
BB468A7F01FFDB9AD3E59BD06708927A937BE98129556F09BCD7DBE206C676DE7D5052F62E280925AF385B2ADCCB1D827E8AB8D817CF4DCFB3738898C1E387AFE8018D946CD1C340DBB449F9294BADF36EB88A54E2B3AE2D8FE8CF2D33E5E2C29C1E3FEAFD811C906546EFAD5805061CA2D96A6CE34C4E76AB56EE2376FED66436FF67297120A3C6ECECE781B2CEADD6B5E00A07DA643D0E36B9CB51ABE590232CD7CAAACF89648011A1CE01F5A0E83D7F9FF4A6659DFFCFFE0EAB87AE7543079623FD3EEA5C7B2CDC
866476177C3F9ACBA9883A77877BE3191AE393AB6BCA6D7F7ABAE056851CC50DC1892B235BEAE63EB3FB495376E6FC23FC366A691C7780CD21D5AE1A36FDC1A4824C5506A6F8BF558EDBFE78AFC61B5F6927D1AAC44354C6A288532B3DEB414D4E02F264E0E2DD6E1CC9ABD4FC70B52CD12DDB2FE31A1F7E84C43F8F945E880286EBEA05BF006981BBF1EA5BE7361E28E15E535EC5C02C01EC75118EE47009620B370A0589EF4245F319AD93F510C7DF88FDB99EA72D6E70D68962ED73B119237DEAE4CC2B04DB58A1
8D39EBF8692C7315759AEDD2225A7042CE0E516DFE523E8A6633DA8ADB9F64768DF75A6DD6B115B6DC00EDDD19BDB8C94B10B75E3A0C9C38E84FF4E1B7BA27795325B3529669224A9228C0CBCB92E5488B17FE68914610A26F1C042A8FC03252BFC580DCBF3641D5FDE6A25597071AA9F8030AA3BFD109FA5C476BCA57F722C89EF137FF2054C02B8F7F9BAFB93F13B16E98D9AE09A3F23820C932CA1C3026C496F4361A224874900B4723B8433BCD68EA6366CC4AF71CA5A5FD5F554BFD2D8D3F6BE1AF3CDFA0A902
AAF6F3326060F4D58477B0700B59232FEA865D07EDD71C12D6A418EF906175AB749B82C8CFF078AAE39649D565B6AC1957A1219AF235FBC2B789183BA402BD8EA082C1C55B7BEAF621B5214774870C6C48945FB833B644C1D1241047C211E4D9843635218D845AE42BD8F770781C72BBD275D3C206EBBFE1DCD5BBEB57FBED67FCBCF092DA986D849D1304B7229997A61F7E4964740EE44B3B070C56225F0DFA6AE27135843B6777B862BBDAD0E9D34C95E2C5865D022F23DEF5DD9B93F9D6CF73D39600B61D86DFF26C4D631AEC1F91EC49FF21A628412AFDA28B45647006EBD5857D0C6EE40E3A655DEF0046
EE3F819678A8DFA618BF97D490941E0D0B46CAB0D29D373A45F4B24ED6200C4C8A4164C3508E7478046EC711F04BAD68FA20D07AEE888D8175B380516B37C1648C578257653A67A4263CEDBA9ECE608EE742C3003859EA04836F495CE6D229BB36889099C378BE12C046BD2496FCDA8BE025ED0905F0A0B653604DCC2366B04115C0237BDB15ACA840861F9DEF35F71C12EF8474E4DFF3D844AB09B7F432AFF6369FC9BE7A3AF7711F8F90F1FD2E6E2972CB50A78C5E36FD99ACADBBB2FF40DD51C359C08C307537C0
69C7F13EBEA37DB2CC6ECD5FCEA21024BB991B50B4DAD5361B7133002E1A4513611DFB0A634A2D86CF225CD5D045A8FAF78EB762B09722C83318051D138ED37D3F8DDF81AA4DC5F3503BAEB467F5BF3EB70609DC7282885018C9DAF049037185EC2B557EEF633B6CAA86FA2656D18582B45C6F6D0B17C3E5BAE3A249917D7B28CF0EAEEE92A1E95326DD16E4A71CAB76B37278E185996A862341F065C94A5A8C3CC24D4A687DD11E62D208A8DF939AD4C20A76877A0E9F9F07D087F84083A3CD130892F8DC7AB239D1
BA7A41A1823AB37A9B319C38D5E05E5D7EAC904B816CE8CA04886DA3DA04E30D0CDF3236DD3536E8E8B028E949BD9F4EA89647CC2FBCAD7407E253FEA2A0905C22AFFDEDBDAEE18933AEA6744CC6D9C77A82B723FDAD1F9AE366EE9A21AC5FD3F2B2CBD8F290CC5D44FD728B6F4E7158C1FD0153F9F459A1366BF9EE0D059F7D81882E3012BCDB8146EAA9F37C1C88A68BE98382EA592D2ADEBB9E070708D5A53D0FB7A5AF908431371CF4798E60E47243D77B7F04222F6DCFACD6C5FACB4A2ADBC9E2F9EA925B61CE
F145CC6ED1612ED3EFB0F244C3FCA49001CBEB9FE0643BD7A9636BE69B95045975E3BF016A02BC110C7095E3AD6D39B52C39FF76C3E7A25C28AC30B6BD50780F196B7665958C3F8FE504C76E538291F4EDEECAC2E3972B671E6262E46444C18DF677CD9A60033E4077E24239E2293A841C026C173AE66A980AF6499A6F81199A430E86269A78E93048DA9729EB9BBC428751554507F2C366734E559CC1D028756F9D20172D1DC9E639979E4853BE5E90FC68C95CAF1EBBBE8DF1CA059BB148E4E8C0C2E2FACB7A3EF0
CF492E674A4294437EF14CE8BA6FB153198B423B8A312F85AC522A528C4E6AEE5AD56A9D8FF1B96EF2D8E9A86192F67D7F43F277E2AE3FF3548890228E57EAE662F32E8F793136CB52EA91061E374BFA38878AAF918D164C0FE8DAD5FFF4C866293FE81B9B67425AEB8FFC92FECAB947BBE549AE952E19A1E4F389DB04F0A2B43510BAF8726B67FC368122C209F960D52830DA7BB7CA1668C837352FC729C7FA683A5DD8F4FE80442BED212C5FD82BAB220563DD2E27199046174F7105F26C23DEAE343DA88E882982
B019E239F29EFA43E7DE0BBEEE39089EA15B476D0C0DD62F7BC8FB93143E69A76EB9B1F2B482AAC25412E6B437906841B74325D1B8EDF34A6B658F04A89F2B4498E1AFE4F0412802CE5A37E90EA74AC5978CFA47CA43D7E2DD941B9E279631EEE8088C069857CE685667DD868EEA14F8D958DCCC4664B3405642B89968869BBC3C6101B5AA53DE0C26A677F2EE776BCB88C0114631F0D39FC3834132D5644FE3071FFFA77217D4D0DF9A365861C5CD72097E0AEDE4C10D609F5C03594EFE0B096C2E133079ED02B211
1A860F681B41787AD8FD6FAC5066E0F41C94144C815D0F69ED3B8A75F793C493B9551F7527D3FA2507EE4EE83F009FB8B8A4806CF7B28C0D95B60A8C44C443E2BF1C09E0F64863069E6ED9A4C432F1F127E214FA6296A7772CF37BBB876DE81104FF8CE629397FF17BD1654CFE1BEEC087F46BA9F09559D69067B047E0F6969EB4E6086A5A5E1FF51E61AF399AE0A63E608944C1E0AC10EA52801F556D537ADFD3523C59EEDEE6CCD4DD780FDF0731495385E3166F881E58748C94E25D77FC972831D5A8473001A6EA
2579211E942A87EDF08E10F75DBBE5925FDF3DBF969F8DFDF970C4828EA8050639009D29F4F2DACBCBD50024556D1C59041E13F1308295CF922EF7C9AE5DEC7A3389C6C28EF09B2FE403FB652AB50DFB7198E92224A3E9FF2BDAB328F5EAE204D7DC784D6963C7FDC3A0794BDA3764B25F5F3B0F70F07BE4EF20BBFB79DFD18FE29E46A281AFB37CCC712E72BDD89E1E65D861B375E90F4AFCBE96FD91D5860F27894569C6B28ECFFECED7EA679629768EC4D1AE9B139B79770126E80309B535B5F0A7B0A2B7EBB9C9
976D05A015035FCA1B8D6D47899553639266348E736EB456320A3F26803512CBA23BAB3751E896723004E8665933A674B8F097713FBA96FA81D69EC2F342F6C573DCE84141695C3C6E62CE7A6934B43A030C8A29487E64F57BD76D51ED75D7CA13DC13CEDF67EE7FF9723509CB8D5A432135574E4CCFCAB01C2601BDB1430543CCFAB40394D2E2876669C9173202025AEF4ABD93088E210D714EAA7376391AAF4F491A8077BE9640850F6D8D22FE34D36A28CED78C5BF08CC5CDFCD4443FDDB3ED0C1F0C5480F51FFF
24D0FC22EA3BC580537B617B865BF2444E83DFA7000E4CC9741C6BAD4C47F71D130518ECC5D4C2C6A479399379C25038BA0BB09AAC6EDBF2204025DBCD0D1873C65F21EEE03B84D5205D1A9DD1D35985D4D90ECDDA1E74E280A7C0D267AD0AF056A7B1B6825A4BD951CF761F38DF894EC7C4F8EB3BDEB8144A2D747EF03BC3D1D62A1F852CDBE8E1415BB17E8C63939FE52EB5C94A8DD7B219FAF5B3F8799F4972E4609F0EB05F3B2091A4503FE8C0DCEE9621C6E20274A33CBC2CBE2DC7F2C0614341E484C1B5B5730D066C885995A10E7826EFD4B0E230DB7ADFDD45C80C659EFA4A95938353E94DDF7ABD5F
26102419CA04DB0C24302D0CA52902DA8A1BD6BE1D1BA1460C64DEE82A543CF8CE889562BC7ACB7DEA6B23BA05E22AFFC498BCA3F21D344099259A739FACB503609F5A4470CB2812E9A2BA2733C280FD1B45411F856E117266745450BD6E5FF74E0A2506044A655821D957F9D036BCA0CB9AF1872EAC213A1B2667A529F62836B0A129EB0D3B10E50B04F280DD771EA8BF51139ED7FA34DA26124791CF6DAD8D975059CD0C67F11565585572498FA4338636323FF83F9657652E05C0403A51F7FF1620655FA6A4B366
DA667F6174774486E23DFFF2899BBC46AEF092D702102C9FFB78CED1B887E3E58BE26B0128D7B6714E52BFAA64EB5CD78FAA21D51A8BCCC5A299DAE251D8AAEA985A675EA3755C25BA360483178E98949347B247652ABE758DB80A754F807F152A0272C2DE7AE18D6240088E6A6EAD029B3B6121D04BA58ABC90803841945BFB2C48DC99180509BF3B9FD14CD27FC77D6DB86E84A8D768141F27C9117EC31070592E3EFDB06E3D382F2BF6F2823EEA534D72A213E04888EF27DE2DEA1378BB29D12A5E72F61B9893FD
926FCD7695A3B55CC352A96E6AFD425140C77B587D71A22DD1F2B673575B675E69A77873AE548B5FC8444850BE062E85DF17267C78132956D3D2DA7C578B8EE4405FCFD6DBEC5EA95D13376991098FC19FFF95D8BD8BD435044EAF96AD821C1EB907EFDCE6D8F1DBF3B0AD8B59B079475FCE00DA5E32D82BBC0D43F8B1B6C1856EC78B1B2B7067F3AC906AC5CB066A76225F8B96C6C7687CB7CBACAC416752C45136C0F78B48B05671D4983834AC06CDAA3F1E272C58579D83D2C2C3F5442506AEA4D2648A62AA8ADE
322EBB47C464B60A94DA30499BCE694F09238DCEBCE2C3538E4D93C8B4682E1535DE36520C565E9603EEDB97ED626C188D78102E600220696F11DF1640CEFD2A87380FC2A42792E9E5E505C04B9FD5C91CF86C346E8EAE63E23BA3283D1322870AC5100C4349BD38CD4FE0A82BDAF17CEB6E1C7EC793C0D812AB4065D6B12050269332AD74F3C6C87F0863CE2503E01001F4F9C2C96C0F9C23A3AB8BA7A40BA1D724359822F62F0C081B3ABF9F8BF0505025E0E9471C42F6DDCBB1BC39826A53EE50094AC47DE35AFE
3B59099913B50B87075B61BF6556841B2044183626CE28B5DB99C47712FC1616B16171055E1A0A1030DDF0398C34A6DB6BCC5F27EC1BE62546F9DFE6B568CFE5B41883DCD4BE859648F064B98420C1910757BF4AC10A2F0F1D9A48DC0AB274A3134E60D66D5BE24607DA295B48F71410196B47D2042674C58E98F655481E16F04D795780BF368A704CD87BE1A89B205AE4C2C5806D96808DC93D3426602EBD4271B7DF9653FB7DCABCF2684EB3936A7D57E30B0CF25F118A662148AF34886424E617E0786DA483F4B4
37AF7F3BA3D148DA39A553D8EF1C03C4D758993067EDF422E51A087975E07D28C1CB81528A112CA9967A636676B601F581351F01541D87A60E3D26399A74411B7B4BD721D77B1D7D4D5DF96FC70F8E3F6791A67E18B342E266F7E94CCC983F56B049F39B317B740966AE634371658398CFFF211F56B5A76C8BD96265F19A62E4450A7DFC01552C525D8FF687D6B080C26959FD953FCA445B9B67E33B3807BE8245AEE745A17179B5836D4953D317F64B5476E8B54816189F58BFC048C459170C2AB5528B2F2F68E44E
81A3DD00A08C688855558FAAF2AE44DD9640F373DFE091D5838A6CED60615176D3FC769472C20C6F31801EE301D77F5124549CE4BDAE5BD5009D39579E188BFDFB0E3E5BEA3D3B78586A29451C11639F2A5992B54F721991B8E4932B7215D94ED3E93925F980A5BD4CD09D6E6B6E685E3736A59F8D08D9DC0430C70537AAD8D1C061168D95E362049A46BB2F9637FB98C1B2A59BD04025819CB93BE86D095C250B81144A723D4CDECE83138DADCC201BEE471030AD0045DE023B114DD55F5881885FC63F84B81FB90D
91366CD1FBBC524C6B50658F5E0D37A49B6E45A5D39C21C79BD7C1CE021D74796597711F21E705116CDE992C2DDFDBC2C2470722B6CD5408F254C7C23E81F139137B37D3F296F7AA3775088BF7907E510A7AFD30438072EB236D291466F3A1233D29E4EF8D804FCED3349DD3A5582117B77CAFE3D71C5C923C174ED2EFA538D600B3F8077A466FDB0AC4FC9A4F471C06378C751A850ED50583D3B57A588BF7DE9CC8F09076F20005548909F9D275B306457FE5293BCE85861B0497E566694653BD0C9BDFFF907855D7
E88DD3FAE522253D469E3128BC1ACDBBBED0629DD88F3A6AA042E006FF132914FC00460106767CABFFC0468C9FC3E952FE67A19DB584D96638B6FEBDD9E80772FD353752EC12699AE2463C338DE47E0B6B1336461A9E65B4C345EED7CA4E81BE22807C65C79A26854B5D35F49656A3248498BD7537EBA1E97C61C4BD68BF924F5DB7C8D3401C71107D628214B8C560063E2514B3DE5BA6A68C80EC7812F2BB3E2AFFDCAC8993F9C9354C5E3771EF524342D98DA9D585BC646FEC4FB48A4155D47467BEB18E9D02F468
F6EBB26D157034D26A03F5AC4A8ECA860C4A8EF2447D1C0809532105294C2034A2B4687D7F1F727BD003F16D19BD920E01D122111753610AC631AEF056BDF4B44CBE99AF5EF2515C0D4A4B693B2A0D1B0666ACDCB052A13901D8EA2375C2B562A549288CD2D39E7A70BC9B95BF6D144EF732F18C82BE39AF3E307395CD99B35855964C7BB4AA798C71D11F316345AFF1EDEF411300A365F851BB10E05B9A0FE471B8B1D2A1C7C92825D15D64E2D335BDE060D2D942B7B66AE9ECFF9F373159668489791B911F223730F43E2F374BEB76192B1026F7A8E3BDD17D54DEA6609FD053425DBE4F20DBA73EA33BA66C
5ECBB65268EA0C2627CED9C733EDCDE4786B74E3633AF4FD4E99C1DB836D4EA15490B9998E2B06DAD8E7ED836DC044ED3E71716B71C5EF2588CE6DED6C9699B0F250756719E2C1253EFC9B0173B9FCC2BD34CD5D3B1C5F021134A597568741AC382AA95225DFF9302D04224E7A39808B51C7AA2C3B4A364169E5554E3E844C8D1433DCB54640D8E5A8DBE3A6D4B3B13140C218D3D644D2079D6CE7D3CD04021405E75B2712918E895784B816962A256E484FB1837A57C40998F6213E1C9B341BC06DAAFBBB15B1FC3E
AD910EC027B61DA974BB746C99CB8CA6BCB3BE1CBF5477FDD2F458459E90EEFB3B1F969508B4464846ACAD7930D843040BA70A1A8034A65B729D7F08222152402B0B252B8A8D20500B59B0696BA940DDF87E38DD3A9EFAFCADA4616B6966DE25D69A2ADE4D1CFBAB37F9F4EEE4DE4656CB68F0169291B13AF84F8C78FEF01123820FC4DE7BB05540B52E853EF3AF2DDAE4374AC4D7CC1CED2DF2B6FAD95A96BC2F48160E247ADB00BE0B0C6CA20BB0C402A5E6F6F64871358FF2517A31252D6D1D76C3ED2ED822F557
E5404DADEA9C91FE5B1E1B49DC9C00AED2705A23F18C68356CD2CB31EEB2F6E47953D3777D8BBCDDF3DE6BA48F29552FCB56DDA651D4336973E10FEE6223A822A9178827FAE66145FB27791832C03304518DD408F2A15ECB73120FA62E615AFDFCBBEEB6ED2862973C9F5598011A2D7689812B380FE971DA92F04373A7EF7F85ABA339D51366565ACA6815EFAAB723A624E21C144459ED5EA11DEB64CFCA0C36C9DA62DDC4C51465E76033C366DDC67B3DC1DB0081FB22C06961537CE527A51E6519F94EFD5FB539A6
80D0FD24EEC1BFF8D527C7DDAA1616E9147541FC44138C22CB3232E9C602C5E209BE6D4FE2E7A074EBB31810CCAC21A3425D56472CA4DC2E50FB1FE27FA46ECF83F7D8DA8A4F4B13025BFA9E85FC64D789CA632694FEC8547901C9B8E3B10984A46C18A19348EA0E0954392AF7A85BFB84917C2FC1D00EE4BBFF13B202C17E0647D8205EEB45DEB2B837611418469816FB7B0E0F054F617C348D046D967D8D76ECCE7B52BCAA8CA30E00393D77261DF22EDF9CB5363367C8016DD375B63B7DEEF4C5B5C253C29D43F3
C554678295B342E7C06E8150BEA28C3D0FBB1CDA3FB9BBB54E8DDB93EB9C50B78FAD281B328F487BB07B50161557E876C76575842AF234DCCB6ED3F67193D09FA61711CC897623822AB99906D6FB18F8847B04979497C50DA703567F813F07646760647C49CC543D42ADE51FCB9E8BB9540E05B20D02D913C1DA9C2214EEAB25C8B526BDB1CB174B1BBE4D6DC67C3808FBD6E8B7FBF041A670C03BA90F7BBE63A160AE91319953953815608743A9FBC9FABB7E925ACDCC8DA66F604364F6B54E39A30684442B60482E
141923A1B97C24924B67F32CE040E2587BDDCDFA8E854890EB27A32428F626009C75EEB13D30A051D0D6765AE1A0806A9C5D7D51213F67987E81B4FF021142381FF3E9B717FAD129DFDD442A1E2806CFD4C7B4CE4675CF7910E62876AA8A34A0BF48B8C1B98A06727D2AE33707E0690AED50B8107C5706F6317551C4F8D42ED0ADC95D147FAB2A3080BEDECF62B11374CC1A585510CB8A3FBBE2CC50D06D299E08CDCD3E831A3C9036A1004CC6A848D870C5A41071F355F411794772BEF3163018C6A2EB24637EAC5B
45C2087CF77867FCE21A9833D329F28DC0AF69A7CA6B64DD1C0FED46FE31C19EB97ADBB71C3CEAEB60BA683F3C572D1E199E4BEF627BD22747FD308532A4F0088378A5BFB586C7505E101F4F4892797DF89E748F1E2C8EEECDF16270F118CECAF087B3DD5791544EF76490DBA04FA8F8781E5D9B587539F83E7B750E4B2C84B2C722F9D38748B28994CCF43F7ADD6B1A78F99023112B6CE8E9AD343711FA92F6FE246C623ECD208517F02536F34E3A6CC597C0F57A36DC68E62C03AA22FFFAFEA136879995BB0018B0
7B4A54280D88CB4F6C4B0B5E7D9C5BDDA3BE869632C32B81A292C4D0C7F27B11C2DF1C29FF5B117C58A1975BF216E42670D815E86A67B3C18438160C0C38218446B71AA8C0FA6D5B1FBC331647DE3D962AB4429D4D3F66499379B4107592A7DD4AFE616E20B6B04A693AAC37070CAB5F52998F05DBC70D2AE1201364706762FB293D2B2B4DC3084D637E7D3AC8F787F4F21EC46D01A32B49F0CF1CD6283EFCAC3FBD508CF8D4CE799287C5787AD9FDD0C70773518A81B3769B40FA9303B3C53FB6D5C2225D5A7A3179
09AFF037803ADF4CCB014A5EF8A0E1A3ABD78742A9035C7C6F9B3AF33BABABD7CA22D556E0FF34F08AED7F837CD84ADB0F545B17F1C9164222AC6ED51CC0A94CB148725B97E9E193A8EC7C4CBF94405F77DB1414DFC6539B0FBE8D4D4E7891F216DD64656A7E49776ADD52FC7A83A62A2DB11E70EF205200E397EB44B111DFFD012612826B1DD0F07E1E81771D8F7619EBDFFE1A12CED62D8DD2D04EEE8553CCC3B8C0B653BAAF95383DE611C6DCF9F00285B9333702596BB43845B50A66B1750F1C1C4D3E3A812DB8
CC947C766656D22871FA45164A700670E83A084320ACAE388E60AB1CA892951F0DC888CBC8B204B6C5BCB90CD2F1B1F286C92611DFB8E26B9C02040F34550E29FEED21956A876CC769E9AC3E8EA736E6A22CA77D67A4E9931E440F79497DD2C8B1481F6543BD5289199B6A736664FC765649EE0A929F7FC47CB5FD15D51C8C9F3AC9B6D48FC279007A27A446366116A73C73639FD5A6DE75D04DE91044181A4E863A317401BB46D6F25087F031B46D62C9408BA54E086E92DAC205AA9724FD2B3C62BD4DA40A48F7514E2535F340F367B214CD0DB6939A25F9CD936FB128E3D2B9556AADD742B855762632CEA3
9356F39EC2EC6ECD2B58818DF66F52FEC8CE3DFD58481120425939519265E408497EF0EBCCEB2283B29E9CCBAC73642A6DE1322E8AA0536A7814146DFC7E0C8181F8D9155936835571B920F2B4A87D32A4D84487B7BBEBB9A6F233B38EBD98312DB057446BE8F01858FCCA07E1BC879C4941B088B5D67C18A7146EA300A9749817249FE0A3423158DBE1CB98A79C3032CBBCD64B29F180A3D7E9A8AF4BA47420C63E60221462CCC09C3CFA989971D0E1BEAEEBFA6C7859DA72FF57FFC462C4B177188752B8591C7D0F
FD8B1EB94A2C36A3C791A04B5E3955C5E3F2A36E087B4EF991F745B09D847B79011B3C517A78E6D8555B0F97C7D7B0BD930BD9E2055A2A762C1034106B0DEA15AA5F7168C473BA894FA860A7D50C9229302C19F0BF9D75EBDEF47E4775C07659615CDA109BB4B343E9F11EF71999546949ACEBC9497449185BEBA491F453A769F61346D13845C4EE4B38D9CC2D7CF0B7EB51D926C4B06ABE06D78DE9FB6A10AF9D9436981210417195E682A29FB325EC174819435FDFB9E221C9E48EEF339227E4AFF40ACA40AF9F50
8E0E1792BF3F4AE754882FFA45B0766E120B133DBCBE405ED89FEE19C525E92E22933B77EAE305BDA7CC4B2AFEF74FAC636AE71DF0B7DEC2B0492C72AF959FD00EF03E6AA78041B761CFFD66D495BBE64CDA3ACACF5B8BCBE50FCD19BF1C2E9A8969595A4DD02233617F580F5AABB18A55956BC601DB4A15B4B539BE382B35F3EF3723BC9A987F36DE41EEF19E53865130DD209DB2C43203DBEEE021000C1794151603F0BA0C85390E814DC3969F45EEF01C98189110D0E9044E77E04B824BB9130DF5E5DF570F88DF
6E1173AFB268B34D04F5BC86EA1B71509C8A076ECC5CE801E9988CFADF4571B048A0E2B76F4A83F2CC6B975C2372076681B074D12B357FB3FCCDAF8CF56C1F096990897A28C1B65C0C550D62DF46C089EC9F749DC5BE78DB10277F7E33EF4FE2E5C74B03D4416D4895AE4528C33B99E97287D4A240CBA0B27E05A1E5734B67E6CFBC42A1BDBBDB981279064A1EDA536944D582F24596FD4E49B0274088A030F4EAA4541185D027937AA71DA62863AFAF50A08B40A152E24A0912E160B6A8C100159D40F06DF1C4D9EF
602B0D2C1F322C11DE759AA9E8B3E71AB1E852D6CB5D4EDE3F146F474940C1D211DB5BD28FEE967224B3A79CF99A3FC92258EBDDE41D526741E63945F3CB1F0471CA81151EF509F145FFFD53ABAE7FB1761E74D8F8D6C239A472E72205021CED2C0BABF15103B3272A881E40A11D72AD71421D1340EB6149006A06D7CE9B562205E594239E7153EC0953D8D11231D6793990CAABAE1B82293DACD404A0D7C0F06740798C9627F0DF387BBAE7EDF8E750BBFAFA1951A2738D6DF385B18DD34AF1F3E54856695FE1607E
E1804998AF2359A27DEC639975CDD0DE9ADB2E6A809F26E6EDF5AD3F2953145138DFFDFB77FCE2456494356C1D037D5FBD7790DB99F719350084DA0C269E9F315ABCCF841584D1A23518FADDACFC07CE75555F1A4CE1005DB5377A9EC6EE5EB1CCF6CFF65FEFB6A36240D776E79AD95B7B95002A172306A10BC62A6A536CB318C5AA3AEAEC698BDB03320222741B1387C90F3428670D8223E184A2B54130346DDF3F672F65FADEEF6D25D29A2691307AA8C845D0C0E80A91753CE063BF753ADF1A3356203D20E4D016
E1CD402700E4F7375D2AC04017CEEB2B2D16F78F44B3EE84DEF9D57A0A55B67A02AC49D3E682AE761E978EFB15D74235AE881A60BB57202903BE6E15DE0AEE1DD9EE8CFC7EC6213E42148F9935CDBB301420CC56B0792F0DA0660F7075312784A3DAB3DE7222322D1703666090D355CCF239159C733408992752E00DF961F3056CDBFF9D405791E6C3BC114BFB0377F28776831726A94995DF56565928714EC87D37E782329E8F6BC6A4C5EF05D5A19A97333A6D3F776A86B5031D07DC7A1747AAE6BE2F1894846C0A
004BCA5D2E379DC29172B9374134CEA93AA14A4716F1239DB049E7BEA55304DDE5DFC565CEE5611C850984D6C843521197E69ACC2EEC160A04DFFF83058694E68D06808D17B3A3BECB44CA8167928A087B50539BFEE478401F4C5FDF0CC41ABD44EB731F64E3A28021B868595BD5CC2AD60D3ED62466D71FCAF086983EC29CE98A7B1A0D4C687582A924C711E74A261EACE145FFCB749AC8595499F5E8C6CF9CEB3E4D2EB0426D0ACDB33B94F428BC34818E4308850F9E5CCC56325C8139FC97BD956CBED109553089
16468A4B1B5C692705C908DDBDD3489EA743894A733F35390738AC34601515790F9F0E82E46B0DE0D8C8961A81FFB182D490BB3D840582465724764F19FF8F803A0EECED009844AED2C748B698A6A68AA202814A640A2EFF3CCA7BE6AF47E02E194F5BD77F23843C9ECA8B00B4D98813D1BCAC514102481D9506C6054DCE39B3C4A42400D9043CBE16A4B0AF01A20A1ABCFDA1ACAEBDF0FC4DB8B75F0889DD1BA05918B81FD7516B5F3BD98534654AC82C79AEDD74331AC666C3A05E87D4F65F6AEE1ACB70F5DEF2C5
BEC12BCCC87D2DA91E625E346E5A83E87C9800CA2AD0472D87E8D00DE12BEFF2F6AF263DCEA9CB602990145C835009A8DFFD705DA25B63933ED3588D6B7F2F278AE514F681E7573D225B756285B67C0FE1804A984E5A0714E30F0860EBF5578D0B4EC81674B0D6749079990D60349D6894BAD933843A952120FE7AEE73A408112F804658B91661B629825F00C5EF5E54442D69522053630CDE90E9CD96690DAD28778444BE17B60137B1C5663197445A984CBB1591605FFAFE930214A9E68BE2F5C75FCB0C25867D66E06D1A4181A858C7317810D937CD9B1C34AC8C858F755AB45989C99D972D32D7F18F13E8
D08718F6A82FD5DEBC7FDB5451F113D79202C9799827561FD52AEDC9430E4FC0D365E9077A868F0384B3F08757B35E00B292382CD9A2B5787AA6AEF67DDD947EB7369F123D970C538FA36042F98155C980A68B1CDFC162D22E7A7DE2BE1FC2166EB45A9721B078854C6F44AA06B21ABBD20B7440706C53F5A5CD1015C2CFA7D3FCB978E1CB48BB9F0FC1B4A104BEC797D788DA6133A10B324091A9760A8E32B95A72B0216C8413346BE9894B36535C482FEDD3E39E8CF407EEE3B45F5CB1F94DC31C1C945B1E69DB47
ECFEA5A26578ED80FC3CC306984E0C48312A54FB7B881070FBE4B292B19315A03B0771C9D446B851980BF49FE4551CE5F2B32BB8BD24A49016D93CDA31F52D2A622FDC5A1C7D50A883C8A6445694495D8DE85B8E449C5D9E981C3580B1CEF49C8E43B3606F48199B2668C7E7E6AC3F2E77F7BD800951CF8DF887274158D0C800CB6D95D3C5AD9A4C89D0F18BC1E140DA41067A22958597207FBA7A328CDD43CC27295874FAEB06FF7FB18363B5747A681F2FAA03A2D56FFE59B2B2019362C30AB2FAF6D3D0C8CD743C
305357C8183F9901AFBF84C854E1435999426565082A3479FD240CD56DFEBEF8615EB8572598352DD0641459397BF6CFFD4F0CE53DC4EFFA4C3EE1ABFF923B7673FA6191AD28B1CC9B501B06D52C76316DF558A78C7AFFF5C2F93873C2F1F9D8EFAD1DE432F54020F1C245686B1599CD5803EF79EA75568216F4A54C7F81FF48AD69BEA6EE1579A47BFD966D0EAF68735FAE55B5D30F2FC1335249C872B633B6A353B21801C8B0B6B2F653B5C314AEF5CD5F01EAF06D57595035A23B4AF6645273EBE59E660CA2653D
808F631589FED7A7E0FD56ABDDD1A6A784FD28112E8197BCA9AA9AC8EE4DCF3BE63ED0EF72E59FFF6189C8F07383F955C00A29E80DE91728B4DC94AFE87B098F309F2ADBEA6765A8835F8478A77F930746FA613B7C2A8F70726A860AB765818CBE40357D184F6D1A2EED76127BE5DFC816C09D41E4DBA15F9746A2B165097079DE30564582813872A8157D92FA251C9FD55DB0BE479A952E65A4716A20E23F804E433014C8B24A5EB5EDF859095C6D401BF3164B180017F4EC91A2A56897889C98EB4CD9E02DF9FF58
30F30A1988C43452B8078E42760E5535BB3C6336271DEAE785A93D97755F4B7500A9A892145D0560BB9BAA57A5A49AA346BC95658871B5A6E96401D51EC4DB7BCB7F8336B9846C823B84B43572721C5DE0E17D81710D001452AAEFF862D49D2AE114917CB11C834F0C95026C7498901BBF3E03D6154252889F1E213EAFF622DD6943C2AC50D4207D62D2F361CBCC3BCE964CDAD8D738AD48098568B6F4C6C14ADA2B2EE0587615DD605AD8CBABFABB994BD467D68E9274C531E2B880D5B9B4C8033D41E4EBFE3BC0D5
26B8D0CC10B5CFA2AA2C99F89C6997D7C255392BB56E9D3FA4CBC88DE56364DD060D9E896A09BA746FCD4F1D74B0E4A5B39A641ABE02604186193DFE096A126FC24BE37E05DC6FE81FD542F187A58ECF7289C960341D3670AFEAE6045939906AC28BDD9C0C6AFF04135D4AB963F45D419C66FFDD35FD8EA05816D1052BD7F2455EE2B3AC99EB95D0D1B89166D4AA082AA5ABB921F719A455FD76538611703A7A530C1AB544BFF62A0F44AA93ED0F614C9258653F0DF00197BDAFFE1F27C8C0ED88EA5C2510A92FCB16
0DDC3EBE0E709A72C3216432BA356697F71D517418C26BC8CC81F29D02303764824F8E5731FF399AC90E5E1312DC801DD7CC38D8B4B037B5854075EC3AD773803FD3CD112EBAE1B393A4D639B585DFFF76169E87870E192D6D1A04958B234A88D03F56ED4D628469A098EB08FFA26D8D8B71FFC8B6F1E0428A129E4C3CE01B84052AAFCA7B7651A393B904ACC16896CCBE3E999D35994176F9438763E94FB0C69AC7A046F3AB912D81A85D016848C80EA321E08E51186B1142D8E31C46601A77CB3CE2C0B4FBD509A2
2E6F8FF6C93C0C1DE24E7AF8899C365478962CC2BC29D2C40FB3BBD15A7E80FF9E7F1F28A3E1425D870197831039E83C496C1F2E3ACAF97578EECA8936BE0BAFDCE8BA26400C45F6148C0FD6C31D2CF7CEE2A98E2919F3E59489C080DBF5F83325D1D54D65B74A0D3D25762157202A7283D0174CF00BC93F6CDB0E113B0E94EB31833CF38231306B0241301F38151910A8D5203A5710071828AA3002E8245E13832AC5FB02F336413BBEF65ED35D2C5D21617322DB11C99025AA573250BB19CA416799E53E10A8A415
51331D138C41EF0274DB3CE300B3D081775B3538D382EEA2ED4FB3C01B2A8A71AB9D590EBDCC434963F878BF0AC7A7B9D88E20F51CDA9CCAB5FDC2D15CA1CD12FBEEC1FFDAB2B905FB3CEBD068D13026F8C617DAF3D20B3E12A8C04F9296D3D6F39153AE580557DA0BC782C0FE8AF001D3600AED52E496002AB7395C61CB92505292959E56AF8802122DB226211EAEED897E300A693737254C0324E59C4438FACBBFFAD3B7348D6D08300B54264FC160C3A4771B3511DB688843139EA96B993942EB1CD1A9086C0B8A
559FD7E62CEA99E8AC6D35DCB00D3D560DBD751D59C9F1B46FE920BF19EE34E014FB823213BDEDE7F3C1B407567B412FE5291FAA86CA203628F3F132BFA6976D6C700BB3A8A2FCB70630B443393D2736520FFE18968357316A119FA9A5E60676DFC1D3E6AD0131D102C4982FDACF0D3C60BB9FF606576C921F68EB69C11456C47F4801509D3251E939651CEA016BDF92A68761C9B9781D41162C640548B176B455EA5A2EB52CBA3780D930623D0CDC13BA3C9700339A15FD3A8E74C5EAC298B4463A8226D02B1A0E863201A3F5443C04A5AEBB591367BF1DC35CCD45B6980460505DD3BC11DF24B8015C28E3AC
151DC443500D9D2528CDA4B90DCCED4F8A43973275F3C4A1F7877AAAC1AE4E1ABBCBEA91080A6144F7827399D3BEC4CA22E5B7EF0ED0BB74C2456DD859D34DCC488E45E7224BEFBCB60FFF826544F4A3342E493512B92F8C88606C5CA92317CB87EF9A412BB8FD0D52E18C325F1150F712A7F44285FECBFE91957576E16B96DA7C613DA3F8E942641D91FF5AAB6E11B58E25C512D22D612B031FA88D53B1DF60B3D3DBA96988806001E5C446B44F6F462EE8A71836EB809D15B1E704BAF2CD2E77AD66F3613FD9DC74
795599DE5B47ED7587367511F31444E059D1A487EA7A5E1B40454528D48F94A7269F4A99B5181245107AFA32B8D0C541BC678227DAE4DB0EE55C9E59AC5255E9E9D5130DCFD379536ABF637F740168F674C9A32CD6F5699D8EA71D5C225CBFD67C11ABEEEAF96E796B7E2DE0B317BD670BBC503A1D98D3A690BD8CC84F16586BEE942CE0CEC8C89FD674E093F12619B41D4DBF2BE06CAE79B7D57B27ACB03ED435187BD3CE3387E078F55B84AA8CEBFD618A3005CBB7DC6C28E149910D01F742DE31E9D0EA7A6B352D
1549309E9318E35D99A5195CBDB6BBDA0CF2D9B63CF2153F085AF071710C6744B2101DD761E797BA1533D0B5A130D2E097D0A97631794075B75AFEA18F6640AF2556694A768CAE08D1AB1B730CAA3EC018ADEE45BB760521241FA43582F7D8AE2C35F5F6A9C6E6E460B59C95CAAC75B3D39BE6A7DC249355BB6E6349B745D8B191744FD68E0A8E79E70016FCA9BD84392BF1BB1CA8ADB1459A7536287B77CF00BEE1999A43EDF89714BCBC5B215E406BA48DE590D48E92E0D266B31A49A1B5A5BAD83661BE21788BCE
F43565BD6AC2ECC519D6C2FC1471E635A3D72D36559700306467B8237FF2AF69AA6DF56C3BC283A2D75FD73150354E24976B33FC9B78CF5D843143C416D8955F3564D988DD93539A93B5D3B3F3CEA158E99E36010C3B15595E1B8E66141E4F3427C2FC0885744027F122C0EE1824D33D27D0CF2B51ED8A561687DE8C67048A03F66A3BE07414195C79199F7CCFC0AC658447DC37FF75259F16620213CB2FF135A98DAF9A1CE761763A56453CB3FC5FE74F66DE3455E82A244F1667AE151EF239FCCDE9AC02C4F7410B
406F4658E398C4F428607A9E48436FE87FF8A27B6B26BED1FB92824B9406F36CEDE8E5D0239023675FFAD3B10CD4BE2B6A3792C296C066CFF166E1670F2FA92A724C69A1A6C027D5169C651E784ACD33A816AC314442F856051942188B7E2D11BD896AD2648DE676A35135D08A9A2A1991DC64D8060272CEC5B3833BDAA40440385758B02FEF75B620FEE0815D8865F94D563D206217AF5AAA398163209A986C5B06951BDB27DF96FCBB8261D33361D417F16D251E9CEFA90972C67D5981E37A6FA8959921AAE2C81D
6680CFA7CCB090BB411F57980BF33CF262FC31C5D90D7847FBE2FE8E699F7436329122CECBFF55AC289DAB8B960E0F1EE3D479E6BE6D849667D8C98A3D0EE9D9D347A95974B380FCE7D68F1665FB667E25B7E3E763C6209C3313D1044D04C44B54261142C959498178B6377F71EB5CD57CEAA0E4884BF51DC5F7F2544E7DADAA56695166F35EFC9355934E9BB6CCC75ABB8B499B0912341E3E5C5304725DB041BA8674173941D70CA2E9EFF3BE2FFEEEB4327C13ADF5C3AA6AAE227671BA6A809A6BA97DA7CEA0B788
CD52B439AF2703719A42D84574306CEA8C794AF4C56D621116B6716B3CFF389BDF030C7B5B4D3F0AB79BECF2109DD061B99F1829DCFF7806D41EB26E21124F2D03F4F7D4F6D0009052C0C96316481FE49F7F40DD7DE97B7971BAFA93AC195985FE1FA0A1A540DAE484E5CA77429BBD684D8FA8E941772D77A7E7C6F2D79032B362EF8B3280F14BE213BA89899ADB5B9FAF4C3AA8985D887CBAD33CC67322C7F6B029E572CE0E1A2C638227876E105D14682852C9ECF434387F3F000949ADA903ACF53BBB8E4A78DF1E
1A95D2AF1388615B72576CF48AFF9E68FF823D536A35B06EB6788D1D95919D2F517A1351A7E09AD892480EFA3B1B2FD803B181124F48C22C5A398712A788156CB385BE2DD3EBBF3FE22A237E3DDB15F7A95730128BDB63719F24AB7D69C3BA43AC588A887E05E42ED164A546F884B98DB6B482D72340A951C9AAB90833AD2724F33F6C3E98B8CF79BA21FA159465826FAB1D8B4956272FE25568BCE9D05D46194B6CA562275634DFF973BF04C6F3FC40A64C02E6E66FC5B8A4A1E1DD8D47234CA74A16A07FF23195BA
A33F42E94A1C171EA0C67275DA06937371D91CAFC84ADE9D634B005CF38FEB3E098A4BAF676724284CCF4C7CB81F82561490E3CE855E72BE98F44D6199BF8C0FA6B3E01BE0C57580F0EA3D5AA29865F22655F0B7D9FD46D9FC6B52AEAF1CA534B6240027F48681159C945E5EAB242E60CC3F29FE19E61C188D1718EC77558EE06C1B0747266D2D27EF22E1C045E5938FFD5E8F5CB02DCCEA2D480B4804E86097214992A63776E7C943A355D7BBDFB9DD7103F66A3BE0526176F968428AC1A72AF269313D98C2EBE434
9FFC76E4DC771009FD15346FF12F04F47645FEF648E719DA0EB72FBC86FD8E496E997954309A6D5B93AACDB768448A8C9526DE6D9D56F9C79090878E3E5CE6F9DE350093F84BA5694962CC2D0416505B6631D932C6FECEA0EF16A3D89F13DE646EE2724255B9A94EF5E78F3CE5E3117039305EE5DDDE536DA86FCDF3F3726DB1A76077BF304F8D68797ED1344DD9D60DADBDE6CB65E3AB763699B7D8FC371C96EDEDF1112E43846C844A94CB67E420399A92AE9A87FB50AF49FF3C13C81C2B7A83B46644A3DACFCFB1DA22D07294ADD3E20D531E380506B57C0447726901481AE2F5A3B45044C8CA51C1E52197
3487485A682AC56133C2108A2B1A913C422F9BD2DB23C72BFA899ACF7373480A73A4BC25EB931803FEDB9906D8A098D2AF6100996B7FD29BC1843052FA1D125BC9C90DDA7DE9C845AA769A7EAF9BCB8167F21331C7D7FADEBD6FD1C12E353816750E28A057FCCAF0C094FBCC7451032071E194F4CD8A69F7973F0BF12F78274F1638957AB9D9EADFA1B4B21A95F70FA7A3EC746327A4D0B9473F5AEE55F5CEF819E252C01783637D31A9D67F5D2001D7A92DACDFF57C875B7531CC59F950CC8464B4424EC0885569F3
23527FE7D46AB4416F0FE9B78EE871DF646FE4D32290E8F08C76B89563299D440D4DD8E741A264BDE83C2DACC24AB041F227AE55A7ED0B937B72D3CEEBB1F88BFF05ADCCF61888BDA53E7285FF6CA5B98817E90121167CD665C292F580A1640F09F134EE092DD457397797B0F080D06D3DCB3EB0E38A727EDCD97045436E3662AC036399A61E914BD43994094F36AF5DA93FFC271DC95339584B19A67EEDAD9540D731EE7E350D12BC9A446D7FFDFB633DE63DA25F1E1F6EF3CE6EBF9453B39B905E2BE18A178EA767
F6CFFB60260ECD870F6519755AA6545C1B45644B3EB53F7016BFEB7E6C4A90FAC09BBC8769BF41E59C14EF403D27102516474F7A7F0AEE074ECF7DCD91FAED6A2C70453D23847C9B7D2DC05CC9FE8CDB02CC88FC85D19380270FD74E932E09E12E5B3CC61AAB664229CA8EFDE14CCAA4420E418C1AD9719AE1806E14A96F2F0C77A1783D78EA0D493B556ECF40B28593993D78DB2681CFF4198404B2E7B69B6080254C61D07ADC8DA1B3799EAD3D29504FB1442B959373E22C1032B46F8FB2729637BF85E90B8568E9
8E4807A8580D1FFF2561ABB4D02BC0180B049C7F0134EB5A465573E12B80508A808F89DE46095F63986B1860BBD26680A6DB7F5410EC32A7F115EC775523C81291E0C7AD1433DD95365D2A85E71087EEE23D99B4DFE57ACA5BD2364FF07B1518DD47B8607ABC3F5C151E6394D71E7AF6F46D27F9AADED8C6AD11E9B3EEFA12A3970C5F5146C35DBD2541CE10D169BF331EED5F50F17364E27A65840E8EEB2A4D50E826AD1D3962D0EABFDEC843D50B5CDA2B94F22354E47527F53D4D1A6754E39F4562ACDD54368B96
1E1E2A93E4623475B23CAA104DC1B431733FB4FEAF617D7D51F5798E908E8524320E2CCF04C4089AB2FC0D4B574A79AAD2B209FA705D34220B8BD53C515CC98D1769B4A9C5F243FE737EAE3BAD466150C7C00B666C8892B9AF0FD191BAD1C5278292A475B0A1C19BBE15C3386E7BEA1C478E66A5563C58ED55BD67137CCEA8532C91DB282AEB72C9E3A17AE1A3BDB7BDF9FBD3017650AB59AA9A056EFE39B6B8B178912F67292E05ECB85D531EF1F3FFBC38CA952E7AAC149C6DA3895D40A011AB2906CB0C1AD692FD
7A13D3A819F75AA888911212E862328E7A4DCBC6CDBDC8655BBDF51F630942360788DD10B800A3846B1CCC4E9B1005329CB1C64536B2A8263A7D919E08ECDBBB1E5CC0BDB29500F2F61A273AEDE2E51814980ED8F89591B267593776FD6F892F26375D46A14E69A044592BBC53FBEC25AD7DD65DB7A2A466606649238B5410C7C78D3D624A50638ACFE22E42A94961F1C967C12C31DFB51BF4C25D65956FD1F9FF33C9DB59EED0F65CF7AFED013A49ED61444640B80694EA1734BB1CC3109685CA22AA9DF5EFB379F0
A21A7768FBF017ED3C646D8C890B2AAC682259336A03125CFAC238E6337E60741B89F889CCAD1D205581BE4727D3F40F1A576979702FD12CC5AF0743D3681F9C2A76F366C0115091B3BAC625CCB9005AE0774C7931551CECEF4AAB79E654E570777985CDD5D2CF21C2FCA14540327CA655BF2A9024F8DE2F6F2B8DBF840CE206C24B7031BF64A6F5230E4712FB4E1B0C0C35E6E8CE43879756878A565E15BD099241B4780A8B7A54756CBD8570140080360644DA8402F1278E984F37A0540BC36F047FF6BD6AE30DBB
6164A85F6CE9E0AF80986A3649B4D0E3C203159F8A8578B0613BF6F118AD2937C58ACE22067301839176ABF035F360663C587D0181DC62CE596DEAAB11287BD507BE114ABA987C5BF9A4BAE1375CE0B6CB4F8D94EE3D4F5DC53D84293C5A74C75611875BF5F0EE74D91E6B28A8309E595AD9DD586AFE88F806545FED7F3F0A65FCE96627244257F81791C96F3B147DF300977959100991ACB4BA4EB43A28B8B7C80998D03EF25B2EF266E5C2B732CD11FACBAD70079EC99582ED76D6CA793421B85FD4D24CCD794F6E
2C7CB4645DC511723C6E203C74D4529979E0F80C75DFB09012A5F9645A90D447DD9838B5D8E981C4042757836BA53B7E4F8D0B6E7A3D0F5C90AB47407802E375D3EA2CE865A7667931B2CB51CF448A097E690F935AC93B8311FE9448314FA4D1986F38707D778BAC5014140153B6D4BC3E181A437BF793A2084251BCAC04EDAE545988FC149CA5AFA2F2B01AC7BFFFC48F23CBEB5ABE0569B8F7643546A5907BC2BC35521174DE505EDC6E0C07829AE7DD1105BCD564D2FA1CD19908F407B6B4C2744959076F38F9F1
50AC03E3757618C64BF91CA29C93DB6110D2A6A4AF3F892FA5720A665413D996784DF3D011DDA37F4BF9AA018F981F7FA9150E15050A603A59B291007EF65BD4D4F02A0D82D09E657172368509CD272E9E910C97BA2F201E58DF1A38D0B2C5E187A240964FE703DE63646CDADA3E54C23061BFD5EF8EE99FDB98EED135C7DCFA02B2767483CCBDFFFD3982B6FE8EB5117534DDE56FFD1FDEF7F0E73FC3065CBD5A2CA8C225465DF5FC8BA2E94EBA3E56C3D64D06FCF17756063A30F627A7F7D3A9DB7DC4462170027DF74B3E170F9BCDEB45B8626709E2E2BDD4D0AA12C069F733FDC7EED058021FADAD188B0F
8FAD7A8783C29D4AB3EA2378AD02DBDE4EC9C79ED4EE6C4F21AF283E24FF4AA64AB6DF39B861CC541281A6ECA6D8DE04B7E7F3B052A056585FC3E6603DABE8223F268B2F12434E8E0A8DB17AFD9414454D0D7BD7DCF1DE796C0A8A11824FF26314026D0B849ABBB9BE10460865FEAD4F18A10031F2B7397412FD72AA237BD21CA9A0B2A5833AD1940407BE8B93D99FA72F1F45C58549A93BA5C7B193B706AE6F343D2F5732E3932D38DF13FF9E37A345F56CAFE8D3DCB374900ECB52183EB9867180BD4EFBF0E87BFE
2DA4B5BF3E9A3DD94A91D4DFFF9A57E90D84453C388678AE3888370934C44846FD1B89D9BF1ACFC30E0F1E4E8F009239EE2D3AE9B03748E8D5BE4A9FE99187D9D9E193AD566084980FE90B9C771A6CC496D43A3B4CC10FCF311A14D03B517515877E660A9513FEE5057F9E7FC81BC0E49F7315BBAA5233E24B354A743E5E8731293F115D0FDDAE6DFC8C619DA93077F956EC166D6BB2D7E86DA92A066E7A313181A217C4C2D7B94FE2A17E7F3EF214D3BF68B01794A84243E7DE3431FF44C5019F2B48F1F3BB2CB677
211A5EF999165DF68E127AD36C6CA50F343BE229ECE8854156E52FE94C723A94C7A54C270813F6228A7420FB22C831FA83AB1B747435D41C214DF93371C41C980B3FE49E4791FF2BD0148B611E1C057E03110118CDA84D90EA454931F4CF6861E1B6C0477C35F7892B209ACA633609C70F69CAD1DB5FEB8906F52990F9E8C6BC07DEAEBAC00294C010E5D0B88182191F5453C2CEF8E2B346DD18E8D291C5A054F4049ADB44D1929731854A7CE852D72EEA941FAAA3FB75E426E955CEAB2519A09310403F5E0769F4BA
60AEBE04039E01C20C61F89CE8C055AE2D1D7642A9A6E0675136BB229C19444D3C80AF3075A954D024ECBAC64BB12D163B9DA9B1A2E2FC5F0CAB8D562949340565C352BC22248D07A7E90B921E0C166C7866506C9C5979A438B497408F54B1C0BCDC039AC468F2AF0D5C143E76F2E0E2F6E95211E3B1546518D5B4A66D99EFA0502C46DF4A10C82042425854D621D2AFC31D7690FDA4BB74DAD28D6A5111073DF8464D64A0F6D3FA08DD35A190F7A237D31E6CFD66D57181C49E0C133C6758D6863A9FD577A749AAE4
D746A94A7F804702E76AA5995F6662CBFF9380C4276ECCF11F2EAB609E7A39FC60922B3522C4F03A8588DE18C4E81FDED40D8E381D7B40BF872B1451386AEAE79499A6060663B412E24E576AA34518E3E525C950D9D24FC4DF389AE389166674818723E65176B3762D2565B63BFA2D79BFA56924A0D332D46396E4DEE166E8E1C1FE61FB888B6400CBE85BB07F20581D0DFF4ADA3F3937AE36AF7A1251B2EAF8B03E17D6E61ADC5967A0CAA2A80005F52D8972FB4602C780A4BABC368A8C8B3A39BDFB5E1A34485FF7
0D1A474FE62B95341DB9CB82E635122FD6DB12CE6CB884B5E800408969C79CD96C7B77060647A540CF34307F009B49028C1182FAC37344A24FF841FC22025C1D303BDF3EBDD9E8C4C38FAA5C2BD07392807415CD31A57E91654ABC029B36C4AB00E3CEAA16D71FD5E063D3015ACB538A6E4B699A3C89B6B5F6823771B98461D586652802AB4B5E1FDA6F9A4360CE38C0FCA2BA5182C6CF195D8CFF49CCC9C7998B79C28DA141EAA80D382E7B274AD03EE2545AB15A209777F00A9FE429E34CC32F028981686EA8E71B
99BB3D1AC5061F61601BAC37990BE3D7109192039B3A3E4B97B65521B65581EF8716D6297FA120276134F914F7332D8CD5A0BCBF9CF63DE19F0FEDDCEA5373BE9E710F1CD227638E449ABB503C768425B7A005874305A23CB00EF0846D6F81B5D4AF68F50DB7A16CBFC8AF5B39EBD1D7E7B827CF5C51174350F249C819DCDA85660D93C6C886A8A21BE0D295F6CB698967561464F844361DAA38FFB6731BF01696BEEA8787512EFBCE6DAC6FF66F5C006AF1687EBF863AF56E2E269852C1A244DC29798CF4ECA8725E
E2EC92D720A548DB8E9E0AB99DCB46854A329339836467533B60775D749309B880AA6A2AE46477CF3575ADD8F1678866BE59DB7067FF54F077D05665D726E1D565194AB7301E91A707EB7DCDD925708E74BFF7C30CF7088AE3E851A65F927BEA2B69282CD5624E23549A94D547B1882F75DEF07B7D8298C6DF23500AE97D8255F39AFDD289D0D6C96EDA803CC3AA97A078A6DB0ACEC589974C54AC7C91521D75C6A22F81D5FE56D1D4437DDD91533E0B40150FBAEED55249B8B150F83B9FF611717672FCE6B494014F
8056133E316FACD2949F47E7FC102704C72B9A15102D17FF7471E0164965764D42CAE624BEAC2B2B8A37C7AEAB6128A7C9481BCC617A6159D4437500D5D7DBF1143E33CE7015A46F54C3C59A02E9A711101DCE3E992752F784121B59C3541F63EDE795AE58B94B4554E9F75DB02A133D21414EE755EAEAA78877C2D7CE1122B5C0204BA5E590E5CDC5516EE3690A071FB8B538B223DCAA3E7A6A165777832E9247513599F72DC82212136E1BE1A7851F8123E2598BA3842C45775FAB0A0E6CADE9454BD92F8124C70D
FBF1CEC982386FAD5E08F5DF8C7AE23733B2B18950ACD30B74F7AEFF34368F31652672D1B748705D2E71E213E36CB896934FB04B5FC0C3EF16B7B9DA8118E131C946A7EA0C002F8511536B9FD964BE97EFE0B8EAC1325BB7CF0D8B48A09E25276633D3A31ECBA3F4EC029306763293D6439D6C8E18048D73B0F8BD49CE2F6FD650F06E76499085E75CC4997C514A1025B885C2863338A6137F976D3804E3ABD4D966424EC81F8E49C009E759E5559F8641445A5512B6416A848C51EABBF18DA0419FF1AA05E20554637643972C91E35E4F3AE11B454616CEE2ED6680B017736815BCBC0DB43E27057C481D398B
F052D89338B495696E1F917115584FB60F0C435722D85A2E20BA99A671A8C7907B49CE5DE6F5CB76CA52E04CE012BFC1E7374F359140330E5118D07E2F6D95D7906DCF0D3AEF8F2DA479E426D1442E125D946B3C18083A7D03F4C4A1AC6E5A59D0F2792ACA6FA524B104317E091BA923F92469F19AAC7DE3DC7A7E3C5734EABF6EAC3EC73343AB0FD8314AC8116EF7F55541F25EB2FF23765E494208E6097CF41495B8263D10B4B1455C5C6ADC2B5D60F9E346BEB403CC7575B517C413E6490D29AAAF09FA36742946
53640F827CD30C3E322EADF80F32CF46950135187189223CA1D56E15D9E3D33A6A431A779EEB15FBFE24DC7778D44B2D0C1645BD456C7398BE50967AF2E16A0CCC90C4BF617172C356B3AD381642B0D13B52618F57829087026CE490A8E35CE0108668812015E995EFB43C93ABC4C3F64326A9B7898CE84C705E6C32CB513C6A3D6DC4B449DB17C6F2DE08E10ED1B135F684E51C20F24FCEF28D7762F2900932885505FD52B638D31670C9129E63B75AECD25C819537D01D160E9CE519B9FC4E60E2A1573EB95C2AD2
EE379924548D00E64398E9D94D618FBB3A5F958EF60B68C91028F042DC66FE606BFD8CD91C85D863DDE6BA148D752897DDFB16C9BE669CA66F2FD71DFA654BD840F457FEAB0A0EEF44C1E4C5018B0F529680A5BD81ACE8D813F2D4106D8FCAA7969F2F7CFB848D6E9DDC3EFDDA3B9C80D1A9C3D6E2AC4CE3D93D93CE7E2CE9DC8A41C275456FB80310A50BC9FA306263DC77DC9211E339B24AB58CE647B5202C52E08073B4611B3D149AABD3CDBFEBBF5CE69748EA6212CFA15E299F333362AB541A5F83F38E464B7B
01CEFE82B2236E448934CF5FCF4E1EB98EBE93300DA37A50E1BC01D742C3BC59E2E359F2491FBB7915348114EE1C3F0F499ACFE2E9B9C1ECA8F927C593B3A10D8AA4D2B1FA000838FDD44EDD06E1A14E13F4A400FD3D6CBEE77D90C0D222D66ECD766CDBB7EB4B325936B9CEA1D65BF80CDC5FF884E55ABCCC31D4C4654D17F4C088C50E4A22067FA1A8CFFD0A0AB0592CE2FEB410E3F8EB106C81AC42DD992BF53A236FADA133BA3431EC0D5C5A8B6DF41213AD8ACF49C7CF7C785B38535C7D3B9CDF9CC2BE31CCD8
C5A8AB983702E8BB7BB6D852FE47B66462AE599955CF6A59EC7945AD21503657DE8A21A658A71447B36F0D9C98C1A2578FD62BA71A8DC7FB8F7A221238806831DCEFABF9BC912E7CB5DC469FF598B427FF4176EBA1434A7EDD2C8074905064E7190A024E8B0761B8C695CDC5ECC5255C7B2E88775EFF70D195CF5924C521600C8B01CEC70C0235C947C4CA18375DEC5FA8D0B5C301101FCAC3BFC048535B4C6CEFD25DEE779C4D539BB95E3053215BFF42F12851DF93A6E0B91E4D29D174C075BAC69E17A5F6051D8A
EE2D731DD56E3E18C1CEB5912AEC6FD8BBBC6E46F7B9ACCCF61C9939C4084B5A046ED13556C29A53FD5A7068C8CC7D99C5E5C3E3628C8D5870B82B78F23C389EEFB934EB73FCFF6F5519DDC9D26FD22FC6EC1D3FFB511B056BBEEDFCC3028FF9937D5158D1A51D908222123024C48EAC9719419DBE21FE100DE4F85E738B4FCA6F3F2E2F8CCF360E906F2EE328BC8A5BBBD7BC5FD8E4537B7988CF3BD617B3B438FE8FEFFB76558ACB410D958AE014A15AB46D6E30A8416AD20E82DA6557B3B491F5DC61EBD5D47487
DC8A605D93B2CE8E53913042816EAF7C31DF24E6023A91166670EB5BEC60B99BC8B78580916706111CC81D9CDB8065BF59193631806E9017F89A7CDDD94C7D24D5190685FE8EF026FAAD0E345302963408788DF39E82C7AEEF555A3E6110E71C70B5F2986BC1FC452E26345D35665B8E6AC5BA777F742CA97E013835038173A662A377B72927FF70CAA2719A5ED31A91F9B0317AA1767F8A97FD9EB2506F2B58E7F7701519F11C99DF8415BE0772D1E7FCAF61D1AC89EF14E9D61262A864CC7FF9B02BEE6A640C38B3
0613F6131E9EA7D57FE6EEC0D31CB76E168F4AC1BB74210F0B4AD5C8B4A2EC2A068C2DC1FF8CC12614AFED1F301E1798E3D0AB322422781156BBF8FCB97B9404F36D0C416F35B95FA0AB052B0FDFE5A65856E14244F70ABBF8C76038A67E58F56F689BC9C00824A98CB58950D34727248C64D9B81984479B2E59FA649B4F709EA494492641BA163EF085616D77BAF4AD843BA83349005087DBD9D538E1E91E1DBB4FE41C0766811721D3C6EA2FFBA36323083D352C54F86E9B823C0982EA674EB71858D3A91C3255E8
953EC4DAA7C126F26466D95C9DAC430D2692938E8A82B8621DF9C6B97C9E1462AA01EE8B45B5BA37A15ABBFC9BA1D5CF4744BDF288DB8C6075C27E9206ED49A41568A8F660986B7BAC809A9AF88ECAC9A667740C1668E303EA9680C9FE6B1D012E68A7EC2BCB41DC2A8D4A68A953DC8A499164C9E17CF0A7997DE56A92A57BB906C6646AA06249BABB86D79EE3A0BAB2FE209881A8A2FD2360E3F8169B58F1137BDDE400A8C564DB436FC9A14567778B26C43D64062A021323EE457758289F9A7B804E2E6271ED9866
27D96786DBF84A7EC90E84B1CB26525806298A1AD03A2B68A3D38184CD406691E55F17565C35A77622F0787FC92925647B04EF4A932C5099C0FF4976DE2AB470D9C1200F841EA3043BEA67754099BC614EDED521D63A47C4487076406AD3D26EBF7B46F6D9604027F84C93C26760E2E780416455A8AB7F6A28D033E5AE370CDD26DFEA3372171E1313519CA038ABBAB32772EC45B61938C8BD48EE149B0CBD4EC044B28F58D64A287F8531744A54E476F4E46D21E7CE0D72F52F05BC5297147A76C9DB9B5D055961539C9ECC65A0FBD32F332FD90AF24A341AE83DA12FD45FF69281A72C6DB35C7ECBB797A534
4A209210120437327360E2F9209B492AD1D275C052C8F8BC7D0460A00D67F0B7D8E30E4496493023469D1972F11574D49DFD6B12AB86B6E7543CF53016421CDB7FA18F2DF59F84B35022C6835B020ADCA1F8D88B1CF3204CED6B52299E99ADFF2D39D9D3BDFA95F6D7E7E0DC96AF3801910D01DD29EC8ADC1A90F12C7D2E42A54C837442C37C1099DF899EDC907497673465D21777967751DEDF338711E9CCD59290A13FD04FB55C39BF254AB762654116D10CB349DADEEC2249A6766DD16C0DB27DFD353EDA8A6BA5
68E14CF7CB8FB66252D180AF32C8C8DA0F26D71B18450BBE6387ED0CA72D6DC7F011E628E82C9BB32506BBED6D844817FD4DEC132AD5B9380EF18A2569F71ECB305DD637E198F4625C2775A68ACB224B1F25865F1274D0B8F38540B4564BDDF9236C5BE8953EC4DA8A5C31DD28B6B25268DB9FAF2BD301E18BE49154C5092A1D32B2CD7FD48AB0E3A66463B3412B9E11930B8D4B285213C5401EB3337557576CF78A8096E578D1D38AD61047EB77978C042D0EA53CCEF7C94669AD9CDBC658D4FA557371AACB5138E6
C704419D652C7F7CC26F0EA9088CADB3B5EAD9A3EA5DFEAA1BD1EFE4F720F63CE130BA4C5477F87BAF350174BD2667D03DB86ADBC7970713F456C0642E97A345579A81D326EE63AA0A54D632748B27970848AA79231CEA2260783260A39CB2077FDED5A70DA59E73E527E8C7D6C28296227DEC45A874A6019A596922F62398D00633165DA1E3BD62C1F3E014A6A611AC558FF6AFF5F6037259D268A7862188B086123D1F766007CD86BCF137AC99F2B94AC2417947E3D306E90338B88E300E3E491AC88876144BE41C
FA7E21B904609F5E6584843564E8BC76BFAC07831E40FF81EC64B1CD4D9F9B5E1BD419CD63A2F15C55D875A6C33B829DCA2D4D0771506A5166AF6606473578AAB41E9BC74D23A7E0EAB8492CCE19599368B6844E732904C8066D7F8B27131F013BCA520D219C20CB1B8765C17025BC4C7CD7BC6DCC2B4D6FC21541A361C4B519A0F3CD336BB840415B0E7D8FF96CE964845B46FF7672DA8E221F6D0C9424797985B4E4E32BF4801F82FD249EF29E21F8710FF2D43121F38671FB21A1117C65939BB03BE008AE7F3498
9FA05E2C2AC95E4027B31E33747A80DADBDD1713280F77BE46ADAF3C4760C5C919F181008B42DFEB20C6712AD7BAFBC6E1F6A07A5E5281BBEA6EDDF6D5CF51EF03387A31AB6B386487221507F0C51A94EA2BAD7FC8CCF1E7970E4C6D1FC2DE097E73DB6950E9C2695A55CFC7F1A97A1990B1A0CDD29075F7C42596B18C5055498BE8B1F23037D7FDE971D8F0649B7568FA0050C508E2219F25AEF442869941039BC817BA394F8FC1D0ABC9F12809CD6E73D16BEF7AB8268821D4DC0AED54482F0CCA921AB6A2731223
522518B970C63378573D6A8A1D28F6BFC4D6564F2DBD0D2A00CBEEACC0DC34D98C0CE8745869FAF1C6D53FAF6441C641CAD686A2D7D09C79A7E68810E6D0789117F62A8EF6A12106E5B70D9F344850E35E65A8552FE6FD8069919E87F5A159D911B58CBE0A7570CE730E921C96FDC3D418370B9664DBDDFFA9822A2AD4585E099A81FCB925DB0D92D2996F3438613EBCA21F66538B8525D2CB6E6B37740352B0BBA9FC398748C63FF22B8888F69C5F86712D07D1F035D9A54347CB6CB9F694EACA8A926C12FEEF3139
4358D4C31947438763D7DB07EEF1BE22B2FC6A3A3F15AED89E760F58A6DB6F5EA44E6D8C9A8BBAB5C30D458CDEBAE1A309E04B0D2E07EA3735758DAC8BB16CA3C256AF870E9042E24614E3E1BD6A0CCD1CDBA52C16487470A31EAB0B09337209EEC0EA324282550F4934FEFEEC3DE1C0456EE50DD21BCF71EB266DD39DDE7BB59F1BE9EC58FC8762804CA85D9887874DE844EC48505D8CD5407FA0CA2F4EACCFCB05199F03959FFAC453F0145DDD537DB8363BBE4882F9F570B902595F2A45B8DC64A590AD7C761B16
87BCB9E1BE38D9A84FEE143835975BE8A68349FCCB534AD1C7D1E92F8B57374ADF3CFDA16B3408CB1FF2B0C3E7918BBB836E6BE8ADADBA3564E1DB207F8E49892A57A0191E38692AAB1A261170F9F5968F2360DC743628A86D8CFEAF97BE14084723FB11864E21F80D38EBF54C64CE051F6CE701AA4848E569E39372E2AF063329DE376988B2F3A99BCF686E06C1A823A1654DAAF0F5E1817495CDEE781165942C21FCEEEE20EEB36D19AB228D428917974219F380C7ABEB28510BE54D55CCFB1082A08403119C1ED8
84A84E4D1A999F0A34C263AA92F112835ED736A7BC64D124318511A1FE047344D5E4BBDDF92CAFBDFBE9B39FED998EF9AB5C00D4BA89D4D930BB3DFB744C16185D26EA0BEAE45F27DF9C8CB3F72FC8D5AA4FCB5B8CFEA365428E562D08443CD200B23EFB02405DB1BC5717956BA4A7156B70BAB6987960F9DE1C8E75279EA686A0A0A19F8D69153C9E67E17639F8B3BD623D96A99E1259D9B0697093F028C37D04E015F418C2F3B6AAC7FAD9BD29D279C49CB1BF9881AAB9CB71046316F9AE21F7BD678686401C73A5
39F8D0CD314347CDF1F2F4E31807CA2AEC5405AA7C70F77EB8B56781BDD1E251C1C813A5F13BB9AD0FCD479C5C508DC0765597F607C2C6F3638BDB1ACC44E2C97B6E6F2009D70F1B5C6F7ADAF06BDECE3692AD8BE6AE5F0BDE1561580C29C91FD47E1ACB77C4BE041745D2815F86AB3B6E2CD1B0970DBCB96897040533162A6841FD679661418DBC5DBBC7A3090D0E053AF61AF56BFB7E56A285F90328490A6E9051BC5228436A32E019B54DB31A3911078AE2E534618EF670B328E78288A139DE95CE0C256725BB269061800D0EC25120DDA1EDB70CFB97AD55012CEE00AE42916320EE48A83BE918F7E07437
7A7314A4121B0AA32AED85E11D37D1F5BCD38FBA85E7229A2DA8424EB06F58FB24BFB788F41C2363B335AF7767886447276AF143A4D012F07E56B87317F1014A44356C543E7992192E5E3868856769E0729AC0216827D820776F2C2B10E6FDB4166E2050A501D9B501576FCDC780B6BEBF5AA9AF279CDA3B9D436E559D6C4B7797C3BBA90E20CB49CA81103301BBDD1A31F883D3AB3ED75FD0467DA30D5543E8CA183DA531939D85C44CBE71B7563496771EC9DCA8DBA7886348804B08D526002FCA48E8BF44AEC6DE
EEC560B2571BC43EF6CFC21BE5F0438B5B00EF258DDC4A6D7A1448CEE6CE32681CBB7B4CD323A253ABCE6CF2AB8B491E0A306B5866D04271C8772EC78C817ED7073F36E3681C4E154CEEB6E2CE8E697287A864F81FDC833428EED8CD9D83EAE0CC9680AF119E0486D21ED385974B8B63487CBCE5ED003BAEA71C5F0AD69407A8483C27EFB237A2E001273B416119AB1FBE8C8EDC34A00547F572843D5C8F4B0992CF23F7FA27C2E8414115EC78D07881938F27625030090A1968D3CF46198A821799DFC7EBA3ADB450
0A4B5F000B172A49B27A602DC2C91B3826F73C0516B2AD1FF3E4C6EDBC142A57994489E979A51A44C74DAC6EBAE6D155142EF7B35D405E6E76FD27709CFD9DBB6A79BE2B7A297FC9A360BF4E8946BA53E53075BB78BCFEEE2FD477C29521A0BE25C9BCC0D626DE9C98D2AAA7C4B1B3F9576B8F0E7920F8422E3F7995123CA3521B956148534205C0302D2933FA99B276420AB611638B93EE3B717E183A9625C3DF0F73FD972B3ECB75801D1C2F1ACF94BF21CAF9DE7F036568A8277364E9F6449ED843EB1CB7A3A5B2
1F4F5A62227C14C3239A495E76DD58421C01A5D33F79C14B0391B8068312EE8E56AC86287657698CCD27B0D1E80570FDC18E119FDDE28BAF9A01F0ED100170E5EA510FF0183574D3DDD811E29BC1912310607DCDB0E66407B657578B9373A187A48467A604CC2DE5BF417F89E780689D1213419255CBD58F26AFB8CF2FB5722C130787E4E0E5674D9FD30F5008B5E23864EE610AD3BE5D086DF771F2C82C9F0B46224882FA070ACB2F1942AFF19D3A107E58D1D1794323ED3FF5B5C2F2727A538A743475617C695C8A
7C87EE80A5FA7CBF283A5A81FA570A8591611E0A17A036D1904B5D420A64B9DBB98E4E8B621503B70C55FA9BEC13F734222663F471EEF93A4409CBACCA95AF8531F9EEB2C117711FC69C894477FF3560B49BE282F095BD631C5A200793B3D4AC089FBE33CF7DFE8D5FF855F8A6A02CFF171263038730DD952C0E54F015CFEDB384EFD5B607CA78F84FB97E77A6EDEDF2715B867E768933031A6B96E2168503215490B24FA96297E7A15659A3D6A572AD3BD102E0D434350F595FEB3CAC082B10681B0DCD2E6D2F2661
D545D13747C66DCF2E0B02A93A5C47A0A125858D3BAFD36C9432961115A578842C82429FD72E5D8E24F83E4F88BC020FA2E99B94A516ABA2B98BE8AAF72353D4CDA1AC66F3563A6856AD92A02CA2CB1151418E63EBDC6A3E4FF1F5D613AFBE9FCD0D6BD3A45A11D9589CB0D54DC24BD0678B3F13A155A02A8E5D03ECC16733B7DE0BA734D0E290B578D74CEF579A5EA28C6EC30ABC1CB176202630B2D8E126602FAD9C629B8F40A433C9268DD0C44CCDCD0783F81FC2F703F854D16CC457357ABD0757B91844FA4C95
874EBBA4E408E34524F364C206C7651D16CB3BFA7CA502F49D7C53F95A96AF0F79B6FE13AA7AB118470BE0B2C797D054768D99A637CEA79253F3A2E21242B3D0318941A6A3D2F404EEDD410D13F3CA183D603437658DF92A4020AD85827998996B9B4D5791CE65A9DBA8D20A51859F9F488A94AD3FA268FE5F1F9B65202E22AF9170E54BF2343D16A96E23D6BF8AAC544052CCBE0F2BFAA38F228B030EEBD1B52466D6918EE9EA32832347518079A07B0BD01FC32180DE5C3D99FA2ED1DD4EF66944D1A93A36E79A22
02D5906FE9B1A5EC0B4A537F731DEFD7CC5A6F34083462470BD3FB54A39A394BC9F13B6B3A5C231E5E50ECB0254E227D407D4C69BEC040D8421E3CCF001E66496203FE29BB3F6DE1A2A3E2F604338522CAA4976DAF4B62138D441A5CFC8DE4F00120205A94CD12F0A8E6F200A93C4C6705A4CAB8A053EF9AB7D8A35D6685CD669FF335DA8738252560D2D9B6DBDC04B17E66BE176F79DDB2B2BB20A687AC382D709DC3368A36DFF70CEFE627E9A5005C0CBCEF8E8CA1C0883AB08B02E74F8E43D9DDDD60946DD44EAD
93909F3BBD1BD75BF8F783A0A0D9CB7879C452A2D2D9EB6157A0C03CC678F7BABE5452E084BF38E3114CA69B44AE8BB22BD617ED56FBB2DC3A7E27A264C9A181CA6D19C6452527A5F32606006FC5FFC20C2E72420BC4C9B9AC23ACB8951E6172C4E6DB84CB7C66F69715A87AE824D05128F5BF73342237783E805F5D919955162326F31CAE5251EA4376030793B5CB90F76A220B743A8CFFC7183B1110E42B3D407F955E3418B8AC6A3E54C019694E257FEC3AC021C848290895B560026CBC51F11E5D4258D8621030
1D85B2C255D789F24595B797EAF6628C487068B42AF251EFC720CE3AEB8C8FC09E2D58FDAD2F4A13737A6E78E9187CDF26BEEF4D1864E6B41682386B152D8150B13BD098F3D3002A3243CDC20E810F4F1619CBCCBEA494985D29F0CF6470D88867455A652BDC2C19C0DE50C0DC90FC3B7B1786098C10F36AC0C3E479C1648AE3683846E93776B762C27B55C4E1C67170680BF1F1FFCCF8565355814392A8347BDB9B6F6FAB0025477D22A5E4A20D8F2A7B36F48BE592C573583432D476137AD25A76C4F377A086C4F7B271E3BA2E54493802564286B8813BF26F1993485F6C3956753930414378F792DC66AB0F
1CDA05F75C2565A39EC676A4B33D85601ED592CA3D911DC7DBB66545F2A1EB9A5F5AD8DEAECA769ABF6E05DDB00E1CF3EE20F390F5F002D66173D5E86ABEBDC4D33A887B5BFD79E5FFC93ED86E2C32D305CB4FD3C6FA183650553E410C6DE50DFE4CE90C213F7FE41BFA36AF07612D4B2CE5E31E598730EB2648F153FE2F2C21BB7FE752DDFA288013A35906B2697A15F3F45041E87D9F0D979DFD7B79A41BD595A16E39E746E801E9EB11C73874CC8BA18E0F3BD4DEAE6AF911B9CD18C84FA766391239BABA83B6E5
65F04515F58CD87744B5C69D13C70F08EDD7AA28A8270C2A99F829384C64EDB29AD5304F9E2C6E97B3E4BF9A398C163D85474C472402A551B69671ADDED998CCB0D45F2C4E0A7BE4A314D1E036099BF7390B228DF3650D07F3391000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont
/f0_1/Palatino-BoldItalic
:mre
/f0_1 f0_1 1 scf
/f1_1/Times-Bold
:mre
/f1_27 f1_1 27 scf
/f1_21 f1_1 21 scf
/f1_18 f1_1 18 scf
/f1_15 f1_1 15 scf
/f2_1/Symbol
:bsr
240/apple pd
:esr
/f2_15 f2_1 15 scf
/f3_1 f2_1
def
/f3_15 f3_1 15 scf
/f4_1/Times-Italic
:mre
/f4_21 f4_1 21 scf
/f4_15 f4_1 15 scf
/f4_12 f4_1 12 scf
/f5_1 f2_1
:mi
/f5_15 f5_1 15 scf
/f6_1/Times-Roman
:mre
/f6_15 f6_1 15 scf
/f6_14 f6_1 14 scf
/f6_13 f6_1 13 scf
/f6_12 f6_1 12 scf
/f6_10 f6_1 10 scf
/f6_9 f6_1 9 scf
/f7_1/Times-BoldItalic
:mre
/f7_15 f7_1 15 scf
/f8_1 f6_1
:v def
/f9_1 f6_1 1.087 scf
/f9_12 f9_1 12 scf
/f10_1/Courier
:mre
/f10_15 f10_1 15 scf
/f10_14 f10_1 14 scf
/f10_12 f10_1 12 scf
/f10_10 f10_1 10 scf
/f11_1/Courier-Oblique
:mre
/f12_1 f11_1
def
/f12_15 f12_1 15 scf
/f12_14 f12_1 14 scf
/f13_1/Courier-Bold
:mre
/f13_14 f13_1 14 scf
/f13_12 f13_1 12 scf
/f13_9 f13_1 9 scf
/f14_1/Lics
findfont :ff def
/f14_15 f14_1 15 scf
/f14_12 f14_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(luca; page: 1 of 70)setjob
%%EndPageSetup
gS 0 0 877 1146 rC
1 G
349 192 1 1 rF
0 0 :M
-18 -18 :T
psb
/, 128 string def
{currentfile , readstring {(,,,,,,,,,,,,,,,,) search
{pop pop pop {currentfile read {46 eq {exit} if} {exit} ifelse} loop exit}
{pop} ifelse} {pop exit} ifelse} bind loop
pse
18 18 :T
350 193 175 66 rC
349 192 1 1 rF
175 66 1 22 [175 0 0 66 350 193] T T 3 :f
[1  :i JcLH(O8o7]oDn[e!<[l?!!4hZJF3C=p]J>"!!;otJFNUA#65"umf3H>!!)Nb!;6BtO+76"!!!&(o`,:\!"T&0n,NG1nFchh"93l^!!(pW!']oG!"'goi"#eghueL;nFchh*!>[@!!)L!JDfqj!!d`Ln/hW1n36u)_=7-u$Le)c*Y/8/cN1l?pAbR%huNNn5Jc7g"+fD)!"/ne!;m?T_;Gh+J`-8&$O=HIHk-=qi"$'Fi:d3Z"5j0,%n"1k*s]UNpAb4!^^1!g*eV;E%g.FApAbR+^]8a("2Wn+#DM+1!"0%I!.5gi_;Gh/NSsO2$P1#Qp`9Zki#W,ki:d3Z%tFZT*s9@;*bY#YpAbR3J,jg8"2Vbo#K+@S!;um*&&80i*X@>A+,>L,pAbR+^]<jF#6X`C!<M-Q!"0%I!:V$>"7Qd#!T<\P$O=HJi#Wj=^]4?:_"Rg:#J^H"+#j;:!!!,:pAb@!i!7%.i;EWV"2OX2"U!Zn!!D0X!!*2;pAb6qr"&W(!<^.2!!.TEq>^Nui:[-O2t6YD!<[l>!!!8o!.t9*!9X@4
!.Y~>
%ADOeod
:j
175 66 8 175 [175 0 0 66 350 193] T T 3 :f
(0) (\377\377\377\377\377\314\377\377\231\377\377f\377\3773\377\377\000\377\314\377\377\314\314\377\314\231\377\314f\377\3143\377\314\000\377\231\377\377\231\314\377\231\231\377\231f\377\2313\377\231\000\377\
f\377\377f\314\377f\231\377ff\377f3\377f\000\3773\377\3773\314\3773\231\3773f\37733\3773\000\377\000\377\377\000\314\377\000\231\377\000f\377\0003\377\000\000\314\377\377\314\377\314\314\377\231\314\377\
f\314\3773\314\377\000\314\314\377\314\314\314\314\314\231\314\314f\314\3143\314\314\000\314\231\377\314\231\314\314\231\231\314\231f\314\2313\314\231\000\314f\377\314f\314\314f\231\314ff\314f3\314f\000\
\3143\377\3143\314\3143\231\3143f\31433\3143\000\314\000\377\314\000\314\314\000\231\314\000f\314\0003\314\000\000\231\377\377\231\377\314\231\377\231\231\377f\231\3773\231\377\000\231\314\377\231\314\314\
\231\314\231\231\314f\231\3143\231\314\000\231\231\377\231\231\314\231\231\231\231\231f\231\2313\231\231\000\231f\377\231f\314\231f\231\231ff\231f3\231f\000\2313\377\2313\314\2313\231\2313f\23133\2313\000\
\231\000\377\231\000\314\231\000\231\231\000f\231\0003\231\000\000f\377\377f\377\314f\377\231f\377ff\3773f\377\000f\314\377f\314\314f\314\231f\314ff\3143f\314\000f\231\377f\231\314f\231\231f\231ff\2313\
f\231\000ff\377ff\314ff\231fffff3ff\000f3\377f3\314f3\231f3ff33f3\000f\000\377f\000\314f\000\231f\000ff\0003f\000\0003\377\3773\377\3143\377\2313\377f3\37733\377\0003\314\3773\314\3143\314\2313\314f3\314\
33\314\0003\231\3773\231\3143\231\2313\231f3\23133\231\0003f\3773f\3143f\2313ff3f33f\00033\37733\31433\23133f33333\0003\000\3773\000\3143\000\2313\000f3\00033\000\000\000\377\377\000\377\314\000\377\231\
\000\377f\000\3773\000\377\000\000\314\377\000\314\314\000\314\231\000\314f\000\3143\000\314\000\000\231\377\000\231\314\000\231\231\000\231f\000\2313\000\231\000\000f\377\000f\314\000f\231\000ff\000f3\
\000f\000\0003\377\0003\314\0003\231\0003f\00033\0003\000\000\000\377\000\000\314\000\000\231\000\000f\000\0003\000\000\000\377\377\377\371\371\371\362\362\362\354\354\354\345\345\345\337\337\337\330\330\
\330\322\322\322\313\313\313\304\304\304\276\276\276\267\267\267\261\261\261\252\252\252\244\244\244\235\235\235\226\226\226\220\220\220\211\211\211\203\203\203|||vvvoooiiibbb[[[UUUNNNHHHAAA;;;444---''\
'   \032\032\032\023\023\023\015\015\015\006\006\006\000\000\000):k JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
JcO0u
OoPL^nc7&;
P5k[arr;Qid/]d=!WW2p!<)rj!7(Y=!;ull!<)rl!6tS<!!3-!rr;`nrr;Zlc2b3Orr;TjqZ#aZcN(HTqZ$'crVu']cN(KU!<<#urr3#us7-0hrrE&^!!WE'rr2uu
rmh(i!<)rh!<)rf!<)r_!!*&p
s4.1n!;?Hd!<)rf!<3#`!!3-"rr2rurVtFK
c2[qGs8N#t"TAB$s8N#t!WN,o!!E9#s8VWi"98E#s7QHls7lWqrr;os"9AK$s8UXM
c2dkDq#L<lq#LBnnGrOfq#L?mq>gNpr;ZftrVtFK
ciF%EpAk-kq>gHnnGrOfqZ-Kmq>^Qrs82lp
s4.1t!<2uurq6<lrr2otrqZTprr2rq!<2uurqQQns82j!s8N'!rr2utq>^Zts8N'!rVurtrr:LK
dK'7GoDnghqZ-TprW)coquH]qp]19mqZ-WqqZ-Tp
eH"%ur;ZBhqu?NnrVm!#!<3$!r;ZZprVuWmrVu`prr;os!<<,u
s4%,!!!*#trrE&h!!*#trrE&q!!E9#s8Vrrrr2utqu?j!s8N&n!!E9#s8Vus!<2utrVus!!<3!!rr:LK
dfB=Go)S^gqZ-Tp!<E/u!<)rq!<)rn!;ulp!;ulp!!!#t
s4.2"!;ulf!;ulp!<)ou!<;rsrVucqrr;]mrVu`prr;rt!rr?$!<3#K
!7UuOs8W)us7--ms8W)us82isrr2otrqcZts8N&uqu?`rrr;`nrr2utqu?j!s8N&s!!*$"!<2ut
eH")!r;Z<fr;ZZprVu]orVucqrVuWmrVucqrVuis!<3*"!<)rJ
!7_)Hs766gs8)fps8)fps8)fps7lZns8)fprr`<%s8N'!!<)rJ
!7_&Ms8N#tnc/^jrr2rp!!N?%rr<#q!<2uurql`us8W)uq#Cd%s8N#u!<2uu!<2ut"TJH$!!!*$s8W)J
!7_)Is7$*fs8)fps7u`os82lrs7cTms8)fos8;rr
s3q&!!;lfe!<)rp!<)rp!<)rq!<)p"!!*'!quHWor;cfrrVus!!;ulI
!7UuOs8W)us766irrE&p!!*#ts8)cts8W)q!!3-!rr3#us8)crrr2otrqZTprqcZr!<2ut
eH")!r;Z?grVu]orVucqrr;fpqu?Hlrr;Qi!<<,u
s4%,!!;ulh!<)rn!<)rr!<3#n!<3#]!!*'"rVt@I
e,TLJrr2uto`5!k!WN,p!!`K'rr;uu!<3#m!!<3#roF+[rrW6#
rmUqs!;ulk!;ulk!;c`J!!*'"rVt@I
dfB=Gp]19mo)S^gec5^Mrr:IJ
dJs:Hrr3'!s8Vrrrr2ut_Z0]:!ri6"
e,[hqp&Di.!!)rs
eH!nq!rr9#qZ">2!!*#u
df>%$!ri6"
dK"q#cN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&UucN&I~>
%ADOeod
:j
0 0 0 0 rC
349 192 1 1 rF
0 0 :M
-18 -18 :T
psb
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.
pse
gR
1 G
gS 350 193 175 66 rC
349 192 1 1 rF
0 0 :M
-18 -18 :T
psb
%%BeginDocument: Adobe Illustrator(TM) 3.2.2
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (Luca Cardelli) (DEC SRC)
%%CreationDate: (5/11/93) (7:21 PM)
%%BoundingBox: 233 78 408 144
%%DocumentProcessColors: Black
%%DocumentFonts: Palatino-BoldItalic
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
pse
18 18 :T
350 193 :M
0 G
f0_1 sf
( )S
350 193 :M
-18 -18 :T
psb
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%/showpage{}def
/copypage{}def
[233 144 408 78]
[newpath clippath pathbbox]
2 dict begin
/d exch def
/s exch def
d 0 get d 1 get translate
d 2 get d 0 get sub s 2 get s 0 get sub div
d 3 get d 1 get sub s 3 get s 1 get sub div
scale
s 0 get neg s 1 get neg translate
end
%%EndProlog
%%BeginSetup
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Palatino-BoldItalic Palatino-BoldItalic
[/_Palatino-BoldItalic/Palatino-BoldItalic 0 0 1 TZ
%AI3_EndEncoding TrueType
%%EndSetup
0 A
0 To
0.9913 0.1312 -0.1312 0.9913 276.3991 93.25 0 Tp
TP
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Palatino-BoldItalic 36.0027 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(Obliq) Tx 
(\r) TX 
TO
%%PageTrailer
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EndDocument
pse
gR
gS 0 0 877 1146 rC
232 285 :M
0 G
f1_27 sf
(A Language with Distributed Scope)S
379 362 :M
f4_21 sf
(Luca Cardelli)S
400 391 :M
f6_15 sf
(June 3, 1994)S
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(luca; page: 2 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 762 :M
f1_15 sf
(\251 Digital Equipment Corporation 1994)S
145 796 :M
f6_15 sf
2.253 .225(This work may not be copied or reproduced in whole or in part except in accordance with this)J
145 814 :M
.519 .052(provision.  Permission to copy in whole or in part without payment of fee is granted only to licensees)J
145 832 :M
.05 .005(under \(and is subject to the terms and conditions of\) the Digital License Agreement for SRC Modula-3,)J
145 850 :M
.003 0(as it appears, for example, on the Internet at the URL http://www.research.digital.com/SRC/m3sources/)J
145 868 :M
1.245 .125(html/COPYRIGHT.html. All such whole or partial copies must include the following: a notice that)J
145 886 :M
.957 .096(such copying is by permission of the Systems Research Center of Digital Equipment Corporation in)J
145 904 :M
.576 .058(Palo Alto, California; an acknowledgment of the authors and individual contributors to the work; and)J
145 922 :M
(all applicable portions of this copyright notice.  All rights reserved.)S
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(luca; page: 3 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 215 :M
f1_21 sf
(Abstract)S
172 244 :M
f6_15 sf
.62 .062(Obliq is a lexically-scoped untyped interpreted language that supports distributed object-oriented)J
145 262 :M
.569 .057(computation. An Obliq computation may involve multiple threads of control within an address space,)J
145 280 :M
.221 .022(multiple address spaces on a machine, heterogeneous machines over a local network, and multiple net)J
762 280 :M
(-)S
145 298 :M
.541 .054(works over the Internet. Obliq objects have state and are local to a site. Obliq computations can roam)J
145 316 :M
(over the network, while maintaining network connections.)S
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(luca; page: 4 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 188 :M
f1_21 sf
(Contents)S
145 233 :M
f6_15 sf
(1.)S
167 233 :M
(Introduction)S
244 233 :M
(.................................................................................................................................)S
241 233 :M
( )S
731 233 :M
(1)S
163 249 :M
(1.1)S
194 249 :M
(Language Overview)S
319 249 :M
(.............................................................................................................)S
316 249 :M
( )S
731 249 :M
(1)S
163 265 :M
(1.2)S
194 265 :M
(Distributed Semantics)S
331 265 :M
(..........................................................................................................)S
327 265 :M
( )S
731 265 :M
(2)S
145 281 :M
(2.)S
167 281 :M
(Local Objects)S
252 281 :M
(...............................................................................................................................)S
251 281 :M
( )S
731 281 :M
(3)S
163 297 :M
(2.1)S
194 297 :M
(Objects and their Fields)S
338 297 :M
(........................................................................................................)S
337 297 :M
( )S
731 297 :M
(3)S
163 313 :M
(2.2)S
194 313 :M
(Object Operations)S
308 313 :M
(................................................................................................................)S
304 313 :M
( )S
731 313 :M
(4)S
163 329 :M
(2.3)S
194 329 :M
(Simple Examples)S
301 329 :M
(..................................................................................................................)S
299 329 :M
( )S
731 329 :M
(6)S
145 345 :M
(3.)S
167 345 :M
(Remote Objects)S
267 345 :M
(...........................................................................................................................)S
263 345 :M
( )S
731 345 :M
(6)S
163 361 :M
(3.1)S
194 361 :M
(State)S
226 361 :M
(......................................................................................................................................)S
224 361 :M
( )S
731 361 :M
(7)S
163 377 :M
(3.2)S
194 377 :M
(Transmission)S
278 377 :M
(........................................................................................................................)S
275 377 :M
( )S
731 377 :M
(7)S
163 393 :M
(3.3)S
194 393 :M
(Distributed Computation)S
346 393 :M
(......................................................................................................)S
344 393 :M
( )S
731 393 :M
(8)S
163 409 :M
(3.4)S
194 409 :M
(Self-inflicted Operations)S
346 409 :M
(......................................................................................................)S
343 409 :M
( )S
731 409 :M
(9)S
163 425 :M
(3.5)S
194 425 :M
(Protected Objects)S
301 425 :M
(..................................................................................................................)S
300 425 :M
( )S
731 425 :M
(9)S
163 441 :M
(3.6)S
194 441 :M
(Serialized Objects)S
308 441 :M
(..............................................................................................................)S
304 441 :M
( )S
724 441 :M
(10)S
163 457 :M
(3.7)S
194 457 :M
(Name Servers)S
282 457 :M
(.....................................................................................................................)S
279 457 :M
( )S
724 457 :M
(11)S
163 473 :M
(3.8)S
194 473 :M
(Execution Engines)S
308 473 :M
(..............................................................................................................)S
307 473 :M
( )S
724 473 :M
(13)S
145 489 :M
(4.)S
167 489 :M
(Local Techniques)S
278 489 :M
(......................................................................................................................)S
274 489 :M
( )S
724 489 :M
(13)S
163 505 :M
(4.1)S
194 505 :M
(Recursion and Iteration)S
338 505 :M
(......................................................................................................)S
335 505 :M
( )S
724 505 :M
(13)S
163 521 :M
(4.2)S
194 521 :M
(The Object-Oriented Numerals)S
383 521 :M
(..........................................................................................)S
381 521 :M
( )S
724 521 :M
(14)S
163 537 :M
(4.3)S
194 537 :M
(The Prime Numbers Sieve)S
357 537 :M
(.................................................................................................)S
353 537 :M
( )S
724 537 :M
(15)S
163 553 :M
(4.4)S
194 553 :M
(A Calculator)S
274 553 :M
(.......................................................................................................................)S
271 553 :M
( )S
724 553 :M
(15)S
163 569 :M
(4.5)S
194 569 :M
(Surrogates)S
259 569 :M
(...........................................................................................................................)S
258 569 :M
( )S
724 569 :M
(17)S
145 585 :M
(5.)S
167 585 :M
(Distributed Techniques)S
308 585 :M
(..............................................................................................................)S
307 585 :M
( )S
724 585 :M
(17)S
163 601 :M
(5.1)S
194 601 :M
(A Serialized Queue)S
312 601 :M
(.............................................................................................................)S
311 601 :M
( )S
724 601 :M
(17)S
163 617 :M
(5.2)S
194 617 :M
(Compute Servers)S
301 617 :M
(................................................................................................................)S
298 617 :M
( )S
724 617 :M
(18)S
163 633 :M
(5.3)S
194 633 :M
(A Database Server)S
308 633 :M
(..............................................................................................................)S
306 633 :M
( )S
724 633 :M
(19)S
163 649 :M
(5.4)S
194 649 :M
(Remote Agents)S
289 649 :M
(...................................................................................................................)S
287 649 :M
( )S
724 649 :M
(20)S
163 665 :M
(5.5)S
194 665 :M
(Application Partitioning)S
342 665 :M
(.....................................................................................................)S
339 665 :M
( )S
724 665 :M
(22)S
163 681 :M
(5.6)S
194 681 :M
(Agent Migration)S
297 681 :M
(.................................................................................................................)S
294 681 :M
( )S
724 681 :M
(22)S
163 697 :M
(5.7)S
194 697 :M
(Object Migration)S
301 697 :M
(................................................................................................................)S
298 697 :M
( )S
724 697 :M
(22)S
163 713 :M
(5.8)S
194 713 :M
(Application Servers)S
316 713 :M
(............................................................................................................)S
314 713 :M
( )S
724 713 :M
(24)S
145 729 :M
(6.)S
167 729 :M
(Syntax Overview)S
274 729 :M
(.......................................................................................................................)S
272 729 :M
( )S
724 729 :M
(24)S
145 745 :M
(7.)S
167 745 :M
(Conclusions)S
244 745 :M
(...............................................................................................................................)S
241 745 :M
( )S
724 745 :M
(25)S
199 761 :M
(Related Work)S
286 761 :M
(....................................................................................................................)S
283 761 :M
( )S
724 761 :M
(25)S
199 777 :M
(Status)S
237 777 :M
(.................................................................................................................................)S
236 777 :M
( )S
724 777 :M
(26)S
199 793 :M
(Future Work)S
278 793 :M
(......................................................................................................................)S
276 793 :M
( )S
724 793 :M
(26)S
145 809 :M
(Acknowledgments)S
259 809 :M
(...........................................................................................................................)S
257 809 :M
( )S
724 809 :M
(26)S
145 825 :M
(A.)S
167 825 :M
(Language Reference)S
293 825 :M
(..................................................................................................................)S
291 825 :M
( )S
724 825 :M
(27)S
163 841 :M
(A.1)S
194 841 :M
(Syntactic Structures)S
316 841 :M
(............................................................................................................)S
314 841 :M
( )S
724 841 :M
(27)S
181 857 :M
(A.1.1)S
230 857 :M
(Identifiers)S
293 857 :M
(..................................................................................................................)S
292 857 :M
( )S
724 857 :M
(27)S
181 873 :M
(A.1.2)S
230 873 :M
(Definitions)S
301 873 :M
(................................................................................................................)S
297 873 :M
( )S
724 873 :M
(27)S
181 889 :M
(A.1.3)S
230 889 :M
(Terms)S
271 889 :M
(........................................................................................................................)S
268 889 :M
( )S
724 889 :M
(27)S
181 905 :M
(A.1.4)S
230 905 :M
(Term Sequences)S
331 905 :M
(........................................................................................................)S
330 905 :M
( )S
724 905 :M
(28)S
181 921 :M
(A.1.5)S
230 921 :M
(Built-In Operators)S
342 921 :M
(.....................................................................................................)S
340 921 :M
( )S
724 921 :M
(28)S
181 937 :M
(A.1.6)S
230 937 :M
(Operator Precedence)S
357 937 :M
(.................................................................................................)S
355 937 :M
( )S
724 937 :M
(28)S
163 953 :M
(A.2)S
194 953 :M
(Data Structures)S
289 953 :M
(...................................................................................................................)S
287 953 :M
( )S
724 953 :M
(28)S
181 969 :M
(A.2.1)S
230 969 :M
(Value Identity)S
319 969 :M
(...........................................................................................................)S
316 969 :M
( )S
724 969 :M
(28)S
181 985 :M
(A.2.2)S
230 985 :M
(Constants)S
293 985 :M
(..................................................................................................................)S
289 985 :M
( )S
724 985 :M
(29)S
181 1001 :M
(A.2.3)S
230 1001 :M
(Operators)S
293 1001 :M
(..................................................................................................................)S
289 1001 :M
( )S
724 1001 :M
(29)S
181 1017 :M
(A.2.4)S
230 1017 :M
(Arrays)S
274 1017 :M
(.......................................................................................................................)S
271 1017 :M
( )S
724 1017 :M
(30)S
181 1033 :M
(A.2.5)S
230 1033 :M
(Options)S
282 1033 :M
(.....................................................................................................................)S
278 1033 :M
( )S
724 1033 :M
(30)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(luca; page: 5 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
181 158 :M
f6_15 sf
(A.2.6)S
230 158 :M
(Objects)S
278 158 :M
(......................................................................................................................)S
276 158 :M
( )S
724 158 :M
(30)S
181 174 :M
(A.2.7)S
230 174 :M
(Protection and Serialization)S
398 174 :M
(......................................................................................)S
397 174 :M
( )S
724 174 :M
(32)S
181 190 :M
(A.2.8)S
230 190 :M
(Object and Engine Servers)S
391 190 :M
(........................................................................................)S
390 190 :M
( )S
724 190 :M
(32)S
181 206 :M
(A.2.9)S
230 206 :M
(Processor and File System Enablers)S
447 206 :M
(.........................................................................)S
445 206 :M
( )S
724 206 :M
(33)S
163 222 :M
(A.3)S
194 222 :M
(Control Structures)S
308 222 :M
(..............................................................................................................)S
304 222 :M
( )S
724 222 :M
(33)S
181 238 :M
(A.3.1)S
230 238 :M
(Definitions)S
301 238 :M
(................................................................................................................)S
297 238 :M
( )S
724 238 :M
(34)S
181 254 :M
(A.3.2)S
230 254 :M
(Assignment)S
304 254 :M
(...............................................................................................................)S
302 254 :M
( )S
724 254 :M
(34)S
181 270 :M
(A.3.3)S
230 270 :M
(Sequencing)S
301 270 :M
(................................................................................................................)S
300 270 :M
( )S
724 270 :M
(34)S
181 286 :M
(A.3.4)S
230 286 :M
(Procedures and Methods)S
379 286 :M
(...........................................................................................)S
378 286 :M
( )S
724 286 :M
(34)S
181 302 :M
(A.3.5)S
230 302 :M
(Conditionals)S
308 302 :M
(..............................................................................................................)S
307 302 :M
( )S
724 302 :M
(35)S
181 318 :M
(A.3.6)S
230 318 :M
(Case)S
263 318 :M
(..........................................................................................................................)S
259 318 :M
( )S
724 318 :M
(35)S
181 334 :M
(A.3.7)S
230 334 :M
(Iteration)S
282 334 :M
(.....................................................................................................................)S
281 334 :M
( )S
724 334 :M
(35)S
181 350 :M
(A.3.8)S
230 350 :M
(Concurrency)S
308 350 :M
(..............................................................................................................)S
307 350 :M
( )S
724 350 :M
(36)S
181 366 :M
(A.3.9)S
230 366 :M
(Exceptions)S
301 366 :M
(................................................................................................................)S
297 366 :M
( )S
724 366 :M
(37)S
181 382 :M
(A.3.10)S
230 382 :M
(Errors)S
271 382 :M
(........................................................................................................................)S
267 382 :M
( )S
724 382 :M
(37)S
163 398 :M
(A.4)S
194 398 :M
(Methodology)S
278 398 :M
(......................................................................................................................)S
275 398 :M
( )S
724 398 :M
(37)S
181 414 :M
(A.4.1)S
230 414 :M
(Type Comments)S
331 414 :M
(........................................................................................................)S
330 414 :M
( )S
724 414 :M
(37)S
163 430 :M
(A.5)S
194 430 :M
(Lexicon)S
244 430 :M
(...............................................................................................................................)S
243 430 :M
( )S
724 430 :M
(39)S
163 446 :M
(A.6)S
194 446 :M
(Syntax)S
237 446 :M
(.................................................................................................................................)S
236 446 :M
( )S
724 446 :M
(40)S
145 462 :M
(B.)S
167 462 :M
(System Reference)S
278 462 :M
(......................................................................................................................)S
276 462 :M
( )S
724 462 :M
(45)S
163 478 :M
(B.1)S
194 478 :M
(The Executables)S
297 478 :M
(.................................................................................................................)S
294 478 :M
( )S
724 478 :M
(45)S
163 494 :M
(B.2)S
194 494 :M
(The Top-Level)S
286 494 :M
(....................................................................................................................)S
284 494 :M
( )S
724 494 :M
(45)S
163 510 :M
(B.3)S
194 510 :M
(Program Files)S
282 510 :M
(.....................................................................................................................)S
279 510 :M
( )S
724 510 :M
(46)S
163 526 :M
(B.4)S
194 526 :M
(Modules)S
248 526 :M
(..............................................................................................................................)S
247 526 :M
( )S
724 526 :M
(46)S
163 542 :M
(B.5)S
194 542 :M
(The Network Objects Daemon)S
379 542 :M
(...........................................................................................)S
378 542 :M
( )S
724 542 :M
(47)S
163 558 :M
(B.6)S
194 558 :M
(Built-in Libraries)S
301 558 :M
(................................................................................................................)S
299 558 :M
( )S
724 558 :M
(48)S
181 574 :M
(B.6.1)S
230 574 :M
(Sys)S
256 574 :M
(............................................................................................................................)S
252 574 :M
( )S
724 574 :M
(48)S
181 590 :M
(B.6.2)S
230 590 :M
(Bool)S
263 590 :M
(..........................................................................................................................)S
259 590 :M
( )S
724 590 :M
(48)S
181 606 :M
(B.6.3)S
230 606 :M
(Int)S
248 606 :M
(..............................................................................................................................)S
247 606 :M
( )S
724 606 :M
(49)S
181 622 :M
(B.6.4)S
230 622 :M
(Real)S
259 622 :M
(...........................................................................................................................)S
257 622 :M
( )S
724 622 :M
(49)S
181 638 :M
(B.6.5)S
230 638 :M
(Math)S
263 638 :M
(..........................................................................................................................)S
262 638 :M
( )S
724 638 :M
(49)S
181 654 :M
(B.6.6)S
230 654 :M
(Ascii)S
263 654 :M
(..........................................................................................................................)S
262 654 :M
( )S
724 654 :M
(50)S
181 670 :M
(B.6.7)S
230 670 :M
(Text)S
259 670 :M
(...........................................................................................................................)S
257 670 :M
( )S
724 670 :M
(50)S
181 686 :M
(B.6.8)S
230 686 :M
(Array)S
267 686 :M
(.........................................................................................................................)S
265 686 :M
( )S
724 686 :M
(51)S
181 702 :M
(B.6.9)S
230 702 :M
(Net)S
256 702 :M
(............................................................................................................................)S
252 702 :M
( )S
724 702 :M
(51)S
181 718 :M
(B.6.10)S
230 718 :M
(Thread)S
274 718 :M
(.......................................................................................................................)S
272 718 :M
( )S
724 718 :M
(51)S
181 734 :M
(B.6.11)S
230 734 :M
(Rd)S
252 734 :M
(.............................................................................................................................)S
248 734 :M
( )S
724 734 :M
(52)S
181 750 :M
(B.6.12)S
230 750 :M
(Wr)S
252 750 :M
(.............................................................................................................................)S
249 750 :M
( )S
724 750 :M
(52)S
181 766 :M
(B.6.13)S
230 766 :M
(Pickle)S
271 766 :M
(........................................................................................................................)S
267 766 :M
( )S
724 766 :M
(53)S
181 782 :M
(B.6.14)S
230 782 :M
(Lex)S
256 782 :M
(............................................................................................................................)S
253 782 :M
( )S
724 782 :M
(53)S
181 798 :M
(B.6.15)S
230 798 :M
(Fmt)S
256 798 :M
(............................................................................................................................)S
254 798 :M
( )S
724 798 :M
(53)S
181 814 :M
(B.6.16)S
230 814 :M
(Process)S
278 814 :M
(......................................................................................................................)S
276 814 :M
( )S
724 814 :M
(54)S
181 830 :M
(B.6.17)S
230 830 :M
(Color)S
267 830 :M
(.........................................................................................................................)S
264 830 :M
( )S
724 830 :M
(54)S
181 846 :M
(B.6.18)S
230 846 :M
(Form)S
267 846 :M
(.........................................................................................................................)S
263 846 :M
( )S
724 846 :M
(54)S
145 862 :M
(C.)S
167 862 :M
(Programming Reference)S
316 862 :M
(............................................................................................................)S
314 862 :M
( )S
724 862 :M
(57)S
163 878 :M
(C.1)S
194 878 :M
(The Package Hierarchy)S
338 878 :M
(......................................................................................................)S
335 878 :M
( )S
724 878 :M
(57)S
163 894 :M
(C.2)S
194 894 :M
(The Interfaces)S
282 894 :M
(.....................................................................................................................)S
280 894 :M
( )S
724 894 :M
(58)S
163 910 :M
(C.3)S
194 910 :M
(The Libraries)S
278 910 :M
(......................................................................................................................)S
275 910 :M
( )S
724 910 :M
(58)S
163 926 :M
(C.4)S
194 926 :M
(Embedding Obliq in an Application)S
413 926 :M
(..................................................................................)S
409 926 :M
( )S
724 926 :M
(58)S
163 942 :M
(C.5)S
194 942 :M
(Extending Obliq with sys_calls)S
383 942 :M
(..........................................................................................)S
382 942 :M
( )S
724 942 :M
(58)S
163 958 :M
(C.6)S
194 958 :M
(Extending Obliq with new Packages)S
413 958 :M
(..................................................................................)S
412 958 :M
( )S
724 958 :M
(59)S
163 974 :M
(C.7)S
194 974 :M
(Building a Customized Obliq Interpreter)S
439 974 :M
(...........................................................................)S
437 974 :M
( )S
724 974 :M
(59)S
145 990 :M
(References)S
214 990 :M
(.......................................................................................................................................)S
212 990 :M
( )S
724 990 :M
(61)S
145 1006 :M
(Index)S
181 1006 :M
(................................................................................................................................................)S
179 1006 :M
( )S
724 1006 :M
(63)S
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(luca; page: 6 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
456 591 :M
f9_12 sf
.741 .074( )J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(luca; page: 7 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
731 1071 :M
f6_13 sf
(Page )S
760 1071 :M
(1)S
145 188 :M
f1_21 sf
(1.)S
172 188 :M
(Introduction)S
172 217 :M
f6_15 sf
.62 .062(Obliq is a lexically-scoped untyped interpreted language that supports distributed object-oriented)J
145 235 :M
.569 .057(computation. An Obliq computation may involve multiple threads of control within an address space,)J
145 253 :M
.221 .022(multiple address spaces on a machine, heterogeneous machines over a local network, and multiple net)J
762 253 :M
(-)S
145 271 :M
.541 .054(works over the Internet. Obliq objects have state and are local to a site. Obliq computations can roam)J
145 289 :M
(over the network, while maintaining network connections.)S
145 333 :M
f1_18 sf
(1.1)S
185 333 :M
(Language Overview)S
172 361 :M
f6_15 sf
.673 .067(The guiding principle that separates Obliq from other distributed procedural languages is the ad)J
761 361 :M
(-)S
145 379 :M
.685 .068(herence to lexical scoping in a distributed higher-order context. This principle is conceptually simple)J
145 397 :M
1.033 .103(and has a number of interesting consequences: it supports a natural and consistent semantics of dis)J
762 397 :M
(-)S
145 415 :M
(tributed computation, and it enables elegant techniques for distributed programming.)S
172 433 :M
1.363 .136(In lexically scoped languages, the binding location of every identifier is determined by simple)J
145 451 :M
.773 .077(analysis of the program text surrounding the identifier. Therefore, one can be sure of the meaning of)J
145 469 :M
.354 .035(program identifiers, and can much more easily reason about the behavior of programs. In a distributed)J
145 487 :M
.185 .018(language like Obliq, lexical scoping assumes a further role. It ensures that computations have a precise)J
145 505 :M
.464 .046(meaning even when they migrate over the network: a meaning that is determined by the binding loca)J
762 505 :M
(-)S
145 523 :M
(tion )S
f4_15 sf
(and)S
195 523 :M
f6_15 sf
( network site of identifiers, and not by execution sites.)S
172 541 :M
.52 .052(Network-wide scoping becomes an issue in the presence of higher-order distributed computation,)J
145 559 :M
.737 .074(for example when remote sites acting as compute servers accept procedures for execution. The ques)J
762 559 :M
(-)S
145 577 :M
1.135 .114(tion here is: what happens to the )J
355 577 :M
.863 .086(free identifiers of network-transmitted procedures? Obliq takes the)J
145 595 :M
.678 .068(view that such identifiers are bound to their original locations, as prescribed by lexical scoping, even)J
145 613 :M
(when these locations belong to different network sites.)S
172 631 :M
.002 0(The principal way of structuring distributed computations in Obliq is through the notion of )J
f4_15 sf
(objects)S
763 631 :M
f6_15 sf
(.)S
145 649 :M
.377 .038(Network services normally accept a variety of messages; it is then natural to see each service as a )J
f4_15 sf
.14(net-)A
145 667 :M
.049 .005(work object)J
f6_15 sf
.032 .003( \(or, more neutrally, as a network interface\). Obliq supports objects in this spirit, relying for)J
145 685 :M
(its implementation on Modula-3\325s network objects [Birrell, )S
504 685 :M
f4_15 sf
(et al.)S
534 685 :M
f6_15 sf
( 1993b].)S
172 703 :M
.608 .061(The Obliq object primitives are designed to be simple and powerful, with a coherent relationship)J
145 721 :M
.519 .052(between their local and distributed semantics. Obliq objects are collections of named fields, with four)J
145 739 :M
.249 .025(basic operations: selection/invocation, updating/overriding, cloning, and delegation. There are no class)J
145 757 :M
1.191 .119(hierarchies, nor complex method-lookup procedures. Every object is potentially and transparently a)J
145 775 :M
.409 .041(network object. An object may become accessible over the network either by the mediation of a name)J
145 793 :M
(server, or simply by being used as the argument or result of a remote method.)S
172 811 :M
.052 .005(In any framework where objects are distributed across sites, it is critical to decide what to do about)J
145 829 :M
.778 .078(mobility and duplication of )J
318 829 :M
f4_15 sf
.205(state)A
f6_15 sf
.783 .078(. Normally, whenever a piece of data is transmitted from one site to)J
145 847 :M
.617 .062(another, it is implicitly copied. However, duplication of objects with state easily results in havoc, un)J
762 847 :M
(-)S
145 865 :M
(less the state is handled consistently across sites.)S
172 883 :M
.779 .078(To avoid problems with state duplication, objects in Obliq are local to a site and are never auto)J
762 883 :M
(-)S
145 901 :M
.521 .052(matically copied over the network. In contrast, )J
f4_15 sf
.919 .092(network references)J
552 901 :M
f6_15 sf
.687 .069( to objects can be transmitted from)J
145 919 :M
.44 .044(site to site without restrictions. An alternative approach would allow objects and their state to )J
720 919 :M
f4_15 sf
(migrate)S
145 937 :M
f6_15 sf
.147 .015(from site to site, making sure that the integrity of their internal state is maintained during the act of mi)J
762 937 :M
(-)S
145 955 :M
.708 .071(gration. We have chosen not to support migration directly, since it requires coordination across sites,)J
145 973 :M
1.096 .11(and policy decisions about the optimal time of migration. However, atomic object migration can be)J
145 991 :M
(coded from our primitives, specifically from cloning and delegation.)S
172 1009 :M
.194 .019(In addition to the distribution of data, the distribution of computations must also be designed care)J
762 1009 :M
(-)S
145 1027 :M
(fully. It is clearly desirable to be able to transmit )S
f4_15 sf
(agents)S
f6_15 sf
( for remote execution. However, one should not)S
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(luca; page: 8 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(2)S
145 160 :M
f6_15 sf
.879 .088(be satisfied with transmitting just the program text of such agents. Program text cannot carry with it)J
145 178 :M
.157 .016(live connections to its originating site, nor to any data or service at any other site. Hence the process of)J
145 196 :M
1.054 .105(transmitting program text over the network implies a complete network disconnect from the current)J
145 214 :M
.178 .018(distributed computation. In addition, unpredictable dynamic scoping results from transmitting and then)J
145 232 :M
(running program text containing free identifiers.)S
172 250 :M
.387 .039(Obliq computations, in the form of procedures or methods, can be freely transmitted over the net)J
762 250 :M
(-)S
145 268 :M
.414 .041(work. Actual computations \()J
319 268 :M
f4_15 sf
(closures)S
369 268 :M
f6_15 sf
.466 .047(, not source text\) are transmitted; lexically scoped )J
678 268 :M
.314 .031(free identifiers)J
145 286 :M
.126 .013(retain their bindings to the originating sites. Through these free identifiers, migrating computations can)J
145 304 :M
.096 .01(maintain connections to objects and locations residing at various sites. Disconnected agents can be rep)J
762 304 :M
(-)S
145 322 :M
.45 .045(resented as procedures with no free identifiers; these agents do not need to rely on prolonged network)J
145 340 :M
(connectivity.)S
172 358 :M
.831 .083(In order to concentrate on distributed computation issues and to reduce complexity, Obliq is de)J
762 358 :M
(-)S
145 376 :M
.161 .016(signed as an )J
223 376 :M
f4_15 sf
.034(untyped)A
f6_15 sf
.124 .012( language. This decision leads to simpler and smaller language processors that can)J
145 394 :M
.004 0(be easily embedded in applications. Moreover, untyped programs are somewhat easier to distribute, be)J
761 394 :M
(-)S
145 412 :M
(cause we avoid problems of compatibility of types at multiple sites.)S
172 430 :M
.764 .076(The Obliq run-time is )J
f4_15 sf
1.311 .131(strongly typed)J
399 430 :M
f6_15 sf
.906 .091(: erroneous computations produce clean errors that are cor)J
761 430 :M
(-)S
145 448 :M
.183 .018(rectly propagated across sites. The run-time data space is )J
f4_15 sf
.058(heterogeneous)A
582 448 :M
f6_15 sf
.234 .023(, meaning that there are differ-)J
145 466 :M
.871 .087(ent kinds of run-time values and no provisions to discriminate between them; heterogeneity discour)J
762 466 :M
(-)S
145 484 :M
.237 .024(ages writing programs that would be difficult to typecheck in typed languages. Because of heterogene)J
762 484 :M
(-)S
145 502 :M
.211 .021(ity and lexical scoping, Obliq is in principle suitable for static typing. More importantly, Obliq is com)J
762 502 :M
(-)S
145 520 :M
(patible with the disciplined approach to programming that is inspired by statically typed languages.)S
172 538 :M
.999 .1(Lexical scoping has many interesting implications in a distributed context. One is that, together)J
145 556 :M
1.577 .158(with strong run-time typing and interpreted execution, it can provide network security guarantees.)J
145 574 :M
.209 .021(Consider the situation of a server executing incoming foreign agents. Because of lexical scoping, these)J
145 592 :M
.27 .027(agents have access only to the data and resources that they can reference via free variables or that they)J
145 610 :M
.385 .038(explicitly receive in the form of procedure parameters. In particular, foreign agents cannot access data)J
145 628 :M
.441 .044(or resources at the server site that are not explicitly given to them. For example, operations on files in)J
145 646 :M
.334 .033(Obliq require file system handles that are available as global lexically bound identifiers at each site. A)J
145 664 :M
.34 .034(foreign agent can operate on the file system handle of its originating site, simply by referring to it as a)J
145 682 :M
.242 .024(free identifier. But the file system handle at the server site is outside its lexical scope, and hence unob)J
762 682 :M
(-)S
145 700 :M
.243 .024(tainable except with the cooperation of the server. Degrees of file protection can be represented by file)J
145 718 :M
(system handles with special access rights.)S
145 762 :M
f1_18 sf
(1.2)S
185 762 :M
(Distributed Semantics)S
172 790 :M
f6_15 sf
(The Obliq distributed semantics is based on the notions of )S
f4_15 sf
(sites)S
551 790 :M
f6_15 sf
(, )S
559 790 :M
f4_15 sf
(locations)S
614 790 :M
f6_15 sf
(, )S
f4_15 sf
(values)S
f6_15 sf
(, and )S
692 790 :M
f4_15 sf
(threads)S
f6_15 sf
(.)S
172 808 :M
f4_15 sf
.287(Sites)A
f6_15 sf
1.116 .112( \(that is, address spaces\) contain locations, and )J
500 808 :M
1.086 .109(locations contain values. Each location be)J
762 808 :M
(-)S
145 826 :M
.264 .026(longs to a unique site. We often talk about a )J
417 826 :M
f4_15 sf
.203 .02(local site)J
472 826 :M
f6_15 sf
.206 .021(, in relative terms, and about )J
f4_15 sf
.351 .035(remote sites)J
f6_15 sf
.286 .029(, mean)J
762 826 :M
(-)S
145 844 :M
.704 .07(ing any site other than the local site. Sites are not explicit in the syntax but are implicit in operations)J
145 862 :M
(that produce new locations.)S
172 880 :M
f4_15 sf
.256(Threads)A
f6_15 sf
.966 .097( are virtual sequential instruction processors. Multiple threads may be executed concur)J
762 880 :M
(-)S
145 898 :M
.46 .046(rently, both at the same site or at different sites. A given thread may stop executing at a site, and con)J
762 898 :M
(-)S
145 916 :M
.145 .015(tinue executing at another site. That is, threads may jump from site to site while retaining their concep)J
762 916 :M
(-)S
145 934 :M
1.058 .106(tual identity. The )J
257 934 :M
f4_15 sf
1.64 .164(current site)J
f6_15 sf
1.039 .104( is where execution of a given thread of control takes place at a given)J
145 952 :M
(moment.)S
172 970 :M
.327 .033(In the Obliq syntax, )J
297 970 :M
f4_15 sf
.172 .017(constant identifiers)J
413 970 :M
f6_15 sf
.207 .021( denote values, while )J
f4_15 sf
.284 .028(variable identifiers )J
f6_15 sf
.384 .038(denote locations.)J
145 988 :M
(A location containing a value may be updated by assignment to the variable denoting the location.)S
172 1006 :M
(Obliq )S
210 1006 :M
(values include )S
300 1006 :M
f4_15 sf
(basic values)S
374 1006 :M
f6_15 sf
( \(such as strings or integers\), )S
f4_15 sf
(objects)S
f6_15 sf
(, )S
600 1006 :M
f4_15 sf
(arrays)S
f6_15 sf
(, )S
647 1006 :M
f4_15 sf
(closures)S
697 1006 :M
f6_15 sf
( \(the results)S
145 1024 :M
(of evaluating methods or procedures\), and other values that we need not discuss at this point.)S
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(luca; page: 9 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
731 1071 :M
f6_13 sf
(Page )S
760 1071 :M
(3)S
172 160 :M
f6_15 sf
.094 .009(A value may contain )J
f4_15 sf
.195 .019(embedded locations)J
421 160 :M
f6_15 sf
.135 .013(. An array value has embedded locations for its elements,)J
145 178 :M
.651 .065(which can be updated. An object value has embedded locations for its fields and methods, which can)J
145 196 :M
.307 .031(be updated and overridden. A closure value may have embedded locations because of free variables in)J
145 214 :M
1.039 .104(its program text that refer to locations in the surrounding lexical scope. Basic values do not contain)J
145 232 :M
(embedded locations. When a location is created during a computation, it is allocated at the current site.)S
172 250 :M
.191 .019(Values may be )J
f4_15 sf
.062(transmitted)A
335 250 :M
f6_15 sf
.298 .03( over the network. A value containing no embedded locations is copied)J
145 268 :M
.322 .032(on transmission. Embedded locations are automatically replaced by network references, so that the ac)J
762 268 :M
(-)S
145 286 :M
.47 .047(tual locations do not move from the site where they are originally allocated.)J
f6_10 sf
.046 .005( )J
f6_15 sf
.492 .049(An Obliq value may con)J
762 286 :M
(-)S
145 304 :M
.888 .089(tain network references to locations at different sites. In particular, a closure value may contain pro)J
762 304 :M
(-)S
145 322 :M
(gram text that, when executed, accesses data \(bound to its free identifiers\) over the network.)S
172 340 :M
.413 .041(Every Obliq object consists of a collection of locations spanning a single site; hence the object it)J
762 340 :M
(-)S
145 358 :M
.051 .005(self is bound to a unique site)J
f6_10 sf
0 -4 rm
(1)S
0 4 rm
f6_15 sf
.06 .006(. This immobility of objects is not a strong limitation, because objects can)J
145 376 :M
.094 .009(be )J
f4_15 sf
.055(cloned)A
203 376 :M
f6_15 sf
.237 .024( to different sites, and because procedures can be transmitted that allocate objects at different)J
145 394 :M
.653 .065(sites. Hence, a collection of interacting objects can be dynamically allocated throughout the network,)J
145 412 :M
.839 .084(but not moved afterwards. If migration is necessary, cloning can be used to provide the needed state)J
145 430 :M
(duplication, and delegation can be used to redirect operations to the clones.)S
172 448 :M
1.427 .143(We have stressed so far how Obliq computations can evolve into webs of network references.)J
145 466 :M
1.082 .108(However, this is not necessarily the case. For example, a procedure with no free identifiers forms a)J
145 484 :M
1.311 .131(completely self-contained computing )J
381 484 :M
f4_15 sf
.536(agent)A
f6_15 sf
1.691 .169(. The execution of these agents may be carried out au)J
762 484 :M
(-)S
145 502 :M
.822 .082(tonomously by remote compute servers \(the agents may dynamically reconnect to report results\). In)J
762 502 :M
(-)S
145 520 :M
.444 .044(termediate situations are also possible, as with semi-autonomous agents that maintain low-traffic teth)J
762 520 :M
(-)S
145 538 :M
(ers to their originating site.)S
172 556 :M
.365 .037(In conclusion, the distributed semantics of Obliq is defined so that data and computations are net)J
762 556 :M
(-)S
145 574 :M
.166 .017(work-transparent: their meaning does not depend on allocation sites or execution sites \(of course, com)J
762 574 :M
(-)S
145 592 :M
1.23 .123(putations may receive different arguments at different sites\). At the same time, Obliq programs are)J
145 610 :M
.865 .086(network-aware: distribution is achieved by explicit acts that give full control on communication pat)J
762 610 :M
(-)S
145 628 :M
(terns.)S
172 646 :M
.779 .078(Lexical scoping makes it easy to distribute computations over multiple sites, since computations)J
145 664 :M
.632 .063(behave correctly even when they are carried out at the wrong place \(by some measure\). Flexibility in)J
145 682 :M
.781 .078(distribution can, however, result in undesirable network traffic. Obliq relieves some of the burden of)J
145 700 :M
.438 .044(distributing data and computations, but care and planning are still required to achieve satisfactory dis)J
762 700 :M
(-)S
145 718 :M
(tributed performance.)S
145 764 :M
f1_21 sf
(2.)S
172 764 :M
(Local Objects)S
172 793 :M
f6_15 sf
1.37 .137(In this section we discuss the Obliq object primitives in the context of a single execution site.)J
145 811 :M
(These primitives are then reinterpreted in the next section and given distributed meaning.)S
145 855 :M
f1_18 sf
(2.1)S
185 855 :M
(Objects and their Fields)S
172 883 :M
f6_15 sf
.463 .046(An Obliq object is a collection of fields containing methods, aliases, or other values. A field con)J
762 883 :M
(-)S
145 901 :M
.947 .095(taining a method is called a )J
f4_15 sf
1.698 .17(method field)J
f6_15 sf
.914 .091(. A field containing an alias is called an )J
653 901 :M
f4_15 sf
1.183 .118(alias field)J
f6_15 sf
.738 .074(. A field)J
145 919 :M
.547 .055(containing any other kind of values, including procedure values, is called a )J
609 919 :M
f4_15 sf
.46 .046(\(proper\) value field)J
728 919 :M
f6_15 sf
.594 .059(. Each)J
145 937 :M
(field is identified by a )S
f4_15 sf
(field name)S
343 937 :M
f6_15 sf
(. Syntactically, an object has the form:)S
199 967 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(})S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1003.24 -.24 .24 288.24 1003 .24 145 1003 @a
145 1017 :M
f6_10 sf
(1)S
f6_15 sf
0 4 rm
( )S
0 -4 rm
154 1021 :M
f6_12 sf
(In the implementation, network references are generated to objects and arrays, not to each of their embedded locations.)S
145 1033 :M
(However, it is consistent and significantly simpler to carry out our discussions in terms of network references to locations.)S
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(luca; page: 10 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(4)S
145 160 :M
f6_15 sf
.745 .075(where n)J
cF
f2_15 sf
.075<B3>A
sf
.745 .075(0, and )J
245 160 :M
f14_15 sf
.084<D2>A
f10_15 sf
.252(x)A
f10_10 sf
0 3 rm
.168(i)A
0 -3 rm
f14_15 sf
.084<D3>A
f6_15 sf
.643 .064( are distinct field names. \(There is no lexical distinction between field names and)J
145 178 :M
.358 .036(program identifiers.\) The terms )J
340 178 :M
f14_15 sf
<D2>S
f10_15 sf
.123(a)A
f10_10 sf
0 3 rm
.082(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.141 .014( are )J
f4_15 sf
.091(siblings)A
435 178 :M
f6_15 sf
.365 .036( of each other, and the object is their )J
f4_15 sf
.664 .066(host object)J
f6_15 sf
.533 .053(. Each)J
145 196 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( can be any term, including a method, or an alias.)S
172 214 :M
(A value field is, for example:)S
199 244 :M
f10_15 sf
(x => 3)S
172 272 :M
f6_15 sf
(A method field has the form:)S
199 302 :M
f10_15 sf
(x => meth\(y,y)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,y)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\) b end)S
145 330 :M
f6_15 sf
.254 .025(Here, the first parameter, )J
301 330 :M
f14_15 sf
<D2>S
f10_15 sf
.104(y)A
f14_15 sf
<D3>S
f6_15 sf
.227 .023(, denotes )J
374 330 :M
f4_15 sf
.056(self)A
f6_15 sf
.244 .024(: the method\325s host object. The other parameters, for n>0, are)J
145 348 :M
.371 .037(supplied during method invocation. The body of the method is the term )J
f14_15 sf
<D2>S
f10_15 sf
.147(b)A
f14_15 sf
<D3>S
f6_15 sf
.406 .041(, which computes the result)J
145 366 :M
(of an invocation of )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 384 :M
(An alias field contains an alias:)S
199 414 :M
f10_15 sf
(x => alias y of b end)S
145 442 :M
f6_15 sf
.474 .047(Operations on the )J
258 442 :M
f14_15 sf
.079<D2>A
f10_15 sf
.235(x)A
f14_15 sf
.079<D3>A
f6_15 sf
.473 .047( field of this object are redirected to the )J
520 442 :M
f14_15 sf
.076<D2>A
f10_15 sf
.226(y)A
f14_15 sf
.076<D3>A
f6_15 sf
.403 .04( field of the object )J
f14_15 sf
.076<D2>A
f10_15 sf
.226(b)A
f14_15 sf
.076<D3>A
f6_15 sf
.517 .052(. The precise ef)J
762 442 :M
(-)S
145 460 :M
(fect is explained case by case in the next section.)S
172 478 :M
1.574 .157(Methods and )J
259 478 :M
1.365 .136(procedures are supported as distinct concepts. Procedures start with the keyword)J
145 496 :M
f14_15 sf
.076<D2>A
f10_15 sf
.226(proc)A
f14_15 sf
.076<D3>A
f6_15 sf
.396 .04( instead of )J
f14_15 sf
.076<D2>A
f10_15 sf
.226(meth)A
f14_15 sf
.076<D3>A
f6_15 sf
.597 .06( and have otherwise the same syntax. The main differences between the two)J
145 514 :M
.32 .032(are as follows. Methods can be manipulated as values but can be activated only when contained in ob)J
762 514 :M
(-)S
145 532 :M
.047 .005(jects, since self needs to be bound to the host object. In contrast, procedures can be activated by normal)J
145 550 :M
.884 .088(procedure call. Further, a procedure can be inserted in an object field and later recovered, while any)J
145 568 :M
(attempt to extract a method from an object results in its activation.)S
172 586 :M
.231 .023(Obliq methods are stored directly in objects, not indirectly in object classes or prototypes. Method)J
145 604 :M
.031 .003(lookup is a one-step process that searches a method by name within a single object. There is no class or)J
145 622 :M
.393 .039(delegation hierarchy to be searched iteratively, and there is no notion of )J
f4_15 sf
.118(super)A
f6_15 sf
.12 .012(. )J
629 622 :M
.309 .031(Inheritance is obtained)J
145 640 :M
1.726 .173(by cloning methods from other objects. Method lookup is implemented by a nearly constant-time)J
145 658 :M
.896 .09(caching technique, with independent caches for each operation instance, that does not penalize large)J
145 676 :M
(objects, .)S
172 694 :M
.021 .002(There are no provisions in Obliq for )J
393 694 :M
f4_15 sf
(private)S
f6_15 sf
.018 .002( fields or methods, but these can be easily simulated by)J
145 712 :M
.554 .055(lexical scoping. For example, )J
330 712 :M
f14_15 sf
.081<D2>A
f10_15 sf
.757 .076(\(var x=3; { ... }\))J
f14_15 sf
.081<D3>A
f6_15 sf
.563 .056( is an expression setting up a local variable)J
145 730 :M
f14_15 sf
<D2>S
f10_15 sf
.149(x)A
f14_15 sf
<D3>S
f6_15 sf
.316 .032( and returning an object that has )J
360 730 :M
f14_15 sf
<D2>S
f10_15 sf
.146(x)A
f14_15 sf
<D3>S
f6_15 sf
.274 .027( in its scope. Since the scope of )J
f14_15 sf
<D2>S
f10_15 sf
.146(x)A
f14_15 sf
<D3>S
f6_15 sf
.362 .036( is limited by the parentheses,)J
145 748 :M
.635 .063(no other part of the program can access )J
f14_15 sf
.095<D2>A
f10_15 sf
.286(x)A
f14_15 sf
.095<D3>A
f6_15 sf
.599 .06(. In addition, aliases can be used to create )J
669 748 :M
f4_15 sf
.132(views)A
f6_15 sf
.414 .041( of objects)J
145 766 :M
(that omit certain fields or methods.)S
145 810 :M
f1_18 sf
(2.2)S
185 810 :M
(Object Operations)S
172 838 :M
f6_15 sf
.303 .03(Apart from object creation, there are four basic operations on objects: selection/invocation, updat)J
762 838 :M
(-)S
145 856 :M
.173 .017(ing/overriding, cloning, and delegation. Field aliasing affects the semantics of all of them, as described)J
145 874 :M
(below case by case.)S
145 902 :M
f7_15 sf
(Selection \(and Invocation\))S
172 930 :M
f6_15 sf
(This operation has two variants for value selection and method invocation:)S
199 960 :M
f10_15 sf
(a.x)S
199 982 :M
(a.x\(b)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,b)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
145 1010 :M
f6_15 sf
.183 .018(The first form selects a value from the field )J
412 1010 :M
f14_15 sf
<D2>S
f10_15 sf
.077(x)A
f14_15 sf
<D3>S
f6_15 sf
.071 .007( of )J
f14_15 sf
<D2>S
f10_15 sf
.077(a)A
f14_15 sf
<D3>S
f6_15 sf
.187 .019( and returns it. The second form invokes a method)J
145 1028 :M
.085 .009(from the field )J
232 1028 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
.027 .003( of )J
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
.08 .008(, supplying parameters, and returning the result produced by the method; the ob)J
761 1028 :M
(-)S
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(luca; page: 11 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
731 1071 :M
f6_13 sf
(Page )S
760 1071 :M
(5)S
145 160 :M
f6_15 sf
.126 .013(ject )J
171 160 :M
f14_15 sf
<D2>S
f10_15 sf
.052(a)A
f14_15 sf
<D3>S
f6_15 sf
.116 .012( is bound to the self parameter of the method. For convenience, the first form can be used for in-)J
145 178 :M
(vocation of methods with no parameters.)S
172 196 :M
2.039 .204(If the field )J
248 196 :M
f14_15 sf
.379<D2>A
f10_15 sf
1.137(x)A
f14_15 sf
.379<D3>A
f6_15 sf
1.052 .105( of )J
f14_15 sf
.379<D2>A
f10_15 sf
1.137(a)A
f14_15 sf
.379<D3>A
f6_15 sf
2.005 .201(, above, is an alias for )J
f14_15 sf
.379<D2>A
f10_15 sf
1.137(x)A
f10_10 sf
0 3 rm
.758(1)A
0 -3 rm
f14_15 sf
.379<D3>A
f6_15 sf
1.098 .11( of )J
502 196 :M
f14_15 sf
.295<D2>A
f10_15 sf
.884(a)A
f10_10 sf
0 3 rm
.589(1)A
0 -3 rm
f14_15 sf
.295<D3>A
f6_15 sf
1.401 .14(, then )J
566 196 :M
f14_15 sf
.181<D2>A
f10_15 sf
.544(a.x)A
f14_15 sf
.181<D3>A
f6_15 sf
1.127 .113( behaves like )J
f14_15 sf
.181<D2>A
f10_15 sf
.544(a)A
f10_10 sf
0 3 rm
.362(1)A
0 -3 rm
f10_15 sf
.544(.x)A
f10_10 sf
0 3 rm
.362(1)A
0 -3 rm
f14_15 sf
.181<D3>A
f6_15 sf
1.258 .126(, and)J
145 214 :M
f14_15 sf
<D2>S
f10_15 sf
.038(a.x\(b)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.108 .011(, ... ,b)J
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
.078 .008( behaves like )J
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.038(.x)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.038(\(b)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.108 .011(, ... ,b)J
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
.057 .006(. If the field )J
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.035 .003( of )J
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.071 .007( is itself an alias,)J
145 232 :M
(the process continues recursively.)S
145 260 :M
f7_15 sf
(Updating \(and Overriding\))S
172 288 :M
f6_15 sf
(This operation deals with both field update and method override:)S
199 318 :M
f10_15 sf
(a.x:=b)S
145 346 :M
f6_15 sf
.137 .014(Here the field )J
232 346 :M
f14_15 sf
<D2>S
f10_15 sf
.072(x)A
f14_15 sf
<D3>S
f6_15 sf
.067 .007( of )J
f14_15 sf
<D2>S
f10_15 sf
.072(a)A
f14_15 sf
<D3>S
f6_15 sf
.143 .014( is updated with a new value )J
458 346 :M
f14_15 sf
<D2>S
f10_15 sf
.101(b)A
f14_15 sf
<D3>S
f6_15 sf
.099 .01(. If )J
495 346 :M
f14_15 sf
<D2>S
f10_15 sf
.06(x)A
f14_15 sf
<D3>S
f6_15 sf
.129 .013( contains a method and )J
f14_15 sf
<D2>S
f10_15 sf
.06(b)A
f14_15 sf
<D3>S
f6_15 sf
.118 .012( is a method, we)J
145 364 :M
.33 .033(have method override. If )J
f14_15 sf
<D2>S
f10_15 sf
.127(x)A
f14_15 sf
<D3>S
f6_15 sf
.164 .016( and )J
f14_15 sf
<D2>S
f10_15 sf
.127(b)A
f14_15 sf
<D3>S
f6_15 sf
.318 .032( are ordinary values, we have field update. The other two possibili)J
762 364 :M
(-)S
145 382 :M
(ties are also allowed: a field can be turned into a method \(of zero arguments\), and vice versa.)S
172 400 :M
.526 .053(However, if the field )J
f14_15 sf
.076<D2>A
f10_15 sf
.228(x)A
f14_15 sf
.076<D3>A
f6_15 sf
.211 .021( of )J
f14_15 sf
.076<D2>A
f10_15 sf
.228(a)A
f14_15 sf
.076<D3>A
f6_15 sf
.337 .034( is an alias for )J
445 400 :M
f14_15 sf
.054<D2>A
f10_15 sf
.161(x)A
f10_10 sf
0 3 rm
.107(1)A
0 -3 rm
f14_15 sf
.054<D3>A
f6_15 sf
.149 .015( of )J
f14_15 sf
.054<D2>A
f10_15 sf
.161(a)A
f10_10 sf
0 3 rm
.107(1)A
0 -3 rm
f14_15 sf
.054<D3>A
f6_15 sf
.245 .025(, then )J
f14_15 sf
.054<D2>A
f10_15 sf
.161(a.x:=b)A
f14_15 sf
.054<D3>A
f6_15 sf
.341 .034( behaves like )J
690 400 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(.x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:=b)S
f14_15 sf
<D3>S
f6_15 sf
(,)S
145 418 :M
(and so on recursively.)S
145 446 :M
f7_15 sf
(Cloning)S
172 474 :M
f6_15 sf
(The third operation is object cloning, generalized to multiple objects:)S
199 504 :M
f10_15 sf
(clone\(a\))S
199 526 :M
(clone\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
145 554 :M
f6_15 sf
.959 .096(In the case of a single argument, a new object is created with the same field names as the argument)J
145 572 :M
.231 .023(object; the respective locations are initialized to the values, methods, or aliases of the argument object.)J
145 590 :M
.89 .089(Note that this operation cannot be simulated by hand, because any attempt to extract the methods or)J
145 608 :M
(aliases of an object activates them.)S
172 626 :M
.835 .083(In the case of multiple arguments, a single object is produced that contains the values, methods,)J
145 644 :M
.171 .017(and aliases of all the argument objects \(an error is given if there are field name conflicts\). Useful situa)J
762 644 :M
(-)S
145 662 :M
4.026 .403(tions are )J
212 662 :M
f14_15 sf
.219<D2>A
f10_15 sf
.656(clone\(a,{...}\))A
f14_15 sf
.219<D3>A
f6_15 sf
1.228 .123(, where we )J
f4_15 sf
.486(inherit)A
470 662 :M
f6_15 sf
4.323 .432( the fields of )J
573 662 :M
f14_15 sf
.533<D2>A
f10_15 sf
1.596(a)A
f14_15 sf
.533<D3>A
f6_15 sf
3.584 .358(, and add new fields, and)J
145 680 :M
f14_15 sf
<D2>S
f10_15 sf
(clone\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(,a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
(, where we )S
f4_15 sf
(multiply inherit)S
415 680 :M
f6_15 sf
( from )S
452 680 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( and )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 698 :M
.958 .096(It is common for the parameters of )J
394 698 :M
f14_15 sf
.085<D2>A
f10_15 sf
.255(clone)A
f14_15 sf
.085<D3>A
f6_15 sf
.283 .028( to be )J
f4_15 sf
.199(prototypes)A
550 698 :M
f6_15 sf
.423 .042( \(or )J
f4_15 sf
.3(classes)A
620 698 :M
f6_15 sf
.82 .082(\): by convention, proto)J
762 698 :M
(-)S
145 716 :M
.326 .033(types are objects that are meant only as repositories for methods and initial values. Via cloning, proto)J
762 716 :M
(-)S
145 734 :M
(types act as object generators; cloning a prototype corresponds to )S
541 734 :M
f4_15 sf
(newing)S
f6_15 sf
( an object.)S
172 752 :M
.146 .015(A )J
187 752 :M
f4_15 sf
.116 .012(partial prototype)J
f6_15 sf
.031 .003( \(or )J
f4_15 sf
.026(mixin)A
348 752 :M
f6_15 sf
.044 .004(, or )J
f4_15 sf
.162 .016(abstract class)J
f6_15 sf
.103 .01(\) is a prototype whose methods refer through self to)J
145 770 :M
(fields not in the prototype. Obviously, a partial prototype should never be used as an object or an object)S
145 788 :M
(generator. However, one can clone partial prototypes together to obtain complete working objects.)S
172 806 :M
(Cloning can also be applied to objects used in computations. In particular, self can be cloned.)S
145 834 :M
f7_15 sf
(Delegation)S
172 862 :M
f6_15 sf
.198 .02(Our final operation is delegation, which is the replacement of fields with aliases. In section 2.1 we)J
145 880 :M
(have seen how to initialize alias fields:)S
199 910 :M
f10_15 sf
({ x => alias y of b end, ... })S
145 938 :M
f6_15 sf
.338 .034(Moreover, it is possible to assign aliases to fields of existing objects with the following delegation op)J
762 938 :M
(-)S
145 956 :M
(eration \(the syntax is similar to update, but this is really a separate operation\):)S
199 986 :M
f10_15 sf
(a.x := alias y of b end)S
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(luca; page: 12 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(6)S
145 160 :M
f6_15 sf
.692 .069(Any further operation on )J
303 160 :M
f14_15 sf
.096<D2>A
f10_15 sf
.288(x)A
f14_15 sf
.096<D3>A
f6_15 sf
.267 .027( of )J
f14_15 sf
.096<D2>A
f10_15 sf
.288(a)A
f14_15 sf
.096<D3>A
f6_15 sf
.533 .053( is redirected to )J
f14_15 sf
.096<D2>A
f10_15 sf
.288(y)A
f14_15 sf
.096<D3>A
f6_15 sf
.267 .027( of )J
f14_15 sf
.096<D2>A
f10_15 sf
.288(b)A
f14_15 sf
.096<D3>A
f6_15 sf
.89 .089(. However, delegation replaces fields with)J
145 178 :M
.005 0(aliases regardless of whether those fields are already aliased; updating )J
570 178 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( of )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
( again with another alias)S
145 196 :M
(causes )S
188 196 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( of )S
223 196 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
( \(not )S
270 196 :M
f14_15 sf
<D2>S
f10_15 sf
(y)S
f14_15 sf
<D3>S
f6_15 sf
( of )S
305 196 :M
f14_15 sf
<D2>S
f10_15 sf
(b)S
f14_15 sf
<D3>S
f6_15 sf
(\) to be updated.)S
172 214 :M
(A special delegation construct can be used to delegate whole objects at once:)S
199 244 :M
f10_15 sf
(delegate a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( to a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
145 272 :M
f6_15 sf
1.267 .127(The effect is to replace every field )J
f14_15 sf
.194<D2>A
f10_15 sf
.583(x)A
f10_10 sf
0 3 rm
.388(i)A
0 -3 rm
f14_15 sf
.194<D3>A
f6_15 sf
.563 .056( of )J
412 272 :M
f14_15 sf
.14<D2>A
f10_15 sf
.419(a)A
f10_10 sf
0 3 rm
.279(1)A
0 -3 rm
f14_15 sf
.14<D3>A
f6_15 sf
1.005 .101( \(including alias fields\) with )J
615 272 :M
f14_15 sf
.154<D2>A
f10_15 sf
.462(alias)A
f6_15 sf
.175 .018( )J
f10_15 sf
.462(x)A
f10_10 sf
0 3 rm
.308(i)A
0 -3 rm
f6_15 sf
.193 .019( )J
689 272 :M
f10_15 sf
.802(of)A
f6_15 sf
.304 .03( )J
f10_15 sf
.802(a)A
f10_10 sf
0 3 rm
.535(2)A
0 -3 rm
f6_15 sf
.334 .033( )J
733 272 :M
f10_15 sf
(end)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 290 :M
(Cloning can be used to assemble compound delegate objects.)S
172 308 :M
.609 .061(Aliases and delegation must be used very carefully and, in most circumstances, are best avoided.)J
145 326 :M
.767 .077(However, delegation is already implicit in the notion of )J
f4_15 sf
1.285 .128(local surrogate)J
588 326 :M
f6_15 sf
.989 .099( of a remote object: we have)J
145 344 :M
.611 .061(simply lifted this mechanism to the language level. By doing this, we are able to put network delega)J
762 344 :M
(-)S
145 362 :M
(tion under flexible program control, as shown later in the case of object migration.)S
145 406 :M
f1_18 sf
(2.3)S
185 406 :M
(Simple Examples)S
172 434 :M
f6_15 sf
.513 .051(Let us examine some simple examples, just to became familiar with the Obliq syntax and seman)J
762 434 :M
(-)S
145 452 :M
(tics. More advanced examples are presented in sections 4 and 5.)S
172 470 :M
1.133 .113(The following object has a single method that invokes itself through self \(the )J
661 470 :M
f14_15 sf
.107<D2>A
f10_15 sf
.321(s)A
f14_15 sf
.107<D3>A
f6_15 sf
.94 .094( parameter\). A)J
145 488 :M
f14_15 sf
<D2>S
f10_15 sf
(let)S
f14_15 sf
<D3>S
f6_15 sf
( declaration binds the object to the identifier )S
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 518 :M
f10_15 sf
(let o =)S
199 540 :M
(  { x => meth\(s\) s.x\(\) end };)S
145 568 :M
f6_15 sf
.323 .032(An invocation of )J
252 568 :M
f14_15 sf
<D2>S
f10_15 sf
.097(o.x\(\))A
f14_15 sf
<D3>S
f6_15 sf
.266 .027( results in a divergent computation. Divergence is obtained here without any)J
145 586 :M
(explicit use of recursion: the self-application implicit in method invocation is sufficient.)S
172 604 :M
.402 .04(The object below has three components. \(1\) A value field )J
527 604 :M
f14_15 sf
<D2>S
f10_15 sf
.144(x)A
f14_15 sf
<D3>S
f6_15 sf
.268 .027(. \(2\) A method )J
f14_15 sf
<D2>S
f10_15 sf
.144(inc)A
f14_15 sf
<D3>S
f6_15 sf
.438 .044( that increments)J
145 622 :M
f14_15 sf
.061<D2>A
f10_15 sf
.183(x)A
f14_15 sf
.061<D3>A
f6_15 sf
.403 .04( through self, and returns self. \(3\) A method )J
434 622 :M
f14_15 sf
<D2>S
f10_15 sf
.14(next)A
f14_15 sf
<D3>S
f6_15 sf
.285 .028( that invokes )J
f14_15 sf
<D2>S
f10_15 sf
.14(inc)A
f14_15 sf
<D3>S
f6_15 sf
.34 .034( through self, and returns the)J
145 640 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( component of the result.)S
199 670 :M
f10_15 sf
(let o =)S
199 692 :M
(  { x => 3,)S
199 714 :M
(    inc => meth\(s,y\) s.x := s.x+y; s end,)S
199 736 :M
(    next => meth\(s\) s.inc\(1\).x end };)S
145 764 :M
f6_15 sf
(Here are some of the operations that can be performed on )S
494 764 :M
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 794 :M
f10_15 sf
(o.x)S
307 794 :M
f6_15 sf
(Selecting the )S
389 794 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( component, producing 3.)S
199 816 :M
f10_15 sf
(o.x := 0)S
307 816 :M
f6_15 sf
(Setting the )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( component to zero.)S
199 838 :M
f10_15 sf
(o.inc\(1\) )S
307 838 :M
f6_15 sf
(Invoking a method, with parameters.)S
199 860 :M
f10_15 sf
(o.next\(\))S
307 860 :M
f6_15 sf
(Invoking a method with no parameters \()S
548 860 :M
f10_15 sf
(o.next)S
f6_15 sf
( is also valid\).)S
199 882 :M
f10_15 sf
(o.next := meth\(s\) clone\(s\).inc\(1\).x end)S
307 904 :M
f6_15 sf
(Overriding )S
377 904 :M
f14_15 sf
<D2>S
f10_15 sf
(next)S
f14_15 sf
<D3>S
f6_15 sf
( so that it no longer modifies its host object.)S
145 960 :M
f1_21 sf
(3.)S
172 960 :M
(Remote Objects)S
172 989 :M
f6_15 sf
1.118 .112(In this section we revisit the Obliq primitives in the context of objects that are distributed over)J
145 1007 :M
(multiple sites. We discuss )S
305 1007 :M
(distributed state in general, including arrays and variables.)S
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(luca; page: 13 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
731 1071 :M
f6_13 sf
(Page )S
760 1071 :M
(7)S
145 159 :M
f1_18 sf
(3.1)S
185 159 :M
(State)S
172 187 :M
f6_15 sf
.599 .06(State is local in the sense that every location is forever bound to a site. At the same time, state is)J
145 205 :M
.52 .052(distributed, in the sense that there are many communicating sites. Every location at every site can po)J
762 205 :M
(-)S
145 223 :M
.923 .092(tentially be accessed and modified over the network. Moreover, values may contain embedded loca)J
762 223 :M
(-)S
145 241 :M
.646 .065(tions belonging to current site or, via network aliases, to remote sites. Access and update of a remote)J
145 259 :M
.558 .056(location involves network communication, but is otherwise handled transparently in the same manner)J
145 277 :M
(as access and update of a local location.)S
172 295 :M
(There are three kinds of entities in Obliq that directly contain locations, and hence have state:)S
199 325 :M
(objects:)S
280 325 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(})S
307 347 :M
f6_15 sf
(every field of an object has state)S
334 369 :M
(access: )S
415 369 :M
f10_15 sf
(a.x)S
f6_15 sf
(,)S
469 369 :M
( )S
523 369 :M
f10_15 sf
(a.x\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
334 391 :M
f6_15 sf
(update: )S
415 391 :M
f10_15 sf
(a.x := b)S
f6_15 sf
(,)S
496 391 :M
( )S
523 391 :M
f10_15 sf
(delegate a to b end)S
199 422 :M
f6_15 sf
(arrays:)S
280 422 :M
f10_15 sf
([a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... , a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(])S
307 444 :M
f6_15 sf
(every element of an array has state)S
334 466 :M
(access: )S
415 466 :M
f10_15 sf
(a[n])S
334 488 :M
f6_15 sf
(update: )S
415 488 :M
f10_15 sf
(a[n] := b)S
199 519 :M
f6_15 sf
(variables:)S
280 519 :M
f10_15 sf
(var x = a)S
307 541 :M
f6_15 sf
(variables have state \(identifiers declared by )S
f14_15 sf
<D2>S
f10_15 sf
(let)S
f14_15 sf
<D3>S
f6_15 sf
( do not\))S
334 563 :M
(access: )S
415 563 :M
f10_15 sf
(x)S
334 585 :M
f6_15 sf
(update: )S
415 585 :M
f10_15 sf
(x := b)S
172 613 :M
f6_15 sf
.32 .032(When objects, arrays, and variables are created during a computation, their locations are allocated)J
145 631 :M
(at the current site.)S
145 675 :M
f1_18 sf
(3.2)S
185 675 :M
(Transmission)S
172 703 :M
f6_15 sf
.121 .012(As discussed in the introduction, the state \(i.e. set of locations\) associated with objects, arrays, and)J
145 721 :M
.908 .091(variables is never duplicated or transmitted over the network. Network references to locations, how)J
762 721 :M
(-)S
145 739 :M
.329 .033(ever, are free to travel. Every attempted transmission of a location over the network is, in effect, inter)J
762 739 :M
(-)S
145 757 :M
.404 .04(cepted and replaced by the transmission of a network reference to that location. Remote operations on)J
145 775 :M
(these network references are reflected back to the original locations, as described in section 3.3.)S
172 793 :M
.932 .093(Stateless values, unlike locations, are copied when transmitted over the network. Structures that)J
145 811 :M
(are copied include basic data types and the internal representations of program text.)S
172 829 :M
.617 .062(In the general case of transmission we may have a mixed situation, with a few layers of stateless)J
145 847 :M
1.277 .128(data structures that end up referring to location. These data structures with embedded locations are)J
145 865 :M
(copied up to the point where they refer to locations; then network references are generated.)S
172 883 :M
.488 .049(A critical issue is the transmission of )J
403 883 :M
f4_15 sf
(closures)S
453 883 :M
f6_15 sf
.462 .046(, which are the values resulting from the evaluation)J
145 901 :M
.02 .002(of procedures and methods. A closure consists of two parts: \(1\) the internal representation of the source)J
145 919 :M
.263 .026(text of a method or procedure, and \(2\) a table associating free identifiers in the source text to their val)J
762 919 :M
(-)S
145 937 :M
(ues in the lexical scope of evaluation.)S
172 955 :M
.489 .049(The free-identifiers table within a closure may refer to variables and to values with embedded lo)J
762 955 :M
(-)S
145 973 :M
.111 .011(cations. The general rule for transmitting structures with embedded locations applies to closures; hence)J
145 991 :M
(closures are copied up to the locations embedded in their free-identifier tables.)S
172 1009 :M
.981 .098(For example, consider the following Obliq code, declaring a variable )J
606 1009 :M
f14_15 sf
.151<D2>A
f10_15 sf
.454(x)A
f14_15 sf
.151<D3>A
f6_15 sf
.929 .093( initialized to )J
709 1009 :M
f14_15 sf
.181<D2>A
f10_15 sf
.543(0)A
f14_15 sf
.181<D3>A
f6_15 sf
.918 .092(, and a)J
145 1027 :M
(procedure )S
209 1027 :M
f14_15 sf
<D2>S
f10_15 sf
(p)S
f14_15 sf
<D3>S
f6_15 sf
( whose body refers to )S
357 1027 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( \(that is, has )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( as a free identifier\):)S
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(luca; page: 14 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(8)S
199 172 :M
f10_15 sf
(var x = 0;)S
199 194 :M
(let p = proc\(\) x := x+1 end;)S
172 222 :M
f6_15 sf
.098 .01(Suppose that, after the execution of the first line, the variable )J
544 222 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
.096 .01( is bound to the location loc)J
727 225 :M
f6_10 sf
(0)S
f6_15 sf
0 -3 rm
.088 .009(, rela-)J
0 3 rm
145 240 :M
.433 .043(tive to the current site s)J
289 243 :M
f6_10 sf
.099(0)A
f6_15 sf
0 -3 rm
.409 .041(. Then, after the execution of the second line, the identifier )J
0 3 rm
657 240 :M
f14_15 sf
.072<D2>A
f10_15 sf
.217(p)A
f14_15 sf
.072<D3>A
f6_15 sf
.405 .041( is bound to the)J
145 258 :M
(closure:)S
199 288 :M
<D2>S
206 288 :M
f10_15 sf
(proc\(\) x := x+1 end)S
f6_15 sf
<D3>S
f10_15 sf
(  )S
f4_15 sf
(where)S
438 288 :M
f10_15 sf
(  x)S
f6_15 sf
( )S
469 288 :M
f14_15 sf
(7)S
f6_15 sf
( loc)S
f6_10 sf
0 3 rm
(0)S
0 -3 rm
145 316 :M
f6_15 sf
.709 .071(where \322)J
f10_15 sf
.231(proc)A
f6_15 sf
.144(...)A
242 316 :M
f10_15 sf
.477(end)A
f6_15 sf
1.314 .131(\323 represents the internal representation of program code, and the free identifier)J
145 334 :M
(table is shown following )S
297 334 :M
f4_15 sf
(where)S
f6_15 sf
(.)S
172 352 :M
.059 .006(Upon transmission to a site s)J
f6_10 sf
0 3 rm
(1)S
0 -3 rm
f6_15 sf
.056 .006(, the location loc)J
f6_10 sf
0 3 rm
(0)S
0 -3 rm
f6_15 sf
.057 .006( is replaced by a network reference <s)J
684 355 :M
f6_10 sf
(0)S
f6_15 sf
0 -3 rm
(,loc)S
0 3 rm
f6_10 sf
(0)S
f6_15 sf
0 -3 rm
.038 .004(> to that)J
0 3 rm
145 370 :M
(location; therefore site s)S
290 373 :M
f6_10 sf
(1)S
f6_15 sf
0 -3 rm
( receives the data structure)S
0 3 rm
455 366 :M
f6_10 sf
(2)S
f6_15 sf
0 4 rm
(:)S
0 -4 rm
199 400 :M
<D2>S
206 400 :M
f10_15 sf
(proc\(\) x := x+1 end)S
f6_15 sf
<D3>S
f10_15 sf
( )S
f4_15 sf
(where)S
429 400 :M
f6_15 sf
( )S
433 400 :M
f10_15 sf
(x)S
f6_15 sf
( )S
446 400 :M
f14_15 sf
(7)S
f6_15 sf
( <s)S
f6_10 sf
0 3 rm
(0)S
0 -3 rm
f6_15 sf
(,loc)S
f6_10 sf
0 3 rm
(0)S
0 -3 rm
f6_15 sf
(>)S
172 428 :M
.318 .032(In general terms, a closure is a pair consisting of a piece of source text and a pointer to an evalua)J
762 428 :M
(-)S
145 446 :M
.643 .064(tion stack. Transmission of a closure, in this view, implies transmission of an entire evaluation stack.)J
145 464 :M
.158 .016(The implementation of closures described above \(which is well-known for higher-order languages\) has)J
145 482 :M
.966 .097(the effect of reducing network traffic, by transmitting only the values from the evaluation stack that)J
145 500 :M
(may be needed by the closure. This optimization is enabled by lexical scoping)S
145 544 :M
f1_18 sf
(3.3)S
185 544 :M
(Distributed Computation)S
172 572 :M
f6_15 sf
.595 .059(We now reinterpret the semantics of operations on objects in the case of remote objects. In pass)J
761 572 :M
(-)S
145 590 :M
(ing, we comment on the semantics of remote arrays and variables.)S
145 618 :M
f7_15 sf
(Selection \(and Invocation\))S
172 646 :M
f6_15 sf
.251 .025(When a value field of a remote object is selected, its value is transmitted over the network \(as dis)J
762 646 :M
(-)S
145 664 :M
(cussed in section 3.2\) to the site of the selection.)S
172 682 :M
(The extraction of a remote array element and the access of a remote variable work similarly.)S
172 700 :M
.598 .06(When a method of a remote object is invoked, the arguments are transmitted over the network to)J
145 718 :M
.337 .034(the remote site, the result is computed remotely, and the final value \(or error, or exception\) is returned)J
145 736 :M
(to the site of the invocation.)S
172 754 :M
.543 .054(It is interesting to compare the invocation of a remote method with the invocation of a procedure)J
145 772 :M
.813 .081(stored in the value field of a remote object. In the first case, the computation is remote, as described)J
145 790 :M
.281 .028(above. In the second case, the procedure is first transmitted from the remote object to the local site, by)J
145 808 :M
(the semantics of field selection, and then executed locally.)S
145 836 :M
f7_15 sf
(Updating \(and Overriding\))S
172 864 :M
f6_15 sf
.231 .023(When a field of a remote object is updated, or when a method is overridden, a value is transmitted)J
145 882 :M
.626 .063(over the network and installed into the remote object. Field update may involve the transmission of a)J
145 900 :M
(procedure closure, and method override involves the transmission of a method closure.)S
172 918 :M
(The update of a remote array element and the assignment of a remote variable work similarly.)S
145 946 :M
f7_15 sf
(Cloning)S
172 974 :M
f6_15 sf
.006 .001(When a collection of remote or local objects is cloned, the clone is created at the local site. Its con)J
761 974 :M
(-)S
145 992 :M
(tents \(including method closures\) may have to be fetched over the network.)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1014.24 -.24 .24 288.24 1014 .24 145 1014 @a
145 1028 :M
f6_10 sf
(2)S
f6_15 sf
0 4 rm
( )S
0 -4 rm
154 1032 :M
f6_12 sf
(In the implementation, loc)S
f6_10 sf
0 3 rm
(0)S
0 -3 rm
f6_12 sf
( is a Modula-3 network object with access and update methods.)S
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(luca; page: 15 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
731 1071 :M
f6_13 sf
(Page )S
760 1071 :M
(9)S
172 160 :M
f6_15 sf
(The extraction of remote subarrays and the concatenation of remote arrays work similarly.)S
145 188 :M
f7_15 sf
(Delegation)S
172 216 :M
f6_15 sf
.817 .082(In the case where the object being delegated is remote, the remote fields are replaced by the ap)J
762 216 :M
(-)S
145 234 :M
(propriate aliases. In the case where the other object is remote, aliases are generated to it.)S
145 262 :M
f7_15 sf
(Aliases)S
172 290 :M
f6_15 sf
1.225 .122(A local object field aliased to a remote object behaves as the field of the remote object, as de)J
762 290 :M
(-)S
145 308 :M
(scribed in this section case by case.)S
145 352 :M
f1_18 sf
(3.4)S
185 352 :M
(Self-inflicted Operations)S
172 380 :M
f6_15 sf
.266 .027(The four basic object operations can be performed either as external operations on an object, or as)J
145 398 :M
-.006(internal operations through self. This distinction is useful in the contexts of object protection and serial)A
762 398 :M
(-)S
145 416 :M
(ization, discussed in the next two sections.)S
172 434 :M
.566 .057(When a method operates on an object other than the method\325s host object, we say that the opera)J
762 434 :M
(-)S
145 452 :M
.29 .029(tion is )J
f4_15 sf
.122(external)A
f6_15 sf
.402 .04( to the object. By contrast, when a method operates directly on its own self we say that)J
145 470 :M
(the operation is )S
f4_15 sf
(self-inflicted)S
316 470 :M
f6_15 sf
(:)S
199 500 :M
(If )S
213 500 :M
f14_15 sf
<D2>S
f4_15 sf
(op)S
f14_15 sf
<D3>S
f6_15 sf
( is either a select, update, clone, or delegate operation,)S
226 522 :M
(then )S
256 522 :M
f14_15 sf
<D2>S
f4_15 sf
(op)S
f6_15 sf
<28>S
279 522 :M
f10_15 sf
(o)S
f6_15 sf
<29>S
293 522 :M
f14_15 sf
<D3>S
f6_15 sf
( is )S
f4_15 sf
(self-inflicted)S
226 544 :M
f6_15 sf
(iff )S
244 544 :M
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
( is the same object as the self of the )S
476 544 :M
f4_15 sf
(current method)S
f6_15 sf
( \(if any\).)S
199 566 :M
(Moreover, )S
266 566 :M
f14_15 sf
<D2>S
f4_15 sf
(op)S
f6_15 sf
<28>S
289 566 :M
f10_15 sf
(o)S
f6_15 sf
<29>S
303 566 :M
f14_15 sf
<D3>S
f6_15 sf
( is )S
f4_15 sf
(external)S
f6_15 sf
( iff it is not self-inflicted.)S
145 594 :M
.251 .025(Here, by the )J
224 594 :M
f4_15 sf
.376 .038(current method)J
f6_15 sf
.205 .02( we mean the last method that was invoked in the current thread of control)J
145 612 :M
.861 .086(and that has not yet returned. Procedure calls do not change or mask the current method, even when)J
145 630 :M
(they have not yet returned.)S
172 648 :M
.731 .073(Whether an operation is self-inflicted can be determined by a simple run-time test. Consider, for)J
145 666 :M
(example the object:)S
199 696 :M
f10_15 sf
({ p => meth\(s\) s.q.x end,  q => ... })S
145 724 :M
f6_15 sf
.462 .046(Here the operation )J
263 724 :M
f14_15 sf
.072<D2>A
f10_15 sf
.216(s.q)A
f14_15 sf
.072<D3>A
f6_15 sf
.495 .049( is self-inflicted, since )J
f14_15 sf
.072<D2>A
f10_15 sf
.216(s)A
f14_15 sf
.072<D3>A
f6_15 sf
.337 .034( is self. But the )J
548 724 :M
f14_15 sf
.053<D2>A
f10_15 sf
.159(.x)A
f14_15 sf
.053<D3>A
f6_15 sf
.32 .032( operation in )J
f14_15 sf
.053<D2>A
f10_15 sf
.159(s.q.x)A
f14_15 sf
.053<D3>A
f6_15 sf
.329 .033( is self-in)J
762 724 :M
(-)S
145 742 :M
(flicted depending on whether )S
f14_15 sf
<D2>S
f10_15 sf
(s.q)S
f14_15 sf
<D3>S
f6_15 sf
( returns self; in general this can be determined only at run-time.)S
172 760 :M
.615 .061(If we replace )J
257 760 :M
f14_15 sf
.068<D2>A
f10_15 sf
.205(s.q)A
f14_15 sf
.068<D3>A
f6_15 sf
.418 .042( with a procedure call )J
f14_15 sf
.068<D2>A
f10_15 sf
.205(p\(s\))A
f14_15 sf
.068<D3>A
f6_15 sf
.531 .053( which simply performs )J
f14_15 sf
.068<D2>A
f10_15 sf
.205(s.q)A
f14_15 sf
.068<D3>A
f6_15 sf
.325 .033(, then )J
692 760 :M
f14_15 sf
.073<D2>A
f10_15 sf
.218(s.q)A
f14_15 sf
.073<D3>A
f6_15 sf
.346 .035( is still)J
145 778 :M
.163 .016(self-inflicted, and )J
f14_15 sf
<D2>S
f10_15 sf
.064(p\(s\).x)A
313 778 :M
f14_15 sf
<D3>S
f6_15 sf
.291 .029( may still be. The notion of \322self\323 for self-inflicted operations is preserved)J
145 796 :M
(through procedure calls, but not through external method invocations or thread creation.)S
145 840 :M
f1_18 sf
(3.5)S
185 840 :M
(Protected Objects)S
172 868 :M
f6_15 sf
.394 .039(It is useful to protect objects against certain external operations, to safeguard their internal invari)J
762 868 :M
(-)S
145 886 :M
.832 .083(ants. Protection is particularly important, for example, to prevent clients from overriding methods of)J
145 904 :M
.991 .099(network services, or from cloning servers. Still, protected objects should be allowed to modify their)J
145 922 :M
(own state and to clone themselves.)S
172 940 :M
.463 .046(This is where the notion of self-inflicted operations first becomes useful. A )J
636 940 :M
f4_15 sf
.111(protected)A
f6_15 sf
.303 .03( object is an)J
145 958 :M
.503 .05(object that rejects external update, cloning, and delegation operations, but that admits such operations)J
145 976 :M
(when they are self-inflicted. Objects can be declared protected, as shown below:)S
199 1006 :M
f10_15 sf
({ protected, x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... , x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( })S
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(luca; page: 16 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(10)S
145 160 :M
f6_15 sf
.275 .028(Therefore, for example, methods of a protected object can update sibling fields through self, but exter)J
762 160 :M
(-)S
145 178 :M
(nal operations cannot modify such fields.)S
172 196 :M
.678 .068(Note that a protection mechanism based on individual \322private\323 fields would not address protec)J
761 196 :M
(-)S
145 214 :M
(tion against cloning and delegation.)S
145 258 :M
f1_18 sf
(3.6)S
185 258 :M
(Serialized Objects)S
172 286 :M
f6_15 sf
.305 .03(An Obliq server object can be accessed concurrently by multiple remote client threads. Moreover,)J
145 304 :M
.783 .078(local concurrent threads may be created explicitly. To prevent race conditions, it must be possible to)J
145 322 :M
(serialize access to objects and other entities with state.)S
172 340 :M
.051 .005(We say that an object is )J
f4_15 sf
.019(serialized)A
378 340 :M
f6_15 sf
.066 .007( when \(1\) in presence of multiple threads, at most one method of)J
145 358 :M
1.093 .109(the object can be executing at any given time, but still \(2\) a method may call a sibling through self)J
145 376 :M
.931 .093(without deadlock. Note that requirement \(2\) does not contradict invariant \(1\), because an invocation)J
145 394 :M
(through self suspends a method before activating a sibling.)S
172 412 :M
.439 .044(The obvious approach to implementing serialized objects, adopted by many concurrent languages)J
145 430 :M
.699 .07(is to associate )J
f4_15 sf
.255(mutexes)A
f6_15 sf
.763 .076( with objects \(for example, see )J
480 430 :M
.73 .073([Bal, Kaashoek, Tanenbaum 1992]\). Such mu-)J
145 448 :M
.368 .037(texes are locked when a method of an object is invoked, and unlocked when the method returns, guar)J
762 448 :M
(-)S
145 466 :M
.106 .011(anteeing condition \(1\). This way, however, we have a deadlock whenever a method calls a sibling, vio)J
762 466 :M
(-)S
145 484 :M
.481 .048(lating condition \(2\). We find this behavior unacceptable because it causes innocent programs to dead)J
762 484 :M
(-)S
145 502 :M
.349 .035(lock without good reason. In particular, an object that works well sequentially may suddenly deadlock)J
145 520 :M
.607 .061(when a mutex is added. \([Brewer, Waldspurger 1992])J
475 520 :M
.649 .065( gives an overview of previous solutions to this)J
145 538 :M
(problem.\))S
172 556 :M
.912 .091(A way to satisfy condition \(2\) is to use reentrant mutexes, that is, mutexes that do not deadlock)J
145 574 :M
.188 .019(when re-locked by the \322same\323 thread \(for example, see )J
482 574 :M
.147 .015([Fort\216 1994])J
558 574 :M
.198 .02(\). On one hand, this solution is too)J
145 592 :M
.18 .018(liberal, because it allows a method to call an arbitrary method of a different object, which then can call)J
145 610 :M
.21 .021(back a method of the present object without deadlocking. This goes well beyond our simple desire that)J
145 628 :M
.651 .065(a method should be allowed to call its siblings: it may make objects vulnerable to unexpected activa)J
762 628 :M
(-)S
145 646 :M
.881 .088(tions of their own methods, when other methods have not yet finished reestablishing the object\325s in)J
762 646 :M
(-)S
145 664 :M
1.391 .139(variants. On the other hand, this solution may also be too restrictive because the notion of \322same\323)J
145 682 :M
.754 .075(thread is normally restricted to an address space. If we want to consider control threads as extending)J
145 700 :M
(across sites, then an implementation of reentrant locks might not behave appropriately.)S
172 718 :M
.373 .037(We solve this dilemma by adopting an intermediate locking strategy, which we call )J
f4_15 sf
.52 .052(self serializa)J
761 718 :M
(-)S
145 736 :M
(tion)S
f6_15 sf
(, based on the notion of self-inflicted operations described in section 3.4.)S
172 754 :M
.242 .024(Serialized objects have an implicit associated mutex, called the object mutex. An object mutex se)J
762 754 :M
(-)S
145 772 :M
.688 .069(rializes the execution of selection, update, cloning, and delegation operations on its host object. Here)J
145 790 :M
(are the simple rules of acquisition of these object mutexes:)S
199 820 :M
f14_15 sf
<A2>S
212 820 :M
f6_15 sf
(External operations always acquire the mutex of an object, and release it on completion.)S
199 842 :M
f14_15 sf
<A2>S
212 842 :M
f6_15 sf
(Self-inflicted operations never acquire the mutex of their object.)S
145 870 :M
.352 .035(Note that a self-inflicted operation can happen only after the activation of an external operation on the)J
145 888 :M
.839 .084(object that is executed by the same thread. The external operation has therefore already acquired the)J
145 906 :M
(mutex.)S
172 924 :M
(The serialization attribute of an object is specified as follows:)S
199 954 :M
f10_15 sf
({ serialized, x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( })S
145 982 :M
f6_15 sf
.08 .008(With self-serialization, a method can modify the state of its host object and can invoke siblings without)J
145 1000 :M
.596 .06(deadlocking. A deadlock still occurs if, for example, a method invokes a method of a different object)J
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(luca; page: 17 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(11)S
145 160 :M
f6_15 sf
.948 .095(that then attempts an operation on the original serialized object. A deadlock occurs also if a method)J
145 178 :M
(forks an invocation of a sibling and waits on the result.)S
172 196 :M
.55 .055(Our form of object serialization solves common mutual exclusion problems, for example for net)J
761 196 :M
(-)S
145 214 :M
.95 .095(work servers maintaining some simple internal state. More complex situations require both sophisti)J
762 214 :M
(-)S
145 232 :M
.766 .077(cated uses of explicit mutexes, and conditional synchronization \(where threads wait on )J
f4_15 sf
.21(conditions)A
750 232 :M
f6_15 sf
1.228 .123( in)J
145 250 :M
.876 .088(addition to mutexes\). Because of these more complex situations, Obliq supports the full spectrum of)J
145 268 :M
.627 .063(Modula-3 threads primitives [Birrell 1991; Horning, )J
470 268 :M
f4_15 sf
.63 .063(et al.)J
f6_15 sf
.868 .087( 1993])J
541 268 :M
.673 .067(; some through an external interface,)J
145 286 :M
(and some directly in the syntax.)S
172 304 :M
-.008(Conditional synchronization can be used also with the implicit object mutexes. A new condition )A
f14_15 sf
<D2>S
f12_15 sf
(c)S
f14_15 sf
<D3>S
145 322 :M
f6_15 sf
1.103 .11(can be created by )J
260 322 :M
f14_15 sf
.092<D2>A
f10_15 sf
.276(condition\(\))A
f14_15 sf
.092<D3>A
f6_15 sf
.556 .056( and signaled by )J
473 322 :M
f14_15 sf
.085<D2>A
f10_15 sf
.253(signal\()A
f12_15 sf
.253(c)A
f10_15 sf
.253<29>A
f14_15 sf
.085<D3>A
f6_15 sf
.452 .045(. A special )J
f14_15 sf
.085<D2>A
f10_15 sf
.253(watch)A
f14_15 sf
.085<D3>A
f6_15 sf
.667 .067( statement al)J
762 322 :M
(-)S
145 340 :M
(lows waiting on a condition in conjunction with the implicit mutex of an object. This statement must be)S
145 358 :M
1.407 .141(used inside the methods of a serialized object; hence, it is always evaluated with the object mutex)J
145 376 :M
(locked:)S
199 406 :M
f10_15 sf
(watch )S
f12_15 sf
(c)S
f10_15 sf
( until )S
f12_15 sf
(guard)S
f10_15 sf
( end)S
145 434 :M
f6_15 sf
1.163 .116(The )J
174 434 :M
f14_15 sf
.095<D2>A
f10_15 sf
.285(watch)A
f14_15 sf
.095<D3>A
f6_15 sf
.702 .07( statement evaluates the condition, and, if )J
f14_15 sf
.095<D2>A
f12_15 sf
.285(guard)A
f14_15 sf
.095<D3>A
f6_15 sf
.8 .08( evaluates to true, terminates leaving)J
145 452 :M
.537 .054(the mutex locked. If the guard is false, the object mutex is unlocked \(so that other methods of the ob)J
762 452 :M
(-)S
145 470 :M
.323 .032(ject can execute\) and the thread waits for the condition to be signaled. When the condition is signaled,)J
145 488 :M
.257 .026(the object mutex is locked and the boolean guard is evaluated again, repeating the process. See section)J
145 506 :M
(5.1 for an example.)S
172 524 :M
.731 .073(Objects with implicit mutexes can be cloned: a fresh implicit mutex is created for the clone. Re)J
762 524 :M
(-)S
145 542 :M
1.727 .173(mote objects with implicit mutexes can also be cloned: a fresh implicit mutex is generated at the)J
145 560 :M
.645 .065(cloning site. Note, however, that an error is reported on any attempt to transmit an explicit mutex \(or)J
145 578 :M
(thread, or condition\) between different sites, since these values are strongly site-dependent.)S
172 596 :M
1.552 .155(Consider the case of threads blocked on a condition within an object that is cloned. For local)J
145 614 :M
.721 .072(cloning, a fresh implicit mutex is created for the clone, with no threads blocked on it. The condition,)J
145 632 :M
.533 .053(however, is shared between the two objects. For remote cloning, since the watch statement refers to a)J
145 650 :M
.477 .048(condition and conditions cannot be transmitted, then the method closure that contains the watch state)J
762 650 :M
(-)S
145 668 :M
(ment cannot be transmitted, and hence the remote cloning fails.)S
172 686 :M
.073 .007(Consider now the case of threads blocked on a condition within a method that is overridden or del)J
762 686 :M
(-)S
145 704 :M
.226 .023(egated. When the thread resumes, the original method runs to completion with a modified self. Thus, a)J
145 722 :M
.184 .018(blocked thread must deal with the fact that the self may change in non-trivial ways: this is specially in)J
762 722 :M
(-)S
145 740 :M
(sidious if the object is serialized but not protected.)S
172 758 :M
.216 .022(Unlike objects, there is no automatic serialization for variables or arrays. If necessary, their access)J
145 776 :M
.593 .059(can be controlled through serialized objects or explicit mutexes. Even for objects, serialization is nei)J
762 776 :M
(-)S
145 794 :M
.474 .047(ther compulsory nor a default, since its use is not always desirable. In some cases it may be sufficient)J
145 812 :M
(to serialize server objects \(the concurrent entry points to a site\) and leave all other objects unserialized.)S
145 856 :M
f1_18 sf
(3.7)S
185 856 :M
(Name Servers)S
172 884 :M
f6_15 sf
.827 .083(Obliq values can flow freely from site to site along communication channels. But such channels)J
145 902 :M
.078 .008(must first be established by interaction with a name server. A name server for Obliq programs is an ex)J
761 902 :M
(-)S
145 920 :M
.598 .06(ternal process that is uniquely identified by its IP address; it simply maintains a table associating text)J
145 938 :M
(strings with network references [Birrell, )S
389 938 :M
f4_15 sf
(et al.)S
419 938 :M
f6_15 sf
( 1994].)S
172 956 :M
.764 .076(The connection protocol between two Obliq sites is as follows. The first site registers a local, or)J
145 974 :M
.582 .058(remote, object under a certain name with a known name server. The second site asks the name server)J
145 992 :M
.81 .081(for \(the network reference to\) the object registered under that name. At this point the second site ac)J
762 992 :M
(-)S
145 1010 :M
.52 .052(quires a direct network reference to the object living in the first site. The name server is no longer in)J
762 1010 :M
(-)S
145 1028 :M
.067 .007(volved in any way, except that it still holds the network reference. Obliq values and network references)J
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(luca; page: 18 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(12)S
145 160 :M
f6_15 sf
.217 .022(can now flow along the direct connection between the two sites, without having to be registered with a)J
145 178 :M
(name server.)S
172 196 :M
1.219 .122(This protocol is coded as follows, using the built-in )J
502 196 :M
f14_15 sf
.175<D2>A
f10_15 sf
.525(net)A
f14_15 sf
.175<D3>A
f6_15 sf
1.151 .115( module. An Obliq object can be )J
748 196 :M
(ex-)S
145 214 :M
(ported to a name server by the command:)S
199 244 :M
f4_15 sf
(Site1: )S
253 244 :M
f10_15 sf
(net_export\("obj", )S
f12_15 sf
(NameServer)S
f10_15 sf
(, site1Obj\))S
380 257 152 128 rC
49 44 493 279.5 @f
474 276 :M
f6_15 sf
(Name)S
474 291 :M
-.027(Server)A
380.5 322.5 58 44 rS
-1 -1 431 367 1 1 430 322 @b
13 -73 -25 438 338 @k
-1 -1 443 335 1 1 475 295 @b
384.5 347.5 17 12 rS
430 338 -1 1 439 337 1 430 337 @a
13 -43 5 401 347 @k
-1 -1 408 346 1 1 430 337 @b
381 380 :M
-.208(Site1)A
20 124 172 465 278 @k
20 -56 -8 407 315 @k
-3 -3 417 312 3 3 456 282 @b
404 289 :M
-.253(TCP)A
466 323 :M
(Network)S
466 338 :M
(Reference)S
gR
gS 18 18 877 1146 rC
145 409 :M
f6_15 sf
.578 .058(where )J
f14_15 sf
.069<D2>A
f10_15 sf
.206("obj")A
f14_15 sf
.069<D3>A
f6_15 sf
.446 .045( is the registration name for the object, )J
479 409 :M
f14_15 sf
<D2>S
f10_15 sf
.134(site1Obj)A
f14_15 sf
<D3>S
f6_15 sf
.231 .023( is the object, and )J
f14_15 sf
<D2>S
f12_15 sf
.134(NameServer)A
f14_15 sf
<D3>S
145 427 :M
f6_15 sf
.854 .085(is a string containing the net IP address or IP name of the machine running the desired name server.)J
145 445 :M
.284 .028(\(The empty string can be used as an abbreviation for the local IP address.\) The object is now available)J
145 463 :M
.031 .003(through the name server, as long as the site that exports it is alive. Objects and engines \(section 3.8\) are)J
145 481 :M
(the only Obliq values that can be exported to name servers.)S
172 499 :M
(Any other site can then )S
315 499 :M
(import a network reference to the object:)S
199 529 :M
f4_15 sf
(Site2: )S
253 529 :M
f10_15 sf
(let site1Obj = net_import\("obj", )S
f12_15 sf
(NameServer)S
f10_15 sf
<29>S
343 542 226 129 rC
345.5 606.5 58 44 rS
-1 -1 396 651 1 1 395 606 @b
13 -73 -25 404 620 @k
-1 -1 409 617 1 1 441 577 @b
349.5 631.5 17 12 rS
395 622 -1 1 404 621 1 395 621 @a
13 -43 5 366 631 @k
-1 -1 373 630 1 1 395 621 @b
346 664 :M
f6_15 sf
-.208(Site1)A
20 188 236 548 602 @k
20 8 56 494 568 @k
501 575 -3 3 542 596 3 501 572 @a
524 577 :M
-.253(TCP)A
509.5 608.5 58 44 rS
510 666 :M
(Site2)S
533.5 630.5 4 13 rS
13 -18 30 404 622 @k
410 623 -1 1 534 637 1 410 622 @a
438 542 52 46 rC
49 44 464 564.5 @f
445 561 :M
(Name)S
445 576 :M
-.027(Server)A
gR
gS 18 18 877 1146 rC
145 695 :M
f6_15 sf
(Object operations can be applied to )S
361 695 :M
f14_15 sf
<D2>S
f10_15 sf
(site1Obj)S
f14_15 sf
<D3>S
f6_15 sf
( as if it were a local object, as discussed in section 3.3.)S
172 713 :M
.222 .022(The two sites can now communicate directly; the name server is out of the loop. \(It may be told to)J
145 731 :M
(forget the object by redefining its registration name.\))S
199 761 :M
f4_15 sf
(Site2: )S
253 761 :M
f10_15 sf
(site1Obj.)S
f12_15 sf
(op)S
f10_15 sf
<28>S
f12_15 sf
(args)S
f10_15 sf
<29>S
343 774 226 147 rC
345.5 838.5 58 44 rS
-1 -1 396 883 1 1 395 838 @b
349.5 863.5 17 12 rS
395 854 -1 1 404 853 1 395 853 @a
13 -43 5 366 863 @k
-1 -1 373 862 1 1 395 853 @b
346 896 :M
f6_15 sf
-.208(Site1)A
20 156 204 501 896 @k
20 -24 24 404 896 @k
413 898 -3 3 493 895 3 413 895 @a
440 916 :M
-.253(TCP)A
509.5 840.5 58 44 rS
510 898 :M
(Site2)S
13 -18 30 404 854 @k
410 855 -1 1 534 869 1 410 854 @a
428 775 52 46 rC
49 44 454 797.5 @f
435 794 :M
(Name)S
435 809 :M
-.027(Server)A
gR
gS 343 774 226 147 rC
534.5 862.5 4 13 rS
gR
gS 18 18 877 1146 rC
172 945 :M
f6_15 sf
.617 .062(Finally, the object may be made available to a third site by transmitting it through an established)J
145 963 :M
(communication channel:)S
199 993 :M
f4_15 sf
(Site2: )S
253 993 :M
f10_15 sf
(site3Obj.)S
f12_15 sf
(op)S
f10_15 sf
(\(site1Obj\))S
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(luca; page: 19 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(13)S
296 145 319 130 rC
298.5 209.5 58 44 rS
-1 -1 349 254 1 1 348 209 @b
302.5 234.5 17 12 rS
348 225 -1 1 357 224 1 348 224 @a
13 -43 5 319 234 @k
-1 -1 326 233 1 1 348 224 @b
299 267 :M
f6_15 sf
-.208(Site1)A
20 156 204 578 196 @k
20 -24 24 501 196 @k
510 198 -3 3 570 195 3 510 195 @a
527 181 :M
-.253(TCP)A
462.5 211.5 58 44 rS
555 269 :M
(Site3)S
13 -18 30 357 225 @k
363 226 -1 1 487 240 1 363 225 @a
555.5 210.5 58 44 rS
462 270 :M
(Site2)S
13 -25 23 356 224 @k
-1 -1 363 225 1 1 578 220 @b
380 146 52 46 rC
49 44 406 168.5 @f
387 165 :M
(Name)S
387 180 :M
-.027(Server)A
gR
gS 296 145 319 130 rC
487.5 233.5 4 13 rS
579.5 213.5 4 13 rS
590.5 236.5 17 12 rS
-1 -1 564 255 1 1 563 211 @b
505.5 236.5 4 13 rS
13 151 199 554 239 @k
-1 -1 510 244 1 1 548 239 @b
555 240 -1 1 564 239 1 555 239 @a
13 162 210 590 242 @k
564 240 -1 1 585 242 1 564 239 @a
gR
gS 18 18 877 1146 rC
145 299 :M
f6_15 sf
.079 .008(Objects are garbage collected at a site when they are no longer referred to, either locally or via network)J
145 317 :M
(references [Birrell, )S
262 317 :M
f4_15 sf
(et al.)S
292 317 :M
f6_15 sf
( 1993a].)S
172 335 :M
1.261 .126(Another name service operation returns status information about a network reference, as a text)J
145 353 :M
(string. It can be used to \322ping\323 a remote object without affecting it:)S
199 383 :M
f10_15 sf
(net_who\(site1Obj\);)S
172 411 :M
f6_15 sf
.5 .05(Communication failures raise an exception \()J
443 411 :M
f14_15 sf
.053<D2>A
f10_15 sf
.16(net_failure)A
f14_15 sf
.053<D3>A
f6_15 sf
.392 .039(\), which can be trapped. These fail)J
761 411 :M
(-)S
145 429 :M
.414 .041(ures may mean that one of the machines involved has crashed, or that an Obliq address space was ter)J
762 429 :M
(-)S
145 447 :M
(minated. There is no automatic recovery from network failures.)S
145 491 :M
f1_18 sf
(3.8)S
185 491 :M
(Execution Engines)S
172 519 :M
f6_15 sf
.5 .05(We shall see soon that compute servers are definable via simple network objects. However, com)J
762 519 :M
(-)S
145 537 :M
.38 .038(pute servers are so common and useful that we provide them as primitives, calling them execution en)J
762 537 :M
(-)S
145 555 :M
-.007(gines. An execution engine accepts Obliq procedures \(that is, procedure closures\) from the network and)A
145 573 :M
(executes them at the engine site. An )S
365 573 :M
(engine can be exported from a site via the primitive:)S
199 603 :M
f10_15 sf
(net_exportEngine\()S
f10_14 sf
(")S
f10_15 sf
(Engine1@Site1)S
f10_14 sf
(")S
486 603 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(, arg\);)S
145 631 :M
f6_15 sf
.601 .06(The )J
f14_15 sf
.093<D2>A
f10_15 sf
.28(arg)A
f14_15 sf
.093<D3>A
f6_15 sf
.73 .073( parameter is supplied to all the client procedures received by the engine. Multiple engines)J
145 649 :M
(can be exported from the same site under different names.)S
172 667 :M
1.036 .104(A client may import an engine and then specify a procedure to be execute remotely. An engine)J
145 685 :M
(value behaves like a procedure of one argument:)S
199 715 :M
f10_15 sf
(let atSite1 =)S
199 737 :M
(  net_importEngine\()S
f10_14 sf
(")S
f10_15 sf
(Engine1@Site1)S
f10_14 sf
(")S
504 737 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(\);)S
199 768 :M
(atSite1\(proc\(arg\) 3+2 end\);)S
172 796 :M
f6_15 sf
.5 .05(Implementing engines as remote procedures, instead of a remote objects, allows self-inflicted op)J
762 796 :M
(-)S
145 814 :M
(erations to extend across sites; this turns out to be important for object migration.)S
145 860 :M
f1_21 sf
(4.)S
172 860 :M
(Local Techniques)S
172 889 :M
f6_15 sf
.479 .048(In this section we discuss a collection of single-threaded examples to illustrate Obliq\325s sequential)J
145 907 :M
.135 .013(features. A collection of concurrent and distributed examples is given in section 5; the impatient reader)J
145 925 :M
.34 .034(may want to skip forward. In both these sections the emphasis is on advanced, rather than tutorial, ex)J
761 925 :M
(-)S
145 943 :M
(amples.)S
145 987 :M
f1_18 sf
(4.1)S
185 987 :M
(Recursion and Iteration)S
172 1015 :M
f6_15 sf
1.203 .12(We start with a simple example, to illustrate the use of definitions, local variables, and control)J
145 1033 :M
(constructs. The factorial function is defined in recursive and iterative style.)S
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(luca; page: 20 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(14)S
199 172 :M
f10_15 sf
(let rec recFact =)S
199 194 :M
(  proc\(n\))S
199 216 :M
(    if n is 0 then 1 else n * recFact\(n-1\) end;)S
199 238 :M
(  end;)S
199 269 :M
(let itFact =)S
199 291 :M
(  proc\(n\))S
199 313 :M
(    var cnt = n; var acc = 1;)S
199 335 :M
(    loop)S
199 357 :M
(      if cnt is 0 then exit end;)S
199 379 :M
(      acc := cnt * acc; cnt := cnt - 1;)S
199 401 :M
(    end;)S
199 423 :M
(    acc;)S
199 445 :M
(  end;)S
145 473 :M
f6_15 sf
.475 .048(Identifiers are declared by )J
309 473 :M
f14_15 sf
<D2>S
f10_15 sf
.143(let)A
f14_15 sf
<D3>S
f6_15 sf
.345 .035(, and updatable variables by )J
f14_15 sf
<D2>S
f10_15 sf
.143(var)A
f14_15 sf
<D3>S
f6_15 sf
.451 .045(. Recursive definitions are obtained)J
145 491 :M
.157 .016(by )J
164 491 :M
f14_15 sf
<D2>S
f10_15 sf
.167 .017(let rec)J
f14_15 sf
<D3>S
f6_15 sf
.093 .009(. The identity predicate is called )J
f14_15 sf
<D2>S
f10_15 sf
.04(is)A
f14_15 sf
<D3>S
f6_15 sf
.117 .012(. A sequence of statements separated by semicolons)J
145 509 :M
(returns the value of the last statement; hence the iterative factorial program returns )S
f14_15 sf
<D2>S
f10_15 sf
(acc)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 553 :M
f1_18 sf
(4.2)S
185 553 :M
(The Object-Oriented Numerals)S
172 581 :M
f6_15 sf
.128 .013(This next example illustrates the expressive power of the object primitives by encoding the natural)J
145 599 :M
(numbers purely in terms of objects.)S
199 629 :M
f10_15 sf
(let zero =)S
199 651 :M
(  {case =>)S
199 673 :M
(     proc\(pz,ps\) pz\(\) end,)S
199 695 :M
(   succ =>)S
199 717 :M
(     meth\(self\))S
199 739 :M
(       let o = clone\(self\);)S
253 761 :M
( o.case := proc\(pz,ps\) ps\(self\) end;)S
253 783 :M
( o)S
199 805 :M
(     end};)S
145 833 :M
f6_15 sf
.918 .092(The numeral )J
228 833 :M
f14_15 sf
.131<D2>A
f10_15 sf
.392(zero)A
f14_15 sf
.131<D3>A
f6_15 sf
.758 .076( has two fields. The )J
399 833 :M
f14_15 sf
.072<D2>A
f10_15 sf
.215(succ)A
f14_15 sf
.072<D3>A
f6_15 sf
.682 .068( field produces successive numerals by appropriately)J
145 851 :M
3.708 .371(modifying the current numeral. The )J
f14_15 sf
.434<D2>A
f10_15 sf
1.299(case)A
f14_15 sf
.434<D3>A
f6_15 sf
2.96 .296( field is used to discriminate on zero: the idiom)J
145 869 :M
f14_15 sf
<D2>S
f10_15 sf
.212 .021(\(n.case\)\(proc\(\) b end, proc\(p\) c end\))J
f14_15 sf
<D3>S
f6_15 sf
.099 .01( is read, informally, as \322if )J
644 869 :M
f10_15 sf
.071(n)A
f6_15 sf
.151 .015( is zero then return)J
145 887 :M
f10_15 sf
(b)S
f6_15 sf
(, else bind the predecessor of )S
332 887 :M
f10_15 sf
(n)S
f6_15 sf
( to )S
f10_15 sf
(p)S
f6_15 sf
( and return )S
438 887 :M
f10_15 sf
(c)S
f6_15 sf
<D32E>S
172 905 :M
.452 .045(The code of the )J
272 905 :M
f14_15 sf
<D2>S
f10_15 sf
.127(succ)A
f14_15 sf
<D3>S
f6_15 sf
.343 .034( method depends heavily on Obliq peculiarities: it clones self, and embeds)J
145 923 :M
.647 .065(the current self into a procedure closure, so that it can be used later. For example, the numeral )J
730 923 :M
f14_15 sf
<D2>S
f10_15 sf
(one)S
f14_15 sf
<D3>S
f6_15 sf
(,)S
145 941 :M
(computed as, )S
228 941 :M
f14_15 sf
<D2>S
f10_15 sf
(zero.succ\(\))S
f14_15 sf
<D3>S
f6_15 sf
(, is:)S
199 971 :M
f10_15 sf
( {case => proc\(pz,ps\) ps\(zero\) end,)S
199 993 :M
(  succ => )S
f4_15 sf
(\(as for zero\))S
f10_15 sf
( })S
145 1021 :M
f6_15 sf
(Hence, )S
191 1021 :M
f14_15 sf
<D2>S
f10_15 sf
(one.case\(pz,ps\))S
f14_15 sf
<D3>S
f6_15 sf
( correctly applies )S
f14_15 sf
<D2>S
f10_15 sf
(ps)S
f14_15 sf
<D3>S
f6_15 sf
( to the predecessor of )S
f14_15 sf
<D2>S
f10_15 sf
(one)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(luca; page: 21 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(15)S
172 160 :M
f6_15 sf
.363 .036(To show that the encoding is fully general, we define the successor, predecessor, and test for zero)J
145 178 :M
(procedures:)S
199 208 :M
f10_15 sf
(let succ =)S
199 230 :M
(  proc\(n\) n.succ end;)S
199 261 :M
(let pred =)S
199 283 :M
(  proc\(n\))S
199 305 :M
(    \(n.case\)\(proc\(\) zero end, proc\(p\) p end\))S
199 327 :M
(  end;)S
199 358 :M
(let iszero =)S
199 380 :M
(  proc\(n\))S
199 402 :M
(    \(n.case\)\(proc\(\) true end, proc\(p\) false end\))S
199 424 :M
(  end;)S
145 478 :M
f1_18 sf
(4.3)S
185 478 :M
(The Prime Numbers Sieve)S
172 506 :M
f6_15 sf
.233 .023(This example shows an interesting case of methods )J
487 506 :M
.197 .02(overriding themselves, and of objects replicat-)J
145 524 :M
.814 .081(ing themselves by )J
261 524 :M
.793 .079(cloning. The program below prints the prime numbers when the method )J
711 524 :M
f14_15 sf
.144<D2>A
f10_15 sf
.431(m)A
f14_15 sf
.144<D3>A
f6_15 sf
.706 .071( of the)J
145 542 :M
f14_15 sf
<D2>S
f10_15 sf
.139(sieve)A
f14_15 sf
<D3>S
f6_15 sf
.329 .033( object is invoked with successive integers starting from 2. Each time a new prime p is found,)J
145 560 :M
.6 .06(the sieve object clones itself into two objects. One of the clones then transforms itself into a filter for)J
145 578 :M
(multiples of p; non-multiples are passed to the other clone.)S
199 608 :M
f10_15 sf
(let sieve =)S
199 630 :M
(   { m =>)S
199 652 :M
(        meth\(s, n\))S
199 674 :M
(          print\(n\);)S
496 674 :M
(\(* defined elsewhere *\))S
199 696 :M
(          let s0 = clone\(s\);)S
199 718 :M
(          s.m :=)S
199 740 :M
(            meth\(s1,n1\))S
199 762 :M
(              if \(n1 % n\) is 0 then ok else s0.m\(n1\) end)S
199 784 :M
(            end;)S
199 806 :M
(        end)S
199 828 :M
(   };)S
199 859 :M
(\(* print the primes < 100 *\))S
199 881 :M
(for i = 2 to 100 do sieve.m\(i\) end;)S
145 909 :M
f6_15 sf
.278 .028(At any point in time, if n primes have been printed, then there exists n filter objects plus a clone of the)J
145 927 :M
(original sieve object.)S
145 971 :M
f1_18 sf
(4.4)S
185 971 :M
(A Calculator)S
172 999 :M
f6_15 sf
-.006(This example illustrates method )A
368 999 :M
-.007(overriding, used here to store the \322pending operations\323 of a pocket)A
145 1017 :M
(calculator.)S
endp
%%Page: 22 22
%%BeginPageSetup
initializepage
(luca; page: 22 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(16)S
199 172 :M
f10_15 sf
(let calc =)S
199 194 :M
(  { arg => 0.0,   \(* the )S
f6_15 sf
(")S
f10_15 sf
(visible)S
f6_15 sf
(")S
f10_15 sf
( argument display *\))S
199 216 :M
(    acc => 0.0,   \(* the )S
f6_15 sf
(")S
f10_15 sf
(hidden)S
f6_15 sf
(")S
f10_15 sf
( accumulator *\))S
199 247 :M
(    enter => )S
361 247 :M
(\(* entering a new argument *\))S
199 269 :M
(      meth\(s, n\))S
199 291 :M
(        s.arg := n;)S
199 313 :M
(        s)S
199 335 :M
(      end,)S
199 366 :M
(    add =>  )S
361 366 :M
(\(* the addition button *\))S
199 388 :M
(      meth\(s\))S
199 410 :M
(        s.acc := s.equals;)S
199 432 :M
(        s.equals := meth\(s\) s.acc+s.arg end;)S
199 454 :M
(        s)S
199 476 :M
(      end,)S
199 507 :M
(    sub =>  )S
361 507 :M
(\(* the subtraction button *\))S
199 529 :M
(      meth\(s\))S
199 551 :M
(        s.acc := s.equals;)S
199 573 :M
(        s.equals := meth\(s\) s.acc-s.arg end;)S
199 595 :M
(        s)S
199 617 :M
(      end,)S
199 648 :M
(    equals =>   )S
361 648 :M
(\(* the result button \(and operator stack\) *\))S
199 670 :M
(      meth\(s\) s.arg end,)S
199 701 :M
(    reset =>   )S
361 701 :M
(\(* the reset button *\))S
199 723 :M
(      meth\(s\))S
199 745 :M
(        s.arg:=0.0;)S
199 767 :M
(        s.acc:=0.0;)S
199 789 :M
(        s.equals:=meth\(s\) s.arg end;)S
199 811 :M
(        s)S
199 833 :M
(      end)S
199 855 :M
(   };)S
172 883 :M
f6_15 sf
(For example:)S
199 913 :M
f10_15 sf
(   calc .reset .enter\(3.5\) .equals;                   \(* 3.5 *\))S
199 935 :M
(   calc .reset .enter\(3.5\) .sub .enter\(2.0\) .equals;  \(* 1.5 *\))S
199 957 :M
(   calc .reset .enter\(3.5\) .equals;                   \(* 3.5 *\))S
199 979 :M
(   calc .reset .enter\(3.5\) .add .equals;              \(* 7.0 *\))S
199 1001 :M
(   calc .reset .enter\(3.5\) .add .add .equals;         \(*10.5 *\))S
endp
%%Page: 23 23
%%BeginPageSetup
initializepage
(luca; page: 23 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(17)S
145 159 :M
f1_18 sf
(4.5)S
185 159 :M
(Surrogates)S
172 187 :M
f6_15 sf
.611 .061(Here we create a non-trivial surrogate for the calculator object of section 4.4. Unlike the original)J
145 205 :M
.243 .024(calculator, this object is protected against outside interference. Some of the calculator fields are shared)J
145 223 :M
(by aliasing, some are hidden, some are renamed, and one is added.)S
199 271 :M
f10_15 sf
(let publicCalc =)S
199 293 :M
(   { protected,)S
199 315 :M
(     enter => alias enter of calc end,)S
199 337 :M
(     pi => meth\(s\) s.enter\(3.1415926535897932384626433833\) end,)S
199 359 :M
(     plus => alias add of calc end,)S
199 381 :M
(     minus => alias sub of calc end,)S
199 403 :M
(     equals => alias equals of calc end,)S
199 425 :M
(     reset => alias reset of calc end })S
145 481 :M
f1_21 sf
(5.)S
172 481 :M
(Distributed Techniques)S
172 510 :M
f6_15 sf
.405 .04(In this section we code some distributed programming techniques in Obliq. Each example is typi)J
762 510 :M
(-)S
145 528 :M
(cal of a separate class of distributed programs, and illustrates the unique features of Obliq.)S
145 572 :M
f1_18 sf
(5.1)S
185 572 :M
(A Serialized Queue)S
172 600 :M
f6_15 sf
.192 .019(We begin with an example of ordinary concurrent programming to illustrate the threads primitives)J
145 618 :M
1.289 .129(that are used in the sequel. We implement a queue that can be accessed consistently by concurrent)J
145 636 :M
(reader and writer threads.)S
172 654 :M
.667 .067(The queue is implemented as a serialized object with )J
503 654 :M
f14_15 sf
.063<D2>A
f10_15 sf
.188(read)A
f14_15 sf
.063<D3>A
f6_15 sf
.243 .024( and )J
f14_15 sf
.063<D2>A
f10_15 sf
.188(write)A
f14_15 sf
.063<D3>A
f6_15 sf
.56 .056( methods. These meth)J
762 654 :M
(-)S
145 672 :M
.541 .054(ods refer to free identifiers that are hidden from users of the queue. The object mutex is used, implic)J
762 672 :M
(-)S
145 690 :M
1.183 .118(itly, to protect a private variable that contains an array of queue elements. Another private variable)J
145 708 :M
(contains a )S
f4_15 sf
(condition)S
266 708 :M
f6_15 sf
( )S
270 708 :M
f14_15 sf
<D2>S
f10_15 sf
(nonEmpty)S
f14_15 sf
<D3>S
f6_15 sf
( used for signaling the state of the queue.)S
172 726 :M
.923 .092(The write method adds an element to the queue, and )J
503 726 :M
f4_15 sf
.198(signals)A
f6_15 sf
.73 .073( the non-empty condition, so that at)J
145 744 :M
.298 .03(least one reader thread waiting on that condition wakes up \(a similar )J
f4_15 sf
.091(broadcast)A
f6_15 sf
.307 .031( operation wakes up all)J
145 762 :M
.735 .073(waiting threads\). The object mutex is locked throughout the execution of the write method, therefore)J
145 780 :M
(excluding other writer or reader threads.)S
172 798 :M
-.007(When a read method starts executing, the object mutex is locked. Its first instruction is to watch for)A
145 816 :M
.155 .016(the non-empty condition, and for the existence of elements in the queue. If the queue is non-empty, the)J
145 834 :M
.644 .064(reader simply goes ahead and removes one element from the queue. If the queue is empty, the reader)J
145 852 :M
.556 .056(thread is suspended and the object mutex is released \(allowing other reader and writer threads to exe)J
762 852 :M
(-)S
145 870 :M
.945 .094(cute\). The reader is suspended until it receives a signal for the non-empty condition; then the object)J
145 888 :M
1.363 .136(mutex is locked, and the reader thread proceeds as above \(possibly being suspended again if some)J
145 906 :M
(other reader thread has already emptied the queue\).)S
172 924 :M
.918 .092(What is important here is that a reader thread may be blocked inside a method, and yet a writer)J
145 942 :M
1.005 .101(thread can get access and eventually allow the first thread to proceed. Hence, even though only one)J
145 960 :M
(thread at a time can run, multiple threads may be simultaneously present \322in\323 the object.)S
172 978 :M
(Here, )S
209 978 :M
f14_15 sf
<D2>S
f10_15 sf
([)S
f6_15 sf
(...)S
f10_15 sf
(])S
f14_15 sf
<D3>S
f6_15 sf
( is an array, )S
318 978 :M
f14_15 sf
<D2>S
f10_15 sf
(#)S
f14_15 sf
<D3>S
f6_15 sf
( is array-size, and )S
f14_15 sf
<D2>S
f10_15 sf
(@)S
f14_15 sf
<D3>S
f6_15 sf
( is array-concatenation.)S
endp
%%Page: 24 24
%%BeginPageSetup
initializepage
(luca; page: 24 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(18)S
199 172 :M
f10_15 sf
(let queue =)S
199 194 :M
(  \(let nonEmpty = condition\(\);)S
199 216 :M
(   var q = [];               \(* the \(hidden\) queue data *\))S
199 247 :M
(   {protected, serialized,)S
226 269 :M
(   write =>)S
199 291 :M
(        meth\(s, elem\))S
199 313 :M
(          q := q @ [elem];   \(* append elem to tail *\))S
199 335 :M
(          signal\(nonEmpty\);  \(* wake up readers *\))S
199 357 :M
(        end,)S
199 388 :M
(      read =>)S
199 410 :M
(        meth\(s\))S
199 432 :M
(          watch nonEmpty     \(* wait for writers *\))S
199 454 :M
(          until #\(q\)>0       \(* check size of queue *\))S
199 476 :M
(          end;)S
199 498 :M
(          let q0 = q[0];           \(* get first elem *\))S
199 520 :M
(          q := q[1 for #\(q\)-1];    \(* remove from queue *\))S
199 542 :M
(          q0;                      \(* return first elem *\))S
199 564 :M
(        end;)S
199 586 :M
(   }\);)S
172 614 :M
f6_15 sf
.658 .066(Let us see how this queue can be used. Suppose a reader is activated first when the queue is still)J
145 632 :M
1.316 .132(empty. To avoid an immediate deadlock, we fork a thread running a procedure that reads from the)J
145 650 :M
.276 .028(queue; this thread blocks on the )J
342 650 :M
f14_15 sf
<D2>S
f10_15 sf
.092(watch)A
f14_15 sf
<D3>S
f6_15 sf
.212 .021( statement. The reader thread is returned by the )J
f14_15 sf
<D2>S
f10_15 sf
.092(fork)A
f14_15 sf
<D3>S
f6_15 sf
.248 .025( primi)J
762 650 :M
(-)S
145 668 :M
(tive, and bound to the identifier )S
338 668 :M
f14_15 sf
<D2>S
f10_15 sf
(t)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 698 :M
f10_15 sf
(let t =                   \(* fork a reader t, which blocks *\))S
199 720 :M
(  fork\(proc\(\) queue.read\(\) end, 0\);)S
145 748 :M
f6_15 sf
.489 .049(Next we add an element to the queue, using the current thread as the writer thread. A non-empty con)J
762 748 :M
(-)S
145 766 :M
(dition is immediately signaled and, shortly thereafter, the reader thread returns the queue element.)S
199 796 :M
f10_15 sf
(queue.write\(3\);           \(* cause t to read 3 *\))S
145 824 :M
f6_15 sf
.247 .025(The reader thread has now finished running, but is not completely dead because it has not delivered its)J
145 842 :M
(result. To obtain the result, the current thread is joined with the reader thread:)S
199 872 :M
f10_15 sf
(let result = join\(t\);     \(* get 3 from t *\))S
145 900 :M
f6_15 sf
(In general, )S
213 900 :M
f14_15 sf
<D2>S
f10_15 sf
(join)S
f14_15 sf
<D3>S
f6_15 sf
( waits until the completion of a thread and returns its result.)S
145 944 :M
f1_18 sf
(5.2)S
185 944 :M
(Compute Servers)S
172 972 :M
f6_15 sf
1.504 .15(The compute server defined below receives a client procedure )J
f14_15 sf
.181<D2>A
f10_15 sf
.543(p)A
f14_15 sf
.181<D3>A
f6_14 sf
.211 .021( )J
590 972 :M
f6_15 sf
1.444 .144(with zero arguments via the)J
145 990 :M
f14_15 sf
.056<D2>A
f10_15 sf
.169(rexec)A
f14_15 sf
.056<D3>A
f6_14 sf
.06 .006( )J
f6_15 sf
.446 .045(method, and executes the procedure at the server site. This particular server cheats on clients)J
145 1008 :M
.897 .09(by storing the latest client procedure into a global variable )J
513 1008 :M
f14_15 sf
.09<D2>A
f10_15 sf
.27(replay)A
f14_15 sf
.09<D3>A
f6_15 sf
.609 .061(. Another field, )J
f14_15 sf
.09<D2>A
f10_15 sf
.27(lexec)A
f14_15 sf
.09<D3>A
f6_15 sf
.409 .041(, is de)J
762 1008 :M
(-)S
endp
%%Page: 25 25
%%BeginPageSetup
initializepage
(luca; page: 25 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(19)S
145 160 :M
f6_15 sf
.207 .021(fined similarly to )J
f14_15 sf
<D2>S
f10_15 sf
.085(rexec)A
f14_15 sf
<D3>S
f6_15 sf
.111 .011(, but )J
f14_15 sf
<D2>S
f10_15 sf
.085(rexec)A
f14_15 sf
<D3>S
f6_15 sf
.168 .017(, is a method field, while )J
541 160 :M
f14_15 sf
<D2>S
f10_15 sf
.081(lexec)A
f14_15 sf
<D3>S
f6_15 sf
.173 .017(, is a value field containing a)J
145 178 :M
(procedure value: the operational difference is discussed below.)S
199 208 :M
f10_15 sf
(\(* Server Site *\))S
199 230 :M
(var replay = proc\(\) end;)S
199 261 :M
(net_export\()S
f10_14 sf
(")S
f10_15 sf
(ComputeServer)S
f10_14 sf
(")S
432 261 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(,)S
199 283 :M
(  {rexec => meth\(s, p\) replay:=p; p\(\) end,)S
226 305 :M
(lexec => proc\(p\) replay:=p; p\(\) end}\))S
172 333 :M
f6_15 sf
.937 .094(A client may import the compute server and send it a procedure to execute. The procedure may)J
145 351 :M
(have free variables at the client site; in this example it increments a global variable )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 381 :M
f10_15 sf
(\(* Client Site *\))S
199 403 :M
(let computeServer =)S
199 425 :M
(  net_import\()S
f10_14 sf
(")S
f10_15 sf
(ComputeServer)S
f10_14 sf
(")S
450 425 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(\);)S
199 456 :M
(var x = 0;)S
199 478 :M
(computeServer.rexec\(proc\(\) x:=x+1 end\);)S
199 500 :M
(x;)S
280 500 :M
(\(* now x = 1 *\))S
172 528 :M
f6_15 sf
2.078 .208(When the server executes its )J
f14_15 sf
.281<D2>A
f10_15 sf
.842(rexec)A
f14_15 sf
.281<D3>A
f6_15 sf
1.881 .188( method, )J
481 528 :M
f14_15 sf
.307<D2>A
f10_15 sf
.92(replay)A
f14_15 sf
.307<D3>A
f6_15 sf
1.497 .15( is set to \(a closure for\) )J
f14_15 sf
.307<D2>A
f10_15 sf
1.105(proc\(\))A
145 546 :M
.478 .048(x:=x+1 end)J
f14_15 sf
<D3>S
f6_15 sf
.176 .018( at the server site, and then )J
405 546 :M
f14_15 sf
<D2>S
f10_15 sf
.134(x)A
f14_15 sf
<D3>S
f6_15 sf
.155 .016( is set to )J
f14_15 sf
<D2>S
f10_15 sf
.134(1)A
f14_15 sf
<D3>S
f6_15 sf
.245 .024( at the client site, since the free )J
682 546 :M
f14_15 sf
<D2>S
f10_15 sf
.072(x)A
f14_15 sf
<D3>S
f6_15 sf
.174 .017( is lexically)J
145 564 :M
.421 .042(bound to the client site. Any variable called )J
f14_15 sf
.06<D2>A
f10_15 sf
.18(x)A
f14_15 sf
.06<D3>A
f6_15 sf
.363 .036( at the server site, if it exists, is a different variable and)J
145 582 :M
(is not affected. At the server we may now invoke )S
444 582 :M
f14_15 sf
<D2>S
f10_15 sf
(replay\(\))S
f14_15 sf
<D3>S
f6_15 sf
( , setting )S
577 582 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( to )S
f14_15 sf
<D2>S
f10_15 sf
(2)S
f14_15 sf
<D3>S
f6_15 sf
( at the client site.)S
172 600 :M
(For contrast, consider the execution of the following line at the client site:)S
199 630 :M
f10_15 sf
(\(* Client Site *\))S
199 652 :M
(\(computeServer.lexec\)\(proc\(\) x:=x+1 end\);)S
145 680 :M
f6_15 sf
.329 .033(This results in the server returning the procedure )J
445 680 :M
f14_15 sf
<D2>S
f10_15 sf
.302 .03(proc\(p\) replay:=p; p\(\) end)J
684 680 :M
f14_15 sf
.059<D3>A
f6_15 sf
.347 .035( to the client,)J
145 698 :M
.175 .018(by the semantics of remote field selection, with )J
f14_15 sf
<D2>S
f10_15 sf
.071(replay)A
f14_15 sf
<D3>S
f6_15 sf
.154 .015( bound at the server site. Then the client pro)J
762 698 :M
(-)S
145 716 :M
.126 .013(cedure )J
f14_15 sf
<D2>S
f10_15 sf
.209 .021(proc\(\) x:=x+1 end)J
346 716 :M
f14_15 sf
<D3>S
f6_15 sf
.199 .02( is given as an argument. Hence, this time, the client procedure is ex-)J
145 734 :M
.298 .03(ecuted at the client site. Still, the execution at the client site causes the client procedure to be transmit)J
762 734 :M
(-)S
145 752 :M
(ted to the server and bound to the )S
f14_15 sf
<D2>S
f10_15 sf
(replay)S
f14_15 sf
<D3>S
f6_15 sf
( variable there. The final effect is the same.)S
145 796 :M
f1_18 sf
(5.3)S
185 796 :M
(A Database Server)S
172 824 :M
f6_15 sf
1.069 .107(This example describes a simple server that maintains a persistent database of \322fortunes\323. Each)J
145 842 :M
.184 .018(client may add a new fortune via a )J
f14_15 sf
<D2>S
f10_15 sf
.09(learn)A
f14_15 sf
<D3>S
f6_15 sf
.226 .023( method, and may retrieve a fortune entered by some client)J
145 860 :M
.11 .011(via a )J
f14_15 sf
<D2>S
f10_15 sf
.079(tell)A
f14_15 sf
<D3>S
f6_15 sf
.197 .02( method. The server handles concurrent client access, and saves the database to file to pre)J
762 860 :M
(-)S
145 878 :M
(serve data through outages. An initial empty database is assumed.)S
172 896 :M
1.222 .122(The built-in libraries for readers \()J
384 896 :M
f14_15 sf
.151<D2>A
f10_15 sf
.454(rd_)A
f14_15 sf
.151<D3>A
f6_15 sf
.99 .099(\), writers \()J
f14_15 sf
.151<D2>A
f10_15 sf
.454(wr_)A
f14_15 sf
.151<D3>A
f6_15 sf
.997 .1(\), and data storage \()J
644 896 :M
f14_15 sf
.105<D2>A
f10_15 sf
.316(pickle_)A
f14_15 sf
.105<D3>A
f6_15 sf
.627 .063(\) are de-)J
145 914 :M
(scribed in section B.6.)S
199 944 :M
f10_15 sf
(let writeDB =)S
199 966 :M
(  proc\(dB\))S
199 988 :M
(    let w = wr_open\(fileSys, "fortune.obq"\);)S
199 1010 :M
(    pickle_write\(w, dB\); wr_close\(w\))S
endp
%%Page: 26 26
%%BeginPageSetup
initializepage
(luca; page: 26 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(20)S
199 163 :M
f10_15 sf
(  end;)S
199 194 :M
(let readDB =)S
199 216 :M
(  proc\(\))S
199 238 :M
(    let r = rd_open\(fileSys, "fortune.obq"\);)S
199 260 :M
(    let a = pickle_read\(r\); rd_close\(r\); a)S
199 282 :M
(  end;)S
199 313 :M
(var i = -1;)S
199 344 :M
(let fortune =)S
199 366 :M
(  {protected, serialized,)S
199 388 :M
(     dB => readDB\(\),)S
199 419 :M
(     tell =>)S
199 441 :M
(       meth\(self\))S
199 463 :M
(         if #\(self.dB\) is 0 then "<bad luck>")S
199 485 :M
(         else)S
199 507 :M
(           i := i+1;)S
199 529 :M
(           if i >= #\(self.dB\) then i:=0 end;)S
199 551 :M
(           self.dB[i])S
199 573 :M
(         end)S
199 595 :M
(       end,)S
199 626 :M
(     learn =>)S
199 648 :M
(       meth\(self, t\))S
199 670 :M
(         self.dB := self.dB @ [t];)S
199 692 :M
(         writeDB\(self.dB\);)S
199 714 :M
(       end,)S
199 736 :M
(  };)S
199 767 :M
(net_export\("FortuneServer", )S
f12_15 sf
(NameServer)S
f10_15 sf
(, fortune\);)S
145 821 :M
f1_18 sf
(5.4)S
185 821 :M
(Remote Agents)S
172 849 :M
f6_15 sf
.879 .088(Compute servers \(section 5.2\) and execution engines \(section 3.8\) can be used as general object)J
145 867 :M
.074 .007(servers; that is, as ways of allocating objects at remote sites. These objects can then act as )J
689 867 :M
f4_15 sf
.019(agents)A
f6_15 sf
.043 .004( of the)J
145 885 :M
(initiating site.)S
172 903 :M
.407 .041(Suppose, for example, that we have an engine exported by a database server site. The engine pro)J
762 903 :M
(-)S
145 921 :M
(vides the database as an argument to client procedures:)S
199 951 :M
f10_15 sf
(\(* DataBase Server Site *\))S
199 973 :M
(net_exportEngine\()S
f10_14 sf
(")S
f10_15 sf
(DBServer)S
f10_14 sf
(")S
441 973 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(, dataBase\);)S
endp
%%Page: 27 27
%%BeginPageSetup
initializepage
(luca; page: 27 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(21)S
145 160 :M
f6_15 sf
.865 .087(A database client could simply send over procedures performing queries on the database \(which, for)J
145 178 :M
.297 .03(complex queries, would be more efficient than repeatedly querying the server remotely\). However, for)J
145 196 :M
(added flexibility, the client can instead create an object at the server site that acts as its remote agent:)S
199 226 :M
f10_15 sf
(\(* DataBase Client Site *\))S
199 248 :M
(let atDBServer =)S
199 270 :M
(  net_importEngine\()S
f10_14 sf
(")S
f10_15 sf
(DBServer)S
f10_14 sf
(")S
459 270 :M
f10_15 sf
(, )S
f12_15 sf
(NameServer)S
f10_15 sf
(\);)S
199 301 :M
(let searchAgent =)S
199 323 :M
(  atDBServer\()S
199 345 :M
(    proc\(dataBase\))S
199 367 :M
(      {state => ...,)S
199 389 :M
(       start => meth ... end,)S
199 411 :M
(       report => meth ... end,)S
199 433 :M
(       stop => meth ... end})S
199 455 :M
(    end\);)S
145 483 :M
f6_15 sf
.294 .029(The execution of the client procedure causes the allocation of an object at the server site with methods)J
145 501 :M
f14_15 sf
<D2>S
f10_15 sf
.129(start)A
f14_15 sf
<D3>S
f6_15 sf
.09 .009(, )J
f14_15 sf
<D2>S
f10_15 sf
.129(report)A
f14_15 sf
<D3>S
f6_15 sf
.189 .019(, and )J
299 501 :M
f14_15 sf
.057<D2>A
f10_15 sf
.171(stop)A
f14_15 sf
.057<D3>A
f6_15 sf
.264 .026(, and with a )J
f14_15 sf
.057<D2>A
f10_15 sf
.171(state)A
f14_15 sf
.057<D3>A
f6_15 sf
.427 .043( field. The server simply returns a network refer)J
762 501 :M
(-)S
145 519 :M
(ence to this object, and is no longer engaged.)S
172 537 :M
.61 .061(We show below an example of what the client can now do. The client starts a remote search in a)J
145 555 :M
.12 .012(background thread, and periodically request a progress report. If the search is successful within a given)J
145 573 :M
.53 .053(time period, everything is fine. If the search takes too long, the remote agent is aborted via )J
f14_15 sf
.077<D2>A
f10_15 sf
.231(stop)A
f14_15 sf
.077<D3>A
f6_15 sf
.346 .035(. If)J
145 591 :M
.125 .013(an intermediate report proves promising, the client may decide to wait for however long it takes for the)J
145 609 :M
(agent to complete, by joining the background thread.)S
199 639 :M
f10_15 sf
(\(* DataBase Client Site *\))S
199 661 :M
(let searchThread =)S
199 683 :M
(  fork\(proc\(\) searchAgent.start\(\) end, 0\);)S
199 714 :M
(var report = "";)S
199 736 :M
(for i = 1 to 10 do)S
199 758 :M
(  pause\(6.0\);)S
199 780 :M
(  report := searchAgent.report\(\);)S
199 802 :M
(  if successful\(report\) then exit end;)S
199 824 :M
(  if promising\(report\) then)S
199 846 :M
(    report := join\(searchThread\); exit;)S
199 868 :M
(  end;)S
199 890 :M
(end;)S
199 912 :M
(searchAgent.stop\(\);)S
145 940 :M
f6_15 sf
.977 .098(Client resources at the server site are released when the client garbage collects the search agents, or)J
145 958 :M
(when the client site dies )S
293 958 :M
([Birrell, )S
345 958 :M
f4_15 sf
(et al.)S
375 958 :M
f6_15 sf
( 1993a].)S
172 976 :M
.235 .023(This technique for remotely allocating objects can be extended to multiple agents searching multi)J
762 976 :M
(-)S
145 994 :M
(ple databases simultaneously, and to agents initiating their own sub-agents.)S
endp
%%Page: 28 28
%%BeginPageSetup
initializepage
(luca; page: 28 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(22)S
145 159 :M
f1_18 sf
(5.5)S
185 159 :M
(Application Partitioning)S
172 187 :M
f6_15 sf
.362 .036(The technique for remotely allocating objects described in section 5.4 can be used for )J
f4_15 sf
.109(application)A
145 205 :M
(partitioning)S
217 205 :M
f6_15 sf
.771 .077(. An application can be organized as a collection of procedures that return objects. When)J
145 223 :M
.755 .076(the application starts, it can pick a site for each object and send the respective procedure to a remote)J
145 241 :M
1.039 .104(engine for that site. This way, the application components can be \(initially\) distributed according to)J
145 259 :M
(dynamic criteria.)S
145 303 :M
f1_18 sf
(5.6)S
185 303 :M
(Agent Migration)S
172 331 :M
f6_15 sf
.633 .063(In this example we consider the case of an untethered agent that moves from site to site carrying)J
145 349 :M
.096 .01(along some state[White 1994])J
326 349 :M
.119 .012(. We write the state as an object, and the agent as a procedure parameter)J
761 349 :M
(-)S
145 367 :M
(ized on the state and on a site-specific argument:)S
199 397 :M
f10_15 sf
(let state = { ... };)S
199 419 :M
(let agent = proc\(state, arg\) ... end;)S
145 447 :M
f6_15 sf
.136 .014(To be completely self-contained, this agent should have no free identifiers, and should use the state pa)J
762 447 :M
(-)S
145 465 :M
(rameter for all its long-term memory needs.)S
172 483 :M
(The agent can be sent to a new site as follows, assuming )S
514 483 :M
f14_15 sf
<D2>S
f10_15 sf
(atSite1)S
f14_15 sf
<D3>S
f6_15 sf
( is an available remote engine:)S
199 513 :M
f10_15 sf
(atSite1\(proc\(arg\) agent\(copy\(state\),arg\) end\))S
145 541 :M
f6_15 sf
1.116 .112(The )J
174 541 :M
f14_15 sf
.123<D2>A
f10_15 sf
.367(copy)A
f14_15 sf
.123<D3>A
f6_15 sf
.862 .086( operation is explained below, but the intent should be clear: the agent is executed at the)J
145 559 :M
.285 .028(new site, with a local copy of the state it had at the previous site. The agent\325s state is then accessed lo)J
762 559 :M
(-)S
145 577 :M
.369 .037(cally at the new site. Implicitly, we assume that the agent ceases any activity at the old site. The agent)J
145 595 :M
(can repeat this procedure to move to yet another site.)S
172 613 :M
.465 .047(The )J
f14_15 sf
.072<D2>A
f10_15 sf
.217(copy)A
f14_15 sf
.072<D3>A
f6_15 sf
.567 .057( operation is a primitive that produces local copies of \(almost\) arbitrary Obliq values,)J
145 631 :M
-.003(including values that span several sites. Sharing and circularities are preserved, even those that span the)A
145 649 :M
.79 .079(network. Not all values can be copied, however, because not all values can be transmitted. Protected)J
145 667 :M
.93 .093(objects cause exceptions on copying, as do site-specific values such as threads, mutexes, and condi)J
761 667 :M
(-)S
145 685 :M
(tions.)S
172 703 :M
.275 .028(This techniques allows autonomous agents to travel between sites, perhaps eventually returning to)J
145 721 :M
(their original site with results. The original site may go off-line without directly affecting the agent.)S
172 739 :M
.039 .004(The main unpleasantness is that, because of copying, the state consistency between the old site and)J
145 757 :M
.999 .1(the new site must be preserved by programming convention \(by not using the old state\). In the next)J
145 775 :M
(section we see how to migrate state consistently, for individual objects.)S
145 819 :M
f1_18 sf
(5.7)S
185 819 :M
(Object Migration)S
172 847 :M
f6_15 sf
.373 .037(This example uses a remote execution engine to migrate an object between two sites. First we de)J
762 847 :M
(-)S
145 865 :M
.189 .019(fine a procedure that, given an object, the name of an engine, and a name server, migrates the object to)J
145 883 :M
.369 .037(the engine\325s site. Migration is achieved in two phases: \(1\) by causing the engine to remotely clone the)J
145 901 :M
(object, and \(2\) by delegating the original object to its clone.)S
199 931 :M
f10_15 sf
(let migrateProc =)S
199 953 :M
(  proc\(obj, engineName\))S
199 975 :M
(    let engine = net_importEngine\(engineName, )S
f12_15 sf
(NameServer)S
f10_15 sf
(\);)S
199 997 :M
(    let remoteObj = engine\(proc\(arg\) clone\(obj\) end\);)S
739 997 :M
f6_15 sf
(\(1\))S
199 1019 :M
f10_15 sf
(    delegate obj to remoteObj end;)S
739 1019 :M
f6_15 sf
(\(2\))S
endp
%%Page: 29 29
%%BeginPageSetup
initializepage
(luca; page: 29 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(23)S
199 163 :M
f10_15 sf
(    remoteObj;)S
199 185 :M
(  end;)S
145 213 :M
f6_15 sf
(After migration, operations on the original object are redirected to the remote site, and executed there.)S
172 231 :M
.722 .072(It is critical, though, that the two phases of migration be executed atomically, to preserve the in)J
762 231 :M
(-)S
145 249 :M
.671 .067(tegrity of the object state)J
299 245 :M
f6_13 sf
(3)S
306 249 :M
f6_15 sf
.684 .068(. This can be achieved by serializing the migrating object, and by invoking)J
145 267 :M
(the )S
f14_15 sf
<D2>S
f10_15 sf
(migrateProc)S
f14_15 sf
<D3>S
f6_15 sf
( procedure from a method of that object, where it is applied to self:)S
199 297 :M
f10_15 sf
(let obj1 =)S
199 319 :M
(  { serialized, protected,)S
199 341 :M
(    ...)S
334 341 :M
f12_15 sf
(\(other fields\))S
199 363 :M
f10_15 sf
(    migrate =>)S
199 385 :M
(      meth\(self, engineName\))S
199 407 :M
(        migrateProc\(self, engineName\);)S
199 429 :M
(      end};)S
199 460 :M
(let remoteObj1 = obj1.migrate\()S
f10_14 sf
(")S
f10_15 sf
(Engine1@Site1)S
f10_14 sf
(")S
603 460 :M
f10_15 sf
<29>S
145 488 :M
f6_15 sf
.432 .043(Because of serialization, the object state cannot change during a call to )J
f14_15 sf
.059<D2>A
f10_15 sf
.176(migrate)A
f14_15 sf
.059<D3>A
f6_15 sf
.372 .037(. The call returns a)J
145 506 :M
.87 .087(network reference to the remote clone that can be used in place of )J
f14_15 sf
.129<D2>A
f10_15 sf
.387(obj1)A
f14_15 sf
.129<D3>A
f6_15 sf
1.06 .106( \(which, anyway has been)J
145 524 :M
(delegated to the clone\).)S
172 542 :M
.306 .031(We still need to explain how migration can work for protected objects, since such objects are pro)J
762 542 :M
(-)S
145 560 :M
.631 .063(tected against external cloning and delegation. Note the )J
491 560 :M
f14_15 sf
<D2>S
f10_15 sf
.748 .075(migrateProc\(self, ...\))J
f14_15 sf
<D3>S
f6_15 sf
.268 .027( call above,)J
145 578 :M
(where )S
f14_15 sf
<D2>S
f10_15 sf
(self)S
f14_15 sf
<D3>S
f6_15 sf
( is bound to )S
302 578 :M
f14_15 sf
<D2>S
f10_15 sf
(obj1)S
f14_15 sf
<D3>S
f6_15 sf
(. It causes the execution of:)S
199 608 :M
f10_15 sf
(engine\(proc\(arg\) clone\(obj1\) end\))S
145 636 :M
f6_15 sf
.236 .024(Rather subtly, the cloning of )J
322 636 :M
f14_15 sf
<D2>S
f10_15 sf
.092(obj1)A
f14_15 sf
<D3>S
f6_15 sf
.215 .021( here is self-inflicted \(section 3.4\), even though it happens at a site)J
145 654 :M
.717 .072(different from the site of the object. According to the general definition, )J
f14_15 sf
.097<D2>A
f10_15 sf
.29(clone\(obj1\))A
f14_15 sf
.097<D3>A
f6_15 sf
.6 .06( is self-in)J
761 654 :M
(-)S
145 672 :M
.74 .074(flicted because )J
f14_15 sf
.086<D2>A
f10_15 sf
.257(obj1)A
f14_15 sf
.086<D3>A
f6_15 sf
.534 .053( is the same as the self of the last active method of the current thread, which is)J
145 690 :M
f14_15 sf
.194<D2>A
f10_15 sf
.582(migrate)A
f14_15 sf
.194<D3>A
f6_15 sf
1.672 .167(. The delegation operation is similarly self-inflicted. Therefore, the protected status of)J
145 708 :M
f14_15 sf
<D2>S
f10_15 sf
(obj1)S
f14_15 sf
<D3>S
f6_15 sf
( does not inhibit self-initiated migration.)S
172 726 :M
.293 .029(Migration permanently modifies the original object, redirecting all operations to the remote clone.)J
145 744 :M
(In particular, if )S
f14_15 sf
<D2>S
f10_15 sf
(obj1)S
f14_15 sf
<D3>S
f6_15 sf
( is asked to migrate again, the remote clone will properly migrate.)S
172 762 :M
.392 .039(We now make the example a bit more interesting by assuming that the migrating object )J
f14_15 sf
.052<D2>A
f10_15 sf
.157(obj1)A
f14_15 sf
.052<D3>A
f6_15 sf
.199 .02( is)J
145 780 :M
.064 .006(publicly available through a name server. The )J
425 780 :M
f14_15 sf
<D2>S
f10_15 sf
.02(migrate)A
f14_15 sf
<D3>S
f6_15 sf
.053 .005( method can register the migrated object with)J
145 798 :M
(the name server under the old name:)S
199 828 :M
f10_15 sf
(let obj1 =)S
199 850 :M
(  net_export\("obj1", )S
f12_15 sf
(NameServer)S
f10_15 sf
(,)S
199 872 :M
(    { serialized, protected,)S
199 894 :M
(      ...)S
199 916 :M
(      migrate =>)S
199 938 :M
(        meth\(self, engineName\))S
199 960 :M
(          net_export\("obj1", )S
f12_15 sf
(NameServer)S
f10_15 sf
(,)S
199 982 :M
(            migrate\(self, engineName\)\);)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1001.24 -.24 .24 288.24 1001 .24 145 1001 @a
145 1017 :M
f6_13 sf
(3)S
152 1021 :M
f6_12 sf
( \322Captain, we have a problem. We tele)S
338 1021 :M
(ported an instance of yourself successfully to the planet. But you here failed to disin-)S
145 1033 :M
(tegrate. This is most unfortunate; if you could just step into this waste recycler ...\323)S
endp
%%Page: 30 30
%%BeginPageSetup
initializepage
(luca; page: 30 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(24)S
199 163 :M
f10_15 sf
(        end};)S
145 191 :M
f6_15 sf
.137 .014(This way, old clients of )J
291 191 :M
f14_15 sf
<D2>S
f10_15 sf
.039(obj1)A
f14_15 sf
<D3>S
f6_15 sf
.103 .01( go through aliasing indirections, but new clients acquiring )J
f14_15 sf
<D2>S
f10_15 sf
.039(obj1)A
f14_15 sf
<D3>S
f6_15 sf
.102 .01( from)J
145 209 :M
(the name server operate directly on the migrated object.)S
145 253 :M
f1_18 sf
(5.8)S
185 253 :M
(Application Servers)S
172 281 :M
f6_15 sf
.076 .008(Visual Obliq [Bharat, Brown 1994] is an interactive distributed-application and user-interface gen-)J
145 299 :M
.198 .02(erator, based on Obliq. All distributed applications built in Visual Obliq follow the same model, which)J
145 317 :M
.102 .01(we may call the application server model. In this model, a centralized server supplies interested clients,)J
145 335 :M
1.048 .105(dynamically, with both the client code and the client user interface of a distributed application. The)J
145 353 :M
.829 .083(code transmitted to each client retains lexical bindings to the server site, allowing it to communicate)J
145 371 :M
.004 0(with the server and with other clients. Each client may have separate local state, and may present a sep)J
761 371 :M
(-)S
145 389 :M
(arate view of the application to the user. A typical example is a distributed tic-tac-toe game.)S
145 435 :M
f1_21 sf
(6.)S
172 435 :M
(Syntax Overview)S
145 464 :M
f10_14 sf
(TOP-LEVEL PHRASES)S
478 464 :M
f6_14 sf
(any term or definition ended by )S
f14_15 sf
<D2>S
f10_14 sf
(;)S
670 464 :M
f14_15 sf
<D3>S
145 482 :M
f10_14 sf
(  a;)S
145 509 :M
(DEFINITIONS )S
246 509 :M
f6_14 sf
(\(denoted by )S
316 509 :M
f14_15 sf
<D2>S
f10_14 sf
(d)S
f14_15 sf
<D3>S
f6_14 sf
(; identifiers are denoted by )S
484 509 :M
f14_15 sf
<D2>S
f10_14 sf
(x)S
f14_15 sf
<D3>S
f6_14 sf
(, terms are denoted by )S
626 509 :M
f14_15 sf
<D2>S
f10_14 sf
(a)S
f14_15 sf
<D3>S
f6_14 sf
<29>S
145 527 :M
f10_14 sf
(  )S
162 527 :M
f13_14 sf
(let)S
f10_14 sf
( x)S
204 530 :M
f10_10 sf
(1)S
f13_14 sf
0 -3 rm
(=)S
0 3 rm
f10_14 sf
0 -3 rm
(a)S
0 3 rm
227 530 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f10_10 sf
(n)S
f13_14 sf
0 -3 rm
(=)S
0 3 rm
f10_14 sf
0 -3 rm
(a)S
0 3 rm
306 530 :M
f10_10 sf
(n)S
478 527 :M
f6_14 sf
(definition of constant identifiers)S
145 545 :M
f10_14 sf
(  )S
162 545 :M
f13_14 sf
(let)S
f10_14 sf
( )S
f13_14 sf
(rec)S
221 545 :M
f10_14 sf
( x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f13_14 sf
(=)S
f10_14 sf
(a)S
260 548 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f10_10 sf
(n)S
f13_14 sf
0 -3 rm
(=)S
0 3 rm
f10_14 sf
0 -3 rm
(a)S
0 3 rm
339 548 :M
f10_10 sf
(n)S
478 545 :M
f6_14 sf
(definition of recursive procedures)S
145 563 :M
f10_14 sf
(  )S
162 563 :M
f13_14 sf
(var)S
f10_14 sf
( x)S
204 566 :M
f10_10 sf
(1)S
f13_14 sf
0 -3 rm
(=)S
0 3 rm
f10_14 sf
0 -3 rm
(a)S
0 3 rm
227 566 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f10_10 sf
(n)S
f13_14 sf
0 -3 rm
(=)S
0 3 rm
f10_14 sf
0 -3 rm
(a)S
0 3 rm
306 566 :M
f10_10 sf
(n)S
478 563 :M
f6_14 sf
(definition of updatable identifiers)S
145 590 :M
f10_14 sf
(SEQUENCES )S
f6_14 sf
(\(denoted by )S
299 590 :M
f14_15 sf
<D2>S
f10_14 sf
(s)S
f14_15 sf
<D3>S
f6_14 sf
<29>S
478 590 :M
(each )S
f14_15 sf
<D2>S
f10_14 sf
(a)S
519 593 :M
f10_10 sf
(i)S
f14_15 sf
0 -3 rm
<D3>S
0 3 rm
f6_14 sf
0 -3 rm
( \(a term or a definition\) is)S
0 3 rm
145 608 :M
f10_14 sf
(  a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(;...;a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
478 608 :M
f6_14 sf
(executed; yields )S
f14_15 sf
<D2>S
f10_14 sf
(a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f14_15 sf
<D3>S
f6_14 sf
( \(or )S
f14_15 sf
<D2>S
f10_14 sf
(ok)S
635 608 :M
f14_15 sf
<D3>S
f6_14 sf
( if n=0\))S
145 635 :M
f10_14 sf
(TERMS )S
f6_14 sf
(\(denoted by )S
265 635 :M
f14_15 sf
<D2>S
f10_14 sf
(a)S
277 635 :M
f14_15 sf
<D3>S
f6_14 sf
(, )S
f14_15 sf
<D2>S
f10_14 sf
(b)S
f14_15 sf
<D3>S
f6_14 sf
(, )S
f14_15 sf
<D2>S
f10_14 sf
(c)S
320 635 :M
f14_15 sf
<D3>S
f6_14 sf
(; identifiers are denoted by )S
f14_15 sf
<D2>S
f10_14 sf
(x)S
488 635 :M
f14_15 sf
<D3>S
f6_14 sf
(, )S
f14_15 sf
<D2>S
f10_14 sf
(l)S
f14_15 sf
<D3>S
f6_14 sf
(; libraries are denoted by )S
655 635 :M
f14_15 sf
<D2>S
f10_14 sf
(m)S
f14_15 sf
<D3>S
f6_14 sf
<29>S
145 653 :M
f10_14 sf
(  x)S
289 653 :M
(m_x)S
478 653 :M
f6_14 sf
(identifiers)S
145 671 :M
f10_14 sf
(  x)S
f13_14 sf
(:=)S
187 671 :M
f10_14 sf
(a)S
478 671 :M
f6_14 sf
(assignment)S
145 698 :M
f10_14 sf
(  )S
162 698 :M
f13_14 sf
(ok)S
179 698 :M
f10_14 sf
(  )S
f13_14 sf
(true)S
229 698 :M
f10_14 sf
(  )S
246 698 :M
f13_14 sf
(false)S
f10_14 sf
(  'a'  "abc"  3  1.5)S
478 698 :M
f6_14 sf
(constants)S
145 725 :M
f10_14 sf
(  [a)S
179 728 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
(])S
0 3 rm
478 725 :M
f6_14 sf
(arrays)S
145 743 :M
f10_14 sf
(  a[b])S
289 743 :M
(a[b])S
323 743 :M
f13_14 sf
(:=)S
f10_14 sf
(c)S
478 743 :M
f6_14 sf
(array selection, array update)S
145 761 :M
f10_14 sf
(  a[b)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
( for b)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_14 sf
(])S
289 761 :M
(a[b)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
( for b)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_14 sf
(])S
f13_14 sf
(:=)S
401 761 :M
f10_14 sf
(c)S
478 761 :M
f6_14 sf
(subarray selection, subarray update)S
145 788 :M
f10_14 sf
(  )S
162 788 :M
f13_14 sf
(option)S
f10_14 sf
( l => s )S
f13_14 sf
(end)S
478 788 :M
f6_14 sf
(term )S
f14_15 sf
<D2>S
f10_14 sf
(s)S
519 788 :M
f14_15 sf
<D3>S
f6_14 sf
( tagged by )S
f14_15 sf
<D2>S
f10_14 sf
(l)S
595 788 :M
f14_15 sf
<D3>S
145 815 :M
f10_14 sf
(  )S
162 815 :M
f13_14 sf
(proc)S
f10_14 sf
(\(x)S
212 818 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
(\) s )S
0 3 rm
308 815 :M
f13_14 sf
(end)S
478 815 :M
f6_14 sf
(procedures)S
145 833 :M
f10_14 sf
(  a\(b)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(,...,b)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_14 sf
<29>S
478 833 :M
f6_14 sf
(procedure invocation)S
145 851 :M
f10_14 sf
(  m_x\(a)S
204 854 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
478 851 :M
f6_14 sf
(invocation of )S
556 851 :M
f14_15 sf
<D2>S
f10_14 sf
(x)S
f14_15 sf
<D3>S
f6_14 sf
( from library )S
f14_15 sf
<D2>S
f10_14 sf
(m)S
657 851 :M
f14_15 sf
<D3>S
145 869 :M
f10_14 sf
(  a b c)S
478 869 :M
f6_14 sf
(infix \(right-ass.\) version of )S
f14_15 sf
<D2>S
f10_14 sf
(b\(a,c\))S
686 869 :M
f14_15 sf
<D3>S
145 896 :M
f10_14 sf
(  )S
162 896 :M
f13_14 sf
(meth)S
f10_14 sf
(\(x,x)S
229 899 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
(\) s )S
0 3 rm
325 896 :M
f13_14 sf
(end)S
478 896 :M
f6_14 sf
(method with self )S
576 896 :M
f14_15 sf
<D2>S
f10_14 sf
(x)S
f14_15 sf
<D3>S
145 914 :M
f10_14 sf
(  {l)S
179 917 :M
f10_10 sf
(1)S
f13_14 sf
0 -3 rm
(=>)S
0 3 rm
202 914 :M
f10_14 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(,...,l)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f13_14 sf
(=>)S
289 914 :M
f10_14 sf
(a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_14 sf
(})S
478 914 :M
f6_14 sf
(object with fields named )S
620 914 :M
f14_15 sf
<D2>S
f10_14 sf
(l)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_14 sf
(...)S
651 914 :M
f14_15 sf
<D2>S
f10_14 sf
(l)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f14_15 sf
<D3>S
145 932 :M
f10_14 sf
(  {)S
f13_14 sf
(protected)S
246 932 :M
f10_14 sf
(, )S
263 932 :M
f13_14 sf
(serialized)S
f10_14 sf
(, ...})S
478 932 :M
f6_14 sf
(protected and serialized object)S
145 950 :M
f10_14 sf
(  {l)S
179 953 :M
f10_10 sf
(1)S
f13_14 sf
0 -3 rm
(=>alias)S
0 3 rm
244 950 :M
f10_14 sf
( l)S
261 953 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(of)S
0 3 rm
292 950 :M
f10_14 sf
( a)S
309 953 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
349 950 :M
f10_14 sf
(,...})S
478 950 :M
f6_14 sf
(object with delegated fields)S
145 968 :M
f10_14 sf
(  a.l    a.l\(a)S
263 971 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(, ..., a)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
478 968 :M
f6_14 sf
(field selection / method invocation)S
145 986 :M
f10_14 sf
(  a.l)S
f13_14 sf
(:=)S
204 986 :M
f10_14 sf
(b)S
478 986 :M
f6_14 sf
(field update / method override)S
145 1004 :M
f10_14 sf
(  )S
162 1004 :M
f13_14 sf
(clone)S
f10_14 sf
(\(a)S
221 1007 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
478 1004 :M
f6_14 sf
(object cloning)S
endp
%%Page: 31 31
%%BeginPageSetup
initializepage
(luca; page: 31 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(25)S
145 160 :M
f10_14 sf
(  a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(.l)S
193 163 :M
f10_10 sf
(1)S
f13_14 sf
0 -3 rm
(:=alias)S
0 3 rm
258 160 :M
f10_14 sf
( l)S
275 163 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(of)S
0 3 rm
306 160 :M
f10_14 sf
( a)S
323 163 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 160 :M
f6_14 sf
(field delegation)S
145 178 :M
f13_14 sf
(  delegate )S
f10_14 sf
(a)S
246 181 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(to)S
0 3 rm
277 178 :M
f10_14 sf
( a)S
294 181 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 178 :M
f6_14 sf
(object delegation)S
145 205 :M
f10_14 sf
(  d)S
478 205 :M
f6_14 sf
(definition)S
145 223 :M
f10_14 sf
(  )S
162 223 :M
f13_14 sf
(if)S
179 223 :M
f10_14 sf
( s)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
( )S
f13_14 sf
(then)S
243 223 :M
f10_14 sf
( s)S
260 226 :M
f10_10 sf
(2)S
478 223 :M
f6_14 sf
(conditional)S
145 241 :M
f10_14 sf
(    )S
179 241 :M
f13_14 sf
(elsif)S
f10_14 sf
( s)S
f10_10 sf
0 3 rm
(3)S
0 -3 rm
f10_14 sf
( )S
f13_14 sf
(then)S
285 241 :M
f10_14 sf
( s)S
302 244 :M
f10_10 sf
(4)S
f10_14 sf
0 -3 rm
(... )S
0 3 rm
342 241 :M
f13_14 sf
(else)S
f10_14 sf
( s)S
392 244 :M
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 241 :M
f6_14 sf
(  \()S
490 241 :M
f14_15 sf
<D2>S
f10_14 sf
(elsif)S
f14_15 sf
<D3>S
f6_14 sf
(, )S
f14_15 sf
<D2>S
f10_14 sf
(else)S
f14_15 sf
<D3>S
f6_14 sf
( optional\))S
145 259 :M
f10_14 sf
(  a )S
179 259 :M
f13_14 sf
(andif)S
f10_14 sf
( b)S
289 259 :M
(a )S
306 259 :M
f13_14 sf
(orif)S
f10_14 sf
( b)S
478 259 :M
f6_14 sf
(conditional conjunction/disjunction)S
145 277 :M
f10_14 sf
(  )S
162 277 :M
f13_14 sf
(case)S
f10_14 sf
( s )S
221 277 :M
f13_14 sf
(of )S
f10_14 sf
(l)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(\(x)S
277 280 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
f13_14 sf
0 -3 rm
(=>)S
0 3 rm
308 277 :M
f10_14 sf
(s)S
317 280 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,...,)S
0 3 rm
478 277 :M
f6_14 sf
(case over the tag )S
f14_15 sf
<D2>S
f10_14 sf
(l)S
587 280 :M
f10_10 sf
(i)S
f14_15 sf
0 -3 rm
<D3>S
0 3 rm
f6_14 sf
0 -3 rm
( of an option value)S
0 3 rm
145 295 :M
f10_14 sf
(    l)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_14 sf
(\(x)S
210 298 :M
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
f13_14 sf
0 -3 rm
(=>)S
0 3 rm
241 295 :M
f10_14 sf
(s)S
250 298 :M
f10_10 sf
(n)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(else)S
0 3 rm
298 295 :M
f10_14 sf
( s)S
315 298 :M
f10_10 sf
(0)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 295 :M
f6_14 sf
(  binding )S
f14_15 sf
<D2>S
f10_14 sf
(x)S
543 298 :M
f10_10 sf
(i)S
f14_15 sf
0 -3 rm
<D3>S
0 3 rm
f6_14 sf
0 -3 rm
( in )S
0 3 rm
570 295 :M
f14_15 sf
<D2>S
f10_14 sf
(s)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_14 sf
( \()S
f14_15 sf
<D2>S
f10_14 sf
(else)S
635 295 :M
f14_15 sf
<D3>S
f6_14 sf
( optional\))S
145 313 :M
f10_14 sf
(  )S
162 313 :M
f13_14 sf
(loop)S
f10_14 sf
( s )S
221 313 :M
f13_14 sf
(end)S
478 313 :M
f6_14 sf
(loop)S
145 331 :M
f10_14 sf
(  )S
162 331 :M
f13_14 sf
(for)S
f10_14 sf
( i=a )S
f13_14 sf
(to)S
246 331 :M
f10_14 sf
( b )S
f13_14 sf
(do)S
288 331 :M
f10_14 sf
( s )S
f13_14 sf
(end)S
478 331 :M
f6_14 sf
(iteration through successive integers)S
145 349 :M
f10_14 sf
(  )S
162 349 :M
f13_14 sf
(foreach)S
221 349 :M
f10_14 sf
( i )S
f13_14 sf
(in)S
263 349 :M
f10_14 sf
( a )S
f13_14 sf
(do)S
305 349 :M
f10_14 sf
( s )S
f13_14 sf
(end)S
478 349 :M
f6_14 sf
(iteration through an array)S
145 367 :M
f10_14 sf
(  )S
162 367 :M
f13_14 sf
(foreach)S
221 367 :M
f10_14 sf
( i )S
f13_14 sf
(in)S
263 367 :M
f10_14 sf
( a )S
f13_14 sf
(map)S
f10_14 sf
( s )S
f13_14 sf
(end)S
478 367 :M
f6_14 sf
(yielding an array of the results)S
145 385 :M
f10_14 sf
(  )S
162 385 :M
f13_14 sf
(exit)S
478 385 :M
f6_14 sf
(exit the innermost loop, for, foreach)S
145 412 :M
f10_14 sf
(  )S
162 412 :M
f13_14 sf
(exception)S
f10_14 sf
(\("exc"\))S
478 412 :M
f6_14 sf
(new exception value named )S
f14_15 sf
<D2>S
f10_14 sf
(exc)S
666 412 :M
f14_15 sf
<D3>S
145 430 :M
f10_14 sf
(  )S
162 430 :M
f13_14 sf
(raise)S
f10_14 sf
(\(a\))S
478 430 :M
f6_14 sf
(raise an exception)S
145 448 :M
f10_14 sf
(  )S
162 448 :M
f13_14 sf
(try)S
f10_14 sf
( s )S
f13_14 sf
(except)S
478 448 :M
f6_14 sf
(exception capture)S
145 466 :M
f10_14 sf
(    a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f13_14 sf
(=>)S
210 466 :M
f10_14 sf
(s)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_14 sf
(,...,a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f13_14 sf
(=>)S
297 466 :M
f10_14 sf
(s)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_14 sf
( )S
f13_14 sf
(else)S
353 466 :M
f10_14 sf
( s)S
370 469 :M
f10_10 sf
(0)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 466 :M
f6_14 sf
(  \()S
490 466 :M
f14_15 sf
<D2>S
f10_14 sf
(else)S
f14_15 sf
<D3>S
f6_14 sf
( optional\))S
145 484 :M
f10_14 sf
(  )S
162 484 :M
f13_14 sf
(try)S
f10_14 sf
( s)S
204 487 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(finally)S
0 3 rm
277 484 :M
f10_14 sf
( s)S
294 487 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 484 :M
f6_14 sf
(finalization)S
145 511 :M
f10_14 sf
(  )S
162 511 :M
f13_14 sf
(condition)S
f10_14 sf
(\(\)  )S
271 511 :M
f13_14 sf
(signal)S
f10_14 sf
(\(a\))S
347 511 :M
f13_14 sf
(  broadcast)S
f10_14 sf
(\(a\))S
478 511 :M
f6_14 sf
(creating and signaling a condition)S
145 529 :M
f10_14 sf
(  )S
162 529 :M
f13_14 sf
(watch)S
f10_14 sf
( s)S
221 532 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(until)S
0 3 rm
f10_14 sf
0 -3 rm
( s)S
0 3 rm
294 532 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 529 :M
f6_14 sf
(waiting for a signal and a boolean guard)S
145 547 :M
f10_14 sf
(  )S
162 547 :M
f13_14 sf
(fork)S
f10_14 sf
(\(a)S
212 550 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,a)S
0 3 rm
235 550 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
f13_14 sf
0 -3 rm
(   join)S
0 3 rm
308 547 :M
f10_14 sf
(\(a\))S
478 547 :M
f6_14 sf
(forking and joining a thread)S
145 565 :M
f10_14 sf
(  )S
162 565 :M
f13_14 sf
(pause)S
f10_14 sf
(\(a\))S
478 565 :M
f6_14 sf
(pausing the current thread)S
145 592 :M
f10_14 sf
(  )S
162 592 :M
f13_14 sf
(mutex)S
f10_14 sf
<2829>S
478 592 :M
f6_14 sf
(creating a mutex)S
145 610 :M
f10_14 sf
(  )S
162 610 :M
f13_14 sf
(lock)S
f10_14 sf
( s)S
212 613 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(do)S
0 3 rm
243 610 :M
f10_14 sf
( s)S
260 613 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
( )S
0 3 rm
f13_14 sf
0 -3 rm
(end)S
0 3 rm
478 610 :M
f6_14 sf
(locking a mutex in a scope)S
145 628 :M
f10_14 sf
(  )S
162 628 :M
f13_14 sf
(wait)S
f10_14 sf
(\(a)S
212 631 :M
f10_10 sf
(1)S
f10_14 sf
0 -3 rm
(,a)S
0 3 rm
235 631 :M
f10_10 sf
(2)S
f10_14 sf
0 -3 rm
<29>S
0 3 rm
478 628 :M
f6_14 sf
(waiting on a mutex for a condition)S
145 655 :M
f10_14 sf
(  \(s\))S
478 655 :M
f6_14 sf
(block structure / precedence group)S
145 710 :M
f1_21 sf
(7.)S
172 710 :M
(Conclusions)S
172 739 :M
f6_15 sf
.026 .003(Obliq addresses a very dynamic form of distributed programming, where objects can delegate their)J
145 757 :M
.289 .029(behavior over the network, and where computations can roam between network sites. We feel that this)J
145 775 :M
.221 .022(kind of programming is still in its infancy, and that not all the fundamental issues can yet be addressed)J
145 793 :M
.73 .073(at once. Where in doubt, we have given precedence to flexible mechanism over robust methodology,)J
145 811 :M
.232 .023(hoping that methodology will develop with experience. In this spirit, for example, Obliq could be used)J
145 829 :M
-.004(to experiment in the design and implementation of agent/place paradigms )A
590 829 :M
-.004([White 1994], using the basic)A
145 847 :M
(techniques of section 5.)S
145 875 :M
f7_15 sf
(Related Work)S
172 903 :M
f6_15 sf
2.356 .236(Obliq\325s features and application domains overlap with programming languages such as ML)J
145 921 :M
.919 .092([Milner, Tofte, Harper 1989; Reppy 1991])J
408 921 :M
1.089 .109(, Modula-3 )J
482 921 :M
.748 .075([Nelson 1991])J
570 921 :M
1.225 .122(, and Self )J
636 921 :M
.863 .086([Ungar, Smith 1987])J
764 921 :M
(,)S
145 939 :M
4.899 .49(with scripting languages such as Tcl )J
414 939 :M
4.043 .404([Ousterhout 1994], AppleScript [Apple 1993], VBA)J
145 957 :M
.979 .098([Brockschmidt 1994; Mansfield 1994])J
382 957 :M
1.358 .136(, and Telescript )J
485 957 :M
1.121 .112([White 1994], and with distributed languages)J
145 975 :M
(such as Orca [Bal, Kaashoek, Tanenbaum 1992])S
435 975 :M
(, Fort\216 )S
478 975 :M
([Fort\216 1994], and Facile [Thomsen, )S
f4_15 sf
(et al.)S
724 975 :M
f6_15 sf
( 1993])S
763 975 :M
(.)S
172 993 :M
.362 .036(None of these languages, however, has the same mix of features as Obliq, particularly concerning)J
145 1011 :M
.083 .008(the distribution aspects. Our choice of features was largely determined by the idea of a distributed lexi)J
761 1011 :M
(-)S
endp
%%Page: 32 32
%%BeginPageSetup
initializepage
(luca; page: 32 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(26)S
145 160 :M
f6_15 sf
.378 .038(cally scoped language, by the desire for a simple object model that would scale up to distributed com)J
762 160 :M
(-)S
145 178 :M
(putation, and by the availability of a sophisticated network-objects implementation technology.)S
172 196 :M
1.416 .142(The Obliq object primitives were designed in parallel with work on the type theory of objects)J
145 214 :M
([Abadi, Cardelli 1994]; distributed scoping and distributed semantics, however, are not treated there.)S
145 242 :M
f7_15 sf
(Status)S
172 270 :M
f6_15 sf
.149 .015(Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it)J
145 288 :M
1.779 .178(has been used extensively as a scripting language for algorithm animation [Brown 1994])J
713 288 :M
2.336 .234( and 3D)J
145 306 :M
1.347 .135(graphics [Najork, Brown 1994])J
341 306 :M
1.546 .155(, and as the basis of a distributed-application builder \(Visual Obliq)J
145 324 :M
([Bharat, Brown 1994]\).)S
172 342 :M
1.153 .115(The Obliq implementation provides access to many popular Modula-3 libraries [Horning, )J
f4_15 sf
.836 .084(et al.)J
145 360 :M
f6_15 sf
(1993])S
180 360 :M
.342 .034( and to an extensive user interface tool kit [Brown, Meehan 1994]. Obliq can be used as a stand-)J
145 378 :M
.976 .098(alone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing)J
145 396 :M
(them to interact remotely through Obliq scripts.)S
172 414 :M
2.914 .291(The implementation and complete documentation is available on the World Wide Web at)J
145 432 :M
f14_15 sf
<D2>S
f6_15 sf
(http://www.)S
f14_15 sf
(-)S
f6_15 sf
(research.)S
274 432 :M
f14_15 sf
(-)S
f6_15 sf
(digital.)S
f14_15 sf
(-)S
f6_15 sf
(com/)S
346 432 :M
f14_15 sf
(-)S
f6_15 sf
(SRC/)S
f14_15 sf
(-)S
f6_15 sf
(home.)S
f14_15 sf
(-)S
f6_15 sf
(html)S
443 432 :M
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 460 :M
f7_15 sf
(Future Work)S
172 488 :M
f6_15 sf
(Issues of authentication, security, authority delegation, and accounting remain to be explored.)S
145 534 :M
f1_21 sf
(Acknowledgments)S
172 563 :M
f6_15 sf
.155 .015(The Network Objects project at SRC provided the infrastructure without which Obliq would never)J
145 581 :M
.002 0(have been thought of. Alan Knaff implemented the metaparser layer used in the Obliq parser.)J
endp
%%Page: 33 33
%%BeginPageSetup
initializepage
(luca; page: 33 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(27)S
145 188 :M
f1_21 sf
(A.)S
172 188 :M
(Language Reference)S
172 217 :M
f6_15 sf
.722 .072(This section describes the syntax and semantics of the Obliq language. Interactions with the sur)J
762 217 :M
(-)S
145 235 :M
.801 .08(rounding system environment are described in section B. Interactions with the surrounding program)J
762 235 :M
(-)S
145 253 :M
(ming environment are described in section C.)S
145 297 :M
f1_18 sf
(A.1)S
185 297 :M
(Syntactic Structures)S
172 325 :M
f6_15 sf
.301 .03(We begin with an overview of some principles that pervade the syntax of Obliq. While the formal)J
145 343 :M
.35 .035(grammar has the final word \(section A.6\), these principles should help in predicting the correct syntax)J
145 361 :M
(to be used in programs.)S
172 379 :M
2.046 .205(Obliq\325s syntactic structures can be classified into )J
495 379 :M
f4_15 sf
.149(identifiers)A
f6_15 sf
.168 .017(, )J
f4_15 sf
.17(definitions)A
630 379 :M
f6_15 sf
.899 .09(, )J
f4_15 sf
.958(terms)A
f6_15 sf
1.893 .189(, and )J
714 379 :M
f4_15 sf
2.085 .209(term se-)J
145 397 :M
.133(quences)A
f6_15 sf
.532 .053(. Definitions establish bindings, terms denote values, and term sequences represent sequential)J
145 415 :M
(evaluation. )S
215 415 :M
f4_15 sf
-.005(Final commas)A
f6_15 sf
-.004( in term and definition lists, as well as )A
532 415 :M
f4_15 sf
(final semicolons)S
630 415 :M
f6_15 sf
-.004( in term sequences, are)A
145 433 :M
(always optional.)S
145 465 :M
f1_15 sf
(A.1.1)S
185 465 :M
(Identifiers)S
172 493 :M
f6_15 sf
.055 .006(Obliq\325s )J
221 493 :M
f4_15 sf
.028 .003(unqualified identifiers)J
354 493 :M
f6_15 sf
.05 .005( are either case sensitive sequences of alphanumerics beginning with)J
145 511 :M
.328 .033(a letter, or sequences of special characters \(section A.5\). By convention, identifiers used for constants,)J
145 529 :M
.347 .035(variables, procedures, fields, and methods begin with a lower case letter, and are internally capitalized)J
145 547 :M
(on word boundaries. Type identifiers \(section A.4.1\) begin with an upper case letter.)S
172 565 :M
f4_15 sf
.203 .02(Qualified identifiers)J
294 565 :M
f6_15 sf
.423 .042( have the form )J
f14_15 sf
.077<D2>A
f10_15 sf
.231(m_x)A
f14_15 sf
.077<D3>A
f6_15 sf
.419 .042( where )J
f14_15 sf
.077<D2>A
f10_15 sf
.231(m)A
f14_15 sf
.077<D3>A
f6_15 sf
.204 .02( is a )J
510 565 :M
f4_15 sf
(library)S
552 565 :M
f6_15 sf
.369 .037( name \(alphanumeric\), and )J
719 565 :M
f14_15 sf
.077<D2>A
f10_15 sf
.231(x)A
f14_15 sf
.077<D3>A
f6_15 sf
.325 .033( is an)J
145 583 :M
1.524 .152(unqualified identifier. By convention, the names of built-in libraries begin with lower case letters,)J
145 601 :M
(while the names of user libraries begin with an upper case letter.)S
172 619 :M
.579 .058(All identifiers are )J
f4_15 sf
.978 .098(lexically scoped)J
f6_15 sf
.635 .064(. Unqualified identifiers are subject to block scoping, while li)J
761 619 :M
(-)S
145 637 :M
(brary names are scoped in a global environment.)S
172 655 :M
f4_15 sf
1.227 .123(Field names)J
f6_15 sf
.81 .081( \(for object and option values\) have the same lexical structure as unqualified identi)J
762 655 :M
(-)S
145 673 :M
(fiers. Field names are not subject to scoping.)S
145 705 :M
f1_15 sf
(A.1.2)S
185 705 :M
(Definitions)S
172 733 :M
f6_15 sf
.572 .057(Definitions begin with either )J
353 733 :M
f14_15 sf
.056<D2>A
f10_15 sf
.169(let)A
f14_15 sf
.056<D3>A
f6_15 sf
.117 .012(, )J
f14_15 sf
.056<D2>A
f10_15 sf
.739 .074(let rec)J
461 733 :M
f14_15 sf
.221<D3>A
f6_15 sf
.728 .073(, or )J
490 733 :M
f14_15 sf
.066<D2>A
f10_15 sf
.197(var)A
f14_15 sf
.066<D3>A
f6_15 sf
.531 .053(, followed by a comma-separated list of)J
145 751 :M
.327 .033(binders, which bind unqualified identifiers to terms. A )J
f14_15 sf
<D2>S
f10_15 sf
.121(let)A
f14_15 sf
<D3>S
f6_15 sf
.407 .041( definition introduces constant identifiers,)J
145 769 :M
1.614 .161(while a )J
197 769 :M
f14_15 sf
.108<D2>A
f10_15 sf
.325(var)A
f14_15 sf
.108<D3>A
f6_15 sf
.962 .096( definition introduces assignable identifiers \(variables\). A )J
f14_15 sf
.108<D2>A
f10_15 sf
.325(let\312rec)A
f14_15 sf
.108<D3>A
f6_15 sf
.944 .094( definition intro)J
762 769 :M
(-)S
145 787 :M
(duces a collection of identifiers bound to mutually recursive procedures.)S
145 819 :M
f1_15 sf
(A.1.3)S
185 819 :M
(Terms)S
172 847 :M
f6_15 sf
.803 .08(The Obliq language is value-oriented: almost every syntactic structure is a )J
f4_15 sf
.305(term)A
665 847 :M
f6_15 sf
.959 .096(, and every term)J
145 865 :M
.011 .001(produces a value. Terms whose main purpose is to cause side-effects produce the value )J
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
(. Terms can)S
145 883 :M
(be classified into )S
f4_15 sf
(identifier terms)S
f6_15 sf
(, )S
350 883 :M
f4_15 sf
(data terms)S
414 883 :M
f6_15 sf
(, )S
f4_15 sf
(constructs)S
483 883 :M
f6_15 sf
(, and )S
516 883 :M
f4_15 sf
(operations)S
f6_15 sf
(.)S
172 901 :M
f4_15 sf
(Identifier terms)S
265 901 :M
f6_15 sf
( are qualified or unqualified identifiers.)S
172 919 :M
f4_15 sf
(Data terms)S
f6_15 sf
( have specialized syntax for various built-in data structures.)S
172 937 :M
f4_15 sf
.136(Constructs)A
f6_15 sf
.508 .051( have individual specialized syntax, but whenever they begin with a keyword they end)J
145 955 :M
(with the keyword )S
254 955 :M
f14_15 sf
<D2>S
f10_15 sf
(end)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 973 :M
f4_15 sf
(Operations)S
240 973 :M
f6_15 sf
.55 .055( can be either prefix or infix. A prefix operation consists of an term \(indicating an op-)J
145 991 :M
.477 .048(eration, or evaluating to a procedure\) followed by a parenthesized, comma-separated, list of argument)J
145 1009 :M
.257 .026(terms. An infix operation consists of a term, an unqualified identifier, and another term. Every unqual)J
762 1009 :M
(-)S
145 1027 :M
.391 .039(ified identifier that denotes a built-in binary operator or a binary procedure can be used with both pre)J
762 1027 :M
(-)S
endp
%%Page: 34 34
%%BeginPageSetup
initializepage
(luca; page: 34 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(28)S
145 160 :M
f6_15 sf
.089 .009(fix and infix syntax. The operator )J
f14_15 sf
<D2>S
f10_15 sf
(-)S
f14_15 sf
<D3>S
f6_15 sf
.088 .009( \(minus\) can be simply placed in front of a term, without requiring)J
145 178 :M
(parentheses.)S
145 210 :M
f1_15 sf
(A.1.4)S
185 210 :M
(Term Sequences)S
172 238 :M
f6_15 sf
.45 .045(Term sequences are lists of terms separated by semicolons: they indicate the sequential execution)J
145 256 :M
.564 .056(of terms from left to right. Semicolons are used in Obliq exclusively to indicate sequential execution;)J
145 274 :M
(all other kinds of lists are separated by commas.)S
172 292 :M
.128 .013(Definitions happen to be terms as well \(their value is always the constant )J
617 292 :M
f14_15 sf
<D2>S
f10_15 sf
.048(ok)A
f14_15 sf
<D3>S
f6_15 sf
.114 .011(\), and hence may ap-)J
145 310 :M
.681 .068(pear in sequences. Definitions establish bindings whose scope extends to the whole sequence to their)J
145 328 :M
(right.)S
145 360 :M
f1_15 sf
(A.1.5)S
185 360 :M
(Built-In Operators)S
172 388 :M
f6_15 sf
.937 .094(All built-in operators are available as qualified names through a set of built-in libraries. For ex)J
762 388 :M
(-)S
145 406 :M
.785 .079(ample, real addition is )J
f14_15 sf
.11<D2>A
f10_15 sf
.33(real_+\(r)A
f10_10 sf
0 3 rm
.22(1)A
0 -3 rm
f10_15 sf
.33(,r)A
f10_10 sf
0 3 rm
.22(2)A
0 -3 rm
f10_15 sf
.33<29>A
f14_15 sf
.11<D3>A
f6_15 sf
.538 .054( from the )J
f14_15 sf
.11<D2>A
f10_15 sf
.33(real)A
f14_15 sf
.11<D3>A
f6_15 sf
.998 .1( built-in library. Common built-in opera-)J
145 424 :M
.861 .086(tions are made available also without library qualification, mostly in the form of infix operators. So,)J
145 442 :M
f14_15 sf
<D2>S
f10_15 sf
(r)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(+r)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( is also admitted.)S
145 474 :M
f1_15 sf
(A.1.6)S
185 474 :M
(Operator Precedence)S
172 502 :M
f6_15 sf
.561 .056(Operator precedence is the same for all infix operators, both built-in and user-defined. All opera)J
762 502 :M
(-)S
145 520 :M
1.525 .153(tors are right-associative, and evaluate their arguments from left to right. Infix operators bind less)J
145 538 :M
1.138 .114(tightly than procedure call, object selection, and array indexing. Parentheses can be used for prece)J
761 538 :M
(-)S
145 556 :M
(dence grouping.)S
172 574 :M
.957 .096(The minus sign for negative number literals is )J
f14_15 sf
.13<D2>A
f6_15 sf
.352(~)A
f14_15 sf
.13<D3>A
f6_15 sf
.739 .074(; this is not an operator: it is part of the literal.)J
145 592 :M
1.643 .164(The form )J
210 592 :M
f14_15 sf
.172<D2>A
f10_15 sf
.515(-n)A
f14_15 sf
.172<D3>A
f6_15 sf
.979 .098( is equivalent to )J
f14_15 sf
.172<D2>A
f10_15 sf
.515(0-n)A
f14_15 sf
.172<D3>A
f6_15 sf
1.389 .139(, particularly with respect to operator precedence. As a conse)J
762 592 :M
(-)S
145 610 :M
(quence of these rules, )S
279 610 :M
f14_15 sf
<D2>S
f10_15 sf
(-5-3)S
f14_15 sf
<D3>S
f6_15 sf
( )S
f14_15 sf
(7)S
335 610 :M
f6_15 sf
( )S
f14_15 sf
<D2>S
f10_15 sf
(0-5-3)S
f14_15 sf
<D3>S
f6_15 sf
( )S
393 610 :M
f14_15 sf
(7)S
f6_15 sf
( )S
407 610 :M
f14_15 sf
<D2>S
f10_15 sf
(0-\(5-3\))S
f14_15 sf
<D3>S
f6_15 sf
( = )S
492 610 :M
f14_15 sf
<D2>S
f10_15 sf
(~2)S
f14_15 sf
<D3>S
f6_15 sf
(, while )S
f14_15 sf
<D2>S
f10_15 sf
(~5-3)S
f14_15 sf
<D3>S
f6_15 sf
( = )S
618 610 :M
f14_15 sf
<D2>S
f10_15 sf
(~8)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 654 :M
f1_18 sf
(A.2)S
185 654 :M
(Data Structures)S
172 682 :M
f6_15 sf
.322 .032(A network address is a pair consisting of a )J
435 682 :M
f4_15 sf
.232 .023(site address)J
507 682 :M
f6_15 sf
.393 .039( and a )J
548 682 :M
f4_15 sf
.557 .056(memory address)J
f6_15 sf
.218 .022( at that site. The se)J
762 682 :M
(-)S
145 700 :M
.42 .042(mantics of Obliq data can be described consistently by considering all addresses as network addresses)J
145 718 :M
-.007(in the sense above. Obliq data structures are assembled out of network addresses, just like ordinary data)A
145 736 :M
.305 .031(structures are assembled out of local addresses \(more precisely, the implementation is designed to cre)J
762 736 :M
(-)S
145 754 :M
.349 .035(ate this illusion\). With this proviso, Obliq data structures can be discussed with almost no reference to)J
145 772 :M
(the existence of multiple sites.)S
145 804 :M
f1_15 sf
(A.2.1)S
185 804 :M
(Value Identity)S
172 832 :M
f6_15 sf
.545 .055(A value is a data structure that is the result of an Obliq computation. Values may )J
674 832 :M
f4_15 sf
.064(share)A
f6_15 sf
.288 .029( substruc)J
762 832 :M
(-)S
145 850 :M
.738 .074(tures. Updates to shared substructures may be visible from separate value roots. To understand when)J
145 868 :M
.153 .015(and how sharing occurs, it is critical to know under what circumstances two Obliq values are )J
f4_15 sf
.045(identical)A
763 868 :M
f6_15 sf
(.)S
145 886 :M
(The entire network semantics of Obliq can be glimped by the details of this definition.)S
172 904 :M
.395 .04(The infix operator )J
287 904 :M
f14_15 sf
<D2>S
f10_15 sf
.145(is)A
f14_15 sf
<D3>S
f6_15 sf
.37 .037( determines value identity. It returns a boolean on every pair of arguments,)J
145 922 :M
(including pairs of different types. Its negation is the operator )S
513 922 :M
f14_15 sf
<D2>S
f10_15 sf
(isnot)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 952 :M
f10_15 sf
(a is b)S
361 952 :M
f6_15 sf
(is )S
375 952 :M
f10_15 sf
(a)S
f6_15 sf
( identical to )S
f10_15 sf
(b)S
f6_15 sf
(?)S
199 974 :M
f10_15 sf
(a isnot b)S
361 974 :M
f6_15 sf
(is )S
375 974 :M
f10_15 sf
(a)S
f6_15 sf
( not identical to )S
f10_15 sf
(b)S
f6_15 sf
(?)S
172 1002 :M
.299 .03(A value maintains its identity as long as it is not copied: copying a value produces a )J
f4_15 sf
.107(similar)A
730 1002 :M
f6_15 sf
.325 .033( value)J
145 1020 :M
.798 .08(which is not identical to it. For the basic types \(ok, booleans, integers, reals, chars, texts, and excep)J
762 1020 :M
(-)S
endp
%%Page: 35 35
%%BeginPageSetup
initializepage
(luca; page: 35 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(29)S
145 160 :M
f6_15 sf
.325 .033(tions\), we imagine that there is a single instance of each value, which is never copied. For other types,)J
145 178 :M
.797 .08(values are copied by specific operations, such as object cloning and array concatenation, and by net)J
762 178 :M
(-)S
145 196 :M
(work transmission.)S
172 214 :M
.986 .099(Most importantly, values are )J
355 214 :M
f4_15 sf
.243(not)A
f6_15 sf
.937 .094( copied on identifier definition and access, on local assignment)J
145 232 :M
.372 .037(and update, or on local parameter passing and result. In these situations, a value may become a shared)J
145 250 :M
.179 .018(substructure of two or more other structures. Values with state \(objects and arrays\) are not copied even)J
145 268 :M
(on remote versions of the situation above.)S
172 286 :M
1.047 .105(Let us spell out the consequences for )J
409 286 :M
f14_15 sf
.128<D2>A
f10_15 sf
.383(is)A
f14_15 sf
.128<D3>A
f6_15 sf
.734 .073(. For basic types the )J
f14_15 sf
.128<D2>A
f10_15 sf
.383(is)A
f14_15 sf
.128<D3>A
f6_15 sf
1.059 .106( predicate corresponds to se)J
762 286 :M
(-)S
145 304 :M
.902 .09(mantic value equality. For example, an integer is another integer if they are the same number, and a)J
145 322 :M
(text is another text if they contain the same sequence of characters.)S
172 340 :M
.46 .046(For objects and arrays, the )J
f14_15 sf
.066<D2>A
f10_15 sf
.199(is)A
f14_15 sf
.066<D3>A
f6_15 sf
.567 .057( predicate corresponds to equality of the network addresses where)J
145 358 :M
(the actual objects and arrays \(not their network references\) are stored.)S
172 376 :M
1.243 .124(For most other types \(options, closures, readers, and writers\), the )J
586 376 :M
f14_15 sf
.107<D2>A
f10_15 sf
.322(is)A
f14_15 sf
.107<D3>A
f6_15 sf
.995 .099( predicate corresponds to)J
145 394 :M
(equality of the local addresses where the values are stored.)S
172 412 :M
.627 .063(Finally, certain data types make sense only within a site \(local threads, mutexes, conditions, pro)J
762 412 :M
(-)S
145 430 :M
.313 .031(cesses, forms\); network transmission of these values is inhibited. These values are identical when they)J
145 448 :M
(are stored at the same local address.)S
145 480 :M
f1_15 sf
(A.2.2)S
185 480 :M
(Constants)S
172 508 :M
f6_15 sf
(The constants literals are listed below, see section A.5 for the lexical details.)S
199 538 :M
f10_15 sf
(ok)S
334 538 :M
f6_15 sf
(a trivial constant, returned by side-effecting operations)S
199 560 :M
f10_15 sf
(true, false)S
334 560 :M
f6_15 sf
(booleans, see section B.6.2.)S
199 582 :M
f10_15 sf
(0)S
f6_15 sf
(, )S
216 582 :M
f10_15 sf
(1)S
f6_15 sf
(, )S
f10_15 sf
(~1)S
f6_15 sf
(, ...)S
334 582 :M
(integers, see section B.6.3.)S
199 604 :M
f10_15 sf
(0.)S
f6_15 sf
(, )S
225 604 :M
f10_15 sf
(0.1)S
f6_15 sf
(, )S
f10_15 sf
(~0.1)S
f6_15 sf
(, ...)S
334 604 :M
(reals, see sections B.6.4 and B.6.5.)S
199 626 :M
(')S
202 626 :M
f10_15 sf
(a)S
f6_15 sf
(')S
334 626 :M
(chars, see section B.6.6.)S
199 648 :M
f10_15 sf
("abc")S
334 648 :M
f6_15 sf
(text strings, see section B.6.7.)S
172 676 :M
.434 .043(The constant )J
f14_15 sf
.053<D2>A
f10_15 sf
.159(ok)A
f14_15 sf
.053<D3>A
f6_15 sf
.424 .042( can be used to mean \322uninitialized\323 in variable declarations. For characters and)J
145 694 :M
.676 .068(strings, escape sequences \()J
f10_15 sf
.216<5C5C>A
f6_15 sf
.163 .016(, )J
336 694 :M
f10_15 sf
.394(\\')A
f6_15 sf
.274 .027(, )J
f10_15 sf
.394(\\")A
f6_15 sf
.298 .03(, )J
389 694 :M
f10_15 sf
.394(\\n)A
f6_15 sf
.298 .03(, )J
416 694 :M
f10_15 sf
.394(\\r)A
f6_15 sf
.274 .027(, )J
f10_15 sf
.394(\\t)A
f6_15 sf
.298 .03(, )J
469 694 :M
f10_15 sf
.349(\\f)A
f6_15 sf
.242 .024(, )J
f10_15 sf
.349<5C>A
f12_15 sf
.349(xxx)A
f6_15 sf
.404 .04( for )J
559 694 :M
f12_15 sf
.248(xxx)A
f6_15 sf
.611 .061( octal\) are supported with the)J
145 712 :M
(usual meaning \(section A.5\).)S
145 744 :M
f1_15 sf
(A.2.3)S
185 744 :M
(Operators)S
172 772 :M
f6_15 sf
.34 .034(Here is the list of all the predefined unqualified operators. On the left, we list the built-in libraries)J
145 790 :M
.017 .002(they belong to. For the list of all built-in libraries \(and hence of all qualified and unqualified operators\),)J
145 808 :M
(see section B.6. Operators evaluate all their arguments from left to right.)S
199 838 :M
f10_15 sf
(bool)S
f6_15 sf
(:)S
307 838 :M
f10_15 sf
(not and or)S
199 860 :M
(int)S
f6_15 sf
(:)S
307 860 :M
f10_15 sf
(%)S
199 882 :M
(real)S
f6_15 sf
(:)S
307 882 :M
f10_15 sf
(+ - * / > < >= <= float round)S
199 904 :M
(text)S
f6_15 sf
(:)S
307 904 :M
f10_15 sf
(&)S
199 926 :M
(array)S
f6_15 sf
(:)S
307 926 :M
f10_15 sf
(# @)S
172 954 :M
f6_15 sf
.185 .018(The )J
f14_15 sf
<D2>S
f10_15 sf
.086(not)A
f14_15 sf
<D3>S
f6_15 sf
.206 .021( operator is prefix \(that is, its argument must be parenthesized\). The )J
647 954 :M
f14_15 sf
<D2>S
f10_15 sf
.1(and)A
f14_15 sf
<D3>S
f6_15 sf
.135 .014( and )J
710 954 :M
f14_15 sf
<D2>S
f10_15 sf
.056(or)A
f14_15 sf
<D3>S
f6_15 sf
.134 .013( infix)J
145 972 :M
.954 .095(operators evaluate both arguments \(but see also section A.3.5\). These operators accept only boolean)J
145 990 :M
(arguments.)S
172 1008 :M
(The infix )S
f14_15 sf
<D2>S
f10_15 sf
(%)S
f14_15 sf
<D3>S
f6_15 sf
( operator is integer modulo.)S
endp
%%Page: 36 36
%%BeginPageSetup
initializepage
(luca; page: 36 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(30)S
172 160 :M
f6_15 sf
.286 .029(The operators on real numbers are overloaded with corresponding operators on integers. The infix)J
145 178 :M
.004 0(arithmetic operators on reals accept also pairs of integers and return an integer, but do not accept mixed)J
145 196 :M
.864 .086(integer-real arguments. The infix comparison operators on reals similarly accept a pair of integer ar)J
762 196 :M
(-)S
145 214 :M
-.003(guments, but not mixed arguments. The prefix operators )A
f14_15 sf
<D2>S
f10_15 sf
(float)S
f14_15 sf
<D3>S
f6_15 sf
( and )S
f14_15 sf
<D2>S
f10_15 sf
(round)S
f14_15 sf
<D3>S
618 214 :M
f6_15 sf
-.004( accept both integers and)A
145 232 :M
(reals. The form )S
241 232 :M
f14_15 sf
<D2>S
f10_15 sf
(-n)S
f14_15 sf
<D3>S
f6_15 sf
( is equivalent to )S
f14_15 sf
<D2>S
f10_15 sf
(0-n)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 250 :M
(The infix )S
f14_15 sf
<D2>S
f10_15 sf
(&)S
f14_15 sf
<D3>S
f6_15 sf
( operator is text concatenation.)S
172 268 :M
(The prefix )S
239 268 :M
f14_15 sf
<D2>S
f10_15 sf
(#)S
f14_15 sf
<D3>S
f6_15 sf
( operator is array size; the infix )S
f14_15 sf
<D2>S
f10_15 sf
(@)S
f14_15 sf
<D3>S
f6_15 sf
( operator is array concatenation.)S
145 300 :M
f1_15 sf
(A.2.4)S
185 300 :M
(Arrays)S
172 328 :M
f6_15 sf
(Arrays have fixed size \(once allocated\), with zero-based indexing.)S
199 358 :M
f10_15 sf
([1,2,3,4])S
415 358 :M
f6_15 sf
(array)S
199 380 :M
f10_15 sf
(#\(a\))S
415 380 :M
f6_15 sf
(array size)S
199 402 :M
f10_15 sf
(a[0])S
415 402 :M
f6_15 sf
(array indexing)S
199 424 :M
f10_15 sf
(a[0]:=2)S
415 424 :M
f6_15 sf
(array update)S
199 446 :M
f10_15 sf
(a[1 for 2])S
415 446 :M
f6_15 sf
(subarray extraction, from index 1 for length 2)S
199 468 :M
f10_15 sf
(a[1 for 3]:=b)S
415 468 :M
f6_15 sf
(subarray update)S
199 490 :M
f10_15 sf
(a @ b)S
415 490 :M
f6_15 sf
(array concatenation)S
172 518 :M
.565 .057(All array operations are bound-checked. When the array is remote, each indexing and update op)J
761 518 :M
(-)S
145 536 :M
(eration causes a network communication.)S
172 554 :M
.474 .047(Subarray extraction and array concatenation produce local copies of possibly remote arrays. Note)J
145 572 :M
.037 .004(that array values are always shared, unless explicitly copied by these two operations \(or copied element)J
145 590 :M
(by element\).)S
172 608 :M
.312 .031(Subarray extraction, subarray update, and array concatenation cause at most one network commu)J
762 608 :M
(-)S
145 626 :M
(nication for each argument.)S
172 644 :M
.716 .072(Subarray update operates correctly even when updating overlapping segments of the same array.)J
145 662 :M
.178 .018(The source array must be at least as long as the destination array; if it is longer, only its initial segment)J
145 680 :M
(is used.)S
172 698 :M
(See also section B.6.8, which includes operations to initialize arrays from values and iterators.)S
145 730 :M
f1_15 sf
(A.2.5)S
185 730 :M
(Options)S
172 758 :M
f6_15 sf
.158 .016(An option value is a pair of a tag \(syntactically, an identifier\) and a value. Such a tag can be tested)J
145 776 :M
.453 .045(by a case statement, which discriminates between a set of expected tags. No operation other than case)J
145 794 :M
(is defined on option values.)S
199 824 :M
f10_15 sf
(option x => 3 end)S
415 824 :M
f6_15 sf
(an option of tag )S
f10_15 sf
(x)S
f6_15 sf
( and value )S
588 824 :M
f10_15 sf
(3)S
145 866 :M
f1_15 sf
(A.2.6)S
185 866 :M
(Objects)S
172 894 :M
f6_15 sf
.15 .015(Objects are collections of )J
330 894 :M
f4_15 sf
.037(fields)A
f6_15 sf
( )S
366 894 :M
f14_15 sf
<D2>S
f10_15 sf
.103(x)A
f10_10 sf
0 3 rm
.069(i)A
0 -3 rm
f6_15 sf
( )S
388 894 :M
f10_15 sf
.104(=>)A
f6_15 sf
( )S
410 894 :M
f10_15 sf
.097(a)A
f10_10 sf
0 3 rm
.065(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.184 .018(, where )J
f14_15 sf
<D2>S
f10_15 sf
.097(x)A
f10_10 sf
0 3 rm
.065(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.086 .009( is a )J
526 894 :M
f4_15 sf
.318 .032(field name)J
f6_15 sf
.128 .013(, and )J
f14_15 sf
<D2>S
f10_15 sf
.091(a)A
f10_10 sf
0 3 rm
.061(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.124 .012( is a term. A )J
722 894 :M
f4_15 sf
(method)S
145 912 :M
(field)S
172 912 :M
f6_15 sf
.216 .022( is a field that contains a method closure. An )J
f4_15 sf
.349 .035(alias field)J
506 912 :M
f6_15 sf
.226 .023( is a field that contains an alias. Otherwise,)J
145 930 :M
(a field is called a )S
f4_15 sf
(value field)S
313 930 :M
f6_15 sf
(.)S
199 960 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(})S
496 960 :M
f6_15 sf
(for n)S
cF
f2_15 sf
<B3>S
sf
(0)S
172 988 :M
1.239 .124(Objects may have two )J
317 988 :M
f4_15 sf
.164(attributes)A
f6_15 sf
.205 .02(: )J
384 988 :M
f4_15 sf
(protected)S
441 988 :M
f6_15 sf
1.546 .155( and )J
474 988 :M
f4_15 sf
.192(serialized)A
f6_15 sf
.766 .077( \(section A.2.7\) The keywords )J
f14_15 sf
.099<D2>A
f10_15 sf
.395(pro-)A
145 1006 :M
.418(tected)A
f14_15 sf
.139<D3>A
f6_15 sf
.788 .079( and/or )J
253 1006 :M
f14_15 sf
.177<D2>A
f10_15 sf
.529(serialized)A
f14_15 sf
.177<D3>A
f6_15 sf
1.238 .124( may be placed after the left brace, each optionally followed by a)J
145 1024 :M
(comma.)S
endp
%%Page: 37 37
%%BeginPageSetup
initializepage
(luca; page: 37 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(31)S
172 160 :M
f6_15 sf
.358 .036(An aliased field denotes a field within another object. Most operations on aliases are redirected to)J
145 178 :M
(the fields they denote, as described in section A.2.6.)S
199 208 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => alias x of a end, ... })S
496 208 :M
f6_15 sf
(an alias for field )S
598 208 :M
f10_15 sf
(x)S
f6_15 sf
( of object )S
f10_15 sf
(a)S
145 236 :M
f6_15 sf
(An error is produced if the object )S
349 236 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
( does not have the field )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 254 :M
(We now describe the primitive operations on objects.)S
145 282 :M
f7_15 sf
( )S
149 282 :M
(Selection)S
199 313 :M
f10_15 sf
(a.x)S
145 341 :M
f6_15 sf
.77 .077(If )J
160 341 :M
f14_15 sf
.099<D2>A
f10_15 sf
.298(x)A
f14_15 sf
.099<D3>A
f6_15 sf
.563 .056( is a value field, then the value is returned. If )J
f14_15 sf
.099<D2>A
f10_15 sf
.298(x)A
f14_15 sf
.099<D3>A
f6_15 sf
.637 .064( is a method field containing a method of no ar)J
762 341 :M
(-)S
145 359 :M
.882 .088(guments, then the method is invoked by supplying )J
f10_15 sf
.334(a)A
f6_15 sf
.694 .069( as its first parameter, and its result \(or error, or)J
145 377 :M
.614 .061(exception\) is returned. If )J
f14_15 sf
.081<D2>A
f10_15 sf
.244(x)A
f14_15 sf
.081<D3>A
f6_15 sf
.393 .039( is an alias field for )J
439 377 :M
f14_15 sf
.113<D2>A
f10_15 sf
.34(x)A
f10_10 sf
0 3 rm
.227(0)A
0 -3 rm
f14_15 sf
.113<D3>A
f6_15 sf
.329 .033( of )J
482 377 :M
f14_15 sf
.08<D2>A
f10_15 sf
.24(a)A
f10_10 sf
0 3 rm
.16(0)A
0 -3 rm
f14_15 sf
.08<D3>A
f6_15 sf
.38 .038(, then )J
542 377 :M
f14_15 sf
.053<D2>A
f10_15 sf
.158(a)A
f10_10 sf
0 3 rm
.105(0)A
0 -3 rm
f10_15 sf
.158(.x)A
f10_10 sf
0 3 rm
.105(0)A
0 -3 rm
f14_15 sf
.053<D3>A
f6_15 sf
.382 .038( is executed. Selection fails if)J
145 395 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( is not a field of )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 423 :M
f7_15 sf
(Invocation)S
199 454 :M
f10_15 sf
(a.x\(b)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,b)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
469 454 :M
f6_15 sf
(for n)S
cF
f2_15 sf
<B3>S
sf
(0)S
145 482 :M
.055 .006(If )J
159 482 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
.038 .004( is a method field containing a method of n+1 arguments, then the method is invoked by supplying)J
145 500 :M
f14_15 sf
<D2>S
f10_15 sf
.153 .015(\(a, b)J
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.131 .013(, ... ,b)J
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
.109 .011( as its arguments, evaluated from left to right. The computed result \(or error, or)J
145 518 :M
.266 .027(exception\) is returned. If )J
f14_15 sf
<D2>S
f10_15 sf
.106(x)A
f14_15 sf
<D3>S
f6_15 sf
.168 .017( is an alias field for )J
f14_15 sf
<D2>S
f10_15 sf
.106(x)A
f10_10 sf
0 3 rm
.07(0)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.102 .01( of )J
476 518 :M
f14_15 sf
<D2>S
f10_15 sf
.098(a)A
f10_10 sf
0 3 rm
.066(0)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.156 .016(, then )J
535 518 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
.045(.x)A
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
.045(\(b)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.132 .013(, ... ,b)J
674 521 :M
f10_10 sf
(n)S
f10_15 sf
0 -3 rm
.062<29>A
0 3 rm
f14_15 sf
0 -3 rm
<D3>S
0 3 rm
f6_15 sf
0 -3 rm
.161 .016( is executed.)J
0 3 rm
145 536 :M
.569 .057(Invocation fails if )J
f14_15 sf
.077<D2>A
f10_15 sf
.232(x)A
f14_15 sf
.077<D3>A
f6_15 sf
.321 .032( is not a field of )J
f14_15 sf
.077<D2>A
f10_15 sf
.232(a)A
f14_15 sf
.077<D3>A
f6_15 sf
.392 .039(. If the object )J
476 536 :M
f14_15 sf
<D2>S
f10_15 sf
.12(a)A
f14_15 sf
<D3>S
f6_15 sf
.346 .035( is serialized, the method executes atomically)J
145 554 :M
(with respect to other methods of the object.)S
145 582 :M
f7_15 sf
(Updating and Overriding)S
199 613 :M
f10_15 sf
(a.x:=b)S
145 641 :M
f6_15 sf
.665 .067(If )J
160 641 :M
f14_15 sf
.088<D2>A
f10_15 sf
.262(x)A
f14_15 sf
.088<D3>A
f6_15 sf
.464 .046( is a value or method field of )J
f14_15 sf
.088<D2>A
f10_15 sf
.262(a)A
f14_15 sf
.088<D3>A
f6_15 sf
.565 .057(, its contents are replaced by )J
552 641 :M
f14_15 sf
.132<D2>A
f10_15 sf
.395(b)A
f14_15 sf
.132<D3>A
f6_15 sf
.389 .039(, If )J
590 641 :M
f14_15 sf
.098<D2>A
f10_15 sf
.292(x)A
f14_15 sf
.098<D3>A
f6_15 sf
.466 .047( is an alias field for )J
f14_15 sf
.098<D2>A
f10_15 sf
.292(x)A
f10_10 sf
0 3 rm
.195(0)A
0 -3 rm
f14_15 sf
.098<D3>A
f6_15 sf
.44 .044( of)J
145 659 :M
f14_15 sf
<D2>S
f10_15 sf
.085(a)A
f10_10 sf
0 3 rm
.057(0)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.134 .013(, then )J
204 659 :M
f14_15 sf
<D2>S
f10_15 sf
.07(a)A
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
.07(.x)A
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
.07(:=b)A
f14_15 sf
<D3>S
f6_15 sf
.144 .014( is executed. The result value is )J
f14_15 sf
<D2>S
f10_15 sf
.07(ok)A
f14_15 sf
<D3>S
f6_15 sf
.145 .014(. The operation fails if )J
633 659 :M
f14_15 sf
<D2>S
f10_15 sf
.13(x)A
f14_15 sf
<D3>S
f6_15 sf
.183 .018( is not a field of )J
748 659 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 677 :M
(The operation fails if it is not self-inflicted and )S
430 677 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
( is protected.)S
145 705 :M
f7_15 sf
(Cloning)S
199 736 :M
f10_15 sf
(clone\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ... ,a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
496 736 :M
f6_15 sf
(for n)S
cF
f2_15 sf
<B3>S
sf
(1)S
145 764 :M
1.538 .154(Provided that all the fields in the )J
361 764 :M
f14_15 sf
.162<D2>A
f10_15 sf
.486(a)A
f10_10 sf
0 3 rm
.324(i)A
0 -3 rm
f14_15 sf
.162<D3>A
f6_15 sf
1.319 .132( have distinct names, cloning produces an object whose field)J
145 782 :M
.508 .051(names are the union of the field names of the )J
f14_15 sf
.081<D2>A
f10_15 sf
.243(a)A
f10_10 sf
0 3 rm
.162(i)A
0 -3 rm
f14_15 sf
.081<D3>A
f6_15 sf
.551 .055(, and whose contents are )J
603 782 :M
f4_15 sf
.087(identical)A
f6_15 sf
.34 .034( \(section A.2.1\) to)J
145 800 :M
.045 .004(the contents of the corresponding fields of the )J
425 800 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.04 .004(. The attributes of the resulting object \(protection and)J
145 818 :M
.374 .037(serialization\) are the same as the attributes of )J
f14_15 sf
.053<D2>A
f10_15 sf
.158(a)A
f10_10 sf
0 3 rm
.105(1)A
0 -3 rm
f14_15 sf
.053<D3>A
f6_15 sf
.294 .029(. Cloning fails if one of the )J
615 818 :M
f14_15 sf
<D2>S
f10_15 sf
.097(a)A
f10_10 sf
0 3 rm
.065(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.273 .027( is protected. Cloning)J
145 836 :M
.078 .008(is not in general an atomic operation, but it acts atomically on each )J
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.089 .009( that is serialized. The operation)J
145 854 :M
(fails if it is not self-inflicted on all the )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(\325s that are protected.)S
145 900 :M
f7_15 sf
(Delegation)S
199 931 :M
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(.x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:=alias x)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( of a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
145 959 :M
f6_15 sf
(The field )S
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of )S
244 959 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( is replaced by an alias to the field )S
474 959 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of )S
515 959 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(, whether or not )S
635 959 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( already is aliased.)S
145 977 :M
(The operation fails if )S
275 977 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( is not a field of )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(, or if it is not self-inflicted and )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( is protected.)S
199 1007 :M
f10_15 sf
(delegate a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( to a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
endp
%%Page: 38 38
%%BeginPageSetup
initializepage
(luca; page: 38 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(32)S
145 160 :M
f6_15 sf
.383 .038(The fields of )J
f14_15 sf
.063<D2>A
f10_15 sf
.189(a)A
f10_10 sf
0 3 rm
.126(1)A
0 -3 rm
f14_15 sf
.063<D3>A
f6_15 sf
.42 .042( are replaced by aliases to the similarly named fields of )J
590 160 :M
f14_15 sf
.058<D2>A
f10_15 sf
.174(a)A
f10_10 sf
0 3 rm
.116(2)A
0 -3 rm
f14_15 sf
.058<D3>A
f6_15 sf
.386 .039(. This is an atomic opera)J
762 160 :M
(-)S
145 178 :M
.849 .085(tion \(even if )J
226 178 :M
f14_15 sf
.133<D2>A
f10_15 sf
.399(a)A
f10_10 sf
0 3 rm
.266(1)A
0 -3 rm
f14_15 sf
.133<D3>A
f6_15 sf
.777 .078( is not serialized\): either all or none of the fields of )J
570 178 :M
f14_15 sf
.096<D2>A
f10_15 sf
.287(a)A
f10_10 sf
0 3 rm
.191(1)A
0 -3 rm
f14_15 sf
.096<D3>A
f6_15 sf
.695 .069( are replaced by aliases. The)J
145 196 :M
(operation fails if )S
248 196 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( lacks some of the fields of )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(, or if it is not self-inflicted and )S
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( is protected.)S
145 228 :M
f1_15 sf
(A.2.7)S
185 228 :M
(Protection and Serialization)S
172 256 :M
f6_15 sf
.268 .027(Every object has two attributes that may or may not be enabled: )J
f4_15 sf
.087(protection)A
626 256 :M
f6_15 sf
.121 .012( and )J
f4_15 sf
.06(serialization)A
f6_15 sf
.227 .023(. First)J
145 274 :M
.354 .035(we need the following definitions; let )J
f14_15 sf
<D2>S
f4_15 sf
.115(op)A
f6_15 sf
<28>S
400 274 :M
f10_15 sf
(o)S
f6_15 sf
<29>S
414 274 :M
f14_15 sf
<D3>S
f6_15 sf
.369 .037( be either a select/invoke, update/override, clone, or dele)J
762 274 :M
(-)S
145 292 :M
(gate operation on an object )S
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
(:)S
199 322 :M
(The )S
f4_15 sf
(current method)S
f6_15 sf
( of a thread \(if it exists\) is the last method that was invoked during the)S
217 344 :M
(thread\325s execution but has not yet returned.)S
199 366 :M
(An object operation )S
322 366 :M
f14_15 sf
<D2>S
f4_15 sf
(op)S
f6_15 sf
<28>S
345 366 :M
f10_15 sf
(o)S
f6_15 sf
<29>S
359 366 :M
f14_15 sf
<D3>S
f6_15 sf
( is )S
f4_15 sf
(self-inflicted)S
454 366 :M
f6_15 sf
( iff )S
476 366 :M
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
( is identical to the self of the current method)S
217 388 :M
(\(if any\).)S
145 416 :M
.366 .037(This definition remains valid under circumstances where threads span multiple sites, and where object)J
145 434 :M
(identity tests are to be applied to remote objects.)S
172 452 :M
1.809 .181(On a )J
209 452 :M
f4_15 sf
.229(protected)A
f6_15 sf
1.017 .102( object, all non self-inflicted update/override, cloning, and delegation operations)J
145 470 :M
.251 .025(produce errors. Self-inflicted update/override, cloning, and delegation, and all selection/invocation op)J
761 470 :M
(-)S
145 488 :M
(erations are allowed. Protected objects are declared as follows:)S
199 518 :M
f10_15 sf
({protected, ... })S
172 546 :M
f6_15 sf
.213 .021(A )J
187 546 :M
f4_15 sf
.029(serialized)A
f6_15 sf
.122 .012( object has an associated \(implicit\) mutex. All non self-inflicted operations acquire the)J
145 564 :M
.4 .04(mutex on entry, and release it on completion. Self-inflicted operations do not affect the mutex. Serial)J
761 564 :M
(-)S
145 582 :M
(ized objects are declared as follows:)S
199 612 :M
f10_15 sf
({serialized, ... })S
145 654 :M
f1_15 sf
(A.2.8)S
185 654 :M
(Object and Engine Servers)S
172 682 :M
f6_15 sf
.836 .084(The built-in )J
250 682 :M
f14_15 sf
.096<D2>A
f10_15 sf
.289(net)A
f14_15 sf
.096<D3>A
f6_15 sf
.755 .075( library enables the initial network transmission of objects and engines, by the)J
145 700 :M
(mediation of a name server. An object can be exported to a name server by saying:)S
199 730 :M
f10_15 sf
(net_export\("obj", )S
f12_15 sf
(NameServer)S
f10_15 sf
(, o\))S
145 758 :M
f6_15 sf
.836 .084(where )J
f14_15 sf
.099<D2>A
f10_15 sf
.298(o)A
f14_15 sf
.099<D3>A
f6_15 sf
.504 .05( is the object, )J
289 758 :M
f14_15 sf
.071<D2>A
f12_15 sf
.214(NameServer)A
f14_15 sf
.071<D3>A
f6_15 sf
.484 .048( is a text containing the IP address of the machine running the)J
145 776 :M
.599 .06(desired name server \()J
277 776 :M
f14_15 sf
.089<D2>A
f10_15 sf
.266("")A
f14_15 sf
.089<D3>A
f6_15 sf
.58 .058( is an abbreviation for the local machine\), and the text )J
f14_15 sf
.089<D2>A
f10_15 sf
.266("obj")A
f14_15 sf
.089<D3>A
f6_15 sf
.484 .048( is the regis)J
762 776 :M
(-)S
145 794 :M
.045 .005(tration name for the object. The object is then available through the name server, as long as the site that)J
145 812 :M
-.007(registered it is alive. Registering under an existing name overrides the previous registration. . The result)A
145 830 :M
(of this operation is the object )S
f14_15 sf
<D2>S
f10_15 sf
(o)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 848 :M
(Similarly, an engine can be registered with a name server:)S
199 878 :M
f10_15 sf
(net_exportEngine\("eng", )S
f12_15 sf
(NameServer)S
f10_15 sf
(, arg\))S
145 906 :M
f6_15 sf
(where )S
f14_15 sf
<D2>S
f10_15 sf
(arg)S
f14_15 sf
<D3>S
f6_15 sf
( is a value passed to every procedure executed by the engine. The result is )S
666 906 :M
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 924 :M
(At a separate site \(or the same site\), an object can be imported:)S
199 954 :M
f10_15 sf
(net_import\("obj", "tsktsk.pa.dec.com"\))S
145 982 :M
f6_15 sf
(Now, all object operations can be applied to the resulting remote object.)S
172 1000 :M
(Similarly, a registered engine can be imported:)S
endp
%%Page: 39 39
%%BeginPageSetup
initializepage
(luca; page: 39 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(33)S
199 172 :M
f10_15 sf
(net_importEngine\("eng", )S
f12_15 sf
(NameServer)S
f10_15 sf
(\);)S
145 200 :M
f6_15 sf
.741 .074(The resulting value can be used as a procedure of one argument that, when given a procedure of one)J
145 218 :M
(argument, returns the result of applying that procedure to the )S
514 218 :M
f14_15 sf
<D2>S
f10_15 sf
(arg)S
f14_15 sf
<D3>S
f6_15 sf
( specified in )S
f10_15 sf
("exportEngine")S
f6_15 sf
(.)S
172 236 :M
.475 .048(Each engine execution takes place in the thread of the client. Hence, sequential calls to an engine)J
145 254 :M
.746 .075(from a site execute sequentially. But calls from multiple sites, or from multiple threads within a site,)J
145 272 :M
(execute concurrently.)S
172 290 :M
.552 .055(The final operation available in the )J
f14_15 sf
<D2>S
395 290 :M
f10_15 sf
.271(net)A
f14_15 sf
.09<D3>A
f6_15 sf
.56 .056( library is a net inquiry. It can be applied to objects and)J
145 308 :M
(engines, and returns a string:)S
199 338 :M
f10_15 sf
(net_who\(o\))S
172 366 :M
f6_15 sf
(Communication failures raise the exception )S
f14_15 sf
<D2>S
f10_15 sf
(net_failure)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 384 :M
.491 .049(Certain Obliq built-in values make sense only at the local site, and produce errors on any attempt)J
145 402 :M
.105 .011(to transmit them. These include threads, mutexes, conditions, processes, and forms \(see appendix C\). It)J
145 420 :M
.847 .085(is however easy to bundle the built-in operations for these values into objects, and then export those)J
145 438 :M
.181 .018(objects to the network. In the case of forms )J
411 438 :M
.14 .014([Avrahami, Brooks, Brown 1989])J
615 438 :M
.175 .018(, it is possible to transmit)J
145 456 :M
(a textual form description, and generate the form remotely.)S
172 474 :M
.486 .049(Readers and writers \(appendix B.6.11 and B.6.12\) can be transmitted over the network; then they)J
145 492 :M
1.391 .139(operate as efficient network streams. However, their usage is significantly restricted )J
680 492 :M
1.567 .157([Birrell, )J
f4_15 sf
1.213 .121(et al.)J
145 510 :M
f6_15 sf
(1994])S
180 510 :M
.69 .069(; it is safe to transmit each reader/writer only once away from a site, and from then on to use it)J
145 528 :M
(only at the receiving site, where it can be retransmitted with the same restrictions.)S
172 546 :M
1.96 .196(The alternative of packaging readers/writers within network objects is less efficient, because)J
145 564 :M
-.007(buffering is then done at the wrong end. However, such packaged readers/writers do not suffer from the)A
145 582 :M
1.042 .104(usage restrictions above, since they are not transmitted. The restrictions are still in effect on remote)J
145 600 :M
.18 .018(cloning of objects containing readers/writers. But this does not interfere with object migration \(cloning)J
145 618 :M
.251 .025(plus delegation to remote clones\), as long as the readers/writers are accessed only through methods, so)J
145 636 :M
(that no additional transmissions occur.)S
145 668 :M
f1_15 sf
(A.2.9)S
185 668 :M
(Processor and File System Enablers)S
172 696 :M
f6_15 sf
.22 .022(At each site, an )J
f4_15 sf
.1(enabler)A
316 696 :M
f6_15 sf
.285 .028( for the local processor is bound to the predefined, lexically scoped identi)J
762 696 :M
(-)S
145 714 :M
.292 .029(fier )J
f14_15 sf
.054<D2>A
f10_15 sf
.16(processor)A
f14_15 sf
.054<D3>A
f6_15 sf
.432 .043(. The primitives that start external processes \(e.g. Unix processes\) require a proces)J
762 714 :M
(-)S
145 732 :M
(sor enabler as a parameter. Processor enablers cannot be transmitted.)S
172 750 :M
.379 .038(At each site, an enabler for the local )J
397 750 :M
.335 .034(file system is bound to the predefined, lexically scoped iden)J
762 750 :M
(-)S
145 768 :M
1.248 .125(tifier )J
180 768 :M
f14_15 sf
.161<D2>A
f10_15 sf
.483(fileSys)A
f14_15 sf
.161<D3>A
f6_15 sf
1.129 .113(. Moreover, an enabler for a read-only version of the local file system is bound to)J
145 786 :M
f14_15 sf
<D2>S
f10_15 sf
(fileSysReader)S
f14_15 sf
<D3>S
f6_15 sf
(. The primitives that open files require a file system enabler as a parameter.)S
172 804 :M
.744 .074(File system enablers can be transmitted; multiple file systems can therefore be used at once. Be)J
762 804 :M
(-)S
145 822 :M
.46 .046(cause of lexical scoping, a roaming agent can access the file system of its originating site by referring)J
145 840 :M
(to )S
f14_15 sf
<D2>S
f10_15 sf
(fileSys)S
f14_15 sf
<D3>S
f6_15 sf
( or )S
249 840 :M
f14_15 sf
<D2>S
f10_15 sf
(fileSysReader)S
f14_15 sf
<D3>S
f6_15 sf
( as a free identifier.)S
172 858 :M
1.82 .182(Enablers cannot be obtained dynamically, since they are lexically bound. Therefore, roaming)J
145 876 :M
1.283 .128(agents cannot start local processes, nor access local file systems, unless local enablers are given to)J
145 894 :M
(them explicitly as parameters.)S
145 938 :M
f1_18 sf
(A.3)S
185 938 :M
(Control Structures)S
172 966 :M
f6_15 sf
(In this section we describe the Obliq control structures, including procedures and methods.)S
endp
%%Page: 40 40
%%BeginPageSetup
initializepage
(luca; page: 40 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(34)S
145 156 :M
f1_15 sf
(A.3.1)S
185 156 :M
(Definitions)S
172 184 :M
f6_15 sf
.199 .02(There are three kinds of definitions binding identifiers to values or locations. They can be used ei)J
761 184 :M
(-)S
145 202 :M
(ther in a local scope or at the top-level.)S
199 232 :M
f10_15 sf
(var x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( = a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ..., x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( = a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
199 254 :M
f10_15 sf
(let x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( = a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ..., x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( = a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
199 276 :M
f10_15 sf
(let rec x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( = p)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ..., x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( = p)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
172 304 :M
f6_15 sf
1.078 .108(A )J
188 304 :M
f14_15 sf
.082<D2>A
f10_15 sf
.246(var)A
f14_15 sf
.082<D3>A
f6_15 sf
.628 .063( definition introduces a collection of updatable variables and their initial values. A )J
f14_15 sf
.082<D2>A
f10_15 sf
.246(let)A
f14_15 sf
<D3>S
145 322 :M
f6_15 sf
.06 .006(definition introduces a collection of non-updatable identifiers and their values. A )J
f14_15 sf
<D2>S
f10_15 sf
.021(let\312rec)A
f14_15 sf
<D3>S
f6_15 sf
.073 .007( definition)J
145 340 :M
(introduces a collection of mutually recursive procedures.)S
172 358 :M
.208 .021(In the first two cases, the terms )J
365 358 :M
f14_15 sf
<D2>S
f10_15 sf
.083(a)A
f10_10 sf
0 3 rm
.055(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.186 .019( are all scoped in the context outside the definition. In the third)J
145 376 :M
.155 .015(case, the procedures )J
271 376 :M
f14_15 sf
<D2>S
f10_15 sf
.061(p)A
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.152 .015( are scoped in the outside context extended with the variables being defined. If)J
145 394 :M
(variables are multiply defined, the rightmost one has precedence.)S
172 412 :M
.351 .035(Any of the three forms above can be used at the top-level, followed by a semicolon, to establish a)J
145 430 :M
(top-level binding. See section A.3.3 \(sequencing\) about local scopes.)S
145 462 :M
f1_15 sf
(A.3.2)S
185 462 :M
(Assignment)S
172 490 :M
f6_15 sf
(Variables introduced by )S
320 490 :M
f14_15 sf
<D2>S
f10_15 sf
(var)S
f14_15 sf
<D3>S
f6_15 sf
( denote a storage location that can be assigned to:)S
199 520 :M
f10_15 sf
(x := a)S
145 548 :M
f6_15 sf
(The result of an assignment is the value )S
387 548 :M
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 566 :M
.524 .052(The value contained in the storage location denoted by a variable is accessed simply by mention)J
762 566 :M
(-)S
145 584 :M
(ing the variable.)S
199 614 :M
f10_15 sf
(x := x + 1)S
172 642 :M
f6_15 sf
(As discussed in section 4, a variable can be a network reference.)S
145 674 :M
f1_15 sf
(A.3.3)S
185 674 :M
(Sequencing)S
172 702 :M
f6_15 sf
.198 .02(A collection of definitions and terms \(possibly causing side-effects\), can be sequentially evaluated)J
145 720 :M
(by separating the individual components by semicolons:)S
199 750 :M
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(; ...; a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
145 778 :M
f6_15 sf
(A final semicolon may be added.)S
172 796 :M
.265 .026(Many syntactic contexts, such as bodies of procedures, accept sequences. But other contexts, such)J
145 814 :M
.041 .004(as argument lists, require terms. A sequence is not a term; it can be turned into a term by enclosing it in)J
145 832 :M
(parentheses.)S
172 850 :M
-.006(A sequence can be used to create a local scope, by means of definitions. The result of a sequence is)A
145 868 :M
(the value of its last component. If the last component is a definition, then )S
587 868 :M
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
( results.)S
199 898 :M
f10_15 sf
(\(var x=3; x:=x+1; x\))S
415 898 :M
f6_15 sf
(yields )S
455 898 :M
f10_15 sf
(4)S
145 940 :M
f1_15 sf
(A.3.4)S
185 940 :M
(Procedures and Methods)S
172 968 :M
f6_15 sf
.061 .006(Procedures and methods can be manipulated without restrictions: they can be passed as arguments,)J
145 986 :M
(returned as results, and transmitted over the network.)S
endp
%%Page: 41 41
%%BeginPageSetup
initializepage
(luca; page: 41 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(35)S
199 172 :M
f10_15 sf
(proc\(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(,...,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\) b end)S
442 172 :M
f6_15 sf
(a procedure term, n)S
cF
f2_15 sf
<B3>S
sf
(0)S
199 194 :M
f10_15 sf
(meth\(s,x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(,...,x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\) b end)S
442 194 :M
f6_15 sf
(a method term, n)S
cF
f2_15 sf
<B3>S
sf
(0)S
172 222 :M
.731 .073(A procedure term evaluates to a procedure closure, which is a record of the procedure term with)J
145 240 :M
.207 .021(the value of its free identifiers in the scope where it is evaluated. Similarly, a method term evaluates to)J
145 258 :M
(a method closure.)S
172 276 :M
.282 .028(If the free identifiers of a procedure or method denote entities with state, \(updatable variables, ob)J
762 276 :M
(-)S
145 294 :M
.428 .043(jects, arrays\), and the corresponding closure is sent over the network, then the entities with state \322stay)J
145 312 :M
(behind\323 and are accessed over the network when the closure is activated.)S
172 330 :M
.63 .063(A procedure closure can be activated by an application that provides the correct number of argu)J
762 330 :M
(-)S
145 348 :M
.413 .041(ments; the value of the body is then returned. A method closures must first be installed into an object,)J
145 366 :M
.436 .044(and then can be invoked via object selection. It must be given the correct number of arguments minus)J
145 384 :M
.517 .052(the self parameter; the value computed by its body is then returned. In all cases, arguments are evalu)J
762 384 :M
(-)S
145 402 :M
(ated from left to right.)S
145 434 :M
f1_15 sf
(A.3.5)S
185 434 :M
(Conditionals)S
172 462 :M
f6_15 sf
.429 .043(The syntax of conditional is as shown below. There can be any number of )J
628 462 :M
f14_15 sf
<D2>S
f10_15 sf
.086(elsif)A
f14_15 sf
<D3>S
f6_15 sf
.25 .025( branches, and)J
145 480 :M
.451 .045(the )J
f14_15 sf
.086<D2>A
f10_15 sf
.258(else)A
f14_15 sf
.086<D3>A
f6_15 sf
.645 .065( branch may be omitted. The boolean conditions are executed in sequence, and the )J
f14_15 sf
.086<D2>A
f10_15 sf
.258(then)A
f14_15 sf
<D3>S
145 498 :M
f6_15 sf
-.006(branch corresponding to the first )A
f14_15 sf
<D2>S
f10_15 sf
(true)S
f14_15 sf
<D3>S
f6_15 sf
-.006( condition is executed; otherwise the )A
609 498 :M
f14_15 sf
<D2>S
f10_15 sf
(else)S
f14_15 sf
<D3>S
f6_15 sf
-.005( branch is executed)A
145 516 :M
(\(if absent, )S
209 516 :M
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
( is returned\).)S
199 546 :M
f10_15 sf
(if a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( then a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( elsif a)S
f10_10 sf
0 3 rm
(3)S
0 -3 rm
f10_15 sf
( then a)S
f10_10 sf
0 3 rm
(4)S
0 -3 rm
f10_15 sf
( ... else a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( end)S
172 574 :M
f6_15 sf
(The following boolean connectives are particularly useful in the )S
560 574 :M
f14_15 sf
<D2>S
f10_15 sf
(if)S
f14_15 sf
<D3>S
f6_15 sf
( test of a conditional:)S
199 604 :M
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( andif a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
361 604 :M
f10_15 sf
(\(* if a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( then a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( else false end *\))S
199 626 :M
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( orif a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
361 626 :M
f10_15 sf
(\(* if a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( then true else a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end *\))S
145 668 :M
f1_15 sf
(A.3.6)S
185 668 :M
(Case)S
172 696 :M
f6_15 sf
.045 .005(The syntax of case is as shown below. The )J
433 696 :M
f14_15 sf
<D2>S
f10_15 sf
.016(else)A
f14_15 sf
<D3>S
f6_15 sf
.035 .003( branch may be omitted, and any )J
f14_15 sf
<D2>S
f10_15 sf
(\(x)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
.033 .003( can also)J
145 714 :M
(be omitted.)S
199 744 :M
f10_15 sf
(case a of y)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(\(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(\) => a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ..., y)S
f10_10 sf
0 3 rm
(n-1)S
0 -3 rm
f10_15 sf
(\(x)S
f10_10 sf
0 3 rm
(n-1)S
0 -3 rm
f10_15 sf
(\) => a)S
f10_10 sf
0 3 rm
(n-1)S
0 -3 rm
f10_15 sf
( else a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( end)S
145 772 :M
f6_15 sf
-.006(The term )A
f14_15 sf
<D2>S
f10_15 sf
(a)S
f14_15 sf
<D3>S
f6_15 sf
-.005( must evaluate to an option value of, say, tag t and value v. If t matches one of the )A
712 772 :M
f14_15 sf
<D2>S
f10_15 sf
(y)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(, then)S
145 790 :M
f14_15 sf
.096<D2>A
f10_15 sf
.288(a)A
f10_10 sf
0 3 rm
.192(i)A
0 -3 rm
f14_15 sf
.096<D3>A
f6_15 sf
.572 .057( is executed in a scope where )J
f14_15 sf
.096<D2>A
f10_15 sf
.288(x)A
f10_10 sf
0 3 rm
.192(i)A
0 -3 rm
f14_15 sf
.096<D3>A
f6_15 sf
.588 .059( \(if present\) is bound to v; the resulting value is the result of the)J
145 808 :M
.285 .028(case statement. If t does not match any )J
385 808 :M
f14_15 sf
<D2>S
f10_15 sf
.122(y)A
f10_10 sf
0 3 rm
.081(i)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.25 .025(, and the else branch is present, then )J
f14_15 sf
<D2>S
f10_15 sf
.122(a)A
f10_10 sf
0 3 rm
.081(n)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.261 .026( is executed and its)J
145 826 :M
(value returned. If t does not match any )S
f14_15 sf
<D2>S
f10_15 sf
(y)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(, and the else branch is not present, then an error is reported.)S
145 858 :M
f1_15 sf
(A.3.7)S
185 858 :M
(Iteration)S
172 886 :M
f6_15 sf
.107 .011(The )J
f14_15 sf
<D2>S
f10_15 sf
.05(loop)A
f14_15 sf
<D3>S
f6_15 sf
.13 .013( statement repeatedly executes its body. The )J
512 886 :M
f14_15 sf
<D2>S
f10_15 sf
.033(exit)A
f14_15 sf
<D3>S
f6_15 sf
.106 .011( statement terminates the execution)J
145 904 :M
(of the innermost loop, and causes it to return the value )S
475 904 :M
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
( .)S
199 934 :M
f10_15 sf
(loop a end)S
199 956 :M
(exit)S
172 984 :M
f6_15 sf
1.135 .113(The )J
f14_15 sf
.176<D2>A
f10_15 sf
.528(for)A
f14_15 sf
.176<D3>A
f6_15 sf
1.242 .124( statement introduces a local identifier in the scope of its body, and iterates with the)J
145 1002 :M
1.251 .125(identifier ranging from the integer lower bound to the integer upper bound in increments of 1. The)J
145 1020 :M
(value )S
f14_15 sf
<D2>S
f10_15 sf
(ok)S
f14_15 sf
<D3>S
f6_15 sf
( is returned.)S
endp
%%Page: 42 42
%%BeginPageSetup
initializepage
(luca; page: 42 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(36)S
199 172 :M
f10_15 sf
(for x = a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( to a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( do a)S
f10_10 sf
0 3 rm
(3)S
0 -3 rm
f10_15 sf
( end)S
172 200 :M
f6_15 sf
.64 .064(The )J
f14_15 sf
.099<D2>A
f10_15 sf
.298(foreach)A
f14_15 sf
.099<D3>A
f6_15 sf
.711 .071( statement introduces a local identifier in the scope of its body, and iterates with)J
145 218 :M
.404 .04(the identifier ranging over the elements of an array. In the )J
503 218 :M
f14_15 sf
.051<D2>A
f10_15 sf
.152(do)A
f14_15 sf
.051<D3>A
f6_15 sf
.358 .036( version, the values of the individual it-)J
145 236 :M
.909 .091(erations are discarded, and )J
315 236 :M
f14_15 sf
.127<D2>A
f10_15 sf
.379(ok)A
f14_15 sf
.127<D3>A
f6_15 sf
.723 .072( returned. In the )J
f14_15 sf
.127<D2>A
f10_15 sf
.379(map)A
f14_15 sf
.127<D3>A
f6_15 sf
.919 .092( version, those values are collected in an array)J
145 254 :M
(that is then returned.)S
199 284 :M
f10_15 sf
(foreach x in a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( do a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
199 306 :M
(foreach x in a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( map a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
172 334 :M
f6_15 sf
(The )S
f14_15 sf
<D2>S
f10_15 sf
(exit)S
f14_15 sf
<D3>S
f6_15 sf
-.002( statement can be used to terminate the innermost )A
f14_15 sf
<D2>S
f10_15 sf
(for)S
f14_15 sf
<D3>S
f6_15 sf
( or )S
594 334 :M
f14_15 sf
<D2>S
f10_15 sf
(foreach)S
f14_15 sf
<D3>S
f6_15 sf
( statement. In the)S
145 352 :M
(case of )S
191 352 :M
f14_15 sf
<D2>S
f10_15 sf
(map)S
f14_15 sf
<D3>S
f6_15 sf
(, a shortened array is returned containing the values of the iterations computed so far.)S
145 384 :M
f1_15 sf
(A.3.8)S
185 384 :M
(Concurrency)S
172 412 :M
f6_15 sf
.913 .091(The primitives described in this section are built on top of, and have the same semantics as, the)J
145 430 :M
.68 .068(Modula-3 threads primitives having similar names )J
459 430 :M
.648 .065([Horning, )J
523 430 :M
f4_15 sf
.666 .067(et al.)J
f6_15 sf
.918 .092( 1993])J
594 430 :M
.774 .077(. The full thread interface is)J
145 448 :M
(described in appendix B.6.10.)S
172 466 :M
.63 .063(The )J
f14_15 sf
.098<D2>A
f10_15 sf
.293(mutex)A
f14_15 sf
.098<D3>A
f6_15 sf
.68 .068( primitive returns a new mutex. The )J
479 466 :M
f14_15 sf
.106<D2>A
f10_15 sf
.319(lock)A
f14_15 sf
.106<D3>A
f6_15 sf
.694 .069( statement locks a mutex in a scope, re)J
762 466 :M
(-)S
145 484 :M
.967 .097(turning the value of its second expression. The )J
441 484 :M
f14_15 sf
.103<D2>A
f10_15 sf
.308(fork)A
f14_15 sf
.103<D3>A
f6_15 sf
.804 .08( primitive starts the concurrent execution of a)J
145 502 :M
.219 .022(procedure of no arguments in a new thread, returning the thread; the second parameter is the stack size)J
145 520 :M
.479 .048(for the thread, in words \(0 defaults to a small but non-zero stack size\). The )J
607 520 :M
f14_15 sf
<D2>S
f10_15 sf
.126(join)A
f14_15 sf
<D3>S
f6_15 sf
.329 .033( primitive waits for)J
145 538 :M
.717 .072(the termination of a thread and returns the value of the procedure it executed. The )J
656 538 :M
f14_15 sf
<D2>S
f10_15 sf
.093(pause)A
f14_15 sf
<D3>S
f6_15 sf
.319 .032( primitive)J
145 556 :M
(pauses the current thread for a number of seconds, expressed as a real number.)S
199 586 :M
f10_15 sf
(mutex\(\))S
199 608 :M
(lock a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( do a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
199 630 :M
(fork\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(,a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
<29>S
199 652 :M
(join\(a\))S
199 674 :M
(pause\(a\))S
172 702 :M
f6_15 sf
.058 .006(The )J
f14_15 sf
<D2>S
f10_15 sf
.027(condition)A
f14_15 sf
<D3>S
f6_15 sf
.065 .006( primitive returns a new condition. The )J
f14_15 sf
<D2>S
f10_15 sf
.027(signal)A
f14_15 sf
<D3>S
f6_15 sf
.036 .004( and )J
615 702 :M
f14_15 sf
<D2>S
f10_15 sf
.01(broadcast)A
f14_15 sf
<D3>S
f6_15 sf
.035 .003( primitives)J
145 720 :M
.169 .017(wake up one or all threads, respectively, waiting on a condition. The )J
563 720 :M
f14_15 sf
<D2>S
f10_15 sf
.048(wait)A
f14_15 sf
<D3>S
f6_15 sf
.132 .013( primitive unlocks a mutex)J
145 738 :M
(\(first argument\) until a condition is signaled \(second argument\), then locks the mutex again.)S
199 768 :M
f10_15 sf
(condition\(\))S
199 790 :M
(signal\(a\))S
199 812 :M
(broadcast\(a\))S
199 834 :M
(wait\(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(,a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
<29>S
172 862 :M
f6_15 sf
.08 .008(The )J
f14_15 sf
<D2>S
f10_15 sf
.037(watch)A
f14_15 sf
<D3>S
f6_15 sf
.098 .01( statement is specific to serialized objects, and operates on their implicit mutex. Thus,)J
145 880 :M
(it must occur within a method of a serialized object.)S
199 910 :M
f10_15 sf
(watch a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( until a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
145 938 :M
f6_15 sf
.468 .047(Here, )J
f14_15 sf
.061<D2>A
f10_15 sf
.184(a)A
f10_10 sf
0 3 rm
.123(1)A
0 -3 rm
f14_15 sf
.061<D3>A
f6_15 sf
.332 .033( is a condition and )J
f14_15 sf
.061<D2>A
f10_15 sf
.184(a)A
f10_10 sf
0 3 rm
.123(2)A
0 -3 rm
f14_15 sf
.061<D3>A
f6_15 sf
.433 .043( is a boolean expression. This statement waits for )J
f14_15 sf
.061<D2>A
f10_15 sf
.184(a)A
f10_10 sf
0 3 rm
.123(2)A
0 -3 rm
f14_15 sf
.061<D3>A
f6_15 sf
.439 .044( to become true,)J
145 956 :M
.629 .063(and then terminates. Whenever )J
f14_15 sf
.07<D2>A
f10_15 sf
.208(a)A
f10_10 sf
0 3 rm
.139(2)A
0 -3 rm
f14_15 sf
.07<D3>A
f6_15 sf
.418 .042( is found to be false, the statement waits for )J
f14_15 sf
.07<D2>A
f10_15 sf
.208(a)A
f10_10 sf
0 3 rm
.139(1)A
0 -3 rm
f14_15 sf
.07<D3>A
f6_15 sf
.439 .044( to be signaled be-)J
145 974 :M
.758 .076(fore trying again. The statement is equivalent to )J
446 974 :M
f14_15 sf
.087<D2>A
f10_15 sf
.743 .074(let )J
f12_15 sf
.26(x)A
f10_15 sf
.26(=a)A
f10_10 sf
0 3 rm
.173(1)A
0 -3 rm
f10_15 sf
.715 .072(; loop if a)J
622 977 :M
f10_10 sf
.158(2)A
f10_15 sf
0 -3 rm
.808 .081( then exit else)J
0 3 rm
145 992 :M
.09(wait\()A
f12_15 sf
.09(mu)A
f10_15 sf
.09(,)A
f12_15 sf
.09(x)A
f10_15 sf
.29 .029(\) end end)J
309 992 :M
f14_15 sf
.084<D3>A
f6_15 sf
.481 .048(, where )J
f14_15 sf
.084<D2>A
f12_15 sf
.253(x)A
f14_15 sf
.084<D3>A
f6_15 sf
.45 .045( does not occur in )J
f14_15 sf
.084<D2>A
f10_15 sf
.253(a)A
f10_10 sf
0 3 rm
.169(2)A
0 -3 rm
f14_15 sf
.084<D3>A
f6_15 sf
.356 .036(, and )J
f14_15 sf
.084<D2>A
f12_15 sf
.253(mu)A
f14_15 sf
.084<D3>A
f6_15 sf
.522 .052( is the implicit mutex of the self)J
145 1010 :M
(of the lexically enclosing method.)S
endp
%%Page: 43 43
%%BeginPageSetup
initializepage
(luca; page: 43 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(37)S
145 156 :M
f1_15 sf
(A.3.9)S
185 156 :M
(Exceptions)S
172 184 :M
f6_15 sf
.525 .052(An exception is a special value that, when raised, causes unwinding of the execution stack. If the)J
145 202 :M
(unwinding reaches the top-level, an error message is printed.)S
172 220 :M
.176 .018(An exception is created from a text string argument, which is the exception name. Two exceptions)J
145 238 :M
.45 .045(are equal if their names are equal text strings. \(Hence, an exception can be easily trapped at a site dif)J
762 238 :M
(-)S
145 256 :M
(ferent from the one in which it originated.\))S
199 286 :M
f10_15 sf
(exception\(a\))S
199 308 :M
(raise\(a\))S
172 336 :M
f6_15 sf
1.609 .161(The unwinding of the execution stack caused by an exception can be stopped by a try-except)J
145 354 :M
1.34 .134(statement, and can be temporarily suspended by a try-finally statement. The guards of a try-except)J
145 372 :M
.512 .051(statement, on the left of )J
295 372 :M
f14_15 sf
.055<D2>A
f10_15 sf
.164(=>)A
f14_15 sf
.055<D3>A
f6_15 sf
.441 .044(, must be exception values; if an exception is matched, the corresponding)J
145 390 :M
.322 .032(branch is executed, otherwise the )J
351 390 :M
f14_15 sf
<D2>S
f10_15 sf
.107(else)A
f14_15 sf
<D3>S
f6_15 sf
.285 .029( branch is executed. A try-finally statement executes )J
716 390 :M
f14_15 sf
<D2>S
f10_15 sf
.096(a)A
f10_10 sf
0 3 rm
.064(1)A
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.223 .022(, and)J
145 408 :M
(then executes )S
230 408 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( no matter whether )S
368 408 :M
f14_15 sf
<D2>S
f10_15 sf
(a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( raised an exception; if it did, the exception is raised again.)S
199 438 :M
f10_15 sf
(try a except a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
(, ..., a)S
f10_10 sf
0 3 rm
(n-2)S
0 -3 rm
f10_15 sf
( => a)S
f10_10 sf
0 3 rm
(n-1)S
0 -3 rm
f10_15 sf
( else a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( end)S
199 460 :M
(try a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( finally a)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
f10_15 sf
( end)S
172 488 :M
f6_15 sf
.37 .037(The semantics of try statements with respect to exceptions is the same as in Modula-3. In particu)J
762 488 :M
(-)S
145 506 :M
.466 .047(lar, an exception may propagate across sites, while unwinding the stack of a given thread. See section)J
145 524 :M
(A.3.10 for their behavior with respect to errors.)S
145 556 :M
f1_15 sf
(A.3.10)S
199 556 :M
(Errors)S
172 584 :M
f6_15 sf
.45 .045(Errors, as distinct from exceptions, are produced by built-in operations in situations where a logi)J
762 584 :M
(-)S
145 602 :M
.992 .099(cal flaw is judged to exist in a program. These situations include divide-by-zero, array overrunning,)J
145 620 :M
1.541 .154(bad operator arguments, and all cases that would produce typechecking errors in typed languages.)J
145 638 :M
(There are no user-defined errors.)S
172 656 :M
.451 .045(The occurrence of an error indicates a problem that should be fixed by recoding. However, errors)J
145 674 :M
1.016 .102(are not complete show-stoppers in Obliq. Errors are intercepted \(1\) by the recovery clause of try-fi)J
762 674 :M
(-)S
145 692 :M
.401 .04(nally, after whose execution the error is reissued, and \(2\) by the else clause of a try-except, which can)J
145 710 :M
.22 .022(even discard the error. This way, for example, a server can log the occurrence of an infrequent internal)J
145 728 :M
.971 .097(error and restart, or can detect \(to some extent\) errors occurring in client-supplied procedures. Error)J
145 746 :M
(trapping should not be used liberally.)S
172 764 :M
1.175 .117(Just like exceptions, errors are propagated across sites. Unless something is done, an error in a)J
145 782 :M
(server caused by a client thread will propagate back to the client, leaving the server unaffected.)S
145 826 :M
f1_18 sf
(A.4)S
185 826 :M
(Methodology)S
145 868 :M
f1_15 sf
(A.4.1)S
185 868 :M
(Type Comments)S
172 896 :M
f6_15 sf
1.318 .132(Although Obliq is an untyped language, every Obliq program, like any program, implicitly re)J
762 896 :M
(-)S
145 914 :M
.808 .081(spects the type discipline in the programmer\325s mind. It is essential to make this discipline explicit in)J
145 932 :M
(some way, otherwise programs quickly become unreadable and, therefore, unusable.)S
172 950 :M
.076 .008(To this end, Obliq supports a stylized form of comments that are intended to communicate type in)J
762 950 :M
(-)S
145 968 :M
1.046 .105(formation, but without enforcement. These comments are parsed according to a fixed grammar, and)J
145 986 :M
.525 .053(may appear where types usually appear in a typed language: as type definitions and as type specifica)J
762 986 :M
(-)S
145 1004 :M
.152 .015(tions for identifiers, procedures, and modules. One need write only as much type information as is use)J
762 1004 :M
(-)S
145 1022 :M
(ful and convenient; type comments have no effect after parsing.)S
endp
%%Page: 44 44
%%BeginPageSetup
initializepage
(luca; page: 44 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(38)S
172 160 :M
f6_15 sf
1.056 .106(Type comments are used in section B to specify the built-in libraries. Here are examples of the)J
145 178 :M
(syntax of \322types\323 and their intended meaning:)S
199 208 :M
f10_15 sf
(Top)S
f6_15 sf
(, )S
234 208 :M
f10_15 sf
(Ok)S
f6_15 sf
(, )S
f10_15 sf
(Bool)S
f6_15 sf
(, )S
303 208 :M
f10_15 sf
(Char)S
f6_15 sf
(, )S
f10_15 sf
(Text)S
f6_15 sf
(, )S
390 208 :M
f10_15 sf
(Int)S
f6_15 sf
(, )S
f10_15 sf
(Real)S
f6_15 sf
(, )S
468 208 :M
f10_15 sf
(Exception)S
f6_15 sf
(, )S
f10_15 sf
(Rd)S
f6_15 sf
(, )S
582 208 :M
f10_15 sf
(Wr)S
f6_15 sf
(, )S
f10_15 sf
(Thread\(T\))S
f6_15 sf
(, )S
696 208 :M
f10_15 sf
(Mutex)S
f6_15 sf
(,)S
199 230 :M
f10_15 sf
(Condition)S
f6_15 sf
(, )S
288 230 :M
f10_15 sf
(Process)S
f6_15 sf
(, )S
f10_15 sf
(Color)S
f6_15 sf
(, )S
411 230 :M
f10_15 sf
(Form)S
469 249 :M
f14_12 sf
<C5>S
482 249 :M
f6_15 sf
(Conventional type and operator names for the)S
482 267 :M
(built-in types. )S
f14_15 sf
<D2>S
f10_15 sf
(Top)S
f14_15 sf
<D3>S
f6_15 sf
( is the type of all values.)S
199 294 :M
f10_15 sf
(X)S
469 294 :M
f14_12 sf
<C5>S
482 294 :M
f6_15 sf
(A user-defined type \(any identifier, capitalized)S
482 312 :M
(by convention\).)S
199 339 :M
f10_15 sf
(X\(A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
469 339 :M
f14_12 sf
<C5>S
482 339 :M
f6_15 sf
(A parameterized type, e.g. )S
f14_15 sf
<D2>S
f10_15 sf
(List\(Int\))S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 366 :M
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( op A)S
f10_10 sf
0 3 rm
(2)S
0 -3 rm
469 366 :M
f14_12 sf
<C5>S
482 366 :M
f6_15 sf
(An infix parameterized type, e.g. )S
684 366 :M
f14_15 sf
<D2>S
f10_15 sf
(Int +)S
482 384 :M
(Bool)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 411 :M
f10_15 sf
([A])S
469 411 :M
f14_12 sf
<C5>S
482 411 :M
f6_15 sf
(The type of arrays of )S
612 411 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
<D5732E>S
199 438 :M
f10_15 sf
([n*A])S
469 438 :M
f14_12 sf
<C5>S
482 438 :M
f6_15 sf
(The type of arrays of )S
612 438 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(\325s of length )S
f14_15 sf
<D2>S
f10_15 sf
(n)S
f14_15 sf
<D3>S
f6_15 sf
( \(an in-)S
482 456 :M
(teger\).)S
199 483 :M
f10_15 sf
(\(A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\)->A ! exc)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( )S
f6_15 sf
(...)S
f10_15 sf
( exc)S
f10_10 sf
0 3 rm
(m)S
0 -3 rm
469 483 :M
f14_12 sf
<C5>S
482 483 :M
f6_15 sf
(The type of procedures of argument types )S
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
482 501 :M
f6_15 sf
(\(n)S
cF
f2_15 sf
<B3>S
sf
(0\), result type )S
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(, and exceptions )S
705 501 :M
f14_15 sf
<D2>S
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
482 519 :M
f6_15 sf
(\(where )S
f14_15 sf
<D2>S
f10_15 sf
(!)S
f6_15 sf
( )S
543 519 :M
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f6_15 sf
( ... )S
595 519 :M
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( may be omitted\).)S
199 546 :M
f10_15 sf
(\(A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\)=>A ! exc)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( )S
f6_15 sf
(...)S
f10_15 sf
( exc)S
f10_10 sf
0 3 rm
(m)S
0 -3 rm
469 546 :M
f14_12 sf
<C5>S
482 546 :M
f6_15 sf
(The type of methods of argument types )S
722 546 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
482 564 :M
f6_15 sf
(\(n)S
cF
f2_15 sf
<B3>S
sf
(0\), result type )S
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(, and exceptions )S
705 564 :M
f14_15 sf
<D2>S
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
482 582 :M
f6_15 sf
(\(where )S
f14_15 sf
<D2>S
f10_15 sf
(!)S
f6_15 sf
( )S
543 582 :M
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f6_15 sf
( ... )S
595 582 :M
f10_15 sf
(exc)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( may be omitted\). The)S
482 600 :M
(type of the self argument is not included in)S
482 618 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 645 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(})S
469 645 :M
f14_12 sf
<C5>S
482 645 :M
f6_15 sf
(The type of objects with components named)S
482 663 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of field type or method type )S
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 690 :M
f10_15 sf
(Option x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( end)S
469 690 :M
f14_12 sf
<C5>S
482 690 :M
f6_15 sf
(The type of options with choices named )S
726 690 :M
f14_15 sf
<D2>S
f10_15 sf
(x)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of)S
482 708 :M
(type )S
512 708 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 735 :M
f10_15 sf
(Self\(X\) B{X})S
469 735 :M
f14_12 sf
<C5>S
482 735 :M
f6_15 sf
(Where )S
526 735 :M
f14_15 sf
<D2>S
f10_15 sf
(B{X})S
f14_15 sf
<D3>S
f6_15 sf
( is an object type with possible)S
482 753 :M
(covariant occurrences of )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
(. This construction)S
482 771 :M
(is used to give a name \()S
624 771 :M
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
(\) to the type of the)S
482 789 :M
(methods\325 self \(e.g. for objects with methods)S
482 807 :M
(that return self\).)S
199 834 :M
f10_15 sf
(All\(X<:A\) B{X})S
469 834 :M
f14_12 sf
<C5>S
482 834 :M
f6_15 sf
(Where )S
526 834 :M
f14_15 sf
<D2>S
f10_15 sf
(B{X})S
f14_15 sf
<D3>S
f6_15 sf
( is any type with possible occur-)S
482 852 :M
(rences of )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
(. This is the type of values that, for)S
482 870 :M
(all subtypes )S
557 870 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of )S
598 870 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(, have type )S
f14_15 sf
<D2>S
f10_15 sf
(B{A)S
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
(})S
f14_15 sf
<D3>S
f6_15 sf
(. If)S
482 888 :M
f14_15 sf
<D2>S
f10_15 sf
(<:A)S
f14_15 sf
<D3>S
f6_15 sf
( is omitted, it stands for )S
f14_15 sf
<D2>S
f10_15 sf
(<:Top)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 915 :M
f10_15 sf
(Some\(X<:A\) B{X})S
469 915 :M
f14_12 sf
<C5>S
482 915 :M
f6_15 sf
(Where )S
526 915 :M
f14_15 sf
<D2>S
f10_15 sf
(B{X})S
f14_15 sf
<D3>S
f6_15 sf
( is any type with possible occur-)S
482 933 :M
(rences of )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
(. This is the type of values that, for)S
482 951 :M
(some \(unspecified\) subtypes )S
657 951 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( of )S
698 951 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(, have)S
482 969 :M
(type )S
512 969 :M
f14_15 sf
<D2>S
f10_15 sf
(B{A)S
f10_10 sf
0 3 rm
(0)S
0 -3 rm
f10_15 sf
(})S
f14_15 sf
<D3>S
f6_15 sf
(. If )S
f14_15 sf
<D2>S
f10_15 sf
(<:A)S
f14_15 sf
<D3>S
f6_15 sf
( is omitted, it stands for)S
482 987 :M
f14_15 sf
<D2>S
f10_15 sf
(<:Top)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 1014 :M
.974 .097(For the last two cases, we say that )J
f14_15 sf
.163<D2>A
f10_15 sf
.489(A)A
f14_15 sf
.163<D3>A
f6_15 sf
.778 .078( is a subtype of )J
480 1014 :M
f14_15 sf
.146<D2>A
f10_15 sf
.437(B)A
f14_15 sf
.146<D3>A
f6_15 sf
.354 .035( \()J
f14_15 sf
.146<D2>A
f10_15 sf
.437(A<:B)A
f14_15 sf
.146<D3>A
f6_15 sf
.804 .08(\) if every value of type )J
f14_15 sf
.146<D2>A
f10_15 sf
.437(A)A
f14_15 sf
.146<D3>A
f6_15 sf
.648 .065( is also a)J
145 1032 :M
(value of type )S
f14_15 sf
<D2>S
f10_15 sf
(B)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
endp
%%Page: 45 45
%%BeginPageSetup
initializepage
(luca; page: 45 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(39)S
172 160 :M
f6_15 sf
(Types can be used in the following contexts:)S
199 190 :M
f10_15 sf
(type X = A;)S
226 212 :M
f6_15 sf
(A top-level type declaration. )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
( is bound in the following scope, and may occur in )S
724 212 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
( for)S
226 234 :M
(a recursive type definition.)S
199 265 :M
f10_15 sf
(type X\(X)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, X)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\) = A;)S
226 287 :M
f6_15 sf
(A top-level parametric type declaration. The )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
( are bound and may occur in )S
692 287 :M
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(. )S
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
( may)S
226 309 :M
(occur in )S
f14_15 sf
<D2>S
f10_15 sf
(A)S
f14_15 sf
<D3>S
f6_15 sf
(, but only as )S
371 309 :M
f14_15 sf
<D2>S
f10_15 sf
(X\(X)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, .., X)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
(, and in the following scope, but only as)S
226 331 :M
f14_15 sf
<D2>S
f10_15 sf
(X\(A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, .., A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
<29>S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 362 :M
f10_15 sf
(let x: A = a;)S
226 384 :M
f6_15 sf
2.004 .2(\(As opposed to )J
f14_15 sf
.286<D2>A
f10_15 sf
.858<6C6574CA78CA3DCA61>A
f14_15 sf
.286<D3>A
f6_15 sf
1.869 .187(.\) A type comment for a variable )J
644 384 :M
f14_15 sf
.293<D2>A
f10_15 sf
.878(x)A
f14_15 sf
.293<D3>A
f6_15 sf
1.556 .156( bound by )J
f14_15 sf
.293<D2>A
f10_15 sf
.878(let)A
f14_15 sf
<D3>S
226 406 :M
f6_15 sf
(\(similarly for )S
f14_15 sf
<D2>S
f10_15 sf
(var)S
f14_15 sf
<D3>S
f6_15 sf
(\).)S
199 437 :M
f10_15 sf
(proc\(x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, )S
f6_15 sf
(...)S
f10_15 sf
(, x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(\):A ! exc)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( )S
f6_15 sf
(...)S
f10_15 sf
( exc)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
( , b end )S
226 459 :M
f6_15 sf
.253 .025(\(As opposed to )J
f14_15 sf
<D2>S
f10_15 sf
.108(proc\(x)A
f10_10 sf
0 3 rm
.072(1)A
0 -3 rm
f10_15 sf
.28 .028(, .., x)J
f10_10 sf
0 3 rm
.072(n)A
0 -3 rm
f10_15 sf
.28 .028(\) b end)J
f14_15 sf
<D3>S
f6_15 sf
.338 .034(.\) A commented procedure heading; any)J
226 481 :M
.875 .087(of the )J
267 481 :M
f14_15 sf
.092<D2>A
f10_15 sf
.275(:A)A
f10_10 sf
0 3 rm
.183(i)A
0 -3 rm
f14_15 sf
.092<D3>A
f6_15 sf
.208 .021(, )J
306 481 :M
f14_15 sf
.141<D2>A
f10_15 sf
.423(:A)A
f14_15 sf
.141<D3>A
f6_15 sf
.595 .059(, and )J
f14_15 sf
.141<D2>A
f10_15 sf
.423(!)A
f6_15 sf
.176 .018( )J
382 481 :M
f10_15 sf
.303(exc)A
f10_10 sf
0 3 rm
.202(1)A
0 -3 rm
f6_15 sf
.252 .025( ... )J
f10_15 sf
.303(exc)A
f10_10 sf
0 3 rm
.202(n)A
0 -3 rm
f14_15 sf
.101<D3>A
f6_15 sf
.701 .07( \(the exceptions\) may be omitted. The last )J
f14_15 sf
.101<D2>A
f10_15 sf
.303(,)A
f14_15 sf
.101<D3>A
f6_15 sf
.385 .039( is)J
226 503 :M
(required only if the result type and/or the exception list is present. Similarly for methods.)S
199 534 :M
f10_15 sf
({x)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(=>a)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
( )S
f6_15 sf
(...)S
f10_15 sf
(, x)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(:A)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(=>a)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(} )S
226 556 :M
f6_15 sf
.125 .013(\(As opposed to )J
f14_15 sf
<D2>S
f10_15 sf
.054({x)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.054(=>a)A
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
.145 .014(, .., x)J
445 559 :M
f10_10 sf
(n)S
f10_15 sf
0 -3 rm
.061(=>a)A
0 3 rm
f10_10 sf
(n)S
f10_15 sf
0 -3 rm
.061(})A
0 3 rm
f14_15 sf
0 -3 rm
<D3>S
0 3 rm
f6_15 sf
0 -3 rm
.137 .014(.\) A commented object; any of the )J
0 3 rm
707 556 :M
f14_15 sf
<D2>S
f10_15 sf
.039(:A)A
f10_10 sf
0 3 rm
(i)S
0 -3 rm
f14_15 sf
<D3>S
f6_15 sf
.098 .01( may)J
226 578 :M
(be omitted.)S
199 609 :M
f10_15 sf
(All\(X\) proc\(x:X\):X, x end )S
226 631 :M
f6_15 sf
(The identity function which, for any argument of any type )S
579 631 :M
f14_15 sf
<D2>S
f10_15 sf
(T)S
f14_15 sf
<D3>S
f6_15 sf
(, returns its argument.)S
199 662 :M
f10_15 sf
(Some\(X\) Self\(S\) {x:X=>0, f:Int=>meth\(s:S\) s.x+1 end} )S
226 684 :M
f6_15 sf
.432 .043(An element of the \322abstract type\323 )J
435 684 :M
f14_15 sf
<D2>S
f10_15 sf
.058(Some\(X\)\312{x:X,\312f:Int})A
f14_15 sf
<D3>S
f6_15 sf
.177 .018( with hidden implemen)J
762 684 :M
(-)S
226 706 :M
(tation )S
264 706 :M
f14_15 sf
<D2>S
f10_15 sf
(X)S
f14_15 sf
<D3>S
f6_15 sf
( = )S
295 706 :M
f14_15 sf
<D2>S
f10_15 sf
(Int)S
f14_15 sf
<D3>S
f6_15 sf
(. Moreover, )S
f14_15 sf
<D2>S
f10_15 sf
(S)S
f14_15 sf
<D3>S
f6_15 sf
( is used as the type of self.)S
199 737 :M
f10_15 sf
(module M export type A=Int, x:A, f\(x:A,y:A\):Bool; ...)S
226 759 :M
f6_15 sf
(Emphasizing the intended exports of a module, and their types.)S
172 787 :M
.341 .034(The value )J
f14_15 sf
<D2>S
f10_15 sf
.146(ok)A
f14_15 sf
<D3>S
f6_15 sf
.343 .034( should be considered as having every type, so it can be used to initialize variables.)J
145 805 :M
(However, its normal type is )S
315 805 :M
f14_15 sf
<D2>S
f10_15 sf
(Ok)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 849 :M
f1_18 sf
(A.5)S
185 849 :M
(Lexicon)S
172 877 :M
f6_15 sf
(The ASCII characters are divided into the following classes:)S
199 904 :M
(Blank)S
280 904 :M
f4_15 sf
(HT)S
f6_15 sf
( )S
303 904 :M
f4_15 sf
(LF)S
f6_15 sf
( )S
324 904 :M
f4_15 sf
(FF)S
343 904 :M
f6_15 sf
( )S
f4_15 sf
(CR)S
f6_15 sf
( )S
369 904 :M
f4_15 sf
(SP)S
199 922 :M
f6_15 sf
(Reserved)S
280 922 :M
(" ' ~)S
199 940 :M
(Delimiter)S
280 940 :M
(\( \) , . ; [ ] _ { } ? !)S
199 958 :M
(Special)S
280 958 :M
(# $ % & * + - / : < = > @ \\ ^ |)S
199 976 :M
(Digit)S
280 976 :M
(0 ... 9)S
199 994 :M
(Letter)S
280 994 :M
(A ... Z ` a ... z)S
199 1012 :M
(Illegal)S
280 1012 :M
(all the others)S
endp
%%Page: 46 46
%%BeginPageSetup
initializepage
(luca; page: 46 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(40)S
145 160 :M
f6_15 sf
(Moreover, we have the following pseudo-characters:)S
199 187 :M
(a StringChar is either:)S
226 205 :M
(- any single character that is not an Illegal character or one of )S
598 205 :M
f14_15 sf
<D2>S
f10_15 sf
(')S
f14_15 sf
<D3>S
f6_15 sf
(, )S
f14_15 sf
<D2>S
f10_15 sf
(")S
f14_15 sf
<D3>S
f6_15 sf
(, )S
643 205 :M
f14_15 sf
<D2>S
f10_15 sf
<5C>S
f14_15 sf
<D3>S
f6_15 sf
(.)S
226 223 :M
(- two characters )S
326 223 :M
f10_15 sf
<5C>S
f12_15 sf
(c)S
f6_15 sf
(, where )S
f12_15 sf
(c)S
f6_15 sf
( is any character that is not Illegal.)S
226 241 :M
(- four characters )S
f10_15 sf
<5C>S
f12_15 sf
(xxx)S
f6_15 sf
(, where )S
412 241 :M
f12_15 sf
(xxx)S
f6_15 sf
( is an octal number less than 256.)S
199 268 :M
(a Comment is, recursively, a sequence of non-Illegal characters and comments,)S
226 286 :M
(enclosed between )S
336 286 :M
f14_15 sf
<D2>S
f6_15 sf
<28>S
344 286 :M
f10_15 sf
(*)S
f14_15 sf
<D3>S
f6_15 sf
( and )S
f14_15 sf
<D2>S
f10_15 sf
(*\))S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 313 :M
(an EndOfFile is a fictitious character following the last character in a file or stream.)S
172 340 :M
(The following )S
f4_15 sf
(lexemes)S
309 340 :M
f6_15 sf
( are formed from characters and pseudo-characters:)S
199 367 :M
(Space)S
280 367 :M
(a sequence of Blanks and Comments.)S
199 385 :M
(AlphaNum)S
280 385 :M
(a sequence of Letters and Digits starting with a Letter.)S
199 403 :M
(Symbol)S
280 403 :M
(a sequence of Specials.)S
199 421 :M
(Char)S
280 421 :M
(a single StringChar enclosed between two )S
536 421 :M
f14_15 sf
<D2>S
f10_15 sf
(')S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 439 :M
(String)S
280 439 :M
(a sequence of StringChars enclosed between two )S
577 439 :M
f14_15 sf
<D2>S
f10_15 sf
(")S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 457 :M
(Nat)S
280 457 :M
(a sequence of Digits)S
199 475 :M
(Int)S
280 475 :M
(a Nat, possibly preceded by a single minus sign )S
f14_15 sf
<D2>S
f10_15 sf
(~)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
199 493 :M
(Real)S
280 493 :M
(an Int, and either: an )S
f14_15 sf
<D2>S
f6_15 sf
(e)S
417 493 :M
f14_15 sf
<D3>S
f6_15 sf
( and an Int; or a )S
f14_15 sf
<D2>S
f6_15 sf
(.)S
525 493 :M
f14_15 sf
<D3>S
f6_15 sf
(, an optional Nat,)S
280 511 :M
(and optionally an )S
388 511 :M
f14_15 sf
<D2>S
f6_15 sf
(e)S
398 511 :M
f14_15 sf
<D3>S
f6_15 sf
( and an Int.)S
199 529 :M
(Delimiter)S
280 529 :M
(a single Delimiter character.)S
199 547 :M
(EndOfFile)S
280 547 :M
(a single EndOfFile pseudo-character.)S
172 574 :M
.105 .011(A stream of characters is divided into lexemes by always extracting the longest prefix that is a lex)J
762 574 :M
(-)S
145 592 :M
-.007(eme. Note that Delimiters do not stick to each other or to other tokens even when they are not separated)A
145 610 :M
(by Space, but some care must be taken so that Symbols are not inadvertently merged.)S
172 637 :M
1.257 .126(A lexical )J
234 637 :M
f4_15 sf
.354(token)A
f6_15 sf
1.068 .107( is one of: Char, String, Int, Real, Delimiter, )J
551 637 :M
.872 .087(Identifier, Keyword, or EndOfFile.)J
145 655 :M
(Once a stream of characters has been split into lexemes, tokens are extracted as follows.)S
199 682 :M
(Space lexemes do not produce tokens.)S
199 700 :M
(Char, )S
236 700 :M
(String, Int, Real, Delimiter, and EndOfFile lexemes are also tokens.)S
199 718 :M
(AlphaNum and Symbol lexemes are Identifier tokens,)S
226 736 :M
(except when they have been declared to be )S
487 736 :M
f4_15 sf
(keywords)S
f6_15 sf
( \(see A.6\),)S
226 754 :M
(in which case they are Keyword tokens.)S
145 798 :M
f1_18 sf
(A.6)S
185 798 :M
(Syntax)S
172 826 :M
f6_15 sf
.148 .015(The grammar shown below is LL\(1\) and non-left-recursive. It is adapted, with minor editing, from)J
145 844 :M
(the Obliq metaparser input. See A.5 for the definition of lexical tokens.)S
172 862 :M
1.125 .113(Terminals are in double quotes )J
371 862 :M
f14_15 sf
.12<D2>A
f6_15 sf
.245(")A
f14_15 sf
.12<D3>A
f6_15 sf
.943 .094(. Non-terminals are declared by )J
f14_15 sf
.12<D2>A
f6_15 sf
.336(::=)A
605 862 :M
f14_15 sf
.14<D3>A
f6_15 sf
1.122 .112(, followed by a grammar.)J
145 880 :M
(Grammars have the following structure:)S
199 907 :M
({ g)S
f6_9 sf
0 3 rm
(1)S
0 -3 rm
222 907 :M
f6_15 sf
( .. g)S
245 910 :M
f6_9 sf
(n)S
250 907 :M
f6_15 sf
( })S
280 907 :M
(is a \(left-to-right\) choice of grammars g)S
f6_9 sf
0 3 rm
(i)S
0 -3 rm
521 907 :M
f6_15 sf
(.)S
199 925 :M
([ g)S
f6_9 sf
0 3 rm
(1)S
0 -3 rm
220 925 :M
f6_15 sf
( .. g)S
243 928 :M
f6_9 sf
(n)S
248 925 :M
f6_15 sf
( ])S
280 925 :M
(is a sequence of grammars g)S
f6_9 sf
0 3 rm
(i)S
0 -3 rm
453 925 :M
f6_15 sf
(.)S
199 943 :M
(\(g)S
f6_9 sf
0 3 rm
(1)S
0 -3 rm
216 943 :M
f6_15 sf
( * g)S
239 946 :M
f6_9 sf
(2)S
244 943 :M
f6_15 sf
<29>S
280 943 :M
(is g)S
f6_9 sf
0 3 rm
(1)S
0 -3 rm
306 943 :M
f6_15 sf
( followed by zero or more g)S
f6_9 sf
0 3 rm
(2)S
0 -3 rm
478 943 :M
f6_15 sf
(\325s, associating to the left.)S
199 961 :M
(\(g\))S
280 961 :M
(is grouping.)S
199 988 :M
(ide)S
280 988 :M
(recognizes an Identifier token)S
199 1006 :M
(name)S
280 1006 :M
(recognizes an Identifier or Keyword token)S
199 1024 :M
(char)S
280 1024 :M
(recognizes a Char token)S
endp
%%Page: 47 47
%%BeginPageSetup
initializepage
(luca; page: 47 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(41)S
199 160 :M
f6_15 sf
(string)S
280 160 :M
(recognizes a String token)S
199 178 :M
(int)S
280 178 :M
(recognizes an Int token)S
199 196 :M
(real)S
280 196 :M
(recognizes a Real token)S
199 214 :M
(EOF)S
280 214 :M
(recognizes an EndOfFile token)S
199 232 :M
("...")S
280 232 :M
(where )S
f14_15 sf
<D2>S
f6_15 sf
(...)S
335 232 :M
f14_15 sf
<D3>S
f6_15 sf
( is a Delimiter token: recognizes that Delimiter token)S
199 250 :M
("~...")S
280 250 :M
(where )S
f14_15 sf
<D2>S
f6_15 sf
(...)S
335 250 :M
f14_15 sf
<D3>S
f6_15 sf
( is an Identifier token: recognizes that Identifier token)S
199 268 :M
("...")S
280 268 :M
(where )S
f14_15 sf
<D2>S
f6_15 sf
(...)S
335 268 :M
f14_15 sf
<D3>S
f6_15 sf
( is an Identifier token: declares that identifier to be a keyword)S
307 286 :M
(and recognizes that Keyword token)S
172 313 :M
(The Obliq top-level syntax is an open-ended sequence of the non-terminal \322phrase\323:)S
145 342 :M
f10_10 sf
(phrase ::=)S
145 356 :M
(  { ";")S
145 370 :M
(    [ "~help"  { name string [] } { name string [] } ";" ])S
145 384 :M
(    [ "~flag"  { name string [] } { name string [] } ";" ])S
145 398 :M
(    [ typDecl ";" ])S
145 412 :M
(    [ term { [ "!" { int [] } ] [] } ";" ])S
145 426 :M
(    [ "load"  { name string } ";"  ])S
145 440 :M
(    [ "import" name ";" ])S
145 454 :M
(    [ "module" name { [ "for" name ] [] })S
145 468 :M
(      { [ "import" importList  ]  [] } { [ "export" exportList ] [] } ";"  ])S
145 482 :M
(    [ "end" "module" ";" ])S
145 496 :M
(    [ "~establish" name { [ "for" name ] [] } ";" ])S
496 496 :M
(\(* reserved *\))S
145 510 :M
(    [ "~delete" name ";" ])S
496 510 :M
(\(* reserved *\))S
145 524 :M
(    [ "~save" name ";" ])S
496 524 :M
(\(* reserved *\))S
145 538 :M
(    [ "~qualify" ";" ])S
496 538 :M
(\(* reserved *\))S
145 552 :M
(    EOF })S
145 575 :M
(importList ::=)S
145 589 :M
(  { [ name  { [ "," importList ] [] } ]  [] })S
145 612 :M
(exportList ::=)S
145 626 :M
(  { [ typDecl { [ "," exportList ] [] } ] [ procDecl { [ "," exportList ] [] } ] [] })S
145 649 :M
(typDecl ::=)S
145 663 :M
(  [ "type" name { typParams [] } "=" typ ])S
145 686 :M
(typ ::=)S
145 700 :M
(  {)S
172 700 :M
([ "\(" typList "\)" { [ "->" typ ] [ "=>" typ ] [] } ])S
172 714 :M
([ "Option" typFields "end" ])S
172 728 :M
([ "{" typFields "}" ])S
172 742 :M
([ "[" { [ int "~*" ] [] } typ "]" ])S
172 756 :M
([ "All" "\(" name { [ "<:" typ ] [] } "\)" typ ])S
172 770 :M
([ "Some" "\(" name { [ "<:" typ ] [] } "\)" typ ])S
172 784 :M
([ "Self" "\(" name "\)" typ ])S
172 798 :M
([ name { [ "_" name { typParams [] } ] typParams [] } ] })S
145 821 :M
(typParams ::=)S
145 835 :M
(  [ "\(" typNameList "\)" ])S
145 858 :M
(typNameList ::=)S
145 872 :M
(  { [ name { [ "," typList ] [] } ] [] })S
145 895 :M
(typList ::=)S
145 909 :M
(  { [ typ { [ "," typList ] [] } ] [] })S
145 932 :M
(typFields ::=)S
145 946 :M
(  { [ name ":" typ { [ "," typFields ] [] } ] [] })S
145 969 :M
(typSpec ::=)S
145 983 :M
(  { [ ":" typ ] [] })S
145 1006 :M
(typResSpec ::=)S
145 1020 :M
(  { [ ":" typ { [ "!" excList ] [] } ] [ "!" excList ] })S
endp
%%Page: 48 48
%%BeginPageSetup
initializepage
(luca; page: 48 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(42)S
145 157 :M
f10_10 sf
(excList ::=)S
145 171 :M
(  { [ name { [ "_" name ] } excList ] [] })S
145 194 :M
(procDecl ::=)S
145 208 :M
(  { [ { "All" "Some" } "\(" name { typBound [] } "\)" procDecl ])S
145 222 :M
(    [ name { [ ":" typ ] [ "\(" ideList "\)" typResSpec ] [] } ] })S
145 245 :M
(termBinding ::=)S
145 259 :M
(  { [ ide typSpec "=" term { [ "," termBinding ] [] } ] [] })S
145 282 :M
(termSeq ::=)S
145 296 :M
(  [ term { [ ";" { termSeq [] } ] [] } ])S
145 319 :M
(termSeqOpt ::=)S
145 333 :M
(  { termSeq []  })S
145 356 :M
(term ::=)S
145 370 :M
(  \( termBase *)S
145 384 :M
(    { [ "\(" termList "\)" ])S
145 398 :M
(      [ "_" name { [ "\(" termList "\)" ])S
388 398 :M
([] } ])S
145 412 :M
(      [ "." name { [ ":=" termOrAlias ] [ "\(" termList "\)" ] [] } ])S
145 426 :M
(      [ ":=" term ])S
145 440 :M
(      [ "[" term)S
145 454 :M
(        { [ "]" { [ ":=" term ] [] } ])S
145 468 :M
(          [ "for" term "]" { [ ":=" term ] [] } ] } ])S
145 482 :M
(      [ ide term ])S
145 496 :M
(      [ "andif" term ])S
145 510 :M
(      [ "orif" term ])S
280 510 :M
(} \))S
145 533 :M
(termBase ::=)S
145 547 :M
(  {)S
145 561 :M
(    [ "~-" term ])S
145 575 :M
(    ide)S
145 589 :M
(    { "ok" "true" "false" char string int real })S
145 603 :M
(    [ "[" termList "]" ])S
145 617 :M
(    [ "{" { [ "protected" { "," [] } ] [] } { [ "serialized" { "," [] } ] [] })S
145 631 :M
(      termObjFields "}" ])S
145 645 :M
(    [ "option" name typSpec "=>" termSeqOpt "end" ])S
145 659 :M
(    [ "clone" "\(" termList "\)" ])S
145 673 :M
(    [ "delegate" termSeq "to" termSeq "end" ])S
145 687 :M
(    [ "proc" "\(" ideList "\)" { [ typResSpec "," ] [] } termSeqOpt "end" ])S
145 701 :M
(    [ "meth" "\(" ideList "\)" { [ typResSpec "," ] [] } termSeqOpt "end" ])S
145 715 :M
(    [ "\(" termSeqOpt "\)" ])S
145 729 :M
(    [ "let" { [ "rec" termBinding ] termBinding } ])S
145 743 :M
(    [ "var" { [ "rec" termBinding ] termBinding } ])S
145 757 :M
(    [ "if" termSeq "then" termSeqOpt termElsif ])S
145 771 :M
(    [ "case" termSeq "of" termCaseList ])S
145 785 :M
(    [ "loop" termSeqOpt "end" ])S
145 799 :M
(    "exit")S
145 813 :M
(    [ "for" ide typSpec "=" term "to" term "do" termSeqOpt "end" ])S
145 827 :M
(    [ "foreach" ide typSpec "in" term { [ "do" termSeqOpt ] [ "map" termSeqOpt ] } "end" ])S
145 841 :M
(    [ "exception")S
253 841 :M
("\(" term "\)" ])S
145 855 :M
(    [ "raise" "\(" term "\)" ])S
145 869 :M
(    [ "try" termSeqOpt)S
145 883 :M
(      { [ "except" termTryList "end" ])S
145 897 :M
(        [ "else" termSeqOpt "end" ])S
145 911 :M
(        [ "finally" termSeqOpt "end" ] } ])S
145 925 :M
(    [ "lock" termSeq "do" termSeqOpt "end" ])S
145 939 :M
(    [ "watch" termSeq "until" termSeq "end" ])S
145 953 :M
(    [ "All" "\(" name { [ "<:" typ ] [] } "\)" term ])S
145 967 :M
(    [ "Some" "\(" name { [ "<:" typ ] [] } "\)" term ])S
145 981 :M
(    [ "Self" "\(" name "\)" term ])S
145 995 :M
(  })S
145 1018 :M
(termOrAlias ::=)S
145 1032 :M
(  { term [ "alias" ide "of" termSeq "end" ] })S
endp
%%Page: 49 49
%%BeginPageSetup
initializepage
(luca; page: 49 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(43)S
145 166 :M
f10_10 sf
(termObjFields ::=)S
145 180 :M
(  { [ name typSpec "=>" termOrAlias { [ "," termObjFields ] [] } ] [] })S
145 203 :M
(termElsif ::=)S
145 217 :M
(  { [ "end" ])S
145 231 :M
(    [ "else" termSeqOpt "end" ])S
145 245 :M
(    [ "elsif" termSeq "then" termSeqOpt termElsif ] })S
145 268 :M
(termList ::=)S
145 282 :M
(  { [ term { [ "," termList ] [] } ] [] })S
145 305 :M
(ideList ::=)S
145 319 :M
(  { [ ide typSpec { [ "," ideList ] [] } ] [] })S
145 342 :M
(termCaseListEnd ::=)S
145 356 :M
(  { "end" [ "else" termSeqOpt "end" ] })S
145 379 :M
(termCaseList ::=)S
145 393 :M
(  { termCaseListEnd)S
145 407 :M
(    [ name)S
145 421 :M
(      { [ "\(" ide typSpec "\)" "=>" termSeqOpt { [ "," termCaseList ] termCaseListEnd } ])S
145 435 :M
(        [ "=>" termSeqOpt { [ "," termCaseList ] termCaseListEnd } ] } ] })S
145 458 :M
(termTryList ::=)S
145 472 :M
(  { [ "else" termSeqOpt ])S
145 486 :M
(    [ term "=>" termSeqOpt { [ "," termTryList ] [ "else" termSeqOpt ] [] } ])S
145 500 :M
(    [] })S
endp
%%Page: 50 50
%%BeginPageSetup
initializepage
(luca; page: 50 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
456 591 :M
f9_12 sf
.741 .074( )J
endp
%%Page: 51 51
%%BeginPageSetup
initializepage
(luca; page: 51 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(45)S
145 188 :M
f1_21 sf
(B.)S
172 188 :M
(System Reference)S
172 217 :M
f6_15 sf
.497 .05(This section contains information about running Obliq executables, handling source files, and us)J
762 217 :M
(-)S
145 235 :M
(ing built-in libraries.)S
145 279 :M
f1_18 sf
(B.1)S
185 279 :M
(The Executables)S
172 307 :M
f6_15 sf
.107 .011(The )J
f14_15 sf
<D2>S
f10_15 sf
.05(obliq)A
f14_15 sf
<D3>S
f6_15 sf
.115 .012( Unix shell command is a script that runs one of several versions of Obliq linked with)J
145 325 :M
.502 .05(different Modula-3 libraries, providing different built-in Obliq libraries. Network capabilities are sup)J
762 325 :M
(-)S
145 343 :M
(ported in all versions of Obliq.)S
172 361 :M
(Here are the executables currently provided, along with the supported built-in libraries:)S
199 388 :M
f10_15 sf
(obliq -min)S
334 388 :M
f6_15 sf
(\(array, ascii, bool, int, math, net, real, sys, text\))S
658 388 :M
(\322minimal\323 obliq)S
199 406 :M
f10_15 sf
(obliq -std)S
334 406 :M
f6_15 sf
(\(min + rd, wr, lex, fmt, pickle, process, thread\))S
658 406 :M
(\322standard\323 obliq)S
199 424 :M
f10_15 sf
(obliq -ui)S
334 424 :M
f6_15 sf
(\(std + color, form\))S
658 424 :M
(\322windows\323 obliq)S
199 442 :M
f10_15 sf
(obliq -anim)S
334 442 :M
f6_15 sf
(\(ui + graph, zeus\))S
658 442 :M
(\322animation\323 obliq)S
145 469 :M
(By default, )S
f14_15 sf
<D2>S
f10_15 sf
(obliq)S
f14_15 sf
<D3>S
f6_15 sf
( means )S
312 469 :M
f14_15 sf
<D2>S
f10_15 sf
(obliq -std)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 487 :M
.669 .067(The reason for these separate versions is that the size of the binaries varies greatly depending on)J
145 505 :M
(how many libraries are linked. The size affects linking time, startup-time, and paging behavior.)S
172 523 :M
1.202 .12(A typical Obliq network server needs to be only an )J
500 523 :M
f14_15 sf
.059<D2>A
f10_15 sf
.936 .094(obliq -min)J
595 523 :M
f14_15 sf
.162<D3>A
f6_15 sf
.554 .055( or an )J
f14_15 sf
.162<D2>A
f10_15 sf
2.562 .256(obliq -std)J
736 523 :M
f14_15 sf
.188<D3>A
f6_15 sf
1.243 .124(. An)J
145 541 :M
(Obliq network client will often be an )S
f14_15 sf
<D2>S
f10_15 sf
(obliq -ui)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 585 :M
f1_18 sf
(B.2)S
185 585 :M
(The Top-Level)S
172 613 :M
f6_15 sf
.714 .071(The )J
200 613 :M
f14_15 sf
.064<D2>A
f10_15 sf
.191(obliq)A
f14_15 sf
.064<D3>A
f6_15 sf
.51 .051( program, when executed, enters an interactive evaluation loop. At the prompt, )J
738 613 :M
f14_15 sf
.134<D2>A
f10_15 sf
.728 .073(- )J
760 613 :M
f14_15 sf
<D3>S
f6_15 sf
(,)S
145 631 :M
.232 .023(the user can input a )J
267 631 :M
f4_15 sf
(phrase)S
308 631 :M
f6_15 sf
.235 .023(, which is always terminated by a semicolon )J
f14_15 sf
<D2>S
f6_15 sf
(;)S
f14_15 sf
<D3>S
f6_15 sf
.186 .019(. The first phrase to try out is)J
145 649 :M
(probably:)S
199 679 :M
f10_15 sf
(- help;)S
145 707 :M
f6_15 sf
(which provides basic on-line help on various aspects of the system.)S
172 725 :M
.074 .007(The most common kind of input phrase is a )J
438 725 :M
f4_15 sf
.082 .008(term phrase)J
f6_15 sf
.06 .006(, which causes the parsing, evaluation, and)J
145 743 :M
(printing of the result of an expression. Examples of term phrases \(and comments\) are:)S
199 773 :M
f10_15 sf
(- 3+4;       )S
496 773 :M
(\(* question *\))S
199 795 :M
(7             )S
496 795 :M
(\(* answer *\))S
199 826 :M
(- "this is" & " a single text";)S
496 826 :M
(\(* text concatenation *\))S
199 848 :M
("this is a single text")S
199 879 :M
(- 3 is 4;      )S
496 879 :M
(\(* identity test *\))S
199 901 :M
(false)S
172 929 :M
f4_15 sf
.826 .083(Definition phrases)J
f6_15 sf
.403 .04( are used to bind identifiers to values in the top-level scope. One can use )J
f14_15 sf
.062<D2>A
f10_15 sf
.187(var)A
f14_15 sf
<D3>S
145 947 :M
f6_15 sf
.769 .077(for binding values to updatable variables, )J
405 947 :M
f14_15 sf
.078<D2>A
f10_15 sf
.234(let)A
f14_15 sf
.078<D3>A
f6_15 sf
.676 .068( for binding values, including procedures, to constant)J
145 965 :M
(identifiers, and )S
239 965 :M
f14_15 sf
<D2>S
f10_15 sf
(let rec)S
f14_15 sf
<D3>S
f6_15 sf
( for defining recursive procedures.)S
199 995 :M
f10_15 sf
(- var x = 3;)S
endp
%%Page: 52 52
%%BeginPageSetup
initializepage
(luca; page: 52 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(46)S
199 163 :M
f10_15 sf
(- x := x+1;)S
199 194 :M
(- let y = x+1;)S
199 225 :M
(- let rec fact =)S
199 247 :M
(    proc\(n\))S
199 269 :M
(      if n is 0 then 1 else n * fact\(n-1\) end)S
199 291 :M
(    end;)S
172 319 :M
f6_15 sf
1.102 .11(The Obliq top-level is statically scoped, just like the rest of the language. Hence, redefining an)J
145 337 :M
-.005(identifier at the top-level simply hides its previous incarnation and does not affect terms that already re)A
762 337 :M
(-)S
145 355 :M
(fer to it.)S
172 373 :M
.13 .013(When a top-level phrase finishes executing, the interpreter pretty-prints the result up to a small de)J
762 373 :M
(-)S
145 391 :M
.259 .026(fault depth, printing ellipses after that depth. One can require a larger \(but finite\) print depth by insert)J
761 391 :M
(-)S
145 409 :M
.914 .091(ing an exclamation mark before the final semicolon of a phrase; for example: )J
631 409 :M
f14_15 sf
.066<D2>A
f10_15 sf
.198(fact!;)A
f14_15 sf
.066<D3>A
f6_15 sf
.501 .05(. This larger)J
145 427 :M
.165 .016(default depth is sufficient in most situations. Otherwise, a given print depth )J
604 427 :M
f14_15 sf
<D2>S
f10_15 sf
.076(n)A
f14_15 sf
<D3>S
f6_15 sf
.168 .017( can be forced by saying)J
145 445 :M
f14_15 sf
<D2>S
f10_15 sf
(fact!n;)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 463 :M
.318 .032(Closures are printed by printing their program text only. If there are global variables, these are in)J
762 463 :M
(-)S
145 481 :M
.331 .033(dicated by )J
f14_15 sf
<D2>S
f10_15 sf
.14(global\(x)A
f10_14 sf
0 3 rm
.131(1)A
0 -3 rm
f10_15 sf
.14(,...,x)A
f10_14 sf
0 3 rm
.131(n)A
0 -3 rm
f10_15 sf
.14<29>A
f14_15 sf
<D3>S
f6_15 sf
.325 .033( followed by the program text. To print the values of global vari)J
761 481 :M
(-)S
145 499 :M
(ables, see )S
f14_15 sf
<D2>S
f10_15 sf
(help flags;)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 543 :M
f1_18 sf
(B.3)S
185 543 :M
(Program Files)S
172 571 :M
f6_15 sf
1.013 .101(Obliq programs should be stored in files with extension )J
524 571 :M
f14_15 sf
.129<D2>A
f10_15 sf
.386(.obl)A
f14_15 sf
.129<D3>A
f6_15 sf
.888 .089(. Such files may contain any se)J
762 571 :M
(-)S
145 589 :M
.804 .08(quence of top-level phrases. Files can then be loaded into the system, with the same effect as if they)J
145 607 :M
(were typed in at the top-level.)S
172 625 :M
(The top-level phrase:)S
199 655 :M
f10_15 sf
(- load Foo;)S
145 683 :M
f6_15 sf
-.005(attempts to load the file )A
f14_15 sf
<D2>S
f10_15 sf
-.008(Foo.obl)A
f14_15 sf
<D3>S
f6_15 sf
-.006( along the current search path. Alternatively, one can use an explicit)A
145 701 :M
(text string containing a file name \(relative to the current search path\), or an explicit file path:)S
199 731 :M
f10_15 sf
(- load "Foo.obl";)S
199 753 :M
(- load "/udir/luca/Foo.obl";)S
145 781 :M
f6_15 sf
.553 .055(The search path for loading is set by the environment variable )J
530 781 :M
.528 .053(OBLIQPATH, and can be changed via)J
145 799 :M
(the )S
f14_15 sf
<D2>S
f10_15 sf
(sys)S
f14_15 sf
<D3>S
f6_15 sf
( built-in library \(see B.6.1, or )S
380 799 :M
f14_15 sf
<D2>S
f10_15 sf
(help sys;)S
f14_15 sf
<D3>S
f6_15 sf
(\).)S
172 817 :M
.569 .057(At startup time, the Obliq system looks for a file called )J
516 817 :M
f14_15 sf
.053<D2>A
f10_15 sf
.159(.obliq)A
f14_15 sf
.053<D3>A
f6_15 sf
.417 .042( in the user\325s HOME directory,)J
145 835 :M
(and loads it if it finds it.)S
145 879 :M
f1_18 sf
(B.4)S
185 879 :M
(Modules)S
172 907 :M
f6_15 sf
.611 .061(Obliq modules are used for: \(1\) organizing, loading, and reloading collections of definitions, and)J
145 925 :M
.617 .062(\(2\) for turning collections of definitions into libraries, so that qualified names can be used for the de)J
762 925 :M
(-)S
145 943 :M
.88 .088(fined identifiers. Modules neither hide nor create scopes, except for turning identifiers into qualified)J
145 961 :M
(identifiers when a module is closed.)S
172 979 :M
.643 .064(An Obliq source file should normally contain a single module. But, in general, multiple modules)J
145 997 :M
.489 .049(can be stored in the same file, and modules can also be entered directly at the top-level. Both the top-)J
145 1015 :M
(level and the source files may contain definitions that are not grouped into modules.)S
endp
%%Page: 53 53
%%BeginPageSetup
initializepage
(luca; page: 53 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(47)S
172 160 :M
f6_15 sf
.872 .087(Modules can be used to record source file dependencies: when loading a module, the dependent)J
145 178 :M
.498 .05(modules are automatically loaded while avoiding duplicated loading. Modules also help keep the top-)J
145 196 :M
.17 .017(level consistent when reloading, for example after a bug fix. Reloading a module is like rolling back in)J
145 214 :M
.547 .055(time to the point when the module was first loaded: all intervening top-level definitions are discarded)J
145 232 :M
(before the module is reloaded.)S
172 250 :M
(It is recommended that a program file )S
f10_15 sf
(Foo.obl)S
f6_15 sf
( start with the line:)S
199 280 :M
f10_15 sf
(module Foo;)S
145 308 :M
f6_15 sf
(and end with the line:)S
199 338 :M
f10_15 sf
(end module;)S
172 366 :M
f6_15 sf
1.419 .142(A module named )J
f14_15 sf
.179<D2>A
f10_15 sf
.537(Foo)A
f14_15 sf
.179<D3>A
f6_15 sf
1.359 .136( terminating with )J
434 366 :M
f14_15 sf
.2<D2>A
f10_15 sf
3.136 .314(end module;)J
f14_15 sf
.2<D3>A
f6_15 sf
.806 .081( is said to be )J
f4_15 sf
.51(closed)A
671 366 :M
f6_15 sf
1.045 .104(. Closing )J
f14_15 sf
.163<D2>A
f10_15 sf
.487(Foo)A
f14_15 sf
<D3>S
145 384 :M
f6_15 sf
.138 .014(means erasing its definitions from the current scope, and adding back a library named )J
f14_15 sf
<D2>S
f10_15 sf
.054(Foo)A
f14_15 sf
<D3>S
f6_15 sf
.202 .02( containing)J
145 402 :M
.397 .04(those definitions. Hence, any top-level identifier )J
f14_15 sf
<D2>S
f10_15 sf
.135(x)A
f14_15 sf
<D3>S
f6_15 sf
.327 .033( declared within )J
561 402 :M
f14_15 sf
.051<D2>A
f10_15 sf
.153(Foo)A
f14_15 sf
.051<D3>A
f6_15 sf
.287 .029( is accessible as )J
f14_15 sf
.051<D2>A
f10_15 sf
.153(Foo_x)A
f14_15 sf
.051<D3>A
f6_15 sf
.266 .027( af-)J
145 420 :M
(ter closing. \(The syntax )S
f14_15 sf
<D2>S
f10_15 sf
(m)S
f6_15 sf
(_)S
310 420 :M
f10_15 sf
(x)S
f14_15 sf
<D3>S
f6_15 sf
( is the same as for the built-in libraries.\))S
172 438 :M
.142 .014(If )J
f14_15 sf
<D2>S
f10_15 sf
.666 .067(end module;)J
289 438 :M
f14_15 sf
.093<D3>A
f6_15 sf
.529 .053( is omitted, the module is said to be )J
516 438 :M
f4_15 sf
.112(open)A
f6_15 sf
.381 .038(: its identifiers are accessible simply)J
145 456 :M
.606 .061(as )J
162 456 :M
f14_15 sf
.055<D2>A
f10_15 sf
.165(x)A
f14_15 sf
.055<D3>A
f6_15 sf
.436 .044(. Closed modules should be the norm, but open modules are useful for importing definitions into)J
145 474 :M
(the top level, and for allowing pervasive unqualified definitions.)S
172 492 :M
.751 .075(If a module )J
248 492 :M
f14_15 sf
.073<D2>A
f10_15 sf
.22(Foo)A
f14_15 sf
.073<D3>A
f6_15 sf
.575 .057( relies on definitions stored in other program files \(which should similarly start)J
145 510 :M
(with )S
f14_15 sf
<D2>S
f10_15 sf
(module)S
f14_15 sf
<D3>S
f6_15 sf
( lines\), then )S
310 510 :M
f14_15 sf
<D2>S
f10_15 sf
(Foo)S
f14_15 sf
<D3>S
f6_15 sf
( can begin with the line:)S
199 540 :M
f10_15 sf
(module Foo import Foo2,Foo3;)S
145 568 :M
f6_15 sf
.38 .038(The way the imported definitions are used within )J
449 568 :M
f14_15 sf
<D2>S
f10_15 sf
.122(Foo)A
f14_15 sf
<D3>S
f6_15 sf
.337 .034( depends on whether the imported modules are)J
145 586 :M
(open or closed.)S
172 604 :M
.047 .005(When issuing the top-level command )J
f14_15 sf
<D2>S
f10_15 sf
.074 .007(load Foo;)J
f14_15 sf
<D3>S
f6_15 sf
.047 .005(, the module declaration above guarantees two)J
145 622 :M
.854 .085(properties: \(1\) if the modules )J
331 622 :M
f10_15 sf
.321(Foo2)A
f6_15 sf
.416 .042( and )J
f10_15 sf
.321(Foo3)A
f6_15 sf
.804 .08( have not been loaded already, they are loaded before)J
145 640 :M
f10_15 sf
.037(Foo)A
f6_15 sf
.071 .007( is loaded; \(2\) if the module )J
f10_15 sf
.037(Foo)A
f6_15 sf
.079 .008( is already loaded, )J
484 640 :M
f10_15 sf
.032(Foo)A
f6_15 sf
.075 .008( and all the modules that were loaded after)J
145 658 :M
.615 .062(it are erased from the top level before reloading )J
443 658 :M
f10_15 sf
.193(Foo)A
f6_15 sf
.512 .051(. This roll-back affects only the top-level defini)J
761 658 :M
(-)S
145 676 :M
(tion environment: it does not undo state changes.)S
172 694 :M
.305 .03(The form )J
233 694 :M
f14_15 sf
<D2>S
f10_15 sf
.338 .034(module Foo for L)J
f6_15 sf
.125 .012( ...)J
397 694 :M
f14_15 sf
<D3>S
f6_15 sf
.258 .026( indicates a collection of definitions named )J
665 694 :M
f14_15 sf
<D2>S
f10_15 sf
.077(Foo)A
f14_15 sf
<D3>S
f6_15 sf
.188 .019( that gener-)J
145 712 :M
.93 .093(ates a library named )J
276 712 :M
f14_15 sf
.115<D2>A
f10_15 sf
.345(L)A
f14_15 sf
.115<D3>A
f6_15 sf
.71 .071( \(instead of the default )J
f14_15 sf
.115<D2>A
f10_15 sf
.345(Foo)A
f14_15 sf
.115<D3>A
f6_15 sf
.886 .089(\) when the module is closed. Module names are)J
145 730 :M
1.259 .126(unique at the top level \(any repetition triggers roll-back\), but library names can be repeated. When)J
145 748 :M
.248 .025(multiple modules generate the same library )J
411 748 :M
f14_15 sf
<D2>S
f10_15 sf
.097(L)A
f14_15 sf
<D3>S
f6_15 sf
.245 .025(, their definitions are merged, with the latter ones taking)J
145 766 :M
.296 .03(precedence. Using this mechanism, it is possible to add definitions to built-in libraries, for example by)J
145 784 :M
f14_15 sf
<D2>S
f10_15 sf
(module text2 for text;)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 828 :M
f1_18 sf
(B.5)S
185 828 :M
(The Network Objects Daemon)S
172 856 :M
f6_15 sf
.853 .085( A name server must be running before )J
f14_15 sf
.127<D2>A
f10_15 sf
.38(net_export)A
f14_15 sf
.127<D3>A
f6_15 sf
1.025 .103( and similar operations can work. Obliq)J
145 874 :M
.554 .055(uses the name server provided with Modula-3 Network Objects )J
538 874 :M
.486 .049([Birrell, )J
591 874 :M
f4_15 sf
.498 .05(et al.)J
f6_15 sf
.686 .069( 1994])J
661 874 :M
.63 .063(, it can be started)J
145 892 :M
(by the Unix command )S
f14_15 sf
<D2>S
f10_15 sf
(netobjd)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 910 :M
.657 .066(To start a name server on your machine every time the Obliq interpreter starts, put the following)J
145 928 :M
(line in the )S
209 928 :M
f14_15 sf
<D2>S
f10_15 sf
(.obliq)S
f14_15 sf
<D3>S
f6_15 sf
( file in your home directory \(make sure the )S
f14_15 sf
<D2>S
f10_15 sf
(netobjd)S
f14_15 sf
<D3>S
f6_15 sf
( path is appropriate\):)S
199 958 :M
f10_15 sf
(process_new\(processor, ["/proj/mips/bin/netobjd"], true\);)S
145 986 :M
f6_15 sf
(The server process exits if it finds another copy of itself already running.)S
endp
%%Page: 54 54
%%BeginPageSetup
initializepage
(luca; page: 54 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(48)S
172 160 :M
f6_15 sf
.32 .032(Note that objects and engines exported via the )J
457 160 :M
f14_15 sf
<D2>S
f10_15 sf
.104(net)A
f14_15 sf
<D3>S
f6_15 sf
.271 .027( interface are not inherent security risks, even)J
145 178 :M
.994 .099(when they blindly execute client code. The operating system and file system of a server site are not)J
145 196 :M
(necessarily available \(see section A.2.9\); lexical scoping prevents any unauthorized access.)S
145 240 :M
f1_18 sf
(B.6)S
185 240 :M
(Built-in Libraries)S
172 268 :M
f6_15 sf
.918 .092(In this appendix we list the Obliq built-in )J
435 268 :M
.849 .085(libraries, many of which are entry points into popular)J
145 286 :M
.694 .069(Modula-3 libraries [Horning, )J
327 286 :M
f4_15 sf
.709 .071(et al.)J
f6_15 sf
.85 .085( 1993]. We use an informal typing notation in the specification of)J
145 304 :M
.151 .015(the operations, including a specification of the exceptions that may be raised \(see section A.4.1\). Many)J
145 322 :M
(operations raise errors as well, but these are not made explicit.)S
172 340 :M
.5 .05(We use the type comments of section A.4.1; all the exception conditions are documented, but the)J
145 358 :M
.906 .091(more obvious error conditions are not. We often provide informal English descriptions of the opera)J
762 358 :M
(-)S
145 376 :M
.834 .083(tions. For details of some operations one should look at the specification of the respective Modula-3)J
145 394 :M
(interfaces [Horning, )S
f4_15 sf
(et al.)S
299 394 :M
f6_15 sf
( 1993])S
338 394 :M
(.)S
172 412 :M
.365 .037(The )J
200 412 :M
f14_15 sf
<D2>S
f10_15 sf
.115(sys)A
f14_15 sf
<D3>S
f6_15 sf
.281 .028( library is special: it contains entry points into the implementation of Obliq and its com-)J
145 430 :M
(puting environment.)S
145 462 :M
f1_15 sf
(B.6.1)S
185 462 :M
(Sys)S
144 496 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(sys_copy)S
245 496 :M
f10_12 sf
(\(x: T\): T ! net_failure)S
469 496 :M
f14_12 sf
<C5>S
482 496 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(copy\(x\))S
562 496 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
569 496 :M
f10_12 sf
( )S
f6_12 sf
(Make a local copy of a value, including)S
482 510 :M
(most distributed values.)S
144 524 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(sys_print)S
252 524 :M
f10_12 sf
(\(x: T, depth: Int\): Ok)S
469 524 :M
f14_12 sf
<C5>S
482 524 :M
f6_12 sf
(Print an arbitrary value to stdout, up to some print depth.)S
482 538 :M
(\(Only available on-line.\))S
144 552 :M
f13_12 sf
(sys_printText)S
238 552 :M
f10_12 sf
(\(t: Text\): Ok)S
469 552 :M
f14_12 sf
<C5>S
482 552 :M
f6_12 sf
(Print a text to stdout. \(Only available on-line.\))S
144 566 :M
f13_12 sf
(sys_printFlush)S
245 566 :M
f10_12 sf
(\(\): Ok)S
469 566 :M
f14_12 sf
<C5>S
482 566 :M
f6_12 sf
(Flush stdout. \(Only available on-line.\))S
144 580 :M
f13_12 sf
(sys_pushSilence)S
f10_12 sf
(\(\): Ok)S
469 580 :M
f14_12 sf
<C5>S
482 580 :M
f6_12 sf
(Push the silence stack; when non-empty nothing is printed.)S
482 594 :M
(\(Only available on-line.\))S
144 608 :M
f13_12 sf
(sys_popSilence)S
245 608 :M
f10_12 sf
(\(\): Ok)S
469 608 :M
f14_12 sf
<C5>S
482 608 :M
f6_12 sf
(Pop the silence stack \(no-op on empty stack\). \(Only avail-)S
482 622 :M
(able on-line.\))S
144 636 :M
f13_12 sf
(sys_setPrompt)S
238 636 :M
f10_12 sf
(\(first: Text, next: Text\): Ok)S
469 636 :M
f14_12 sf
<C5>S
482 636 :M
f6_12 sf
(Set the interactive prompts \(defaults: first=)S
f14_15 sf
<D2>S
f6_15 sf
(")S
698 636 :M
f6_12 sf
(- )S
705 636 :M
f6_15 sf
(")S
f14_15 sf
<D3>S
f6_12 sf
(,)S
482 650 :M
(next=)S
f14_15 sf
<D2>S
f6_15 sf
(")S
519 650 :M
f6_12 sf
<CACA>S
f6_15 sf
(")S
f14_15 sf
<D3>S
f6_12 sf
(\). \(Only available on-line.\))S
144 664 :M
f13_12 sf
(sys_address)S
f10_12 sf
(: Text)S
469 664 :M
f14_12 sf
<C5>S
482 664 :M
f6_12 sf
(The current machine\325s network address.)S
144 678 :M
f13_12 sf
(sys_getSearchPath)S
f10_12 sf
(\(\): Text)S
469 678 :M
f14_12 sf
<C5>S
482 678 :M
f6_12 sf
(Get the current search path for )S
f14_15 sf
<D2>S
f10_12 sf
(load)S
663 678 :M
f14_15 sf
<D3>S
f6_12 sf
( and such. \(Only)S
482 692 :M
(available on-line.\))S
144 706 :M
f13_12 sf
(sys_setSearchPath)S
f10_12 sf
(\(t: Text\): Ok)S
469 706 :M
f14_12 sf
<C5>S
482 706 :M
f6_12 sf
(Set the current search path for )S
f14_15 sf
<D2>S
f10_12 sf
(load)S
661 706 :M
f14_15 sf
<D3>S
f6_12 sf
( and such. \(Only)S
482 720 :M
(available on-line.\))S
144 734 :M
f13_12 sf
(sys_getEnvVar)S
238 734 :M
f10_12 sf
(\(t: Text\): Text)S
469 734 :M
f14_12 sf
<C5>S
482 734 :M
f6_12 sf
(Return the value of the env variable whose name is )S
731 734 :M
f10_12 sf
(t)S
f6_12 sf
(, or)S
482 748 :M
f14_15 sf
<D2>S
f10_12 sf
("")S
f14_15 sf
<D3>S
f6_12 sf
( if there is no such variable.)S
144 762 :M
f13_12 sf
(sys_paramCount)S
245 762 :M
f10_12 sf
(: Int)S
469 762 :M
f14_12 sf
<C5>S
482 762 :M
f6_12 sf
(The number of program parameters.)S
144 776 :M
f13_12 sf
(sys_getParam)S
f10_12 sf
(\(n: Int\): Text)S
469 776 :M
f14_12 sf
<C5>S
482 776 :M
f6_12 sf
(Return the n-th program parameter \(indexed from 0\).)S
144 790 :M
f13_12 sf
(sys_callFailure)S
f10_12 sf
(: Exception)S
469 790 :M
f14_12 sf
<C5>S
482 790 :M
f6_12 sf
(Can be raised by Modula-3 code during a sys_call.)S
144 804 :M
f10_12 sf
(Some\(T\)Some\(U\))S
245 804 :M
f13_12 sf
(sys_call)S
f10_12 sf
(\(name: Text, args: [T]\): U ! sys_callFailure)S
469 818 :M
f14_12 sf
<C5>S
482 818 :M
f6_12 sf
(Call a pre-registered Modula-3 procedure.)S
145 858 :M
f1_15 sf
(B.6.2)S
185 858 :M
(Bool)S
144 892 :M
f13_12 sf
(true)S
173 892 :M
f10_12 sf
(: Bool)S
469 892 :M
f14_12 sf
<C5>S
482 892 :M
f6_12 sf
(The constant true.)S
144 906 :M
f13_12 sf
(false)S
f10_12 sf
(: Bool)S
469 906 :M
f14_12 sf
<C5>S
482 906 :M
f6_12 sf
(The constant false.)S
144 920 :M
f10_12 sf
(All\(T\)All\(U\))S
f13_12 sf
(bool_is)S
281 920 :M
f10_12 sf
(\(x: T, y: U\): Bool)S
469 920 :M
f14_12 sf
<C5>S
482 920 :M
f6_12 sf
(\(also infix )S
534 920 :M
f14_15 sf
<D2>S
f10_12 sf
(is)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
558 920 :M
f10_12 sf
( )S
566 920 :M
f6_12 sf
(Identity predicate: value equality for Ok,)S
482 934 :M
(Bool, Int, Real, Char, Text, Exception; pointer equality)S
482 948 :M
(otherwise.)S
144 962 :M
f10_12 sf
(All\(T\)All\(U\))S
f13_12 sf
(bool_isnot)S
f10_12 sf
(\(x: T, y: U\): Bool)S
469 962 :M
f14_12 sf
<C5>S
482 962 :M
f6_12 sf
(\(also infix )S
534 962 :M
f14_15 sf
<D2>S
f10_12 sf
(isnot)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
580 962 :M
f10_12 sf
( )S
f6_12 sf
(Negation of )S
647 962 :M
f14_15 sf
<D2>S
f10_12 sf
(is)S
665 962 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
144 976 :M
f13_12 sf
(bool_not)S
202 976 :M
f10_12 sf
(\(b: Bool\): Bool)S
469 976 :M
f14_12 sf
<C5>S
482 976 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(not\(b\))S
555 976 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
144 990 :M
f13_12 sf
(bool_and)S
202 990 :M
f10_12 sf
(\(b1: Bool, b2: Bool\): Bool)S
469 990 :M
f14_12 sf
<C5>S
482 990 :M
f6_12 sf
(\(also infix )S
534 990 :M
f14_15 sf
<D2>S
f10_12 sf
(and)S
559 990 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
144 1004 :M
f13_12 sf
(bool_or)S
f10_12 sf
(\(b1: Bool, b2: Bool\): Bool)S
469 1004 :M
f14_12 sf
<C5>S
482 1004 :M
f6_12 sf
(\(also infix )S
534 1004 :M
f14_15 sf
<D2>S
f10_12 sf
(or)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
endp
%%Page: 55 55
%%BeginPageSetup
initializepage
(luca; page: 55 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(49)S
145 156 :M
f1_15 sf
(B.6.3)S
185 156 :M
(Int)S
144 190 :M
f13_12 sf
(n)S
f10_12 sf
(: Int)S
469 190 :M
f14_12 sf
<C5>S
482 190 :M
f6_12 sf
(Positive integer constants.)S
144 204 :M
f13_12 sf
(~n)S
f10_12 sf
(: Int)S
469 204 :M
f14_12 sf
<C5>S
482 204 :M
f6_12 sf
(Negative integer constants.)S
144 218 :M
f13_12 sf
(int_minus)S
209 218 :M
f10_12 sf
(\(n: Int\): Int)S
469 218 :M
f14_12 sf
<C5>S
482 218 :M
f6_12 sf
(Integer negation.)S
144 232 :M
f13_12 sf
(int_+)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 232 :M
f14_12 sf
<C5>S
482 232 :M
f6_12 sf
(Integer addition.)S
144 246 :M
f13_12 sf
(int_-)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 246 :M
f14_12 sf
<C5>S
482 246 :M
f6_12 sf
(Integer difference.)S
144 260 :M
f13_12 sf
(int_*)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 260 :M
f14_12 sf
<C5>S
482 260 :M
f6_12 sf
(Integer multiplication.)S
144 274 :M
f13_12 sf
(int_/)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 274 :M
f14_12 sf
<C5>S
482 274 :M
f6_12 sf
(Integer division.)S
144 288 :M
f13_12 sf
(int_%)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 288 :M
f14_12 sf
<C5>S
482 288 :M
f6_12 sf
(\(also infix )S
534 288 :M
f14_15 sf
<D2>S
f10_12 sf
(%)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
551 288 :M
f10_12 sf
( )S
f6_12 sf
(Integer modulo.)S
144 302 :M
f13_12 sf
(int_<)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 302 :M
f14_12 sf
<C5>S
482 302 :M
f6_12 sf
(Integer less-than predicate.)S
144 316 :M
f13_12 sf
(int_>)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 316 :M
f14_12 sf
<C5>S
482 316 :M
f6_12 sf
(Integer greater-than predicate.)S
144 330 :M
f13_12 sf
(int_<=)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 330 :M
f14_12 sf
<C5>S
482 330 :M
f6_12 sf
(Integer no-greater-than predicate.)S
144 344 :M
f13_12 sf
(int_>=)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 344 :M
f14_12 sf
<C5>S
482 344 :M
f6_12 sf
(Integer no-less-than predicate.)S
145 384 :M
f1_15 sf
(B.6.4)S
185 384 :M
(Real)S
144 418 :M
f13_12 sf
(n.m)S
166 418 :M
f10_12 sf
(: Int)S
469 418 :M
f14_12 sf
<C5>S
482 418 :M
f6_12 sf
(Positive real constants; m is optional.)S
144 432 :M
f13_12 sf
(~n.m)S
173 432 :M
f10_12 sf
(: Int)S
469 432 :M
f14_12 sf
<C5>S
482 432 :M
f6_12 sf
(Negative real constants; m is optional.)S
144 446 :M
f13_12 sf
(real_minus)S
f10_12 sf
(\(n: Real\): Real)S
469 446 :M
f14_12 sf
<C5>S
482 446 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(-n)S
526 446 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Real negation.)S
144 460 :M
f13_12 sf
(real_minus)S
f10_12 sf
(\(n: Int\): Int)S
469 460 :M
f14_12 sf
<C5>S
482 460 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(-n)S
526 460 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer negation.)S
144 474 :M
f13_12 sf
(real_+)S
f10_12 sf
(\(n1: Real, n2: Real\): Real)S
469 474 :M
f14_12 sf
<C5>S
482 474 :M
f6_12 sf
(\(also infix )S
534 474 :M
f14_15 sf
<D2>S
f10_12 sf
(+)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real addition.)S
144 488 :M
f13_12 sf
(real_+)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 488 :M
f14_12 sf
<C5>S
482 488 :M
f6_12 sf
(\(also infix )S
534 488 :M
f14_15 sf
<D2>S
f10_12 sf
(+)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer addition.)S
144 502 :M
f13_12 sf
(real_-)S
f10_12 sf
(\(n1: Real, n2: Real\): Real)S
469 502 :M
f14_12 sf
<C5>S
482 502 :M
f6_12 sf
(\(also infix )S
534 502 :M
f14_15 sf
<D2>S
f10_12 sf
(-)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real difference.)S
144 516 :M
f13_12 sf
(real_-)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 516 :M
f14_12 sf
<C5>S
482 516 :M
f6_12 sf
(\(also infix )S
534 516 :M
f14_15 sf
<D2>S
f10_12 sf
(-)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer difference.)S
144 530 :M
f13_12 sf
(real_*)S
f10_12 sf
(\(n1: Real, n2: Real\): Real)S
469 530 :M
f14_12 sf
<C5>S
482 530 :M
f6_12 sf
(\(also infix )S
534 530 :M
f14_15 sf
<D2>S
f10_12 sf
(*)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real multiplication.)S
144 544 :M
f13_12 sf
(real_*)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 544 :M
f14_12 sf
<C5>S
482 544 :M
f6_12 sf
(\(also infix )S
534 544 :M
f14_15 sf
<D2>S
f10_12 sf
(*)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer multiplication.)S
144 558 :M
f13_12 sf
(real_/)S
f10_12 sf
(\(n1: Real, n2: Real\): Real)S
469 558 :M
f14_12 sf
<C5>S
482 558 :M
f6_12 sf
(\(also infix )S
534 558 :M
f14_15 sf
<D2>S
f10_12 sf
(/)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real division.)S
144 572 :M
f13_12 sf
(real_/)S
f10_12 sf
(\(n1: Int, n2: Int\): Int)S
469 572 :M
f14_12 sf
<C5>S
482 572 :M
f6_12 sf
(\(also infix )S
534 572 :M
f14_15 sf
<D2>S
f10_12 sf
(/)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer division.)S
144 586 :M
f13_12 sf
(real_<)S
f10_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 586 :M
f14_12 sf
<C5>S
482 586 :M
f6_12 sf
(\(also infix )S
534 586 :M
f14_15 sf
<D2>S
f10_12 sf
(<)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real less-than predicate)S
144 600 :M
f13_12 sf
(real_<)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 600 :M
f14_12 sf
<C5>S
482 600 :M
f6_12 sf
(\(also infix )S
534 600 :M
f14_15 sf
<D2>S
f10_12 sf
(<)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer less-than predicate)S
144 614 :M
f13_12 sf
(real_>)S
f10_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 614 :M
f14_12 sf
<C5>S
482 614 :M
f6_12 sf
(\(also infix )S
534 614 :M
f14_15 sf
<D2>S
f10_12 sf
(>)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real greater-than predicate)S
144 628 :M
f13_12 sf
(real_>)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 628 :M
f14_12 sf
<C5>S
482 628 :M
f6_12 sf
(\(also infix )S
534 628 :M
f14_15 sf
<D2>S
f10_12 sf
(>)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer greater-than predicate)S
144 642 :M
f13_12 sf
(real_<=)S
f10_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 642 :M
f14_12 sf
<C5>S
482 642 :M
f6_12 sf
(\(also infix )S
534 642 :M
f14_15 sf
<D2>S
f10_12 sf
(<=)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real no-greater-than predicate)S
144 656 :M
f13_12 sf
(real_<=)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 656 :M
f14_12 sf
<C5>S
482 656 :M
f6_12 sf
(\(also infix )S
534 656 :M
f14_15 sf
<D2>S
f10_12 sf
(<=)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer no-greater-than pred.)S
144 670 :M
f13_12 sf
(real_>=)S
f10_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 670 :M
f14_12 sf
<C5>S
482 670 :M
f6_12 sf
(\(also infix )S
534 670 :M
f14_15 sf
<D2>S
f10_12 sf
(>=)S
f14_15 sf
<D3>S
f6_12 sf
(\) Real no-less-than predicate.)S
144 684 :M
f13_12 sf
(real_>=)S
f10_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 684 :M
f14_12 sf
<C5>S
482 684 :M
f6_12 sf
(\(also infix )S
534 684 :M
f14_15 sf
<D2>S
f10_12 sf
(>=)S
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded integer no-less-than pred.)S
144 698 :M
f13_12 sf
(real_float)S
f10_12 sf
(\(n: Int\): Real)S
469 698 :M
f14_12 sf
<C5>S
482 698 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(float\(n\))S
569 698 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Integer-to-real conversion.)S
144 712 :M
f13_12 sf
(real_float)S
f10_12 sf
(\(n: Real\): Real)S
469 712 :M
f14_12 sf
<C5>S
482 712 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(float\(n\))S
569 712 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded; identity on reals.)S
144 726 :M
f13_12 sf
(real_round)S
f10_12 sf
(\(n: Real\): Int)S
469 726 :M
f14_12 sf
<C5>S
482 726 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(round\(n\))S
569 726 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Real-to-integer rounding.)S
144 740 :M
f13_12 sf
(real_round)S
f10_12 sf
(\(n: Int\): Int)S
469 740 :M
f14_12 sf
<C5>S
482 740 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(round\(n\))S
569 740 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Overloaded; identity on integers.)S
144 754 :M
f13_12 sf
(real_floor)S
f10_12 sf
(\(n: Real\): Int)S
469 754 :M
f14_12 sf
<C5>S
482 754 :M
f6_12 sf
(Greatest integers no greater than n.)S
144 768 :M
f13_12 sf
(real_floor)S
f10_12 sf
(\(n: Int\): Int)S
469 768 :M
f14_12 sf
<C5>S
482 768 :M
f6_12 sf
(Overloaded; identity on integers.)S
144 782 :M
f13_12 sf
(real_ceiling)S
f10_12 sf
(\(n: Real\): Int)S
469 782 :M
f14_12 sf
<C5>S
482 782 :M
f6_12 sf
(Least integers no less than n.)S
144 796 :M
f13_12 sf
(real_ceiling)S
f10_12 sf
(\(n: Int\): Int)S
469 796 :M
f14_12 sf
<C5>S
482 796 :M
f6_12 sf
(Overloaded; identity on integers.)S
145 836 :M
f1_15 sf
(B.6.5)S
185 836 :M
(Math)S
144 870 :M
f13_12 sf
(math_pi)S
f10_12 sf
(: Real)S
469 870 :M
f14_12 sf
<C5>S
482 870 :M
f6_12 sf
(3.1415926535897932384626433833.)S
144 884 :M
f13_12 sf
(math_e)S
f10_12 sf
(: Real)S
469 884 :M
f14_12 sf
<C5>S
482 884 :M
f6_12 sf
(2.7182818284590452353602874714.)S
144 898 :M
f13_12 sf
(math_degree)S
f10_12 sf
(: Real)S
469 898 :M
f14_12 sf
<C5>S
482 898 :M
f6_12 sf
(0.017453292519943295769236907684;)S
482 912 :M
(1 degree in radiants.)S
144 926 :M
f13_12 sf
(math_exp)S
202 926 :M
f10_12 sf
(\(n: Real\): Real)S
469 926 :M
f14_12 sf
<C5>S
482 926 :M
f4_12 sf
(e)S
f6_12 sf
( to the n-th power.)S
144 940 :M
f13_12 sf
(math_log)S
202 940 :M
f10_12 sf
(\(n: Real\): Real)S
469 940 :M
f14_12 sf
<C5>S
482 940 :M
f6_12 sf
(log base )S
525 940 :M
f4_12 sf
(e)S
f6_12 sf
(.)S
144 954 :M
f13_12 sf
(math_sqrt)S
209 954 :M
f10_12 sf
(\(n: Real\): Real)S
469 954 :M
f14_12 sf
<C5>S
482 954 :M
f6_12 sf
(Square root.)S
144 968 :M
f13_12 sf
(math_hypot)S
f10_12 sf
(\(n: Real, m: Real\): Real)S
469 968 :M
f14_12 sf
<C5>S
482 968 :M
f6_12 sf
(sqrt\(\(n*n\)+\(m*m\)\).)S
144 982 :M
f13_12 sf
(math_pow)S
202 982 :M
f10_12 sf
(\(n: Real, m: Real\): Real)S
469 982 :M
f14_12 sf
<C5>S
482 982 :M
f6_12 sf
(n to the m-th power.)S
144 996 :M
f13_12 sf
(math_cos)S
202 996 :M
f10_12 sf
(\(n: Real\): Real)S
469 996 :M
f14_12 sf
<C5>S
482 996 :M
f6_12 sf
(Cosine in radians.)S
144 1010 :M
f13_12 sf
(math_sin)S
202 1010 :M
f10_12 sf
(\(n: Real\): Real)S
469 1010 :M
f14_12 sf
<C5>S
482 1010 :M
f6_12 sf
(Sine in radians.)S
144 1024 :M
f13_12 sf
(math_tan)S
202 1024 :M
f10_12 sf
(\(n: Real\): Real)S
469 1024 :M
f14_12 sf
<C5>S
482 1024 :M
f6_12 sf
(Tangent in radians.)S
endp
%%Page: 56 56
%%BeginPageSetup
initializepage
(luca; page: 56 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(50)S
144 157 :M
f13_12 sf
(math_acos)S
209 157 :M
f10_12 sf
(\(n: Real\): Real)S
469 157 :M
f14_12 sf
<C5>S
482 157 :M
f6_12 sf
(Arc cosine in radians.)S
144 171 :M
f13_12 sf
(math_asin)S
209 171 :M
f10_12 sf
(\(n: Real\): Real)S
469 171 :M
f14_12 sf
<C5>S
482 171 :M
f6_12 sf
(Arc sine in radians.)S
144 185 :M
f13_12 sf
(math_atan)S
209 185 :M
f10_12 sf
(\(n: Real\): Real)S
469 185 :M
f14_12 sf
<C5>S
482 185 :M
f6_12 sf
(Arc tangent in radians.)S
144 199 :M
f13_12 sf
(math_atan2)S
f10_12 sf
(\(n: Real, m: Real\): Real)S
469 199 :M
f14_12 sf
<C5>S
482 199 :M
f6_12 sf
(Arc tangent of n/m in radians.)S
145 239 :M
f1_15 sf
(B.6.6)S
185 239 :M
(Ascii)S
144 273 :M
f13_12 sf
(c)S
f10_12 sf
(: Char)S
469 273 :M
f14_12 sf
<C5>S
482 273 :M
f6_12 sf
(A character in single quotes.)S
144 287 :M
f13_12 sf
(ascii_char)S
f10_12 sf
(\(n: Int\): Char)S
469 287 :M
f14_12 sf
<C5>S
482 287 :M
f6_12 sf
(The ascii character of integer code )S
651 287 :M
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
(.)S
144 301 :M
f13_12 sf
(ascii_val)S
209 301 :M
f10_12 sf
(\(c: Char\): Int)S
469 301 :M
f14_12 sf
<C5>S
482 301 :M
f6_12 sf
(The integer code of the ascii character )S
f14_15 sf
<D2>S
f10_12 sf
(c)S
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 341 :M
f1_15 sf
(B.6.7)S
185 341 :M
(Text)S
145 375 :M
f13_12 sf
(t)S
f10_12 sf
(: Text)S
469 375 :M
f14_12 sf
<C5>S
482 375 :M
f6_12 sf
(A string in double quotes.)S
145 389 :M
f13_12 sf
(text_new)S
203 389 :M
f10_12 sf
(\(size: Int, init: Char\): Text)S
469 389 :M
f14_12 sf
<C5>S
482 389 :M
f6_12 sf
(A text of size )S
f14_15 sf
<D2>S
f10_12 sf
(size)S
581 389 :M
f14_15 sf
<D3>S
f6_12 sf
(, all filled with )S
658 389 :M
f14_15 sf
<D2>S
f10_12 sf
(init)S
690 389 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 403 :M
f13_12 sf
(text_empty)S
f10_12 sf
(\(t: Text\): Bool)S
469 403 :M
f14_12 sf
<C5>S
482 403 :M
f6_12 sf
(Test for empty text.)S
145 417 :M
f13_12 sf
(text_length)S
f10_12 sf
(\(t: Text\): Int)S
469 417 :M
f14_12 sf
<C5>S
482 417 :M
f6_12 sf
(Length of a text.)S
145 431 :M
f13_12 sf
(text_equal)S
f10_12 sf
(\(t1: Text, t2: Text\): Bool)S
469 431 :M
f14_12 sf
<C5>S
482 431 :M
f6_12 sf
(Text equality \(case sensitive\).)S
145 445 :M
f13_12 sf
(text_char)S
210 445 :M
f10_12 sf
(\(t: Text, i: Int\): Char)S
469 445 :M
f14_12 sf
<C5>S
482 445 :M
f6_12 sf
(The i-th character of a text \(if it exists\); zero-indexed.)S
145 459 :M
f13_12 sf
(text_sub)S
203 459 :M
f10_12 sf
(\(t: Text, start: Int, size: Int\): Text)S
482 459 :M
f6_12 sf
(The subtext beginning at )S
604 459 :M
f14_15 sf
<D2>S
f10_12 sf
(start)S
f14_15 sf
<D3>S
f6_12 sf
(, and of size )S
707 459 :M
f14_15 sf
<D2>S
f10_12 sf
(size)S
739 459 :M
f14_15 sf
<D3>S
f6_12 sf
( \(if it)S
482 473 :M
(exists\).)S
145 487 :M
f13_12 sf
(text_&)S
f10_12 sf
(\(t1: Text, t2: Text\): Text)S
469 487 :M
f14_12 sf
<C5>S
482 487 :M
f6_12 sf
(\(also infix )S
534 487 :M
f14_15 sf
<D2>S
f10_12 sf
(&)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
551 487 :M
f10_12 sf
( )S
f6_12 sf
(The concatenation of two texts.)S
145 501 :M
f13_12 sf
(text_precedes)S
239 501 :M
f10_12 sf
(\(t1: Text, t2: Text\): Bool)S
469 501 :M
f14_12 sf
<C5>S
482 501 :M
f6_12 sf
(Whether )S
f14_15 sf
<D2>S
f10_12 sf
(t1)S
544 501 :M
f14_15 sf
<D3>S
f6_12 sf
( precedes )S
595 501 :M
f14_15 sf
<D2>S
f10_12 sf
(t2)S
f14_15 sf
<D3>S
f6_12 sf
( in lexicographic \(ascii\) order.)S
145 515 :M
f13_12 sf
(text_decode)S
f10_12 sf
(\(t: Text\): Text)S
469 515 :M
f14_12 sf
<C5>S
482 515 :M
f6_12 sf
(Every occurrence of an escape sequence is replaced by the)S
482 529 :M
(corresponding non-printing formatting character: )S
721 529 :M
f14_15 sf
<D2>S
f10_12 sf
<5C5C>S
f14_15 sf
<D3>S
f6_12 sf
( =)S
482 543 :M
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f14_15 sf
<D3>S
f6_12 sf
(;  )S
505 543 :M
f14_15 sf
<D2>S
f10_12 sf
(\\')S
f14_15 sf
<D3>S
f6_12 sf
<CA3D20>S
538 543 :M
f14_15 sf
<D2>S
f10_12 sf
(')S
f14_15 sf
<D3>S
f6_12 sf
(;  )S
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f10_14 sf
(")S
579 543 :M
f14_15 sf
<D3>S
f6_12 sf
( = )S
595 543 :M
f14_15 sf
<D2>S
f10_14 sf
(")S
f14_15 sf
<D3>S
f6_12 sf
(;  )S
f14_15 sf
<D2>S
f10_12 sf
<5C>S
629 543 :M
f10_14 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
( = )S
653 543 :M
f14_15 sf
<D2>S
f12_14 sf
(LF)S
673 543 :M
f14_15 sf
<D3>S
f6_12 sf
(;  )S
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f10_14 sf
(r)S
f14_15 sf
<D3>S
f6_12 sf
( = )S
719 543 :M
f14_15 sf
<D2>S
f12_14 sf
(CR)S
739 543 :M
f14_15 sf
<D3>S
f6_12 sf
(;)S
482 557 :M
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f10_14 sf
(t)S
501 557 :M
f14_15 sf
<D3>S
f6_12 sf
( = )S
f14_15 sf
<D2>S
f12_14 sf
(HT)S
536 557 :M
f14_15 sf
<D3>S
f6_12 sf
(;  )S
549 557 :M
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f10_14 sf
(f)S
f14_15 sf
<D3>S
f6_12 sf
( = )S
583 557 :M
f14_15 sf
<D2>S
f12_14 sf
(FF)S
603 557 :M
f14_15 sf
<D3>S
f6_12 sf
(;  )S
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f10_14 sf
(t)S
634 557 :M
f14_15 sf
<D3>S
f6_12 sf
( = )S
f14_15 sf
<D2>S
f12_14 sf
(HT)S
669 557 :M
f14_15 sf
<D3>S
f6_12 sf
(;  )S
682 557 :M
f14_15 sf
<D2>S
f10_12 sf
<5C>S
f12_14 sf
(xxx)S
f14_15 sf
<D3>S
f6_12 sf
( = )S
733 557 :M
f14_15 sf
<D2>S
f12_14 sf
(xxx)S
f14_15 sf
<D3>S
482 571 :M
f6_12 sf
(\(octals )S
517 571 :M
f14_15 sf
<D2>S
f6_12 sf
(000)S
f14_15 sf
<D3>S
f6_12 sf
(..)S
f14_15 sf
<D2>S
f6_12 sf
(177)S
f14_15 sf
<D3>S
f6_12 sf
(\);  )S
f14_15 sf
<D2>S
f10_12 sf
<5C>S
595 571 :M
f12_14 sf
(c)S
f14_15 sf
<D3>S
f6_12 sf
( = )S
619 571 :M
f14_15 sf
<D2>S
f12_14 sf
(c)S
f6_12 sf
( )S
f14_15 sf
<D3>S
f6_12 sf
( \(otherwise\).)S
145 585 :M
f13_12 sf
(text_encode)S
f10_12 sf
(\(t: Text\): Text)S
469 585 :M
f14_12 sf
<C5>S
482 585 :M
f6_12 sf
(Every occurrence of a non-printing formatting character is)S
482 599 :M
(replaced by an escape sequence.)S
145 613 :M
f13_12 sf
(text_explode)S
f10_12 sf
(\(seps: Text, t: Text\): [Text])S
469 613 :M
f14_12 sf
<C5>S
482 613 :M
f6_12 sf
(Splits an input text into a similarly ordered array of texts,)S
482 627 :M
(each a maximal subsequence of the input text not contain)S
757 627 :M
(-)S
482 641 :M
(ing sep chars. The empty text is exploded as a singleton ar)S
762 641 :M
(-)S
482 655 :M
(ray of the empty text. Each sep char in the input produces a)S
482 669 :M
(break, so the size of the result is 1 + the number of sep)S
482 683 :M
(chars in the text.)S
f10_12 sf
( )S
569 683 :M
f14_15 sf
<D2>S
f10_12 sf
(implode\(explode\()S
482 697 :M
f10_14 sf
(")S
f10_12 sf
(c)S
498 697 :M
f10_14 sf
(",)S
f10_12 sf
(text\),'c'\))S
f14_15 sf
<D3>S
f6_12 sf
( is the identity.)S
145 711 :M
f13_12 sf
(text_implode)S
f10_12 sf
(\(sep: Char, a: [Text]\): Text ! net_failure)S
469 725 :M
f14_12 sf
<C5>S
482 725 :M
f6_12 sf
(Concatenate an array of texts into a single text, separating)S
482 739 :M
(the pieces by a single sep char. A zero-length array is im)S
754 739 :M
(-)S
482 753 :M
(ploded as the empty text. )S
f14_15 sf
<D2>S
f10_12 sf
(explode\()S
666 753 :M
f10_14 sf
(")S
f10_12 sf
(c)S
682 753 :M
f10_14 sf
(",)S
f10_12 sf
(implode\()S
482 767 :M
('c')S
504 767 :M
f10_14 sf
(,)S
f10_12 sf
(text\)\))S
f14_15 sf
<D3>S
f6_12 sf
( is the identity provided that the array has)S
482 781 :M
(positive size and sep does not occur in the array elements.)S
145 795 :M
f13_12 sf
(text_hash)S
210 795 :M
f10_12 sf
(\(t: Text\): Int)S
469 795 :M
f14_12 sf
<C5>S
482 795 :M
f6_12 sf
(A hash function.)S
145 809 :M
f13_12 sf
(text_toInt)S
f10_12 sf
(\(t: Text\): Int)S
469 809 :M
f14_12 sf
<C5>S
482 809 :M
f6_12 sf
(Convert a text to an integer \(see also fmt_\).)S
145 823 :M
f13_12 sf
(text_fromInt)S
f10_12 sf
(\(n: Int\): Text)S
469 823 :M
f14_12 sf
<C5>S
482 823 :M
f6_12 sf
(Convert an integer to a text \(see also lex_\).)S
145 837 :M
f13_12 sf
(text_findFirstChar)S
275 837 :M
f10_12 sf
(\(c: Char, t: Text, n: Int\): Int)S
469 851 :M
f14_12 sf
<C5>S
482 851 :M
f6_12 sf
(The index of the first occurrence of )S
655 851 :M
f14_15 sf
<D2>S
f10_12 sf
(c)S
f14_15 sf
<D3>S
f6_12 sf
( in )S
f14_15 sf
<D2>S
f10_12 sf
(t)S
694 851 :M
f14_15 sf
<D3>S
f6_12 sf
(, past )S
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
(. )S
f10_12 sf
(-1)S
482 865 :M
f6_12 sf
(if not found.)S
145 879 :M
f13_12 sf
(text_findLastChar)S
f10_12 sf
(\(c: Char, t: Text, n: Int\): Int)S
469 893 :M
f14_12 sf
<C5>S
482 893 :M
f6_12 sf
(The index of the last occurrence of )S
f14_15 sf
<D2>S
f10_12 sf
(c)S
f14_15 sf
<D3>S
f6_12 sf
( in )S
681 893 :M
f14_15 sf
<D2>S
f10_12 sf
(t)S
f14_15 sf
<D3>S
f6_12 sf
(, before )S
734 893 :M
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
(. )S
f10_12 sf
(-1)S
482 907 :M
f6_12 sf
(if not found.)S
145 921 :M
f13_12 sf
(text_findFirst)S
246 921 :M
f10_12 sf
(\(p: Text, t: Text, n: Int\): Int)S
482 921 :M
f14_12 sf
<C5>S
496 921 :M
f6_12 sf
(The index of the first char of the first occurrence of )S
746 921 :M
f14_15 sf
<D2>S
f10_12 sf
(p)S
f14_15 sf
<D3>S
482 935 :M
f6_12 sf
(in )S
f14_15 sf
<D2>S
f10_12 sf
(t)S
505 935 :M
f14_15 sf
<D3>S
f6_12 sf
(, past )S
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
(. )S
f10_12 sf
(-1)S
f6_12 sf
( if not found.)S
145 949 :M
f13_12 sf
(text_findLast)S
239 949 :M
f10_12 sf
(\(p: Text, t: Text, n: Int\): Int)S
469 949 :M
f14_12 sf
<C5>S
482 949 :M
f6_12 sf
(The index of the first char of the last occurrence of )S
729 949 :M
f14_15 sf
<D2>S
f10_12 sf
(p)S
f14_15 sf
<D3>S
f6_12 sf
( in)S
482 963 :M
f14_15 sf
<D2>S
f10_12 sf
(t)S
f14_15 sf
<D3>S
f6_12 sf
(, before )S
535 963 :M
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
(. )S
f10_12 sf
(-1)S
f6_12 sf
( if not found.)S
145 977 :M
f13_12 sf
(text_replaceAll)S
f10_12 sf
(\(old: Text, new: Text, t: Text\): Text)S
469 991 :M
f14_12 sf
<C5>S
482 991 :M
f6_12 sf
(Replace all occurrences of )S
612 991 :M
f14_15 sf
<D2>S
f10_12 sf
(old)S
637 991 :M
f14_15 sf
<D3>S
f6_12 sf
( by )S
f14_15 sf
<D2>S
f10_12 sf
(new)S
f14_15 sf
<D3>S
f6_12 sf
( in )S
f14_15 sf
<D2>S
f10_12 sf
(t)S
711 991 :M
f14_15 sf
<D3>S
f6_12 sf
(, as found)S
482 1005 :M
(by iterating )S
540 1005 :M
f14_15 sf
<D2>S
f10_12 sf
(findFirst)S
608 1005 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
endp
%%Page: 57 57
%%BeginPageSetup
initializepage
(luca; page: 57 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(51)S
145 156 :M
f1_15 sf
(B.6.8)S
185 156 :M
(Array)S
145 190 :M
f13_12 sf
([e)S
f13_9 sf
0 3 rm
(1)S
0 -3 rm
f13_12 sf
(, ..., e)S
222 193 :M
f13_9 sf
(n)S
f13_12 sf
0 -3 rm
(])S
0 3 rm
f10_12 sf
0 -3 rm
(: [T])S
0 3 rm
469 190 :M
f14_12 sf
<C5>S
482 190 :M
f6_12 sf
(\(for )S
503 190 :M
f10_12 sf
(e1...en: T)S
f6_12 sf
<29>S
145 204 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_new)S
253 204 :M
f10_12 sf
(\(size: Int, init: T\): [T])S
469 204 :M
f14_12 sf
<C5>S
482 204 :M
f6_12 sf
(An array of size )S
562 204 :M
f14_15 sf
<D2>S
f10_12 sf
(size)S
594 204 :M
f14_15 sf
<D3>S
f6_12 sf
(, all filled with )S
f14_15 sf
<D2>S
f10_12 sf
(init)S
702 204 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 218 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_gen)S
253 218 :M
f10_12 sf
(\(size: Int, proc: \(Int\)->T\): [T])S
469 232 :M
f14_12 sf
<C5>S
482 232 :M
f6_12 sf
(An array of size )S
562 232 :M
f14_15 sf
<D2>S
f10_12 sf
(size)S
594 232 :M
f14_15 sf
<D3>S
f6_12 sf
(, filled with )S
f14_15 sf
<D2>S
f10_12 sf
(proc\(i\))S
709 232 :M
f14_15 sf
<D3>S
f6_12 sf
( for )S
732 232 :M
f14_15 sf
<D2>S
f10_12 sf
(i)S
f14_15 sf
<D3>S
482 246 :M
f6_12 sf
(between )S
525 246 :M
f14_15 sf
<D2>S
f10_12 sf
(0)S
f14_15 sf
<D3>S
f6_12 sf
( and )S
562 246 :M
f14_15 sf
<D2>S
f10_12 sf
(size-1)S
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 260 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_#)S
239 260 :M
f10_12 sf
(\(a: [T]\): Int ! net_failure)S
469 260 :M
f14_12 sf
<C5>S
482 260 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(#\(a\))S
540 260 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
547 260 :M
f10_12 sf
( )S
f6_12 sf
(Size of an array.)S
145 274 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_get)S
253 274 :M
f10_12 sf
(\(a: [T], i: Int\): T ! net_failure)S
469 288 :M
f14_12 sf
<C5>S
482 288 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(a[i])S
540 288 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
547 288 :M
f10_12 sf
( )S
f6_12 sf
(The i-th element \(if it exists\), zero-based.)S
145 302 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_set)S
253 302 :M
f10_12 sf
(\(a: [T], i: Int, b: T\): Ok ! net_failure)S
469 316 :M
f14_12 sf
<C5>S
482 316 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(a[i]:=b)S
562 316 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
569 316 :M
f10_12 sf
( )S
f6_12 sf
(Update the i-th element \(if it exists\).)S
145 330 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_sub)S
253 330 :M
f10_12 sf
(\(a: [T], i: Int, n: Int\): [T] ! net_failure)S
469 344 :M
f14_12 sf
<C5>S
482 344 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(a[i for n])S
f14_15 sf
<D3>S
f6_12 sf
<29>S
590 344 :M
f10_12 sf
( )S
598 344 :M
f6_12 sf
(A new array, filled with the ele-)S
482 358 :M
(ments of )S
527 358 :M
f14_15 sf
<D2>S
f10_12 sf
(a)S
f14_15 sf
<D3>S
f6_12 sf
( beginning at )S
606 358 :M
f14_15 sf
<D2>S
f10_12 sf
(i)S
f14_15 sf
<D3>S
f6_12 sf
(, and of size )S
680 358 :M
f14_15 sf
<D2>S
f10_12 sf
(n)S
f14_15 sf
<D3>S
f6_12 sf
( \(if it exists\).)S
145 372 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_upd)S
253 372 :M
f10_12 sf
(\(a: [T], i: Int, n: Int, b: [T]\): Ok ! net_failure)S
469 386 :M
f14_12 sf
<C5>S
482 386 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(a[i for n]:=b)S
605 386 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
612 386 :M
f10_12 sf
( )S
f6_12 sf
(Same as )S
662 386 :M
f14_15 sf
<D2>S
f10_12 sf
(a[n+i]:=b[n];)S
482 400 :M
(... ; a[i]:=b[0])S
f14_15 sf
<D3>S
f6_12 sf
(. I.e. )S
625 400 :M
f14_15 sf
<D2>S
f10_12 sf
(a[i for n])S
f14_15 sf
<D3>S
f6_12 sf
( gets )S
f14_15 sf
<D2>S
f10_12 sf
(b[0)S
482 414 :M
(for n])S
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 428 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(array_@)S
239 428 :M
f10_12 sf
(\(a1: [T], a2: [T]\): [T] ! net_failure)S
469 442 :M
f14_12 sf
<C5>S
482 442 :M
f6_12 sf
(\(also infix )S
534 442 :M
f14_15 sf
<D2>S
f10_12 sf
(@)S
f14_15 sf
<D3>S
f6_12 sf
<29>S
551 442 :M
f10_12 sf
( )S
f6_12 sf
(A new array, filled with the concatenation)S
482 456 :M
(of the elements of )S
f14_15 sf
<D2>S
f10_12 sf
(a1)S
589 456 :M
f14_15 sf
<D3>S
f6_12 sf
( and )S
f14_15 sf
<D2>S
f10_12 sf
(a2)S
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 496 :M
f1_15 sf
(B.6.9)S
185 496 :M
(Net)S
145 530 :M
f13_12 sf
(net_failure)S
f10_12 sf
(: Exception)S
145 544 :M
(All\(T\))S
f13_12 sf
(net_who)S
239 544 :M
f10_12 sf
(\(o: T\): Text ! net_failure thread_alerted)S
469 558 :M
f14_12 sf
<C5>S
482 558 :M
f6_12 sf
(Return a text indicating where a network object or engine)S
482 572 :M
(is registered, or the empty text if the argument is an object)S
482 586 :M
(that has not been registered with a name server.)S
145 600 :M
f10_12 sf
(All\(T<:{}\))S
f13_12 sf
(net_export)S
f10_12 sf
(\(name: Text, server: Text, o: T\): T ! net_failure thread_alerted)S
469 614 :M
f14_12 sf
<C5>S
482 614 :M
f6_12 sf
(Export an object under name )S
624 614 :M
f14_15 sf
<D2>S
f10_12 sf
(name)S
f14_15 sf
<D3>S
f6_12 sf
(, to the name server at)S
482 628 :M
(IP address )S
535 628 :M
f14_15 sf
<D2>S
f10_12 sf
(server)S
f14_15 sf
<D3>S
f6_12 sf
(. The empty text denotes the local IP)S
482 642 :M
(address.)S
145 656 :M
f10_12 sf
(Some\(T<:{}\))S
f13_12 sf
(net_import)S
f10_12 sf
(\(name: Text, server: Text\): T ! net_failure thread_alerted)S
469 670 :M
f14_12 sf
<C5>S
482 670 :M
f6_12 sf
(Import the object of name )S
610 670 :M
f14_15 sf
<D2>S
f10_12 sf
(name)S
f14_15 sf
<D3>S
f6_12 sf
(, from the name server at)S
482 684 :M
(IP address )S
535 684 :M
f14_15 sf
<D2>S
f10_12 sf
(server)S
f14_15 sf
<D3>S
f6_12 sf
(. The empty text denotes the local IP)S
482 698 :M
(address.)S
145 712 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(net_exportEngine)S
f10_12 sf
(\(name: Text, server: Text, arg: T\): Ok)S
482 726 :M
(! net_failure thread_alerted)S
469 740 :M
f14_12 sf
<C5>S
482 740 :M
f6_12 sf
(Export an engine under name )S
f14_15 sf
<D2>S
f10_12 sf
(name)S
658 740 :M
f14_15 sf
<D3>S
f6_12 sf
(, to the name server at)S
482 754 :M
(IP address )S
535 754 :M
f14_15 sf
<D2>S
f10_12 sf
(server)S
f14_15 sf
<D3>S
f6_12 sf
(. The empty text denotes the local IP)S
482 768 :M
(address. The )S
546 768 :M
f14_15 sf
<D2>S
f10_12 sf
(arg)S
f14_15 sf
<D3>S
f6_12 sf
( is given as an argument to all proce)S
747 768 :M
(-)S
482 782 :M
(dures received by the engine to execute.)S
145 796 :M
f10_12 sf
(Some\(T\)All\(U\))S
239 796 :M
f13_12 sf
(net_importEngine)S
f10_12 sf
(\(name: Text, server: Text\): \(\(T\)->U\)->U)S
482 810 :M
(! net_failure thread_alerted)S
469 824 :M
f14_12 sf
<C5>S
482 824 :M
f6_12 sf
(Import the object of name )S
610 824 :M
f14_15 sf
<D2>S
f10_12 sf
(name)S
f14_15 sf
<D3>S
f6_12 sf
(, from the name server at)S
482 838 :M
(IP address )S
535 838 :M
f14_15 sf
<D2>S
f10_12 sf
(server)S
f14_15 sf
<D3>S
f6_12 sf
(. The empty text denotes the local IP)S
482 852 :M
(address.)S
145 892 :M
f1_15 sf
(B.6.10)S
199 892 :M
(Thread)S
145 926 :M
f13_12 sf
(thread_mutex)S
f10_12 sf
(\(\): Mutex)S
469 926 :M
f14_12 sf
<C5>S
482 926 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(mutex\(\))S
562 926 :M
f14_15 sf
<D3>S
f6_12 sf
(\) A new mutex.)S
145 940 :M
f13_12 sf
(thread_condition)S
f10_12 sf
(\(\): Condition)S
469 940 :M
f14_12 sf
<C5>S
482 940 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(condition\(\))S
591 940 :M
f14_15 sf
<D3>S
f6_12 sf
(\) A new condition.)S
145 954 :M
f10_12 sf
(Some\(T\))S
f13_12 sf
(thread_self)S
275 954 :M
f10_12 sf
(\(\): Thread\(T\))S
469 954 :M
f14_12 sf
<C5>S
482 954 :M
f6_12 sf
(The current thread.)S
145 968 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(thread_fork)S
f10_12 sf
(\(f: \(\)->T, stackSize: Int\): Thread\(T\))S
469 982 :M
f14_12 sf
<C5>S
482 982 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(fork\(f,n\))S
576 982 :M
f14_15 sf
<D3>S
f6_12 sf
<29>S
583 982 :M
f10_12 sf
( )S
f6_12 sf
(Fork a new thread executing f. If)S
482 996 :M
(stackSize is zero, a small default size is used.)S
145 1010 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(thread_join)S
f10_12 sf
(\(th: Thread\(T\)\): T)S
469 1010 :M
f14_12 sf
<C5>S
482 1010 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(join\(th\))S
569 1010 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Wait for a thread to complete, and re)S
756 1010 :M
(-)S
482 1024 :M
(turn the result of its procedure.)S
endp
%%Page: 58 58
%%BeginPageSetup
initializepage
(luca; page: 58 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(52)S
145 157 :M
f13_12 sf
(thread_wait)S
f10_12 sf
(\(mx: Mutex, cd: Condition\): Ok)S
469 157 :M
f14_12 sf
<C5>S
482 157 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(wait\(mx,cd\))S
591 157 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Wait on a mutex and a condition.)S
145 171 :M
f13_12 sf
(thread_acquire)S
246 171 :M
f10_12 sf
(\(mx: Mutex\): Ok)S
469 171 :M
f14_12 sf
<C5>S
482 171 :M
f6_12 sf
(Acquire a mutex \(use lock ... end instead\).)S
145 185 :M
f13_12 sf
(thread_release)S
246 185 :M
f10_12 sf
(\(mx: Mutex\): Ok)S
469 185 :M
f14_12 sf
<C5>S
482 185 :M
f6_12 sf
(Release a mutex \(use lock ... end instead\))S
145 199 :M
f13_12 sf
(thread_broadcast)S
f10_12 sf
(\(cd: Condition\): Ok)S
469 199 :M
f14_12 sf
<C5>S
482 199 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(broadcast\(cd\))S
605 199 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Wake-up to all threads waiting)S
482 213 :M
(on a condition.)S
145 227 :M
f13_12 sf
(thread_signal)S
239 227 :M
f10_12 sf
(\(cd: Condition\): Ok)S
469 227 :M
f14_12 sf
<C5>S
482 227 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(signal\(cd\))S
f14_15 sf
<D3>S
f6_12 sf
(\) Wake-up at least one thread waiting)S
482 241 :M
(on a condition.)S
145 255 :M
f13_12 sf
(thread_pause)S
f10_12 sf
(\(r: Real\): Ok)S
469 255 :M
f14_12 sf
<C5>S
482 255 :M
f6_12 sf
(\(also )S
f14_15 sf
<D2>S
f10_12 sf
(pause\(r\))S
569 255 :M
f14_15 sf
<D3>S
f6_12 sf
(\) Pause the current thread for r seconds.)S
145 269 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(thread_lock)S
f10_12 sf
(\(m: Mutex, body: \(\)->T\): T)S
469 269 :M
f14_12 sf
<C5>S
482 269 :M
f6_12 sf
(Execute under a locked mutex \(use lock ... end instead\).)S
145 283 :M
f13_12 sf
(thread_alerted)S
246 283 :M
f10_12 sf
(: Exception)S
469 283 :M
f14_12 sf
<C5>S
482 283 :M
f6_12 sf
(\(See the threads spec.\))S
145 297 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(thread_alert)S
275 297 :M
f10_12 sf
(\(t: Thread\(T\)\): Ok)S
469 297 :M
f14_12 sf
<C5>S
482 297 :M
f6_12 sf
(\(See the threads spec.\))S
145 311 :M
f13_12 sf
(thread_testAlert)S
f10_12 sf
(\(\): Bool)S
469 311 :M
f14_12 sf
<C5>S
482 311 :M
f6_12 sf
(\(See the threads spec.\))S
145 325 :M
f13_12 sf
(thread_alertWait)S
f10_12 sf
(\(mx: Mutex, cd: Condition\): Ok ! thread_alerted)S
469 339 :M
f14_12 sf
<C5>S
482 339 :M
f6_12 sf
(\(See the threads spec.\))S
145 353 :M
f10_12 sf
(All\(T\))S
f13_12 sf
(thread_alertJoin)S
f10_12 sf
(\(th: Thread\(T\)\): Ok ! thread_alerted)S
469 367 :M
f14_12 sf
<C5>S
482 367 :M
f6_12 sf
(\(See the threads spec.\))S
145 381 :M
f13_12 sf
(thread_alertPause)S
f10_12 sf
(\(r: Real\): Ok ! thread_alerted)S
469 395 :M
f14_12 sf
<C5>S
482 395 :M
f6_12 sf
(\(See the threads spec.\))S
145 435 :M
f1_15 sf
(B.6.11)S
199 435 :M
(Rd)S
145 469 :M
f13_12 sf
(rd_failure)S
f10_12 sf
(: Exception)S
145 483 :M
f13_12 sf
(rd_eofFailure)S
239 483 :M
f10_12 sf
(: Exception)S
145 497 :M
f13_12 sf
(rd_new)S
f10_12 sf
(\(t: Text\): Rd)S
469 497 :M
f14_12 sf
<C5>S
482 497 :M
f6_12 sf
(A reader on a text \(a Modula-3 TextRd\).)S
145 511 :M
f13_12 sf
(rd_stdin)S
203 511 :M
f10_12 sf
(: Rd)S
469 511 :M
f14_12 sf
<C5>S
482 511 :M
f6_12 sf
(The standard input \(the Modula-3 Stdio.Stdin\).)S
145 525 :M
f13_12 sf
(rd_open)S
f10_12 sf
(\(fs: FileSystem, t: Text\): Rd ! rd_failure)S
469 539 :M
f14_12 sf
<C5>S
482 539 :M
f6_12 sf
(Given a file system and a file name, returns a reader on a)S
482 553 :M
(file \(a Modula-3 FileRd, open for read\). The local file sys)S
759 553 :M
(-)S
482 567 :M
(tem is available through the predefined lexically scoped)S
482 581 :M
(identifier )S
529 581 :M
f14_15 sf
<D2>S
f10_12 sf
(fileSys)S
f14_15 sf
<D3>S
f6_12 sf
(. Moreover, )S
645 581 :M
f14_15 sf
<D2>S
f10_12 sf
(fileSysReader)S
f14_15 sf
<D3>S
f6_12 sf
( is a)S
482 595 :M
(read-only version of the local file system.)S
145 609 :M
f13_12 sf
(rd_getChar)S
f10_12 sf
(\(r: Rd\): Char ! rd_failure rd_eofFailure thread_alerted)S
469 623 :M
f14_12 sf
<C5>S
482 623 :M
f6_12 sf
(Get the next character from a reader.)S
145 637 :M
f13_12 sf
(rd_eof)S
f10_12 sf
(\(r: Rd\): Bool ! rd_failure thread_alerted)S
469 651 :M
f14_12 sf
<C5>S
482 651 :M
f6_12 sf
(Test for the end-of-stream on a reader.)S
145 665 :M
f13_12 sf
(rd_unGetChar)S
f10_12 sf
(\(r: Rd\): Ok)S
469 665 :M
f14_12 sf
<C5>S
482 665 :M
f6_12 sf
(Put the last character obtained by getChar back into the)S
482 679 :M
(reader \(unfortunately, it may crash if misused!\).)S
145 693 :M
f13_12 sf
(rd_charsReady)S
239 693 :M
f10_12 sf
(\(r: Rd\): Int ! rd_failure)S
469 693 :M
f14_12 sf
<C5>S
482 693 :M
f6_12 sf
(The number of characters that can be read without block)S
753 693 :M
(-)S
482 707 :M
(ing.)S
145 721 :M
f13_12 sf
(rd_getText)S
f10_12 sf
(\(r: Rd, n: Int\): Text ! rd_failure thread_alerted)S
469 735 :M
f14_12 sf
<C5>S
482 735 :M
f6_12 sf
(Read the next n characters, or at most n on end-of-file.)S
145 749 :M
f13_12 sf
(rd_getLine)S
f10_12 sf
(\(r: Rd\): Text ! rd_failure rd_eofFailure thread_alerted)S
469 763 :M
f14_12 sf
<C5>S
482 763 :M
f6_12 sf
(Read the next line and return it without including the end)S
757 763 :M
(-)S
482 777 :M
(of-line character.)S
145 791 :M
f13_12 sf
(rd_index)S
203 791 :M
f10_12 sf
(\(r: Rd\): Int)S
469 791 :M
f14_12 sf
<C5>S
482 791 :M
f6_12 sf
(The current reader position.)S
145 805 :M
f13_12 sf
(rd_length)S
210 805 :M
f10_12 sf
(\(r: Rd\): Int ! rd_failure thread_alerted)S
469 819 :M
f14_12 sf
<C5>S
482 819 :M
f6_12 sf
(Length of a reader \(including read part\).)S
145 833 :M
f13_12 sf
(rd_seek)S
f10_12 sf
(\(r: Rd, n: Int\): Ok ! rd_failure thread_alerted)S
469 847 :M
f14_12 sf
<C5>S
482 847 :M
f6_12 sf
(Reposition a reader.)S
145 861 :M
f13_12 sf
(rd_close)S
203 861 :M
f10_12 sf
(\(r: Rd\): Ok ! rd_failure thread_alerted)S
469 875 :M
f14_12 sf
<C5>S
482 875 :M
f6_12 sf
(Close a reader.)S
145 889 :M
f13_12 sf
(rd_intermittent)S
f10_12 sf
(\(r: Rd\): Bool)S
469 889 :M
f14_12 sf
<C5>S
482 889 :M
f6_12 sf
(Whether the reader is stream-like \(not file-like\).)S
145 903 :M
f13_12 sf
(rd_seekable)S
f10_12 sf
(\(r: Rd\): Bool)S
469 903 :M
f14_12 sf
<C5>S
482 903 :M
f6_12 sf
(Whether the reader can be repositioned.)S
145 917 :M
f13_12 sf
(rd_closed)S
210 917 :M
f10_12 sf
(\(r: Rd\): Bool)S
469 917 :M
f14_12 sf
<C5>S
482 917 :M
f6_12 sf
(Whether the reader is closed.)S
145 957 :M
f1_15 sf
(B.6.12)S
199 957 :M
(Wr)S
145 991 :M
f13_12 sf
(wr_failure)S
f10_12 sf
(: Exception)S
145 1005 :M
f13_12 sf
(wr_new)S
f10_12 sf
(\(\): Wr)S
469 1005 :M
f14_12 sf
<C5>S
482 1005 :M
f6_12 sf
(A writer to a text \(a Modula-3 TextWr\).)S
145 1019 :M
f13_12 sf
(wr_toText)S
210 1019 :M
f10_12 sf
(\(w: Wr\): Text)S
469 1019 :M
f14_12 sf
<C5>S
482 1019 :M
f6_12 sf
(Emptying a writer to a text..)S
145 1033 :M
f13_12 sf
(wr_stdout)S
210 1033 :M
f10_12 sf
(: Wr)S
469 1033 :M
f14_12 sf
<C5>S
482 1033 :M
f6_12 sf
(The standard output \(the Modula-3 Stdio.Stdout\).)S
endp
%%Page: 59 59
%%BeginPageSetup
initializepage
(luca; page: 59 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(53)S
145 157 :M
f13_12 sf
(wr_stderr)S
210 157 :M
f10_12 sf
(: Wr)S
469 157 :M
f14_12 sf
<C5>S
482 157 :M
f6_12 sf
(The standard error \(the Modula-3 Stdio.Stderr\).)S
145 171 :M
f13_12 sf
(wr_open)S
f10_12 sf
(\(fs: FileSystem, t: Text\): Wr ! wr_failure)S
469 185 :M
f14_12 sf
<C5>S
482 185 :M
f6_12 sf
(Given a file system and a file name, returns a writer to the)S
482 199 :M
(beginning of a file \(a Modula-3 FileWr, open for write\).)S
482 213 :M
(The local file system is available through the predefined)S
482 227 :M
(lexically scoped identifier )S
610 227 :M
f14_15 sf
<D2>S
f10_12 sf
(fileSys)S
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 241 :M
f13_12 sf
(wr_openAppend)S
239 241 :M
f10_12 sf
(\(fs: FileSystem, t: Text\): Wr ! wr_failure)S
469 255 :M
f14_12 sf
<C5>S
482 255 :M
f6_12 sf
(Given a file system and a file name, returns a writer to the)S
482 269 :M
(end of file \(a Modula-3 FileWr, open for append\). The lo)S
756 269 :M
(-)S
482 283 :M
(cal file system is available through the predefined lexically)S
482 297 :M
(scoped identifier )S
f14_15 sf
<D2>S
f10_12 sf
(fileSys)S
619 297 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 311 :M
f13_12 sf
(wr_putChar)S
f10_12 sf
(\(w: Wr, c: Char\): Ok ! wr_failure thread_alerted)S
469 325 :M
f14_12 sf
<C5>S
482 325 :M
f6_12 sf
(Put a character to a writer .)S
145 339 :M
f13_12 sf
(wr_putText)S
f10_12 sf
(\(w: Wr, t: Text\): Ok ! wr_failure thread_alerted)S
469 353 :M
f14_12 sf
<C5>S
482 353 :M
f6_12 sf
(Put a text to a writer .)S
145 367 :M
f13_12 sf
(wr_flush)S
203 367 :M
f10_12 sf
(\(w: Wr\): Ok ! wr_failure thread_alerted)S
469 381 :M
f14_12 sf
<C5>S
482 381 :M
f6_12 sf
(Flush a writer: all buffered writes to their final destination.)S
145 395 :M
f13_12 sf
(wr_index)S
203 395 :M
f10_12 sf
(\(w: Wr\): Int)S
469 395 :M
f14_12 sf
<C5>S
482 395 :M
f6_12 sf
(The current writer position)S
145 409 :M
f13_12 sf
(wr_length)S
210 409 :M
f10_12 sf
(\(w: Wr\): Int ! wr_failure thread_alerted)S
469 423 :M
f14_12 sf
<C5>S
482 423 :M
f6_12 sf
(Length of a writer.)S
145 437 :M
f13_12 sf
(wr_seek)S
f10_12 sf
(\(w: Wr, n: Int\): Ok ! wr_failure thread_alerted)S
469 451 :M
f14_12 sf
<C5>S
482 451 :M
f6_12 sf
(Reposition a writer.)S
145 465 :M
f13_12 sf
(wr_close)S
203 465 :M
f10_12 sf
(\(w: Wr\): Ok ! wr_failure thread_alerted)S
469 479 :M
f14_12 sf
<C5>S
482 479 :M
f6_12 sf
(Close a writer.)S
145 493 :M
f13_12 sf
(wr_buffered)S
f10_12 sf
(\(w: Wr\): Bool)S
469 493 :M
f14_12 sf
<C5>S
482 493 :M
f6_12 sf
(Whether the writer is buffered.)S
145 507 :M
f13_12 sf
(wr_seekable)S
f10_12 sf
(\(w: Wr\): Bool)S
469 507 :M
f14_12 sf
<C5>S
482 507 :M
f6_12 sf
(Whether the writer can be repositioned.)S
145 521 :M
f13_12 sf
(wr_closed)S
210 521 :M
f10_12 sf
(\(w: Wr\): Bool)S
469 521 :M
f14_12 sf
<C5>S
482 521 :M
f6_12 sf
(Whether the writer is closed.)S
145 561 :M
f1_15 sf
(B.6.13)S
199 561 :M
(Pickle)S
145 595 :M
f13_12 sf
(pickle_failure)S
246 595 :M
f10_12 sf
(: Exception)S
145 609 :M
(All\(T\))S
f13_12 sf
(pickle_write)S
275 609 :M
f10_12 sf
(\(w: Wr, v: T\): Ok ! pickle_failure wr_failure thread_alerted)S
469 623 :M
f14_12 sf
<C5>S
482 623 :M
f6_12 sf
(Copy a value to a writer, similarly to sys_copy.)S
145 637 :M
f10_12 sf
(Some\(T\))S
f13_12 sf
(pickle_read)S
275 637 :M
f10_12 sf
(\(r: Rd\): T ! pickle_failure rd_failure rd_eofFailure thread_alerted)S
469 651 :M
f14_12 sf
<C5>S
482 651 :M
f6_12 sf
(Copy a value from a reader, similarly to sys_copy.)S
145 691 :M
f1_15 sf
(B.6.14)S
199 691 :M
(Lex)S
145 725 :M
f13_12 sf
(lex_failure)S
f10_12 sf
(: Exception)S
145 739 :M
f13_12 sf
(lex_scan)S
203 739 :M
f10_12 sf
(\(r: Rd, t: Text\): Text ! rd_failure thread_alerted)S
469 753 :M
f14_12 sf
<C5>S
482 753 :M
f6_12 sf
(Read from r the longest prefix formed of characters listed)S
482 767 :M
(in t, and return it.)S
145 781 :M
f13_12 sf
(lex_skip)S
203 781 :M
f10_12 sf
(\(r: Rd, t: Text\): Ok ! rd_failure thread_alerted)S
469 795 :M
f14_12 sf
<C5>S
482 795 :M
f6_12 sf
(Read from r the longest prefix formed of characters listed)S
482 809 :M
(in t, and discard it.)S
145 823 :M
f13_12 sf
(lex_match)S
210 823 :M
f10_12 sf
(\(r: Rd, t: Text\): Ok ! lex_failure rd_failure thread_alerted)S
469 837 :M
f14_12 sf
<C5>S
482 837 :M
f6_12 sf
(Read from r the string t and discard it; raise failure if not)S
482 851 :M
(found.)S
145 865 :M
f13_12 sf
(lex_bool)S
203 865 :M
f10_12 sf
(\(r: Rd\): Bool ! lex_failure rd_failure thread_alerted)S
469 879 :M
f14_12 sf
<C5>S
482 879 :M
f6_12 sf
(Skip blanks, and attempt to read a boolean from r.)S
145 893 :M
f13_12 sf
(lex_int)S
f10_12 sf
(\(r: Rd\): Int ! lex_failure rd_failure thread_alerted)S
469 907 :M
f14_12 sf
<C5>S
482 907 :M
f6_12 sf
(Skip blanks, and attempt to read an integer from r.)S
145 921 :M
f13_12 sf
(lex_real)S
203 921 :M
f10_12 sf
(\(r: Rd\): Real ! lex_failure rd_failure thread_alerted)S
469 935 :M
f14_12 sf
<C5>S
482 935 :M
f6_12 sf
(Skip blanks, and attempt to read a real from r.)S
145 975 :M
f1_15 sf
(B.6.15)S
199 975 :M
(Fmt)S
145 1009 :M
f13_12 sf
(fmt_padLft)S
f10_12 sf
(\(t: Text, length: Int\): Text)S
469 1009 :M
f14_12 sf
<C5>S
482 1009 :M
f6_12 sf
(If t is shorted then length, pad t with blanks on the left so)S
482 1023 :M
(that it has the given length.)S
endp
%%Page: 60 60
%%BeginPageSetup
initializepage
(luca; page: 60 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(54)S
145 157 :M
f13_12 sf
(fmt_padRht)S
f10_12 sf
(\(t: Text, length: Int\): Text)S
469 157 :M
f14_12 sf
<C5>S
482 157 :M
f6_12 sf
(If t is shorted then length, pad t with blanks on the right so)S
482 171 :M
(that it has the given length.)S
145 185 :M
f13_12 sf
(fmt_bool)S
203 185 :M
f10_12 sf
(\(b: Bool\): Text)S
469 185 :M
f14_12 sf
<C5>S
482 185 :M
f6_12 sf
(Convert a boolean to its printable form.)S
145 199 :M
f13_12 sf
(fmt_int)S
f10_12 sf
(\(n: Int\): Text)S
469 199 :M
f14_12 sf
<C5>S
482 199 :M
f6_12 sf
(Convert an integer to its printable form.)S
145 213 :M
f13_12 sf
(fmt_real)S
203 213 :M
f10_12 sf
(\(r: Real\): Text)S
469 213 :M
f14_12 sf
<C5>S
482 213 :M
f6_12 sf
(Convert a real to its printable form.)S
145 253 :M
f1_15 sf
(B.6.16)S
199 253 :M
(Process)S
145 287 :M
f13_12 sf
(process_new)S
f10_12 sf
(\(pr: Processor, nameAndArgs: [Text], mergeOut: Bool\): Process)S
469 301 :M
f14_12 sf
<C5>S
482 301 :M
f6_12 sf
(Create a process from a processor and the given process)S
482 315 :M
(name and arguments. The local processor is available as)S
482 329 :M
(the lexically scoped identifier )S
f14_15 sf
<D2>S
f10_12 sf
(processor)S
695 329 :M
f14_15 sf
<D3>S
f6_12 sf
(. If mergeOut)S
482 343 :M
(is true, use a single pipe for stdout and stderr.)S
145 357 :M
f13_12 sf
(process_in)S
f10_12 sf
(\(p: Process\): Wr)S
469 357 :M
f14_12 sf
<C5>S
482 357 :M
f6_12 sf
(The stdin pipe of a process.)S
145 371 :M
f13_12 sf
(process_out)S
f10_12 sf
(\(p: Process\): Rd)S
469 371 :M
f14_12 sf
<C5>S
482 371 :M
f6_12 sf
(The stdout pipe of a process.)S
145 385 :M
f13_12 sf
(process_err)S
f10_12 sf
(\(p: Process\): Rd)S
469 385 :M
f14_12 sf
<C5>S
482 385 :M
f6_12 sf
(The stderr pipe of a process.)S
145 399 :M
f13_12 sf
(process_wait)S
f10_12 sf
(\(p: Process\): Int)S
469 399 :M
f14_12 sf
<C5>S
482 399 :M
f6_12 sf
(Wait for the process to exit, close all its pipes, and return)S
482 413 :M
(the exit code.)S
145 427 :M
f13_12 sf
(process_filter)S
246 427 :M
f10_12 sf
(\(pr: Processor, nameAndArgs: [Text], input: Text\): Text ! net_failure)S
469 441 :M
f14_12 sf
<C5>S
482 441 :M
f6_12 sf
(Create a process from a processor and the given process)S
482 455 :M
(name and arguments. The local processor is available as)S
482 469 :M
(the lexically scoped identifier )S
f14_15 sf
<D2>S
f10_12 sf
(processor)S
695 469 :M
f14_15 sf
<D3>S
f6_12 sf
(. The stderr)S
482 483 :M
(output is merged stdout. Usage: feed the input to its stdin)S
482 497 :M
(pipe and close it; read all the output from its stdout pipe)S
482 511 :M
(and close it; return the output.)S
145 551 :M
f1_15 sf
(B.6.17)S
199 551 :M
(Color)S
145 585 :M
f13_12 sf
(color_named)S
f10_12 sf
(\(name: Text\): Color)S
469 585 :M
f14_12 sf
<C5>S
482 585 :M
f6_12 sf
(Get a color from its name \(see the ColorName Modula-3)S
482 599 :M
(interface\).)S
145 613 :M
f13_12 sf
(color_rgb)S
210 613 :M
f10_12 sf
(\(r: Real, g: Real b: Real\): Color)S
469 613 :M
f14_12 sf
<C5>S
482 613 :M
f6_12 sf
(Get a color from rgb \(each 0.0 .. 1.0\).)S
145 627 :M
f13_12 sf
(color_hsv)S
210 627 :M
f10_12 sf
(\(h: Real, s: Real v: Real\): Color)S
469 627 :M
f14_12 sf
<C5>S
482 627 :M
f6_12 sf
(Get a color from hsv \(each 0.0 .. 1.0\).)S
145 641 :M
f13_12 sf
(color_r)S
f10_12 sf
(\(c: Color\): Real)S
469 641 :M
f14_12 sf
<C5>S
482 641 :M
f6_12 sf
(The red color component.)S
145 655 :M
f13_12 sf
(color_g)S
f10_12 sf
(\(c: Color\): Real)S
469 655 :M
f14_12 sf
<C5>S
482 655 :M
f6_12 sf
(The green color component.)S
145 669 :M
f13_12 sf
(color_b)S
f10_12 sf
(\(c: Color\): Real)S
469 669 :M
f14_12 sf
<C5>S
482 669 :M
f6_12 sf
(The blue color component.)S
145 683 :M
f13_12 sf
(color_h)S
f10_12 sf
(\(c: Color\): Real)S
469 683 :M
f14_12 sf
<C5>S
482 683 :M
f6_12 sf
(The hue color component.)S
145 697 :M
f13_12 sf
(color_s)S
f10_12 sf
(\(c: Color\): Real)S
469 697 :M
f14_12 sf
<C5>S
482 697 :M
f6_12 sf
(The saturation color component.)S
145 711 :M
f13_12 sf
(color_v)S
f10_12 sf
(\(c: Color\): Real)S
469 711 :M
f14_12 sf
<C5>S
482 711 :M
f6_12 sf
(The value color component.)S
145 725 :M
f13_12 sf
(color_brightness)S
f10_12 sf
(\(c: Color\): Real)S
469 725 :M
f14_12 sf
<C5>S
482 725 :M
f6_12 sf
(The total brightness \(0.0 .. 1.0\).)S
145 765 :M
f1_15 sf
(B.6.18)S
199 765 :M
(Form)S
145 799 :M
f13_12 sf
(form_failure)S
f10_12 sf
(: Exception)S
145 813 :M
f13_12 sf
(form_new)S
203 813 :M
f10_12 sf
(\(t: Text\): Form ! form_failure)S
469 813 :M
f14_12 sf
<C5>S
482 813 :M
f6_12 sf
(Read a form description from a text.)S
145 827 :M
f13_12 sf
(form_fromFile)S
239 827 :M
f10_12 sf
(\(file: Text\): Form ! form_failure thread_alerted)S
469 841 :M
f14_12 sf
<C5>S
482 841 :M
f6_12 sf
(Read a form description from a file.)S
145 855 :M
f13_12 sf
(form_attach)S
f10_12 sf
(\(fv: Form, name: Text, f: \(Form\)->Ok\): Ok ! form_failure)S
469 869 :M
f14_12 sf
<C5>S
482 869 :M
f6_12 sf
(Attach a procedure to an event, under a form. The proce-)S
482 883 :M
(dure is passed back the form when the event happens.)S
145 897 :M
f13_12 sf
(form_getBool)S
f10_12 sf
(\(fv: Form, name: Text, property: Text\): Bool ! form_failure)S
469 911 :M
f14_12 sf
<C5>S
482 911 :M
f6_12 sf
(Get the boolean value of the named property of the named)S
482 925 :M
(interactor. \(Do not confuse with form_getBoolean.\))S
145 939 :M
f13_12 sf
(form_putBool)S
f10_12 sf
(\(fv: Form, name: Text, property: Text, b: Bool\): Ok ! form_failure)S
469 953 :M
f14_12 sf
<C5>S
482 953 :M
f6_12 sf
(Set the boolean value of the named property of the named)S
482 967 :M
(interactor. \(Do not confuse with form_putBoolean.\))S
145 981 :M
f13_12 sf
(form_getInt)S
f10_12 sf
(\(fv: Form, name: Text, property: Text\): Int ! form_failure)S
469 995 :M
f14_12 sf
<C5>S
482 995 :M
f6_12 sf
(Get the integer value of the named property of the named)S
482 1009 :M
(interactor. If property is the empty text, get the )S
710 1009 :M
f14_15 sf
<D2>S
f6_12 sf
("value")S
f14_15 sf
<D3>S
482 1023 :M
f6_12 sf
(property.)S
endp
%%Page: 61 61
%%BeginPageSetup
initializepage
(luca; page: 61 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(55)S
145 157 :M
f13_12 sf
(form_putInt)S
f10_12 sf
(\(fv: Form, name: Text, property: Text, n: Int\): Ok ! form_failure)S
469 171 :M
f14_12 sf
<C5>S
482 171 :M
f6_12 sf
(Set the integer value of the named property of the named)S
482 185 :M
(interactor. If property is the empty text, set the )S
f14_15 sf
<D2>S
f6_12 sf
("value")S
747 185 :M
f14_15 sf
<D3>S
482 199 :M
f6_12 sf
(property.)S
145 213 :M
f13_12 sf
(form_getText)S
f10_12 sf
(\(fv: Form, name: Text, property: Text\): Text ! form_failure)S
469 227 :M
f14_12 sf
<C5>S
482 227 :M
f6_12 sf
(Get the text value of the named property of the named in-)S
482 241 :M
(teractor. If property is the empty text, get the )S
f14_15 sf
<D2>S
f6_12 sf
("value")S
739 241 :M
f14_15 sf
<D3>S
482 255 :M
f6_12 sf
(property.)S
145 269 :M
f13_12 sf
(form_putText)S
f10_12 sf
(\(fv: Form, name: Text, property: Text, t: Text, append: Bool\): Ok !)S
482 283 :M
(form_failure)S
469 297 :M
f14_12 sf
<C5>S
482 297 :M
f6_12 sf
(Set the text value of the named property of the named in-)S
482 311 :M
(teractor. If property is the empty text, set the )S
699 311 :M
f14_15 sf
<D2>S
f6_12 sf
("value")S
738 311 :M
f14_15 sf
<D3>S
482 325 :M
f6_12 sf
(property.)S
145 339 :M
f13_12 sf
(form_getBoolean)S
f10_12 sf
(\(fv: Form, name: Text\): Bool ! form_failure)S
469 353 :M
f14_12 sf
<C5>S
482 353 :M
f6_12 sf
(Get the boolean value of the named boolean-choice inter)S
754 353 :M
(-)S
482 367 :M
(actor.)S
145 381 :M
f13_12 sf
(form_putBoolean)S
f10_12 sf
(\(fv: Form, name: Text, b: Bool\): Ok ! form_failure)S
469 395 :M
f14_12 sf
<C5>S
482 395 :M
f6_12 sf
(Set the boolean value of the named boolean-choice interac)S
763 395 :M
(-)S
482 409 :M
(tor.)S
145 423 :M
f13_12 sf
(form_getChoice)S
246 423 :M
f10_12 sf
(\(fv: Form, radioName: Text\): Text ! form_failure)S
469 437 :M
f14_12 sf
<C5>S
482 437 :M
f6_12 sf
(Get the choice value of the named radio interactor.)S
145 451 :M
f13_12 sf
(form_putChoice)S
246 451 :M
f10_12 sf
(\(fv: Form, radioName: Text, choiceName: Text\): Ok ! form_failure)S
469 465 :M
f14_12 sf
<C5>S
482 465 :M
f6_12 sf
(Set the choice value of the named radio interactor.)S
145 479 :M
f13_12 sf
(form_getReactivity)S
275 479 :M
f10_12 sf
(\(fv: Form, name: Text\): Text ! form_failure)S
469 493 :M
f14_12 sf
<C5>S
482 493 :M
f6_12 sf
(Get the reactivity of the named interactor. It can be)S
482 507 :M
f14_15 sf
<D2>S
f6_12 sf
("active")S
f14_15 sf
<D3>S
f6_12 sf
(, )S
f14_15 sf
<D2>S
f6_12 sf
("passive")S
581 507 :M
f14_15 sf
<D3>S
f6_12 sf
(, )S
f14_15 sf
<D2>S
f6_12 sf
("dormant")S
f14_15 sf
<D3>S
f6_12 sf
(, or )S
664 507 :M
f14_15 sf
<D2>S
f6_12 sf
("vanished")S
720 507 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 521 :M
f13_12 sf
(form_putReactivity)S
275 521 :M
f10_12 sf
(\(fv: Form, name: Text, r: Text\): Ok ! form_failure)S
469 535 :M
f14_12 sf
<C5>S
482 535 :M
f6_12 sf
(Set the reactivity of the named interactor. It can be)S
482 549 :M
f14_15 sf
<D2>S
f6_12 sf
("active")S
f14_15 sf
<D3>S
f6_12 sf
(, )S
f14_15 sf
<D2>S
f6_12 sf
("passive")S
581 549 :M
f14_15 sf
<D3>S
f6_12 sf
(, )S
f14_15 sf
<D2>S
f6_12 sf
("dormant")S
f14_15 sf
<D3>S
f6_12 sf
(, or )S
664 549 :M
f14_15 sf
<D2>S
f6_12 sf
("vanished")S
720 549 :M
f14_15 sf
<D3>S
f6_12 sf
(.)S
145 563 :M
f13_12 sf
(form_popUp)S
f10_12 sf
(\(fv: Form, name: Text\): Ok ! form_failure)S
469 577 :M
f14_12 sf
<C5>S
482 577 :M
f6_12 sf
(Pop up the named interactor.)S
145 591 :M
f13_12 sf
(form_popDown)S
f10_12 sf
(\(fv: Form, name: Text\): Ok ! form_failure)S
469 605 :M
f14_12 sf
<C5>S
482 605 :M
f6_12 sf
(Pop down the named interactor.)S
145 619 :M
f13_12 sf
(form_insert)S
f10_12 sf
(\(fv: Form, parent: Text, t: Text, n: Int\): Ok ! form_failure)S
469 633 :M
f14_12 sf
<C5>S
482 633 :M
f6_12 sf
(Insert the form described by t as child n of parent.)S
145 647 :M
f13_12 sf
(form_move)S
210 647 :M
f10_12 sf
(\(fv: Form, parent: Text, child: Text, toChild: Text, before: Bool\): Ok !)S
482 661 :M
(form_failure)S
469 675 :M
f14_12 sf
<C5>S
482 675 :M
f6_12 sf
(Move child before or after toChild of parent; after )S
725 675 :M
f14_15 sf
<D2>S
f6_12 sf
("")S
738 675 :M
f14_15 sf
<D3>S
482 689 :M
f6_12 sf
(means first, before)S
572 689 :M
f14_15 sf
<D2>S
f6_12 sf
("")S
f14_15 sf
<D3>S
f6_12 sf
( means last.)S
145 703 :M
f13_12 sf
(form_delete)S
f10_12 sf
(\(fv: Form, parent: Text, child: Text\): Ok ! form_failure)S
469 717 :M
f14_12 sf
<C5>S
482 717 :M
f6_12 sf
(Delete the named child of parent.)S
145 731 :M
f13_12 sf
(form_deleteRange)S
f10_12 sf
(\(fv: Form, parent: Text, n: Int, count: Int\): Ok ! form_failure)S
469 745 :M
f14_12 sf
<C5>S
482 745 :M
f6_12 sf
(Delete count children of parent, from child n.)S
145 759 :M
f13_12 sf
(form_takeFocus)S
246 759 :M
f10_12 sf
(\(fv: Form, name: Text, select: Bool\): Ok ! form_failure)S
469 773 :M
f14_12 sf
<C5>S
482 773 :M
f6_12 sf
(Make the named interactor acquire the keyboard focus, and)S
482 787 :M
(optionally select its entire text contents.)S
145 801 :M
f13_12 sf
(form_show)S
210 801 :M
f10_12 sf
(\(fv: Form\): Ok ! form_failure)S
469 801 :M
f14_12 sf
<C5>S
482 801 :M
f6_12 sf
(Show a window containing the form on the default display.)S
145 815 :M
f13_12 sf
(form_showAt)S
f10_12 sf
(\(fv: Form, at: Text, title: Text\): Ok ! form_failure)S
469 829 :M
f14_12 sf
<C5>S
482 829 :M
f6_12 sf
(Show a window containing the form on a display. For an X)S
482 843 :M
(display: at=)S
f14_15 sf
<D2>S
f6_12 sf
(")S
546 843 :M
f4_12 sf
(machineName)S
615 843 :M
f6_12 sf
<28D43AD57CD43A3AD529>S
f4_12 sf
(num)S
672 843 :M
f6_12 sf
<28D4D57CD42ED5>S
f4_12 sf
(num)S
718 843 :M
f6_12 sf
(\)")S
727 843 :M
f14_15 sf
<D3>S
f6_12 sf
(;)S
482 857 :M
(at=)S
f14_15 sf
<D2>S
f6_12 sf
("")S
510 857 :M
f14_15 sf
<D3>S
f6_12 sf
( is the default display. The title is shown in the)S
482 871 :M
(window header.)S
145 885 :M
f13_12 sf
(form_hide)S
210 885 :M
f10_12 sf
(\(fv: Form\): Ok ! form_failure)S
469 885 :M
f14_12 sf
<C5>S
482 885 :M
f6_12 sf
(Hide the window containing the form.)S
endp
%%Page: 62 62
%%BeginPageSetup
initializepage
(luca; page: 62 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
456 591 :M
f9_12 sf
.741 .074( )J
endp
%%Page: 63 63
%%BeginPageSetup
initializepage
(luca; page: 63 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(57)S
145 188 :M
f1_21 sf
(C.)S
172 188 :M
(Programming Reference)S
172 217 :M
f6_15 sf
.599 .06(In this section we provide information useful to programmers who want to call Obliq from Mod)J
762 217 :M
(-)S
145 235 :M
(ula-3, or vice versa.)S
145 279 :M
f1_18 sf
(C.1)S
185 279 :M
(The Package Hierarchy)S
172 307 :M
f6_15 sf
.498 .05(One of our goals is that Obliq should be easily embeddable in Modula-3 applications. Obliq adds)J
145 325 :M
.763 .076(only a small size overhead to typical Modula-3 applications, but we still want to minimize this over)J
762 325 :M
(-)S
145 343 :M
.71 .071(head. To this end, the Obliq implementation is partitioned into several packages, with a Modula-3 li)J
762 343 :M
(-)S
145 361 :M
.46 .046(brary in each package, so that each application can link only the appropriate libraries. Another advan)J
762 361 :M
(-)S
145 379 :M
.366 .037(tage of this organization, is that we can generate minimal Obliq interpreters that can act as \(relatively\))J
145 397 :M
(small network servers.)S
172 415 :M
.609 .061(Here is the package structure. Each node is a package \(a collection of interfaces\), which uses the)J
145 433 :M
.308 .031(connected packages above it. The nodes in italic represent packages external to the Obliq implementa)J
762 433 :M
(-)S
145 451 :M
(tion.)S
199 463 534 335 rC
222 491 :M
(synloc)S
457 512 :M
f4_15 sf
(netobj)S
371 555 :M
f1_15 sf
-.193(obliqrt)A
272 490 -1 1 362 546 1 272 489 @a
-.25 -.25 419.25 540.25 .25 .25 472 517 @b
260 603 :M
f6_15 sf
(obliqparse)S
478 605 :M
(obliqprint)S
-1 -1 309 588 1 1 360 559 @b
428 561 -1 1 493 589 1 428 560 @a
257 555 -1 1 293 586 1 257 554 @a
376 642 :M
(obliq)S
305 610 -1 1 365 633 1 305 609 @a
-1 -1 420 636 1 1 486 610 @b
472 675 :M
(obliqlibm3)S
473 705 :M
(obliqlibui)S
472 734 :M
(obliqlibanim)S
406 563 -1 1 471 663 1 406 562 @a
398 563 -1 1 472 693 1 398 562 @a
391 563 -1 1 471 722 1 391 562 @a
675 658 :M
f4_15 sf
(formsvbt)S
678 693 :M
(mgkit)S
-.25 -.25 545.25 698.25 .25 .25 665 653 @b
-.25 -.25 554.25 729.25 .25 .25 669 693 @b
674 623 :M
(\(m3lib\))S
-.25 -.25 545.25 666.25 .25 .25 667 620 @b
271 694 :M
f6_15 sf
15 f8_1 :p
73.337 :m
(obliqbinmin)S
272 719 :M
67.504 :m
(obliqbinstd)S
-1 -1 361 681 1 1 377 651 @b
-1 -1 364 708 1 1 384 651 @b
-1 -1 361 736 1 1 390 652 @b
-1 -1 371 758 1 1 396 652 @b
-1 -1 364 716 1 1 468 672 @b
271 743 :M
61.67 :m
(obliqbinui)S
271 768 :M
79.995 :m
(obliqbinanim)S
-1 -1 362 742 1 1 469 702 @b
-1 -1 376 765 1 1 467 731 @b
222 518 :M
(synex)S
223 547 :M
(metasyn)S
584 566 :M
f4_15 sf
(formatter)S
-.25 -.25 524.25 588.25 .25 .25 577 566 @b
-1 -1 248 508 1 1 247 494 @b
-1 -1 248 536 1 1 247 522 @b
501 759 :M
f1_15 sf
-.438(. . .)A
302 793 :M
-.438(. . .)A
688 720 :M
-.438(. . .)A
580 695 :M
f6_15 sf
66.661 :m
(obliqsrvstd)S
582 730 :M
60.828 :m
(obliqsrvui)S
544 672 -1 1 573 685 1 544 671 @a
544 704 -1 1 574 718 1 544 703 @a
605 757 :M
f1_15 sf
-.438(. . .)A
gR
gS 18 18 877 1146 rC
172 822 :M
f6_15 sf
.208 .021(Each package has a principal interface; that interface contains a )J
f14_15 sf
<D2>S
f10_15 sf
.081(PackageSetup\(\))A
f14_15 sf
<D3>S
f6_15 sf
.203 .02( routine that)J
145 840 :M
(must be called at least once to initialize all the modules in the package.)S
172 858 :M
1.322 .132(The )J
201 858 :M
f14_15 sf
<D2>S
f6_15 sf
(obliqrt)S
244 858 :M
f14_15 sf
.134<D3>A
f6_15 sf
1.054 .105( package implements the Obliq run-time kernel, which is the smallest part of Obliq)J
145 876 :M
.752 .075(that can be usefully embedded in an application. Note that this does not include parsers and printers;)J
145 894 :M
(these are separately provided in )S
339 894 :M
f14_15 sf
<D2>S
f6_15 sf
(obliqparse)S
f14_15 sf
<D3>S
f6_15 sf
( and )S
f14_15 sf
<D2>S
f6_15 sf
(obliqprint)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 912 :M
.064 .006(The )J
f14_15 sf
<D2>S
f6_15 sf
.025(obliq)A
233 912 :M
f14_15 sf
<D3>S
f6_15 sf
.114 .011( package brings together everything needed to build stand-alone Obliq interpreters. This)J
145 930 :M
(package can be linked with various library packages to produce various flavors of Obliq interpreters.)S
172 948 :M
.311 .031(Each underlined package contains a short Main program and a binary for an interpreter \()J
710 948 :M
f14_15 sf
<D2>S
f6_15 sf
.053(-bin-)A
f14_15 sf
<D3>S
f6_15 sf
.148 .015(\) or)J
145 966 :M
(a server \()S
201 966 :M
f14_15 sf
<D2>S
f6_15 sf
(-srv-)S
f14_15 sf
<D3>S
f6_15 sf
(\).)S
172 984 :M
(Modula-3 programmers can extend the hierarchy along the dotted lines.)S
endp
%%Page: 64 64
%%BeginPageSetup
initializepage
(luca; page: 64 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(58)S
145 159 :M
f1_18 sf
(C.2)S
185 159 :M
(The Interfaces)S
172 187 :M
f6_15 sf
.497 .05(The main client interface is )J
344 187 :M
f14_15 sf
<D2>S
f6_15 sf
.065(obliqrt/src/Obliq.i3)A
f14_15 sf
<D3>S
f6_15 sf
.196 .02(, which refers to )J
f14_15 sf
<D2>S
f6_15 sf
.068(obliqrt/src/ObTree.i3)A
f14_15 sf
<D3>S
f6_15 sf
.234 .023( \(the parse)J
145 205 :M
.805 .08(trees\) and )J
210 205 :M
f14_15 sf
.052<D2>A
f6_15 sf
.107(obliqrt/src/ObValue.i3)A
f14_15 sf
.052<D3>A
f6_15 sf
.378 .038( \(the run-time values\). )J
493 205 :M
f14_15 sf
<D2>S
f6_15 sf
(Obliq.i3)S
546 205 :M
f14_15 sf
.104<D3>A
f6_15 sf
.75 .075( contains: routines to create and in)J
762 205 :M
(-)S
145 223 :M
.093 .009(spect Obliq values \(including operations on remote objects\), exceptions, and errors; \322Eval\323 routines for)J
145 241 :M
(Obliq parse trees; and )S
280 241 :M
f14_15 sf
<D2>S
f10_15 sf
(sys_call)S
f14_15 sf
<D3>S
f6_15 sf
( registration to invoke Modula-3 routines from Obliq.)S
172 259 :M
.436 .044(The Obliq parser and printer are separate from the run-time, and need not be linked into an appli)J
762 259 :M
(-)S
145 277 :M
.429 .043(cation, since an application may access evaluated objects and closures over the network. The main in)J
762 277 :M
(-)S
145 295 :M
.581 .058(terface to the parser is )J
f14_15 sf
.096<D2>A
f6_15 sf
.2(obliqparse/src/ObliqParser.i3)A
470 295 :M
f14_15 sf
.149<D3>A
f6_15 sf
1.197 .12(, which contains routines to parse and evaluate)J
145 313 :M
.524 .052(Obliq phrases from a reader. The interface gives an example of a simple read-eval loop. The main in)J
762 313 :M
(-)S
145 331 :M
(terface to the printer, which performs pretty-printing, is )S
482 331 :M
f14_15 sf
<D2>S
f6_15 sf
(obliqprint/src/ObliqPrinter.i3)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
145 375 :M
f1_18 sf
(C.3)S
185 375 :M
(The Libraries)S
172 403 :M
f6_15 sf
.61 .061(Every Obliq client must link with )J
383 403 :M
f14_15 sf
.086<D2>A
f6_15 sf
.159(libobliqrt)A
f14_15 sf
.086<D3>A
f6_15 sf
.437 .044(. The parser is in )J
553 403 :M
f14_15 sf
<D2>S
f6_15 sf
(libobliqparse)S
635 403 :M
f14_15 sf
.112<D3>A
f6_15 sf
.641 .064(, and the printer is in)J
145 421 :M
f14_15 sf
<D2>S
f6_15 sf
(libobliqprint)S
f14_15 sf
<D3>S
f6_15 sf
(. For building interpreters, link with )S
f14_15 sf
<D2>S
f6_15 sf
(libobliq)S
495 421 :M
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 439 :M
1.356 .136(In every case, one must include whatever libraries are needed to get the desired Obliq built-in)J
145 457 :M
(packages and features, as described below:)S
199 484 :M
(libobliqrt:)S
388 484 :M
(array, ascii, bool, int, math, net, real, sys, text)S
199 502 :M
(libobliq:)S
388 502 :M
(sys on-line extensions, on-line help)S
199 520 :M
(libobliqlibm3:)S
388 520 :M
(rd, wr, lex, fmt, pickle, process, thread)S
199 538 :M
(libobliqlibui:)S
388 538 :M
(color, form)S
199 556 :M
(libobliqlibanim:)S
388 556 :M
(graph, zeus)S
145 609 :M
f1_18 sf
(C.4)S
185 609 :M
(Embedding Obliq in an Application)S
172 637 :M
f6_15 sf
1.837 .184(The appropriate client interfaces are )J
f14_15 sf
.22<D2>A
f6_15 sf
.446(obliqrt/src/Obliq.i3)A
536 637 :M
f14_15 sf
.135<D3>A
f6_15 sf
.282 .028(, )J
f14_15 sf
.135<D2>A
f6_15 sf
.273(obliqparse/src/ObliqParser.i3)A
f14_15 sf
.135<D3>A
f6_15 sf
.939 .094(, and)J
145 655 :M
f14_15 sf
<D2>S
f6_15 sf
(obliqprint/src/ObliqPrinter.i3)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 673 :M
1.062 .106(One may have to refer to other interfaces as well, particularly )J
563 673 :M
f14_15 sf
.102<D2>A
f6_15 sf
.231(ObTree.i3)A
f14_15 sf
.102<D3>A
f6_15 sf
.712 .071( \(the parser trees\) and)J
145 691 :M
f14_15 sf
<D2>S
f6_15 sf
(ObValue.i3)S
218 691 :M
f14_15 sf
.093<D3>A
f6_15 sf
.67 .067( \(the run-time values\). Note though that )J
f14_15 sf
.093<D2>A
f6_15 sf
.21(ObTree.i3)A
f14_15 sf
.093<D3>A
f6_15 sf
.687 .069( is particularly specific to the current)J
145 709 :M
1.37 .137(Obliq implementation, and should be used as \322abstractly\323 as possible; the )J
615 709 :M
f14_15 sf
<D2>S
f6_15 sf
.096(ObliqParser.i3)A
f14_15 sf
<D3>S
f6_15 sf
.456 .046( interface)J
145 727 :M
.061 .006(should isolate clients from any such dependencies. )J
f14_15 sf
<D2>S
f6_15 sf
.019(ObValue.i3)A
526 727 :M
f14_15 sf
<D3>S
f6_15 sf
.084 .008( is also likely to evolve over time; most)J
145 745 :M
(of its facilities can be accessed safely from )S
406 745 :M
f14_15 sf
<D2>S
f6_15 sf
(Obliq.i3)S
f14_15 sf
<D3>S
f6_15 sf
(.)S
172 763 :M
1.662 .166(The Obliq evaluator takes as arguments a syntax tree, and an environment. The environment,)J
145 781 :M
.818 .082(mapping identifiers to Obliq values, is particularly important. By manipulating the environment, one)J
145 799 :M
(can submit values to Obliq for evaluation, and can recover the results of an evaluation.)S
145 843 :M
f1_18 sf
(C.5)S
185 843 :M
(Extending Obliq with sys_calls)S
172 871 :M
f6_15 sf
.553 .055(A )J
f14_15 sf
.137<D2>A
f10_15 sf
.409(sys_call)A
f14_15 sf
.137<D3>A
f6_15 sf
.946 .095( is a cheap way of extending the functionality of an Obliq interpeter with a new)J
145 889 :M
(\322built-in\323 operation that invokes Modula-3 code. For more ambitious extensions, see section C.6.)S
172 907 :M
.072 .007(The interface )J
256 907 :M
f14_15 sf
<D2>S
f6_15 sf
.016(obliqrt/src/Obliq.i3)A
f14_15 sf
<D3>S
f6_15 sf
.059 .006( describes how to register a Modula-3 procedure so that it can be)J
145 925 :M
(invoked from Obliq. For a procedure registered under the name )S
f14_15 sf
<D2>S
f10_15 sf
("foo")S
f14_15 sf
<D3>S
f6_15 sf
(, the Obliq syntax is:)S
199 955 :M
f10_15 sf
(sys_call\("foo", [arg)S
f10_10 sf
0 3 rm
(1)S
0 -3 rm
f10_15 sf
(, ..., arg)S
f10_10 sf
0 3 rm
(n)S
0 -3 rm
f10_15 sf
(]\))S
172 983 :M
f6_15 sf
-.004(The interface )A
f14_15 sf
<D2>S
f6_15 sf
-.004(obliqrt/src/ObLib.i3)A
379 983 :M
f14_15 sf
<D3>S
f6_15 sf
-.011( contains examples of how to analyze the argument array passed)A
145 1001 :M
(by Obliq to Modula-3.)S
endp
%%Page: 65 65
%%BeginPageSetup
initializepage
(luca; page: 65 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(59)S
172 160 :M
f6_15 sf
1.124 .112(One must then link the Modula-3 code implementing )J
509 160 :M
f14_15 sf
.133<D2>A
f10_15 sf
.397(foo)A
f14_15 sf
.133<D3>A
f6_15 sf
.982 .098( with Obliq, either in an application)J
145 178 :M
(\(section C.4\) or in a custom interpreter \(section C.7\).)S
145 222 :M
f1_18 sf
(C.6)S
185 222 :M
(Extending Obliq with new Packages)S
172 250 :M
f6_15 sf
.808 .081(The interface )J
258 250 :M
f14_15 sf
.106<D2>A
f6_15 sf
.212(obliqrt/src/ObLib.i3)A
f14_15 sf
.106<D3>A
f6_15 sf
.68 .068( can be used to add a new built-in package to Obliq. One can)J
145 268 :M
.782 .078(extend Obliq with new built-in types, exceptions, and operations. All the built-in Obliq packages are)J
145 286 :M
(implemented through this interface.)S
172 304 :M
(The interface contains a detailed example of how to write and register such a package.)S
145 348 :M
f1_18 sf
(C.7)S
185 348 :M
(Building a Customized Obliq Interpreter)S
172 376 :M
f6_15 sf
.309 .031(A new package, created as described in section C.6, can be embedded into a customized Obliq in)J
762 376 :M
(-)S
145 394 :M
1.178 .118(terpreter. Follow the example given by )J
f14_15 sf
.148<D2>A
f6_15 sf
.331(obliqbinstd/src/Main.m3)A
552 394 :M
f14_15 sf
.293<D3>A
f6_15 sf
2.019 .202(: this is the 20-line program that)J
145 412 :M
.26 .026(builds the standard Obliq interpreter. The other )J
435 412 :M
f14_15 sf
<D2>S
f6_15 sf
.041(obliqbin.../src/Main.m3)A
f14_15 sf
<D3>S
f6_15 sf
.15 .015( files contain other versions of)J
145 430 :M
(the interpreter.)S
endp
%%Page: 66 66
%%BeginPageSetup
initializepage
(luca; page: 66 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
456 591 :M
f9_12 sf
.741 .074( )J
endp
%%Page: 67 67
%%BeginPageSetup
initializepage
(luca; page: 67 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(61)S
145 188 :M
f1_21 sf
(References)S
145 226 :M
f6_15 sf
([Abadi, Cardelli 1994] M. Abadi and L. Cardelli. )S
f1_15 sf
(A theory of primitive objects: untyped and first)S
748 226 :M
(-)S
172 244 :M
(order systems)S
261 244 :M
f6_15 sf
(. )S
f4_15 sf
(Proc. Theoretical Aspects of Computer Software)S
560 244 :M
f6_15 sf
(. Springer-Verlag.)S
145 271 :M
([Apple 1993] Apple, )S
f1_15 sf
(AppleScript Language Guide)S
461 271 :M
f6_15 sf
(. Addison Wesley.)S
145 298 :M
([Avrahami, Brooks, Brown 1989] G. Avrahami, K.P. Brooks, and M.H. Brown, )S
628 298 :M
f1_15 sf
(A two-view approach)S
172 316 :M
(to constructing user interfaces)S
366 316 :M
f4_15 sf
(.)S
f6_15 sf
( )S
373 316 :M
f4_15 sf
(Computer Graphics)S
493 316 :M
f6_15 sf
( )S
497 316 :M
f1_15 sf
(23)S
f6_15 sf
(\(3\), 137-146.)S
145 343 :M
([Bal, Kaashoek, Tanenbaum 1992] H.E. Bal, M.F. Kaashoek, and A.S. Tanenbaum, )S
652 343 :M
f1_15 sf
(Orca: a language)S
172 361 :M
(for parallel programming of distributed systems)S
481 361 :M
f4_15 sf
(.)S
f6_15 sf
( )S
488 361 :M
f4_15 sf
(IEEE Transactions on Software Engineering)S
172 379 :M
f1_15 sf
(18)S
f6_15 sf
(\(3\), 190-205.)S
145 406 :M
([Bharat, Brown 1994] K. Bharat and M.H. Brown. )S
f1_15 sf
(Building distributed applications by direct ma-)S
172 424 :M
(nipulation)S
238 424 :M
f6_15 sf
(. Digital Equipment Corporation, Systems Research Center. To appear.)S
145 451 :M
([Birrell 1991] A.D. Birrell, )S
f1_15 sf
(An introduction to programming with threads)S
f6_15 sf
(. In )S
631 451 :M
f4_15 sf
(Systems Programming)S
172 469 :M
(with Modula-3, Chapter 4,)S
f6_15 sf
( G. Nelson, ed. Prentice Hall.)S
145 496 :M
([Birrell, )S
197 496 :M
f4_15 sf
(et al.)S
227 496 :M
f6_15 sf
( 1993a] A.D. Birrell, D. Evers, G. Nelson, S. Owicki, and E. Wobber. )S
f1_15 sf
(Distributed)S
172 514 :M
(garbage collection for network objects)S
417 514 :M
f6_15 sf
(. Report 116. Digital Equipment Corporation, Systems)S
172 532 :M
(Research Center.)S
145 559 :M
([Birrell, )S
197 559 :M
f4_15 sf
(et al.)S
227 559 :M
f6_15 sf
( 1993b] A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. )S
f1_15 sf
(Network objects)S
f6_15 sf
(. )S
702 559 :M
f4_15 sf
(Proc. 14th)S
172 577 :M
(Symposium on Operating Systems Principles)S
f6_15 sf
(.)S
145 604 :M
([Birrell, )S
197 604 :M
f4_15 sf
(et al.)S
227 604 :M
f6_15 sf
( 1994] A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. )S
f1_15 sf
(Network objects)S
687 604 :M
f6_15 sf
(. Report 115.)S
172 622 :M
(Digital Equipment Corporation, Systems Research Center.)S
145 649 :M
([Brewer, Waldspurger 1992] E.A. Brewer and C.A. Waldspurger. )S
f1_15 sf
(Preventing recursion deadlock in)S
172 667 :M
(concurrent object-oriented systems)S
397 667 :M
f6_15 sf
(. )S
f4_15 sf
(Proc. 1992 International Parallel Processing Symposium,)S
172 685 :M
(Beverly Hills, California.  \(Also, Report MIT/LCS/TR-526.\))S
f6_15 sf
(.)S
145 712 :M
([Brockschmidt 1994] K. Brockschmidt, )S
387 712 :M
f1_15 sf
(Inside OLE2)S
f6_15 sf
(. Microsoft Press.)S
145 739 :M
([Brown 1994] M.H. Brown. )S
f1_15 sf
(Report on the 1993 SRC algorithm animation festival)S
f6_15 sf
(. Digital Equip)S
747 739 :M
(-)S
172 757 :M
(ment Corporation, Systems Research Center. To appear.)S
145 784 :M
([Brown, Meehan 1994] M.H. Brown and J.R. Meehan. )S
f1_15 sf
(The FormsVBT Reference Manual)S
700 784 :M
f6_15 sf
(. Digital)S
172 802 :M
(Equipment Corporation, Systems Research Center. To appear.)S
145 829 :M
([Fort\216 1994] Fort\216. )S
f1_15 sf
(TOOL reference manual)S
f6_15 sf
(. Fort\216, Inc.)S
145 856 :M
([Horning, )S
f4_15 sf
(et al.)S
237 856 :M
f6_15 sf
( 1993] J. Horning, B. Kalsow, P. McJones, and G. Nelson. )S
592 856 :M
f1_15 sf
(Some useful Modula-3 in)S
752 856 :M
(-)S
172 874 :M
(terfaces)S
222 874 :M
f6_15 sf
(. Report 113. Digital Equipment Corporation, Systems Research Center.)S
145 901 :M
([Mansfield 1994] R. Mansfield, )S
f1_15 sf
(Visual Basic for Applications)S
f6_15 sf
(. Ventana Press.)S
145 928 :M
([Milner, Tofte, Harper 1989] R. Milner, M. Tofte, and R. Harper, )S
f1_15 sf
(The definition of Standard ML)S
f6_15 sf
(.)S
172 946 :M
(MIT Press.)S
145 973 :M
([Najork, Brown 1994] M. Najork and M.H. Brown. )S
458 973 :M
f1_15 sf
(A library for visualizing combinatorial struc-)S
172 991 :M
(tures)S
f6_15 sf
(. )S
212 991 :M
f4_15 sf
(Proc. Visualization\32594)S
348 991 :M
f6_15 sf
(. To appear.)S
145 1018 :M
([Nelson 1991] G. Nelson, ed. )S
325 1018 :M
f1_15 sf
(Systems programming with Modula-3)S
568 1018 :M
f6_15 sf
(. Prentice Hall.)S
endp
%%Page: 68 68
%%BeginPageSetup
initializepage
(luca; page: 68 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(62)S
145 160 :M
f6_15 sf
([Ousterhout 1994] J.K. Ousterhout, )S
f1_15 sf
(Tcl and the Tk toolkit)S
f6_15 sf
(. Addison-Wesley.)S
145 187 :M
([Reppy 1991] Reppy. )S
f1_15 sf
(A higher-order concurrent language)S
511 187 :M
f6_15 sf
(. )S
519 187 :M
f4_15 sf
(Proc. SIGPLAN\32591 Conference on Pro-)S
172 205 :M
(gramming Language Design and Implementation)S
468 205 :M
f6_15 sf
(. ACM Press.)S
145 232 :M
([Thomsen, )S
f4_15 sf
(et al.)S
243 232 :M
f6_15 sf
( 1993] B. Thomsen, L. Leth, S. Prasad, T.-M. Kuo, A. Kramer, F. Knabe, and A. Gi)S
747 232 :M
(-)S
172 250 :M
(acalone. )S
f1_15 sf
(Facile Antigua Release Programming Guide)S
508 250 :M
f6_15 sf
(. ECRC-93-20. European Computer-Indus-)S
172 268 :M
(try Research Centre.)S
145 295 :M
([Ungar, Smith 1987] D. Ungar and R.B. Smith. )S
433 295 :M
f1_15 sf
(Self: the power of simplicity)S
f6_15 sf
(. )S
620 295 :M
f4_15 sf
(Proc. OOPSLA\32587)S
f6_15 sf
(.)S
172 313 :M
(ACM SIGPLAN Notices 2\(12\).)S
145 340 :M
([White 1994] J.E. White. )S
300 340 :M
f1_15 sf
(Telescript technology: the foundation for the electronic marketplace)S
f6_15 sf
(.)S
172 358 :M
(White Paper. General Magic, Inc.)S
endp
%%Page: 69 69
%%BeginPageSetup
initializepage
(luca; page: 69 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
724 1071 :M
f6_13 sf
(Page )S
753 1071 :M
(63)S
145 188 :M
f1_21 sf
(Index)S
145 231 :M
f6_15 sf
(agents 1, 3, 20)S
163 246 :M
(agent migration 22)S
145 261 :M
(aliases 4, 5, 9)S
163 276 :M
(alias fields 3, 30)S
145 291 :M
(andif construct 35)S
145 306 :M
(application embedding 58)S
145 321 :M
(array library 51)S
145 336 :M
(arrays 2)S
163 351 :M
(constructs 30)S
163 366 :M
(operators 29)S
145 381 :M
(ascii library 50)S
145 396 :M
(assignment construct 34)S
145 411 :M
(bool library 48)S
145 426 :M
(booleans)S
163 441 :M
(constants 29)S
163 456 :M
(operators 29)S
145 471 :M
(broadcast construct 36)S
145 486 :M
(built-in libraries 48)S
145 501 :M
(built-in operators 28)S
145 516 :M
(case construct 35)S
145 531 :M
(characters)S
163 546 :M
(constants 40)S
145 561 :M
(classes 5)S
163 576 :M
(abstract 5)S
145 591 :M
(cloning 3, 5, 8, 15, 31)S
145 606 :M
(closures 2, 7)S
145 621 :M
(color library 54)S
145 636 :M
(commas 27)S
145 651 :M
(comments 40)S
145 666 :M
(compute server 18)S
145 681 :M
(condition construct 36)S
145 696 :M
(conditional construct 35)S
145 711 :M
(constants 29)S
145 726 :M
(control structures 33)S
145 741 :M
(copy construct 22)S
145 756 :M
(current method 9, 32)S
145 771 :M
(current site 2)S
145 786 :M
(database servers 19)S
145 801 :M
(definition phrases 45)S
145 816 :M
(definitions 27, 34)S
145 831 :M
(delegation 5, 9, 31)S
145 846 :M
(distributed computation 8)S
145 861 :M
(distributed state 6)S
145 876 :M
(embedded locations 3)S
145 891 :M
(enablers 33)S
145 906 :M
(engines 13, 32)S
163 921 :M
(exporting 13, 32)S
163 936 :M
(importing 13, 33)S
145 951 :M
(errors 37)S
145 966 :M
(exception construct 37)S
145 981 :M
(exceptions 37)S
145 996 :M
(executables 45)S
145 1011 :M
(exit construct 35)S
145 1026 :M
(extending Obliq 58)S
483 231 :M
(fields 3, 30)S
501 246 :M
(alias fields 3)S
501 261 :M
(field names 3, 27, 30)S
501 276 :M
(method fields 3)S
501 291 :M
(private fields 4)S
501 306 :M
(value fields 3)S
483 321 :M
(file system enablers 33)S
483 336 :M
(files 46)S
483 351 :M
(fmt library 53)S
483 366 :M
(for construct 35)S
483 381 :M
(foreach construct 36)S
483 396 :M
(fork construct 18, 36)S
483 411 :M
(form library 54)S
483 426 :M
(host object 4)S
483 441 :M
(I/O 52, 53)S
483 456 :M
(identifiers 27, 40)S
501 471 :M
(constant 2)S
501 486 :M
(free 1, 2, 3, 7, 19)S
501 501 :M
(qualified 27, 47)S
501 516 :M
(scoping 27)S
501 531 :M
(syntax 40)S
501 546 :M
(unqualified 27)S
501 561 :M
(variable 2)S
483 576 :M
(identity 28)S
483 591 :M
(inheritance 4, 5)S
501 606 :M
(multiple 5)S
483 621 :M
(int library 49)S
483 636 :M
(integers)S
501 651 :M
(constants 40)S
501 666 :M
(operators 29)S
483 681 :M
(interpreters 59)S
483 696 :M
(invocation 4, 8, 31)S
483 711 :M
(is construct 28)S
483 726 :M
(isnot construct 28)S
483 741 :M
(iteration constructs 35)S
483 756 :M
(join construct 18, 36)S
483 771 :M
(keywords 40, 41)S
483 786 :M
(lex library 53)S
483 801 :M
(lexicon 39)S
483 816 :M
(libraries 27, 46, 47, 48)S
483 831 :M
(load construct 46)S
483 846 :M
(local site 2)S
483 861 :M
(locations 2)S
483 876 :M
(lock construct 36)S
483 891 :M
(loop construct 35)S
483 906 :M
(math library 49)S
483 921 :M
(methods 4, 34)S
501 936 :M
(method fields 3, 30)S
501 951 :M
(overriding 15)S
483 966 :M
(mixins 5)S
483 981 :M
(Modula-3)S
501 996 :M
(interfaces 58)S
501 1011 :M
(libraries 58)S
501 1026 :M
(packages 57)S
endp
%%Page: 70 70
%%BeginPageSetup
initializepage
(luca; page: 70 of 70)setjob
%%EndPageSetup
-18 -18 :T
gS 18 18 877 1146 rC
145 1071 :M
f6_13 sf
(Page )S
174 1071 :M
(64)S
145 156 :M
f6_15 sf
(modules 46)S
163 171 :M
(closed modules 47)S
163 186 :M
(end module 47)S
163 201 :M
(import 47)S
163 216 :M
(loading 47)S
163 231 :M
(open modules 47)S
145 246 :M
(mutex construct 36)S
145 261 :M
(mutexes 10)S
145 276 :M
(name servers 11, 47)S
145 291 :M
(net library 51)S
145 306 :M
(netobjd program 47)S
145 321 :M
(network)S
163 336 :M
(network objects daemon 47)S
163 351 :M
(objects 1)S
163 366 :M
(references 1)S
145 381 :M
(objects 1, 2, 3, 30)S
163 396 :M
(exporting 12, 32)S
163 411 :M
(importing 12, 32)S
163 426 :M
(migration 1, 22, 24)S
163 441 :M
(mutexes 10)S
163 456 :M
(new 5)S
163 471 :M
(operations 4)S
163 486 :M
(protected 9)S
163 501 :M
(remote 6)S
163 516 :M
(serialized 10)S
163 531 :M
(surrogates 6, 17)S
163 546 :M
(views 4)S
145 561 :M
(obliq program 45)S
145 576 :M
(OBLIQPATH search path 46)S
145 591 :M
(ok constant 29)S
145 606 :M
(operations)S
163 621 :M
(external 9, 10)S
163 636 :M
(self-inflicted 9, 10, 32)S
145 651 :M
(operators 27, 29)S
163 666 :M
(built-in 28)S
163 681 :M
(precedence 28)S
145 696 :M
(option construct 30)S
145 711 :M
(orif construct 35)S
145 726 :M
(overriding 5, 8, 31)S
145 741 :M
(pause construct 36)S
145 756 :M
(phrases 45)S
145 771 :M
(pickle library 53)S
145 786 :M
(procedures 4, 34)S
145 801 :M
(process library 54)S
145 816 :M
(processor enablers 33)S
145 831 :M
(program files 46, 47)S
145 846 :M
(protection 30, 32)S
145 861 :M
(prototypes 5)S
163 876 :M
(partial 5)S
483 156 :M
(raise construct 37)S
483 171 :M
(rd library 52)S
483 186 :M
(readers 52)S
483 201 :M
(real library 49)S
483 216 :M
(reals)S
501 231 :M
(constants 40)S
501 246 :M
(operators 29)S
483 261 :M
(remote site 2)S
483 276 :M
(scoping 27)S
483 291 :M
(selection 4, 8, 31)S
483 306 :M
(self 4)S
483 321 :M
(semicolons 27)S
483 336 :M
(sequencing construct 34)S
483 351 :M
(serialization 10, 17, 30, 32)S
483 366 :M
(sibling fields 4)S
483 381 :M
(signal construct 18, 36)S
483 396 :M
(sites 2)S
483 411 :M
(state 1, 7)S
483 426 :M
(surrogates 6, 17)S
483 441 :M
(syntactic structures 27)S
483 456 :M
(syntax 40)S
483 471 :M
(syntax overview 24)S
483 486 :M
(sys library 48)S
483 501 :M
(sys_call construct 58)S
483 516 :M
(term phrases 45)S
483 531 :M
(term sequences 27, 28)S
483 546 :M
(terms 27)S
483 561 :M
(text library 50)S
483 576 :M
(texts)S
501 591 :M
(constants 40)S
501 606 :M
(operators 29)S
483 621 :M
(thread library 51)S
483 636 :M
(threads 2, 17)S
483 651 :M
(top-level interaction 45)S
483 666 :M
(transmission 3, 7)S
483 681 :M
(try-except construct 37)S
483 696 :M
(try-finally construct 37)S
483 711 :M
(types)S
501 726 :M
(strong typing 2)S
501 741 :M
(type comments 37)S
483 756 :M
(updating 5, 8, 31)S
483 771 :M
(user interfaces 54)S
483 786 :M
(values 2)S
501 801 :M
(basic values 2)S
501 816 :M
(value fields 3, 30)S
483 831 :M
(wait construct 36)S
483 846 :M
(watch construct 11, 18, 36)S
483 861 :M
(wr library 52)S
483 876 :M
(writers 52)S
endp
%%Trailer
end
%%EOF
