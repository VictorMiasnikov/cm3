(

  ;;; ENV "sandbox"

(* "floating-point math" "multiplication")
(+ "floating-point math" "addition")
(- "floating-point math" "subtraction")
(/ "floating-point math" "division")
(< "floating-point comparison" "less-than")
(<= "floating-point comparison" "less-or-equal")
(= "floating-point comparison" "equality")
(> "floating-point comparison" "greater-than")
(>= "floating-point comparison" "greater-or-equal")
(abs "floating-point math" "absolute value")
(acos "floating-point math" "inverse cosine")
(append "list" "append lists end-to-end")
(apply "eval-apply" "apply first argument to remaining arguments")
(asin "floating-point math" "inverse sine")
(assoc "list" "UNDEF")
(assq "list" "UNDEF")
(assv "list" "UNDEF")
(atan "floating-point math" "inverse tangent")
(boolean? "type test" "true if argument boolean")
(caaaar "list" "UNDEF")
(caaadr "list" "UNDEF")
(caaar "list" "UNDEF")
(caadar "list" "UNDEF")
(caaddr "list" "UNDEF")
(caadr "list" "UNDEF")
(caar "list" "UNDEF")
(cadaar "list" "UNDEF")
(cadadr "list" "UNDEF")
(cadar "list" "UNDEF")
(caddar "list" "UNDEF")
(cadddr "list" "UNDEF")
(caddr "list" "UNDEF")
(cadr "list" "UNDEF")
(call-with-current-continuation "eval-apply" "UNDEF")
(car "list" "UNDEF")
(cdaaar "list" "UNDEF")
(cdaadr "list" "UNDEF")
(cdaar "list" "UNDEF")
(cdadar "list" "UNDEF")
(cdaddr "list" "UNDEF")
(cdadr "list" "UNDEF")
(cdar "list" "UNDEF")
(cddaar "list" "UNDEF")
(cddadr "list" "UNDEF")
(cddar "list" "UNDEF")
(cdddar "list" "UNDEF")
(cddddr "list" "UNDEF")
(cdddr "list" "UNDEF")
(cddr "list" "UNDEF")
(cdr "list" "UNDEF")
(char->integer "type conversion" "UNDEF")
(char-alphabetic? "type test" "UNDEF")
(char-ci<=? "character comparison" "case-independent less-or-equal")
(char-ci<? "character comparison" "case-independent less-than")
(char-ci=? "character comparison" "case-independent equal")
(char-ci>=? "character comparison" "case-independent greater-or-equal")
(char-ci>? "character comparison" "case-independent greater-than")
(char-downcase "character operation" "put in lower case")
(char-lower-case? "character test" "")
(char-numeric? "character test" "UNDEF")
(char-upcase "character operation" "put in upper case")
(char-upper-case? "character test" "UNDEF")
(char-whitespace? "character test" "UNDEF")
(char<=? "character comparison" "")
(char<? "character comparison" "")
(char=? "character comparison" "")
(char>=? "character comparison" "")
(char>? "character comparison" "")
(char? "type test" "UNDEF")
(complex? "type test" "UNDEF")
(cons "list" "UNDEF")
(cos "floating-point math" "UNDEF")
(display "input/output" "UNDEF")
(eq? "UNDEF" "UNDEF")
(equal? "UNDEF" "UNDEF")
(eqv? "UNDEF" "UNDEF")
(eval "eval-apply" "UNDEF")
(even? "UNDEF" "UNDEF")
(exact? "UNDEF" "UNDEF")
(exp "UNDEF" "UNDEF")
(expt "UNDEF" "UNDEF")
(for-each "UNDEF" "UNDEF")
(force "UNDEF" "UNDEF")
(gcd "UNDEF" "UNDEF")
(inexact? "UNDEF" "UNDEF")
(integer->char "UNDEF" "UNDEF")
(integer? "UNDEF" "UNDEF")
(lcm "UNDEF" "UNDEF")
(length "UNDEF" "UNDEF")
(list "UNDEF" "UNDEF")
(list->string "UNDEF" "UNDEF")
(list->vector "UNDEF" "UNDEF")
(list-ref "UNDEF" "UNDEF")
(list-tail "UNDEF" "UNDEF")
(list? "UNDEF" "UNDEF")
(load "UNDEF" "UNDEF")
(log "UNDEF" "UNDEF")
(macro-expand "UNDEF" "UNDEF")
(make-string "UNDEF" "UNDEF")
(make-vector "UNDEF" "UNDEF")
(map "UNDEF" "UNDEF")
(max "UNDEF" "UNDEF")
(member "UNDEF" "UNDEF")
(memq "UNDEF" "UNDEF")
(memv "UNDEF" "UNDEF")
(min "floating-point math" "UNDEF")
(modulo "floating-point math" "UNDEF")
(negative? "UNDEF" "UNDEF")
(newline "UNDEF" "UNDEF")
(not "UNDEF" "UNDEF")
(null? "UNDEF" "UNDEF")
(number->string "UNDEF" "UNDEF")
(number? "UNDEF" "UNDEF")
(odd? "UNDEF" "UNDEF")
(pair? "UNDEF" "UNDEF")
(peek-char "UNDEF" "UNDEF")
(positive? "UNDEF" "UNDEF")
(procedure? "UNDEF" "UNDEF")
(quotient "UNDEF" "UNDEF")
(rational? "UNDEF" "UNDEF")
(read "UNDEF" "UNDEF")
(read-char "UNDEF" "UNDEF")
(real? "UNDEF" "UNDEF")
(remainder "UNDEF" "UNDEF")
(reverse "UNDEF" "UNDEF")
(round "UNDEF" "UNDEF")
(set-car! "UNDEF" "UNDEF")
(set-cdr! "UNDEF" "UNDEF")
(sin "UNDEF" "UNDEF")
(sqrt "UNDEF" "UNDEF")
(string "UNDEF" "UNDEF")
(string->list "UNDEF" "UNDEF")
(string->number "UNDEF" "UNDEF")
(string->symbol "UNDEF" "UNDEF")
(string-append "UNDEF" "UNDEF")
(string-ci<=? "UNDEF" "UNDEF")
(string-ci<? "UNDEF" "UNDEF")
(string-ci=? "UNDEF" "UNDEF")
(string-ci>=? "UNDEF" "UNDEF")
(string-ci>? "UNDEF" "UNDEF")
(string-length "UNDEF" "UNDEF")
(string-ref "UNDEF" "UNDEF")
(string-set! "UNDEF" "UNDEF")
(string<=? "UNDEF" "UNDEF")
(string<? "UNDEF" "UNDEF")
(string=? "UNDEF" "UNDEF")
(string>=? "UNDEF" "UNDEF")
(string>? "UNDEF" "UNDEF")
(string? "UNDEF" "UNDEF")
(substring "UNDEF" "UNDEF")
(symbol->string "UNDEF" "UNDEF")
(symbol? "UNDEF" "UNDEF")
(tan "UNDEF" "UNDEF")
(tanh "UNDEF" "UNDEF")
(vector "UNDEF" "UNDEF")
(vector->list "UNDEF" "UNDEF")
(vector-length "UNDEF" "UNDEF")
(vector-ref "UNDEF" "UNDEF")
(vector-set! "UNDEF" "UNDEF")
(vector? "UNDEF" "UNDEF")
(write "UNDEF" "UNDEF")
(write-char "UNDEF" "UNDEF")
(zero? "UNDEF" "UNDEF")

  ;;; ENV "default"

(_list* "UNDEF" "UNDEF")
(call-with-input-file "UNDEF" "UNDEF")
(call-with-output-file "UNDEF" "UNDEF")
(class "UNDEF" "UNDEF")
(close-input-port "UNDEF" "UNDEF")
(close-output-port "UNDEF" "UNDEF")
(current-input-port "UNDEF" "UNDEF")
(current-output-port "UNDEF" "UNDEF")
(eof-object? "UNDEF" "UNDEF")
(error "UNDEF" "UNDEF")
(exit "UNDEF" "UNDEF")
(input-port? "UNDEF" "UNDEF")
(method "UNDEF" "UNDEF")
(new "UNDEF" "UNDEF")
(normal "UNDEF" "UNDEF")
(open-input-file "UNDEF" "UNDEF")
(open-output-file "UNDEF" "UNDEF")
(output-port? "UNDEF" "UNDEF")
(random "UNDEF" "UNDEF")
(time-call "UNDEF" "UNDEF")

  ;;; ENV "navigator"

(down-environment "UNDEF" "UNDEF")
(up-environment "UNDEF" "UNDEF")

  ;;; ENV "modula3scheme"

(debug-addstream "UNDEF" "UNDEF")
(debug-clearenv "UNDEF" "UNDEF")
(debug-haveenv "UNDEF" "UNDEF")
(debug-remstream "UNDEF" "UNDEF")
(debug-setenv "UNDEF" "UNDEF")
(filewr-open "UNDEF" "UNDEF")
(fmtreal "UNDEF" "UNDEF")
(gc "system" "garbage collect")
(getunixpid "UNDEF" "UNDEF")
(hostname "UNDEF" "UNDEF")
(jailbreak "UNDEF" "UNDEF")
(modula-3-op "UNDEF" "UNDEF")
(stdio-stderr "UNDEF" "UNDEF")
(stringify "UNDEF" "UNDEF")
(time->string "UNDEF" "UNDEF")
(timenow "UNDEF" "UNDEF")
(wr-close "UNDEF" "UNDEF")

)
