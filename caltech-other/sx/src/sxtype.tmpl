/* $Id$ */

readonly proc build_renamed_generic_impl (export, generic, args, nm) is
  local file = nm & ".m3"
  local tmp  = ".generic.tmp"
  local sep  = ""
  if defined ("_all")
    > tmp in
      write ("(*generated by m3build*)", CR, CR)
      write ("MODULE ", nm, " EXPORTS ", export, " = ", generic, " (")
      foreach f in args
        write (sep, f)
        sep = ", "
      end
      write (") END ", nm , ".", CR)
    end
    cp_if (tmp, file)
    delete_file (tmp)
  end
  derived_implementation (nm)
end

readonly proc _sxType (nm, elem, vis) is
	build_generic_intf("SX" & nm, "SXType", [elem], vis)
	build_generic_impl("SX" & nm, "SXType", [elem])
end

readonly proc SxType (nm, elem) is
	_sxType(nm, elem, VISIBLE)
end

readonly proc sxType (nm, elem) is
	_sxType(nm, elem, HIDDEN)
end

/***********************************************************************/

readonly proc _sxIntOps (nm, elem, vis) is
        local meme = "SX" & nm & "_" & nm & "FuncOps" 
	local meint = "SX" & nm & "_IntFuncOps" 
	local mebool = "SX" & nm & "_BoolFuncOps" 

	build_generic_intf("SX" & nm & "Ops", "SXNumOps", [elem], vis)
	build_generic_impl("SX" & nm & "Ops", "SXIntOps", [elem])
	build_renamed_generic_impl("SX" & nm & "Ops", "SXNumOps", [elem, meme, meint, mebool],
	                           "SX"  & nm & "Ops2")
end

readonly proc SxIntOps (nm, elem) is
	_sxIntOps(nm, elem, VISIBLE)
end

readonly proc sxIntOps (nm, elem) is
	_sxIntOps(nm, elem, HIDDEN)
end

readonly proc _sxRealOps (nm, elem, vis) is
        local meme = "SX" & nm & "_" & nm & "FuncOps" 
	local meint = "SX" & nm & "_IntFuncOps" 
	local intme = "SXInt_" & nm & "FuncOps" 
	local mebool = "SX" & nm & "_BoolFuncOps" 

	build_generic_intf("SX" & nm & "Ops", "SXNumOps", [elem], vis)
	build_generic_impl("SX" & nm & "Ops", "SXRealOps", [elem])
	build_renamed_generic_impl("SX" & nm & "Ops", "SXNumOps", [elem, meme, meint, mebool],
	                           "SX"  & nm & "Ops2")
	build_generic_intf("SX" & nm & "ConvertOps", "SXConvertOps", [elem], vis)
	build_generic_impl("SX" & nm & "ConvertOps", "SXConvertOps", [elem, intme, meint, mebool])

end

readonly proc SxRealOps (nm, elem) is
	_sxRealOps(nm, elem, VISIBLE)
end

readonly proc sxRealOps (nm, elem) is
	_sxRealOps(nm, elem, HIDDEN)
end

/**********************************************************************/

readonly proc _sxFuncOps (nm, arg, result, vis) is
	build_generic_intf("SX" & nm & "FuncOps", "SXFuncOps", [arg, result], vis)
	build_generic_impl("SX" & nm & "FuncOps", "SXFuncOps", [arg, result])
end

readonly proc SxFuncOps (nm, arg, result) is
	_sxFuncOps(nm, arg, result, VISIBLE)
end

readonly proc sxFuncOps (nm, arg, result) is
	_sxFuncOps(nm, arg, result, HIDDEN)
end

/**********************************************************************/

readonly proc _sxGenOps (nm, elem, vis) is
        local meme = "SX" & nm & "_" & nm & "FuncOps" 

	build_generic_intf("SX" & nm & "GenOps", "SXGenOps", [elem], vis)
	build_generic_impl("SX" & nm & "GenOps", "SXGenOps", [elem, meme])
end

readonly proc SxGenOps (nm, arg) is
	_sxGenOps(nm, arg, VISIBLE)
end

readonly proc sxGenOps (nm, arg) is
	_sxGenOps(nm, arg, HIDDEN)
end

readonly proc _sxGenOps2 (nm, elem, meme, vis) is
	build_generic_intf("SX" & nm & "GenOps", "SXGenOps", [elem], vis)
	build_generic_impl("SX" & nm & "GenOps", "SXGenOps", [elem, meme])
end

readonly proc SxGenOps2 (nm, arg, meme) is
	_sxGenOps2(nm, arg, meme, VISIBLE)
end

readonly proc sxGenOps2 (nm, arg, meme) is
	_sxGenOps2(nm, arg, meme, HIDDEN)
end









