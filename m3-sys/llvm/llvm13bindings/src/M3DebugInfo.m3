(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE M3DebugInfo;


IMPORT M3DebugInfoRaw;
IMPORT M3toC;
IMPORT Ctypes AS C;


FROM LLVM IMPORT ModuleRef, BuilderRef, ContextRef, ValueRef, BasicBlockRef;
FROM LLVMTypes IMPORT MetadataRef, int64_t, uint64_t, uint32_t;

PROCEDURE LLVMDebugMetadataVersion (): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDebugMetadataVersion();
  END LLVMDebugMetadataVersion;

PROCEDURE LLVMGetModuleDebugMetadataVersion (Module: ModuleRef; ):
  CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMGetModuleDebugMetadataVersion(Module);
  END LLVMGetModuleDebugMetadataVersion;

PROCEDURE LLVMStripModuleDebugInfo (Module: ModuleRef; ): BOOLEAN =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMStripModuleDebugInfo(Module);
  END LLVMStripModuleDebugInfo;

PROCEDURE LLVMCreateDIBuilderDisallowUnresolved (M: ModuleRef; ):
  BuilderRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMCreateDIBuilderDisallowUnresolved(M);
  END LLVMCreateDIBuilderDisallowUnresolved;

PROCEDURE LLVMCreateDIBuilder (M: ModuleRef; ): BuilderRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMCreateDIBuilder(M);
  END LLVMCreateDIBuilder;

PROCEDURE LLVMDisposeDIBuilder (Builder: BuilderRef; ) =
  BEGIN
    M3DebugInfoRaw.LLVMDisposeDIBuilder(Builder);
  END LLVMDisposeDIBuilder;

PROCEDURE Finalize (Builder: BuilderRef; ) =
  BEGIN
    M3DebugInfoRaw.Finalize(Builder);
  END Finalize;

PROCEDURE CreateCompileUnit
  (Builder                                  : BuilderRef;
   Lang                                     : LLVMDWARFSourceLanguage;
   FileRef                                  : MetadataRef;
   Producer                                 : TEXT;
   ProducerLen                              : uint32_t;
   isOptimized                              : BOOLEAN;
   Flags                                    : TEXT;
   FlagsLen                                 : uint32_t;
   RuntimeVer                               : uint;
   SplitName                                : TEXT;
   SplitNameLen                             : uint32_t;
   Kind                                     : LLVMDWARFEmissionKind;
   DWOId                                    : uint;
   SplitDebugInlining, DebugInfoForProfiling: BOOLEAN;
   SysRoot                                  : TEXT;
   SysRootLen                               : uint32_t;
   SDK                                      : TEXT;
   SDKLen                                   : uint32_t;                ):
  MetadataRef =
  VAR
    arg2tmp : C.int;
    arg4    : C.char_star;
    arg7    : C.char_star;
    arg10   : C.char_star;
    arg12tmp: C.int;
    arg16   : C.char_star;
    arg18   : C.char_star;
    result  : MetadataRef;
  BEGIN
    arg2tmp := ORD(Lang);
    arg4 := M3toC.SharedTtoS(Producer);
    arg7 := M3toC.SharedTtoS(Flags);
    arg10 := M3toC.SharedTtoS(SplitName);
    arg12tmp := ORD(Kind);
    arg16 := M3toC.SharedTtoS(SysRoot);
    arg18 := M3toC.SharedTtoS(SDK);
    result := M3DebugInfoRaw.CreateCompileUnit(
                Builder, arg2tmp, FileRef, arg4, ProducerLen, isOptimized,
                arg7, FlagsLen, RuntimeVer, arg10, SplitNameLen, arg12tmp,
                DWOId, SplitDebugInlining, DebugInfoForProfiling, arg16,
                SysRootLen, arg18, SDKLen);
    M3toC.FreeSharedS(Producer, arg4);
    M3toC.FreeSharedS(Flags, arg7);
    M3toC.FreeSharedS(SplitName, arg10);
    M3toC.FreeSharedS(SysRoot, arg16);
    M3toC.FreeSharedS(SDK, arg18);
    RETURN result;
  END CreateCompileUnit;

PROCEDURE CreateFile (Builder     : BuilderRef;
                      Filename    : TEXT;
                      FilenameLen : uint32_t;
                      Directory   : TEXT;
                      DirectoryLen: uint32_t;   ): MetadataRef =
  VAR
    arg2  : C.char_star;
    arg4  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Filename);
    arg4 := M3toC.SharedTtoS(Directory);
    result := M3DebugInfoRaw.CreateFile(
                Builder, arg2, FilenameLen, arg4, DirectoryLen);
    M3toC.FreeSharedS(Filename, arg2);
    M3toC.FreeSharedS(Directory, arg4);
    RETURN result;
  END CreateFile;

PROCEDURE CreateModule (Builder        : BuilderRef;
                        ParentScope    : MetadataRef;
                        Name           : TEXT;
                        NameLen        : uint32_t;
                        ConfigMacros   : TEXT;
                        ConfigMacrosLen: uint32_t;
                        IncludePath    : TEXT;
                        IncludePathLen : uint32_t;
                        APINotesFile   : TEXT;
                        APINotesFileLen: uint32_t;    ): MetadataRef =
  VAR
    arg3  : C.char_star;
    arg5  : C.char_star;
    arg7  : C.char_star;
    arg9  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg5 := M3toC.SharedTtoS(ConfigMacros);
    arg7 := M3toC.SharedTtoS(IncludePath);
    arg9 := M3toC.SharedTtoS(APINotesFile);
    result := M3DebugInfoRaw.CreateModule(
                Builder, ParentScope, arg3, NameLen, arg5, ConfigMacrosLen,
                arg7, IncludePathLen, arg9, APINotesFileLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(ConfigMacros, arg5);
    M3toC.FreeSharedS(IncludePath, arg7);
    M3toC.FreeSharedS(APINotesFile, arg9);
    RETURN result;
  END CreateModule;

PROCEDURE CreateNameSpace (Builder      : BuilderRef;
                           ParentScope  : MetadataRef;
                           Name         : TEXT;
                           NameLen      : uint32_t;
                           ExportSymbols: BOOLEAN;     ): MetadataRef =
  VAR
    arg3  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreateNameSpace(
                Builder, ParentScope, arg3, NameLen, ExportSymbols);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateNameSpace;

PROCEDURE CreateFunction (Builder                    : BuilderRef;
                          Scope                      : MetadataRef;
                          Name                       : TEXT;
                          NameLen                    : uint32_t;
                          LinkageName                : TEXT;
                          LinkageNameLen             : uint32_t;
                          File                       : MetadataRef;
                          LineNo                     : uint;
                          Ty                         : MetadataRef;
                          IsLocalToUnit, IsDefinition: BOOLEAN;
                          ScopeLine                  : uint;
                          Flags                      : LLVMDIFlags;
                          IsOptimized                : BOOLEAN;     ):
  MetadataRef =
  VAR
    arg3    : C.char_star;
    arg5    : C.char_star;
    arg13tmp: C.int;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg5 := M3toC.SharedTtoS(LinkageName);
    arg13tmp := ORD(Flags);
    result :=
      M3DebugInfoRaw.CreateFunction(
        Builder, Scope, arg3, NameLen, arg5, LinkageNameLen, File, LineNo,
        Ty, IsLocalToUnit, IsDefinition, ScopeLine, arg13tmp, IsOptimized);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(LinkageName, arg5);
    RETURN result;
  END CreateFunction;

PROCEDURE CreateLexicalBlock
  (Builder: BuilderRef; Scope, File: MetadataRef; Line, Column: uint; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateLexicalBlock(
             Builder, Scope, File, Line, Column);
  END CreateLexicalBlock;

PROCEDURE CreateLexicalBlockFile
  (Builder: BuilderRef; Scope, File: MetadataRef; Discriminator: uint; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateLexicalBlockFile(
             Builder, Scope, File, Discriminator);
  END CreateLexicalBlockFile;

PROCEDURE CreateImportedModuleFromNamespace
  (Builder: BuilderRef; Scope, NS, File: MetadataRef; Line: uint; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateImportedModuleFromNamespace(
             Builder, Scope, NS, File, Line);
  END CreateImportedModuleFromNamespace;

PROCEDURE CreateImportedModuleFromAlias
  (Builder                    : BuilderRef;
   Scope, ImportedEntity, File: MetadataRef;
   Line                       : uint;        ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateImportedModuleFromAlias(
             Builder, Scope, ImportedEntity, File, Line);
  END CreateImportedModuleFromAlias;

PROCEDURE CreateImportedModuleFromModule
  (Builder: BuilderRef; Scope, M, File: MetadataRef; Line: uint; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateImportedModuleFromModule(
             Builder, Scope, M, File, Line);
  END CreateImportedModuleFromModule;

PROCEDURE CreateImportedDeclaration (Builder          : BuilderRef;
                                     Scope, Decl, File: MetadataRef;
                                     Line             : uint;
                                     Name             : TEXT;
                                     NameLen          : uint32_t;    ):
  MetadataRef =
  VAR
    arg6  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg6 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreateImportedDeclaration(
                Builder, Scope, Decl, File, Line, arg6, NameLen);
    M3toC.FreeSharedS(Name, arg6);
    RETURN result;
  END CreateImportedDeclaration;

PROCEDURE CreateDebugLocation
  (Ctx: ContextRef; Line, Column: uint; Scope, InlinedAt: MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateDebugLocation(
             Ctx, Line, Column, Scope, InlinedAt);
  END CreateDebugLocation;

PROCEDURE LLVMDILocationGetLine (Location: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDILocationGetLine(Location);
  END LLVMDILocationGetLine;

PROCEDURE LLVMDILocationGetColumn (Location: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDILocationGetColumn(Location);
  END LLVMDILocationGetColumn;

PROCEDURE LLVMDILocationGetScope (Location: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDILocationGetScope(Location);
  END LLVMDILocationGetScope;

PROCEDURE LLVMDILocationGetInlinedAt (Location: MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDILocationGetInlinedAt(Location);
  END LLVMDILocationGetInlinedAt;

PROCEDURE LLVMDIScopeGetFile (Scope: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIScopeGetFile(Scope);
  END LLVMDIScopeGetFile;

PROCEDURE LLVMDIFileGetDirectory (File: MetadataRef; VAR Len: uint32_t; ):
  TEXT =
  VAR result: C.char_star;
  BEGIN
    result := M3DebugInfoRaw.LLVMDIFileGetDirectory(File, Len);
    RETURN M3toC.CopyStoT(result);
  END LLVMDIFileGetDirectory;

PROCEDURE LLVMDIFileGetFilename (File: MetadataRef; VAR Len: uint32_t; ):
  TEXT =
  VAR result: C.char_star;
  BEGIN
    result := M3DebugInfoRaw.LLVMDIFileGetFilename(File, Len);
    RETURN M3toC.CopyStoT(result);
  END LLVMDIFileGetFilename;

PROCEDURE LLVMDIFileGetSource (File: MetadataRef; VAR Len: uint32_t; ):
  TEXT =
  VAR result: C.char_star;
  BEGIN
    result := M3DebugInfoRaw.LLVMDIFileGetSource(File, Len);
    RETURN M3toC.CopyStoT(result);
  END LLVMDIFileGetSource;

PROCEDURE GetOrCreateTypeArray (Builder    : BuilderRef;
                                Data       : UNTRACED REF MetadataRef;
                                NumElements: uint32_t;                 ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.GetOrCreateTypeArray(Builder, Data, NumElements);
  END GetOrCreateTypeArray;

PROCEDURE CreateSubroutineType (Builder       : BuilderRef;
                                File          : MetadataRef;
                                ParameterTypes: UNTRACED REF MetadataRef;
                                NumParameterTypes: uint;
                                Flags            : LLVMDIFlags; ):
  MetadataRef =
  VAR arg5tmp: C.int;
  BEGIN
    arg5tmp := ORD(Flags);
    RETURN M3DebugInfoRaw.CreateSubroutineType(
             Builder, File, ParameterTypes, NumParameterTypes, arg5tmp);
  END CreateSubroutineType;

PROCEDURE CreateMacro (Builder        : BuilderRef;
                       ParentMacroFile: MetadataRef;
                       Line           : uint;
                       RecordType     : LLVMDWARFMacinfoRecordType;
                       Name           : TEXT;
                       NameLen        : uint32_t;
                       Value          : TEXT;
                       ValueLen       : uint32_t;                   ):
  MetadataRef =
  VAR
    arg4tmp: C.int;
    arg5   : C.char_star;
    arg7   : C.char_star;
    result : MetadataRef;
  BEGIN
    arg4tmp := ORD(RecordType);
    arg5 := M3toC.SharedTtoS(Name);
    arg7 := M3toC.SharedTtoS(Value);
    result :=
      M3DebugInfoRaw.CreateMacro(Builder, ParentMacroFile, Line, arg4tmp,
                                 arg5, NameLen, arg7, ValueLen);
    M3toC.FreeSharedS(Name, arg5);
    M3toC.FreeSharedS(Value, arg7);
    RETURN result;
  END CreateMacro;

PROCEDURE CreateTempMacroFile (Builder        : BuilderRef;
                               ParentMacroFile: MetadataRef;
                               Line           : uint;
                               File           : MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateTempMacroFile(
             Builder, ParentMacroFile, Line, File);
  END CreateTempMacroFile;

PROCEDURE CreateEnumerator (Builder   : BuilderRef;
                            Name      : TEXT;
                            NameLen   : uint32_t;
                            Value     : int64_t;
                            IsUnsigned: BOOLEAN;    ): MetadataRef =
  VAR
    arg2  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreateEnumerator(
                Builder, arg2, NameLen, Value, IsUnsigned);
    M3toC.FreeSharedS(Name, arg2);
    RETURN result;
  END CreateEnumerator;

PROCEDURE CreateEnumerationType (Builder    : BuilderRef;
                                 Scope      : MetadataRef;
                                 Name       : TEXT;
                                 NameLen    : uint32_t;
                                 File       : MetadataRef;
                                 LineNumber : uint;
                                 SizeInBits : uint64_t;
                                 AlignInBits: uint32_t;
                                 Elements   : UNTRACED REF MetadataRef;
                                 NumElements: uint;
                                 ClassTy    : MetadataRef;              ):
  MetadataRef =
  VAR
    arg3  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreateEnumerationType(
                Builder, Scope, arg3, NameLen, File, LineNumber,
                SizeInBits, AlignInBits, Elements, NumElements, ClassTy);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateEnumerationType;

PROCEDURE CreateUnionType (Builder    : BuilderRef;
                           Scope      : MetadataRef;
                           Name       : TEXT;
                           NameLen    : uint32_t;
                           File       : MetadataRef;
                           LineNumber : uint;
                           SizeInBits : uint64_t;
                           AlignInBits: uint32_t;
                           Flags      : LLVMDIFlags;
                           Elements   : UNTRACED REF MetadataRef;
                           NumElements, RunTimeLang: uint;
                           UniqueId                : TEXT;
                           UniqueIdLen             : uint32_t; ):
  MetadataRef =
  VAR
    arg3   : C.char_star;
    arg9tmp: C.int;
    arg13  : C.char_star;
    result : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg9tmp := ORD(Flags);
    arg13 := M3toC.SharedTtoS(UniqueId);
    result := M3DebugInfoRaw.CreateUnionType(
                Builder, Scope, arg3, NameLen, File, LineNumber,
                SizeInBits, AlignInBits, arg9tmp, Elements, NumElements,
                RunTimeLang, arg13, UniqueIdLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(UniqueId, arg13);
    RETURN result;
  END CreateUnionType;

PROCEDURE CreateArrayType (Builder      : BuilderRef;
                           Size         : uint64_t;
                           AlignInBits  : uint32_t;
                           Ty           : MetadataRef;
                           Subscripts   : UNTRACED REF MetadataRef;
                           NumSubscripts: uint;                     ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateArrayType(
             Builder, Size, AlignInBits, Ty, Subscripts, NumSubscripts);
  END CreateArrayType;

PROCEDURE CreateVectorType (Builder      : BuilderRef;
                            Size         : uint64_t;
                            AlignInBits  : uint32_t;
                            Ty           : MetadataRef;
                            Subscripts   : UNTRACED REF MetadataRef;
                            NumSubscripts: uint;                     ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateVectorType(
             Builder, Size, AlignInBits, Ty, Subscripts, NumSubscripts);
  END CreateVectorType;

PROCEDURE CreateUnspecifiedType
  (Builder: BuilderRef; Name: TEXT; NameLen: uint32_t; ): MetadataRef =
  VAR
    arg2  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreateUnspecifiedType(Builder, arg2, NameLen);
    M3toC.FreeSharedS(Name, arg2);
    RETURN result;
  END CreateUnspecifiedType;

PROCEDURE CreateBasicType (Builder   : BuilderRef;
                           Name      : TEXT;
                           NameLen   : uint32_t;
                           SizeInBits: uint64_t;
                           Encoding  : uint;
                           Flags     : LLVMDIFlags; ): MetadataRef =
  VAR
    arg2   : C.char_star;
    arg6tmp: C.int;
    result : MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Name);
    arg6tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateBasicType(
                Builder, arg2, NameLen, SizeInBits, Encoding, arg6tmp);
    M3toC.FreeSharedS(Name, arg2);
    RETURN result;
  END CreateBasicType;

PROCEDURE CreatePointerType (Builder     : BuilderRef;
                             PointeeTy   : MetadataRef;
                             SizeInBits  : uint64_t;
                             AlignInBits : uint32_t;
                             AddressSpace: uint;
                             Name        : TEXT;
                             NameLen     : uint32_t;    ): MetadataRef =
  VAR
    arg6  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg6 := M3toC.SharedTtoS(Name);
    result := M3DebugInfoRaw.CreatePointerType(
                Builder, PointeeTy, SizeInBits, AlignInBits, AddressSpace,
                arg6, NameLen);
    M3toC.FreeSharedS(Name, arg6);
    RETURN result;
  END CreatePointerType;

PROCEDURE CreateStructType (Builder    : BuilderRef;
                            Scope      : MetadataRef;
                            Name       : TEXT;
                            NameLen    : uint32_t;
                            File       : MetadataRef;
                            LineNumber : uint;
                            SizeInBits : uint64_t;
                            AlignInBits: uint32_t;
                            Flags      : LLVMDIFlags;
                            DerivedFrom: MetadataRef;
                            Elements   : UNTRACED REF MetadataRef;
                            NumElements, RunTimeLang: uint;
                            VTableHolder            : MetadataRef;
                            UniqueId                : TEXT;
                            UniqueIdLen             : uint32_t;    ):
  MetadataRef =
  VAR
    arg3   : C.char_star;
    arg9tmp: C.int;
    arg15  : C.char_star;
    result : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg9tmp := ORD(Flags);
    arg15 := M3toC.SharedTtoS(UniqueId);
    result :=
      M3DebugInfoRaw.CreateStructType(
        Builder, Scope, arg3, NameLen, File, LineNumber, SizeInBits,
        AlignInBits, arg9tmp, DerivedFrom, Elements, NumElements,
        RunTimeLang, VTableHolder, arg15, UniqueIdLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(UniqueId, arg15);
    RETURN result;
  END CreateStructType;

PROCEDURE CreateMemberType (Builder     : BuilderRef;
                            Scope       : MetadataRef;
                            Name        : TEXT;
                            NameLen     : uint32_t;
                            File        : MetadataRef;
                            LineNo      : uint;
                            SizeInBits  : uint64_t;
                            AlignInBits : uint32_t;
                            OffsetInBits: uint64_t;
                            Flags       : LLVMDIFlags;
                            Ty          : MetadataRef; ): MetadataRef =
  VAR
    arg3    : C.char_star;
    arg10tmp: C.int;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg10tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateMemberType(
                Builder, Scope, arg3, NameLen, File, LineNo, SizeInBits,
                AlignInBits, OffsetInBits, arg10tmp, Ty);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateMemberType;

PROCEDURE CreateStaticMemberType (Builder    : BuilderRef;
                                  Scope      : MetadataRef;
                                  Name       : TEXT;
                                  NameLen    : uint32_t;
                                  File       : MetadataRef;
                                  LineNumber : uint;
                                  Type       : MetadataRef;
                                  Flags      : LLVMDIFlags;
                                  ConstantVal: ValueRef;
                                  AlignInBits: uint32_t;    ):
  MetadataRef =
  VAR
    arg3   : C.char_star;
    arg8tmp: C.int;
    result : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg8tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateStaticMemberType(
                Builder, Scope, arg3, NameLen, File, LineNumber, Type,
                arg8tmp, ConstantVal, AlignInBits);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateStaticMemberType;

PROCEDURE CreateMemberPointerType (Builder               : BuilderRef;
                                   PointeeType, ClassType: MetadataRef;
                                   SizeInBits            : uint64_t;
                                   AlignInBits           : uint32_t;
                                   Flags                 : LLVMDIFlags; ):
  MetadataRef =
  VAR arg6tmp: C.int;
  BEGIN
    arg6tmp := ORD(Flags);
    RETURN
      M3DebugInfoRaw.CreateMemberPointerType(
        Builder, PointeeType, ClassType, SizeInBits, AlignInBits, arg6tmp);
  END CreateMemberPointerType;

PROCEDURE CreateObjCIVar (Builder         : BuilderRef;
                          Name            : TEXT;
                          NameLen         : uint32_t;
                          File            : MetadataRef;
                          LineNo          : uint;
                          SizeInBits      : uint64_t;
                          AlignInBits     : uint32_t;
                          OffsetInBits    : uint64_t;
                          Flags           : LLVMDIFlags;
                          Ty, PropertyNode: MetadataRef; ): MetadataRef =
  VAR
    arg2   : C.char_star;
    arg9tmp: C.int;
    result : MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Name);
    arg9tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateObjCIVar(
                Builder, arg2, NameLen, File, LineNo, SizeInBits,
                AlignInBits, OffsetInBits, arg9tmp, Ty, PropertyNode);
    M3toC.FreeSharedS(Name, arg2);
    RETURN result;
  END CreateObjCIVar;

PROCEDURE CreateObjCProperty (Builder           : BuilderRef;
                              Name              : TEXT;
                              NameLen           : uint32_t;
                              File              : MetadataRef;
                              LineNo            : uint;
                              GetterName        : TEXT;
                              GetterNameLen     : uint32_t;
                              SetterName        : TEXT;
                              SetterNameLen     : uint32_t;
                              PropertyAttributes: uint;
                              Ty                : MetadataRef; ):
  MetadataRef =
  VAR
    arg2  : C.char_star;
    arg6  : C.char_star;
    arg8  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg2 := M3toC.SharedTtoS(Name);
    arg6 := M3toC.SharedTtoS(GetterName);
    arg8 := M3toC.SharedTtoS(SetterName);
    result := M3DebugInfoRaw.CreateObjCProperty(
                Builder, arg2, NameLen, File, LineNo, arg6, GetterNameLen,
                arg8, SetterNameLen, PropertyAttributes, Ty);
    M3toC.FreeSharedS(Name, arg2);
    M3toC.FreeSharedS(GetterName, arg6);
    M3toC.FreeSharedS(SetterName, arg8);
    RETURN result;
  END CreateObjCProperty;

PROCEDURE CreateObjectPointerType
  (Builder: BuilderRef; Type: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateObjectPointerType(Builder, Type);
  END CreateObjectPointerType;

PROCEDURE CreateQualifiedType
  (Builder: BuilderRef; Tag: uint; Type: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateQualifiedType(Builder, Tag, Type);
  END CreateQualifiedType;

PROCEDURE CreateReferenceType
  (Builder: BuilderRef; Tag: uint; Type: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateReferenceType(Builder, Tag, Type);
  END CreateReferenceType;

PROCEDURE CreateNullPtrType (Builder: BuilderRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateNullPtrType(Builder);
  END CreateNullPtrType;

PROCEDURE CreateTypedef (Builder    : BuilderRef;
                         Type       : MetadataRef;
                         Name       : TEXT;
                         NameLen    : uint32_t;
                         File       : MetadataRef;
                         LineNo     : uint;
                         Scope      : MetadataRef;
                         AlignInBits: uint32_t;    ): MetadataRef =
  VAR
    arg3  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    result :=
      M3DebugInfoRaw.CreateTypedef(
        Builder, Type, arg3, NameLen, File, LineNo, Scope, AlignInBits);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateTypedef;

PROCEDURE CreateInheritance (Builder    : BuilderRef;
                             Ty, BaseTy : MetadataRef;
                             BaseOffset : uint64_t;
                             VBPtrOffset: uint32_t;
                             Flags      : LLVMDIFlags; ): MetadataRef =
  VAR arg6tmp: C.int;
  BEGIN
    arg6tmp := ORD(Flags);
    RETURN M3DebugInfoRaw.CreateInheritance(
             Builder, Ty, BaseTy, BaseOffset, VBPtrOffset, arg6tmp);
  END CreateInheritance;

PROCEDURE CreateForwardDecl (Builder            : BuilderRef;
                             Tag                : uint;
                             Name               : TEXT;
                             NameLen            : uint32_t;
                             Scope, File        : MetadataRef;
                             Line, RuntimeLang  : uint;
                             SizeInBits         : uint64_t;
                             AlignInBits        : uint32_t;
                             UniqueIdentifier   : TEXT;
                             UniqueIdentifierLen: uint32_t;    ):
  MetadataRef =
  VAR
    arg3  : C.char_star;
    arg11 : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg11 := M3toC.SharedTtoS(UniqueIdentifier);
    result :=
      M3DebugInfoRaw.CreateForwardDecl(
        Builder, Tag, arg3, NameLen, Scope, File, Line, RuntimeLang,
        SizeInBits, AlignInBits, arg11, UniqueIdentifierLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(UniqueIdentifier, arg11);
    RETURN result;
  END CreateForwardDecl;

PROCEDURE CreateReplaceableCompositeType (Builder          : BuilderRef;
                                          Tag              : uint;
                                          Name             : TEXT;
                                          NameLen          : uint32_t;
                                          Scope, File      : MetadataRef;
                                          Line, RuntimeLang: uint;
                                          SizeInBits       : uint64_t;
                                          AlignInBits      : uint32_t;
                                          Flags            : LLVMDIFlags;
                                          UniqueIdentifier : TEXT;
                                          UniqueIdentifierLen: uint32_t; ):
  MetadataRef =
  VAR
    arg3    : C.char_star;
    arg11tmp: C.int;
    arg12   : C.char_star;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg11tmp := ORD(Flags);
    arg12 := M3toC.SharedTtoS(UniqueIdentifier);
    result :=
      M3DebugInfoRaw.CreateReplaceableCompositeType(
        Builder, Tag, arg3, NameLen, Scope, File, Line, RuntimeLang,
        SizeInBits, AlignInBits, arg11tmp, arg12, UniqueIdentifierLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(UniqueIdentifier, arg12);
    RETURN result;
  END CreateReplaceableCompositeType;

PROCEDURE CreateBitFieldMemberType
  (Builder                                      : BuilderRef;
   Scope                                        : MetadataRef;
   Name                                         : TEXT;
   NameLen                                      : uint32_t;
   File                                         : MetadataRef;
   LineNumber                                   : uint;
   SizeInBits, OffsetInBits, StorageOffsetInBits: uint64_t;
   Flags                                        : LLVMDIFlags;
   Type                                         : MetadataRef; ):
  MetadataRef =
  VAR
    arg3    : C.char_star;
    arg10tmp: C.int;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg10tmp := ORD(Flags);
    result :=
      M3DebugInfoRaw.CreateBitFieldMemberType(
        Builder, Scope, arg3, NameLen, File, LineNumber, SizeInBits,
        OffsetInBits, StorageOffsetInBits, arg10tmp, Type);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateBitFieldMemberType;

PROCEDURE CreateClassType
  (Builder                         : BuilderRef;
   Scope                           : MetadataRef;
   Name                            : TEXT;
   NameLen                         : uint32_t;
   File                            : MetadataRef;
   LineNumber                      : uint;
   SizeInBits                      : uint64_t;
   AlignInBits                     : uint32_t;
   OffsetInBits                    : uint64_t;
   Flags                           : LLVMDIFlags;
   DerivedFrom                     : MetadataRef;
   Elements                        : UNTRACED REF MetadataRef;
   NumElements                     : uint;
   VTableHolder, TemplateParamsNode: MetadataRef;
   UniqueIdentifier                : TEXT;
   UniqueIdentifierLen             : uint32_t;                 ):
  MetadataRef =
  VAR
    arg3    : C.char_star;
    arg10tmp: C.int;
    arg16   : C.char_star;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg10tmp := ORD(Flags);
    arg16 := M3toC.SharedTtoS(UniqueIdentifier);
    result := M3DebugInfoRaw.CreateClassType(
                Builder, Scope, arg3, NameLen, File, LineNumber,
                SizeInBits, AlignInBits, OffsetInBits, arg10tmp,
                DerivedFrom, Elements, NumElements, VTableHolder,
                TemplateParamsNode, arg16, UniqueIdentifierLen);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(UniqueIdentifier, arg16);
    RETURN result;
  END CreateClassType;

PROCEDURE CreateArtificialType (Builder: BuilderRef; Type: MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateArtificialType(Builder, Type);
  END CreateArtificialType;

PROCEDURE LLVMDITypeGetName (DType: MetadataRef; VAR Length: uint32_t; ):
  TEXT =
  VAR result: C.char_star;
  BEGIN
    result := M3DebugInfoRaw.LLVMDITypeGetName(DType, Length);
    RETURN M3toC.CopyStoT(result);
  END LLVMDITypeGetName;

PROCEDURE LLVMDITypeGetSizeInBits (DType: MetadataRef; ): uint64_t =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDITypeGetSizeInBits(DType);
  END LLVMDITypeGetSizeInBits;

PROCEDURE LLVMDITypeGetOffsetInBits (DType: MetadataRef; ): uint64_t =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDITypeGetOffsetInBits(DType);
  END LLVMDITypeGetOffsetInBits;

PROCEDURE LLVMDITypeGetAlignInBits (DType: MetadataRef; ): uint32_t =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDITypeGetAlignInBits(DType);
  END LLVMDITypeGetAlignInBits;

PROCEDURE LLVMDITypeGetLine (DType: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDITypeGetLine(DType);
  END LLVMDITypeGetLine;

PROCEDURE LLVMDITypeGetFlags (DType: MetadataRef; ): LLVMDIFlags =
  VAR ret: C.int;
  BEGIN
    ret := M3DebugInfoRaw.LLVMDITypeGetFlags(DType);
    RETURN VAL(ret, LLVMDIFlags);
  END LLVMDITypeGetFlags;

PROCEDURE GetOrCreateSubrange
  (Builder: BuilderRef; LowerBound, Count: int64_t; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.GetOrCreateSubrange(Builder, LowerBound, Count);
  END GetOrCreateSubrange;

PROCEDURE GetOrCreateArray (Builder    : BuilderRef;
                            Data       : UNTRACED REF MetadataRef;
                            NumElements: uint32_t;                 ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.GetOrCreateArray(Builder, Data, NumElements);
  END GetOrCreateArray;

PROCEDURE CreateExpression
  (Builder: BuilderRef; Addr: UNTRACED REF int64_t; Length: uint32_t; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateExpression(Builder, Addr, Length);
  END CreateExpression;

PROCEDURE CreateConstantValueExpression
  (Builder: BuilderRef; Value: int64_t; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.CreateConstantValueExpression(Builder, Value);
  END CreateConstantValueExpression;

PROCEDURE CreateGlobalVariableExpression (Builder    : BuilderRef;
                                          Scope      : MetadataRef;
                                          Name       : TEXT;
                                          NameLen    : uint32_t;
                                          Linkage    : TEXT;
                                          LinkLen    : uint32_t;
                                          File       : MetadataRef;
                                          LineNo     : uint;
                                          Ty         : MetadataRef;
                                          LocalToUnit: BOOLEAN;
                                          Expr, Decl : MetadataRef;
                                          AlignInBits: uint32_t;    ):
  MetadataRef =
  VAR
    arg3  : C.char_star;
    arg5  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg5 := M3toC.SharedTtoS(Linkage);
    result := M3DebugInfoRaw.CreateGlobalVariableExpression(
                Builder, Scope, arg3, NameLen, arg5, LinkLen, File, LineNo,
                Ty, LocalToUnit, Expr, Decl, AlignInBits);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(Linkage, arg5);
    RETURN result;
  END CreateGlobalVariableExpression;

PROCEDURE LLVMDIGlobalVariableExpressionGetVariable (GVE: MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIGlobalVariableExpressionGetVariable(GVE);
  END LLVMDIGlobalVariableExpressionGetVariable;

PROCEDURE LLVMDIGlobalVariableExpressionGetExpression (GVE: MetadataRef; ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIGlobalVariableExpressionGetExpression(GVE);
  END LLVMDIGlobalVariableExpressionGetExpression;

PROCEDURE LLVMDIVariableGetFile (Var: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIVariableGetFile(Var);
  END LLVMDIVariableGetFile;

PROCEDURE LLVMDIVariableGetScope (Var: MetadataRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIVariableGetScope(Var);
  END LLVMDIVariableGetScope;

PROCEDURE LLVMDIVariableGetLine (Var: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDIVariableGetLine(Var);
  END LLVMDIVariableGetLine;

PROCEDURE LLVMTemporaryMDNode (Ctx        : ContextRef;
                               Data       : UNTRACED REF MetadataRef;
                               NumElements: uint32_t;                 ):
  MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMTemporaryMDNode(Ctx, Data, NumElements);
  END LLVMTemporaryMDNode;

PROCEDURE LLVMDisposeTemporaryMDNode (TempNode: MetadataRef; ) =
  BEGIN
    M3DebugInfoRaw.LLVMDisposeTemporaryMDNode(TempNode);
  END LLVMDisposeTemporaryMDNode;

PROCEDURE LLVMMetadataReplaceAllUsesWith
  (TempTargetMetadata, Replacement: MetadataRef; ) =
  BEGIN
    M3DebugInfoRaw.LLVMMetadataReplaceAllUsesWith(
      TempTargetMetadata, Replacement);
  END LLVMMetadataReplaceAllUsesWith;

PROCEDURE CreateTempGlobalVariableFwdDecl (Builder    : BuilderRef;
                                           Scope      : MetadataRef;
                                           Name       : TEXT;
                                           NameLen    : uint32_t;
                                           Linkage    : TEXT;
                                           LnkLen     : uint32_t;
                                           File       : MetadataRef;
                                           LineNo     : uint;
                                           Ty         : MetadataRef;
                                           LocalToUnit: BOOLEAN;
                                           Decl       : MetadataRef;
                                           AlignInBits: uint32_t;    ):
  MetadataRef =
  VAR
    arg3  : C.char_star;
    arg5  : C.char_star;
    result: MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg5 := M3toC.SharedTtoS(Linkage);
    result := M3DebugInfoRaw.CreateTempGlobalVariableFwdDecl(
                Builder, Scope, arg3, NameLen, arg5, LnkLen, File, LineNo,
                Ty, LocalToUnit, Decl, AlignInBits);
    M3toC.FreeSharedS(Name, arg3);
    M3toC.FreeSharedS(Linkage, arg5);
    RETURN result;
  END CreateTempGlobalVariableFwdDecl;

PROCEDURE InsertDeclareBefore (Builder                : BuilderRef;
                               Storage                : ValueRef;
                               VarInfo, Expr, DebugLoc: MetadataRef;
                               Instr                  : ValueRef;    ):
  ValueRef =
  BEGIN
    RETURN M3DebugInfoRaw.InsertDeclareBefore(
             Builder, Storage, VarInfo, Expr, DebugLoc, Instr);
  END InsertDeclareBefore;

PROCEDURE InsertDeclareAtEnd (Builder                : BuilderRef;
                              Storage                : ValueRef;
                              VarInfo, Expr, DebugLoc: MetadataRef;
                              Block                  : BasicBlockRef; ):
  ValueRef =
  BEGIN
    RETURN M3DebugInfoRaw.InsertDeclareAtEnd(
             Builder, Storage, VarInfo, Expr, DebugLoc, Block);
  END InsertDeclareAtEnd;

PROCEDURE InsertDbgValueBefore (Builder                : BuilderRef;
                                Val                    : ValueRef;
                                VarInfo, Expr, DebugLoc: MetadataRef;
                                Instr                  : ValueRef;    ):
  ValueRef =
  BEGIN
    RETURN M3DebugInfoRaw.InsertDbgValueBefore(
             Builder, Val, VarInfo, Expr, DebugLoc, Instr);
  END InsertDbgValueBefore;

PROCEDURE InsertDbgValueAtEnd (Builder                : BuilderRef;
                               Val                    : ValueRef;
                               VarInfo, Expr, DebugLoc: MetadataRef;
                               Block                  : BasicBlockRef; ):
  ValueRef =
  BEGIN
    RETURN M3DebugInfoRaw.InsertDbgValueAtEnd(
             Builder, Val, VarInfo, Expr, DebugLoc, Block);
  END InsertDbgValueAtEnd;

PROCEDURE CreateAutoVariable (Builder       : BuilderRef;
                              Scope         : MetadataRef;
                              Name          : TEXT;
                              NameLen       : uint32_t;
                              File          : MetadataRef;
                              LineNo        : uint;
                              Ty            : MetadataRef;
                              AlwaysPreserve: BOOLEAN;
                              Flags         : LLVMDIFlags;
                              AlignInBits   : uint32_t;    ): MetadataRef =
  VAR
    arg3   : C.char_star;
    arg9tmp: C.int;
    result : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg9tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateAutoVariable(
                Builder, Scope, arg3, NameLen, File, LineNo, Ty,
                AlwaysPreserve, arg9tmp, AlignInBits);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateAutoVariable;

PROCEDURE CreateParameterVariable (Builder       : BuilderRef;
                                   Scope         : MetadataRef;
                                   Name          : TEXT;
                                   NameLen       : uint32_t;
                                   ArgNo         : uint;
                                   File          : MetadataRef;
                                   LineNo        : uint;
                                   Ty            : MetadataRef;
                                   AlwaysPreserve: BOOLEAN;
                                   Flags         : LLVMDIFlags; ):
  MetadataRef =
  VAR
    arg3    : C.char_star;
    arg10tmp: C.int;
    result  : MetadataRef;
  BEGIN
    arg3 := M3toC.SharedTtoS(Name);
    arg10tmp := ORD(Flags);
    result := M3DebugInfoRaw.CreateParameterVariable(
                Builder, Scope, arg3, NameLen, ArgNo, File, LineNo, Ty,
                AlwaysPreserve, arg10tmp);
    M3toC.FreeSharedS(Name, arg3);
    RETURN result;
  END CreateParameterVariable;

PROCEDURE LLVMGetSubprogram (Func: ValueRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMGetSubprogram(Func);
  END LLVMGetSubprogram;

PROCEDURE LLVMSetSubprogram (Func: ValueRef; SP: MetadataRef; ) =
  BEGIN
    M3DebugInfoRaw.LLVMSetSubprogram(Func, SP);
  END LLVMSetSubprogram;

PROCEDURE LLVMDISubprogramGetLine (Subprogram: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMDISubprogramGetLine(Subprogram);
  END LLVMDISubprogramGetLine;

PROCEDURE LLVMInstructionGetDebugLoc (Inst: ValueRef; ): MetadataRef =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMInstructionGetDebugLoc(Inst);
  END LLVMInstructionGetDebugLoc;

PROCEDURE LLVMInstructionSetDebugLoc (Inst: ValueRef; Loc: MetadataRef; ) =
  BEGIN
    M3DebugInfoRaw.LLVMInstructionSetDebugLoc(Inst, Loc);
  END LLVMInstructionSetDebugLoc;

PROCEDURE LLVMGetMetadataKind (Metadata: MetadataRef; ): CARDINAL =
  BEGIN
    RETURN M3DebugInfoRaw.LLVMGetMetadataKind(Metadata);
  END LLVMGetMetadataKind;


BEGIN
END M3DebugInfo.
