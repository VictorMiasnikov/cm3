
This is a translator of modula3 intermediate to llvm code. To use it
you need llvm installed. You can install from a package or build from
source. Probably best if you build from source since there are a
couple of additions to the llvm that have been done which have not made
it back to llvm people. These are mainly to do with atomics and
intrinsics. I will provide these changes to interested developers as
requested.

Also I have found it useful to use the release version of llvm since a
version with asserts will crash the generator most likely. Also if
there is a type error in your generated code there is not much info
where that error occurred. Running llc on the output is much more
helpful.

The translator produces runnable code on AMD64 under Linux no other
platforms have been tested.

This should be added as another backend to the m3 tool
chain. Currently I am testing it by first running m3cgcat on test code
generated by cm3 then running llc then assembling then custom linking.

Issues 
  Load and store procedure could be cleaned up they look messy
  and are probably wrong for some types.

  Lots of others.

------------------------------------------------------------------------------

Here is the help text for command-line options: 

m3llvm: standalone converter from cm3 IR to llvm IR, version 0.1 
Usage:m3llvm {-{option}} <inFileName>
  If <inFileName> is absent, read from standard input.
  Options are:
  -a Treat input file as ascii cm3 IR.
  -b Treat input file as binary cm3 IR (the default).
  -d Enable debug output.
  -h Display help text and terminate.
  -v Display program version and terminate.
  -o<bitcodeFileName> or -o <bitcodeFileName>
     Write llvm bitcode to <bitcodeFileName>
  -O<asmFileName> or -O <asmFileName>
     Write llvm assembly code to <asmFileName>
  Either or both bitcode and assembly output may be specified.
  If neither is specified, write llvm assembly to 'm3test.ll'

------------------------------------------------------------------------------ 
Build automation, added by Rodney Bates:

Now builds and links into llvm, using the cm3 build system.

You need a source tree for llvm, version 3.5.0.  In the m3makefile,
edit the definition of LLVM_SOURCE_DIR to point to it.

You also need compiled libraries for this llvm version.  In the m3makefile,
edit LLVM_LIB_DIR to point to the directory where they are located.  

Cm3 will invoke make to build needed C/C++ binding code, against llvm.
The *.o files thus produced are stored in the src directory--not the best
place, since they are target-dependent, but a bug in cm3's build system
forces it.  If the sources of these change, you may need to manually do
'make clean' in the src directory, to get them rebuilt.

Cm3 will compile and link everything needed into an executable named
m3llvm, and, if you ask, ship it.  It reads cm3 IR, in ascii form, from
standard input and writes llvm IR, also in ascii form, to standard
output.  

If you work on the C/C++ code and have clang installed, I recommend editing
'CPP_COMPILER = clang' in Makefile, (instead of 'CPP_COMPILER = gcc').  It
appears slower, but gives much easier-to-read error messages.      

