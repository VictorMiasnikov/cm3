(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE M3DIBuilder;


IMPORT M3DIBuilderRaw;


IMPORT WeakRef;

PROCEDURE New_DIBuilder0
  (self: DIBuilder; M: ModuleRef; AllowUnresolved: BOOLEAN; ): DIBuilder =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(M, ADDRESS);
  BEGIN
    result := M3DIBuilderRaw.New_DIBuilder0(arg1tmp, AllowUnresolved);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_DIBuilder);

    RETURN self;
  END New_DIBuilder0;

PROCEDURE New_DIBuilder1 (self: DIBuilder; M: ModuleRef; ): DIBuilder =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(M, ADDRESS);
  BEGIN
    result := M3DIBuilderRaw.New_DIBuilder1(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_DIBuilder);

    RETURN self;
  END New_DIBuilder1;

PROCEDURE DIBuilder_finalize (self: DIBuilder; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    M3DIBuilderRaw.DIBuilder_finalize(selfAdr);
  END DIBuilder_finalize;

PROCEDURE DIBuilder_finalizeSubprogram
  (self: DIBuilder; SP: DISubprogram; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(SP, ADDRESS);
    M3DIBuilderRaw.DIBuilder_finalizeSubprogram(selfAdr, arg2tmp);
  END DIBuilder_finalizeSubprogram;

PROCEDURE DIBuilder_createCompileUnit
  (         self                                     : DIBuilder;
            Lang                                     : uint;
            File                                     : DIFile;
   READONLY Producer                                 : StringRef;
            isOptimized                              : BOOLEAN;
   READONLY Flags                                    : StringRef;
            RV                                       : uint;
   READONLY SplitName                                : StringRef;
            Kind                                     : INTEGER;
            DWOId                                    : uint64_t;
            SplitDebugInlining, DebugInfoForProfiling: BOOLEAN;   ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createCompileUnit(
             selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized,
             ADR(Flags), RV, ADR(SplitName), Kind, DWOId,
             SplitDebugInlining, DebugInfoForProfiling);
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit;

PROCEDURE DIBuilder_createCompileUnit1 (         self       : DIBuilder;
                                                 Lang       : uint;
                                                 File       : DIFile;
                                        READONLY Producer   : StringRef;
                                                 isOptimized: BOOLEAN;
                                        READONLY Flags      : StringRef;
                                                 RV         : uint;
                                        READONLY SplitName  : StringRef;
                                                 Kind       : INTEGER;
                                                 DWOId      : uint64_t;
                                        SplitDebugInlining: BOOLEAN; ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createCompileUnit1(
        selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized, ADR(Flags), RV,
        ADR(SplitName), Kind, DWOId, SplitDebugInlining);
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit1;

PROCEDURE DIBuilder_createCompileUnit2 (         self       : DIBuilder;
                                                 Lang       : uint;
                                                 File       : DIFile;
                                        READONLY Producer   : StringRef;
                                                 isOptimized: BOOLEAN;
                                        READONLY Flags      : StringRef;
                                                 RV         : uint;
                                        READONLY SplitName  : StringRef;
                                                 Kind       : INTEGER;
                                                 DWOId      : uint64_t;  ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createCompileUnit2(
             selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized,
             ADR(Flags), RV, ADR(SplitName), Kind, DWOId);
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit2;

PROCEDURE DIBuilder_createCompileUnit3 (         self       : DIBuilder;
                                                 Lang       : uint;
                                                 File       : DIFile;
                                        READONLY Producer   : StringRef;
                                                 isOptimized: BOOLEAN;
                                        READONLY Flags      : StringRef;
                                                 RV         : uint;
                                        READONLY SplitName  : StringRef;
                                                 Kind       : INTEGER;   ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createCompileUnit3(
             selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized,
             ADR(Flags), RV, ADR(SplitName), Kind);
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit3;

PROCEDURE DIBuilder_createCompileUnit4 (         self       : DIBuilder;
                                                 Lang       : uint;
                                                 File       : DIFile;
                                        READONLY Producer   : StringRef;
                                                 isOptimized: BOOLEAN;
                                        READONLY Flags      : StringRef;
                                                 RV         : uint;
                                        READONLY SplitName  : StringRef; ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createCompileUnit4(
             selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized,
             ADR(Flags), RV, ADR(SplitName));
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit4;

PROCEDURE DIBuilder_createCompileUnit5 (         self       : DIBuilder;
                                                 Lang       : uint;
                                                 File       : DIFile;
                                        READONLY Producer   : StringRef;
                                                 isOptimized: BOOLEAN;
                                        READONLY Flags      : StringRef;
                                                 RV         : uint;      ):
  DICompileUnit =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createCompileUnit5(
             selfAdr, Lang, arg3tmp, ADR(Producer), isOptimized,
             ADR(Flags), RV);
    RETURN LOOPHOLE(ret, DICompileUnit);
  END DIBuilder_createCompileUnit5;

PROCEDURE DIBuilder_createFile (         self               : DIBuilder;
                                READONLY Filename, Directory: StringRef;
                                         CSKind             : INTEGER;
                                READONLY Checksum           : StringRef; ):
  DIFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_createFile(
        selfAdr, ADR(Filename), ADR(Directory), CSKind, ADR(Checksum));
    RETURN LOOPHOLE(ret, DIFile);
  END DIBuilder_createFile;

PROCEDURE DIBuilder_createFile1
  (         self               : DIBuilder;
   READONLY Filename, Directory: StringRef;
            CSKind             : INTEGER;   ): DIFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createFile1(
             selfAdr, ADR(Filename), ADR(Directory), CSKind);
    RETURN LOOPHOLE(ret, DIFile);
  END DIBuilder_createFile1;

PROCEDURE DIBuilder_createFile2
  (self: DIBuilder; READONLY Filename, Directory: StringRef; ): DIFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createFile2(
             selfAdr, ADR(Filename), ADR(Directory));
    RETURN LOOPHOLE(ret, DIFile);
  END DIBuilder_createFile2;

PROCEDURE DIBuilder_createMacro (         self           : DIBuilder;
                                          Parent         : DIMacroFile;
                                          Line, MacroType: uint;
                                 READONLY Name, Value    : StringRef;   ):
  DIMacro =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Parent, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMacro(
             selfAdr, arg2tmp, Line, MacroType, ADR(Name), ADR(Value));
    RETURN LOOPHOLE(ret, DIMacro);
  END DIBuilder_createMacro;

PROCEDURE DIBuilder_createMacro1 (         self           : DIBuilder;
                                           Parent         : DIMacroFile;
                                           Line, MacroType: uint;
                                  READONLY Name           : StringRef;   ):
  DIMacro =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Parent, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMacro1(
             selfAdr, arg2tmp, Line, MacroType, ADR(Name));
    RETURN LOOPHOLE(ret, DIMacro);
  END DIBuilder_createMacro1;

PROCEDURE DIBuilder_createTempMacroFile
  (self: DIBuilder; Parent: DIMacroFile; Line: uint; File: DIFile; ):
  DIMacroFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Parent, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempMacroFile(
             selfAdr, arg2tmp, Line, arg4tmp);
    RETURN LOOPHOLE(ret, DIMacroFile);
  END DIBuilder_createTempMacroFile;

PROCEDURE DIBuilder_createEnumerator
  (self: DIBuilder; READONLY Name: StringRef; Val: int64_t; ):
  DIEnumerator =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_createEnumerator(selfAdr, ADR(Name), Val);
    RETURN LOOPHOLE(ret, DIEnumerator);
  END DIBuilder_createEnumerator;

PROCEDURE DIBuilder_createUnspecifiedType
  (self: DIBuilder; READONLY Name: StringRef; ): DIBasicType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_createUnspecifiedType(selfAdr, ADR(Name));
    RETURN LOOPHOLE(ret, DIBasicType);
  END DIBuilder_createUnspecifiedType;

PROCEDURE DIBuilder_createNullPtrType (self: DIBuilder; ): DIBasicType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createNullPtrType(selfAdr);
    RETURN LOOPHOLE(ret, DIBasicType);
  END DIBuilder_createNullPtrType;

PROCEDURE DIBuilder_createBasicType (         self      : DIBuilder;
                                     READONLY Name      : StringRef;
                                              SizeInBits: uint64_t;
                                              Encoding  : uint;      ):
  DIBasicType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createBasicType(
             selfAdr, ADR(Name), SizeInBits, Encoding);
    RETURN LOOPHOLE(ret, DIBasicType);
  END DIBuilder_createBasicType;

PROCEDURE DIBuilder_createQualifiedType
  (self: DIBuilder; Tag: uint; FromTy: DIType; ): DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(FromTy, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createQualifiedType(selfAdr, Tag, arg3tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createQualifiedType;

PROCEDURE DIBuilder_createPointerType (self             : DIBuilder;
                                       PointeeTy        : DIType;
                                       SizeInBits       : uint64_t;
                                       AlignInBits      : uint32_t;
                                       DWARFAddressSpace: ADDRESS;
                                       READONLY Name: StringRef; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createPointerType(
             selfAdr, arg2tmp, SizeInBits, AlignInBits, DWARFAddressSpace,
             ADR(Name));
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createPointerType;

PROCEDURE DIBuilder_createPointerType1 (self             : DIBuilder;
                                        PointeeTy        : DIType;
                                        SizeInBits       : uint64_t;
                                        AlignInBits      : uint32_t;
                                        DWARFAddressSpace: ADDRESS;   ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createPointerType1(
             selfAdr, arg2tmp, SizeInBits, AlignInBits, DWARFAddressSpace);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createPointerType1;

PROCEDURE DIBuilder_createPointerType2 (self       : DIBuilder;
                                        PointeeTy  : DIType;
                                        SizeInBits : uint64_t;
                                        AlignInBits: uint32_t;  ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createPointerType2(
             selfAdr, arg2tmp, SizeInBits, AlignInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createPointerType2;

PROCEDURE DIBuilder_createPointerType3
  (self: DIBuilder; PointeeTy: DIType; SizeInBits: uint64_t; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createPointerType3(
             selfAdr, arg2tmp, SizeInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createPointerType3;

PROCEDURE DIBuilder_createMemberPointerType
  (self            : DIBuilder;
   PointeeTy, Class: DIType;
   SizeInBits      : uint64_t;
   AlignInBits     : uint32_t;
   Flags           : INTEGER;   ): DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    arg3tmp := LOOPHOLE(Class, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMemberPointerType(
             selfAdr, arg2tmp, arg3tmp, SizeInBits, AlignInBits, Flags);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createMemberPointerType;

PROCEDURE DIBuilder_createMemberPointerType1
  (self            : DIBuilder;
   PointeeTy, Class: DIType;
   SizeInBits      : uint64_t;
   AlignInBits     : uint32_t;  ): DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    arg3tmp := LOOPHOLE(Class, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMemberPointerType1(
             selfAdr, arg2tmp, arg3tmp, SizeInBits, AlignInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createMemberPointerType1;

PROCEDURE DIBuilder_createMemberPointerType2
  (self: DIBuilder; PointeeTy, Class: DIType; SizeInBits: uint64_t; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(PointeeTy, ADDRESS);
    arg3tmp := LOOPHOLE(Class, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMemberPointerType2(
             selfAdr, arg2tmp, arg3tmp, SizeInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createMemberPointerType2;

PROCEDURE DIBuilder_createReferenceType (self             : DIBuilder;
                                         Tag              : uint;
                                         RTy              : DIType;
                                         SizeInBits       : uint64_t;
                                         AlignInBits      : uint32_t;
                                         DWARFAddressSpace: ADDRESS;   ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(RTy, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createReferenceType(
        selfAdr, Tag, arg3tmp, SizeInBits, AlignInBits, DWARFAddressSpace);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createReferenceType;

PROCEDURE DIBuilder_createReferenceType1 (self       : DIBuilder;
                                          Tag        : uint;
                                          RTy        : DIType;
                                          SizeInBits : uint64_t;
                                          AlignInBits: uint32_t;  ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(RTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReferenceType1(
             selfAdr, Tag, arg3tmp, SizeInBits, AlignInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createReferenceType1;

PROCEDURE DIBuilder_createReferenceType2
  (self: DIBuilder; Tag: uint; RTy: DIType; SizeInBits: uint64_t; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(RTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReferenceType2(
             selfAdr, Tag, arg3tmp, SizeInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createReferenceType2;

PROCEDURE DIBuilder_createReferenceType3
  (self: DIBuilder; Tag: uint; RTy: DIType; ): DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(RTy, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createReferenceType3(selfAdr, Tag, arg3tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createReferenceType3;

PROCEDURE DIBuilder_createTypedef (         self   : DIBuilder;
                                            Ty     : DIType;
                                   READONLY Name   : StringRef;
                                            File   : DIFile;
                                            LineNo : uint;
                                            Context: DIScope;   ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Ty, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Context, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTypedef(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createTypedef;

PROCEDURE DIBuilder_createFriend (self: DIBuilder; Ty, FriendTy: DIType; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Ty, ADDRESS);
    arg3tmp := LOOPHOLE(FriendTy, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createFriend(selfAdr, arg2tmp, arg3tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createFriend;

PROCEDURE DIBuilder_createInheritance (self      : DIBuilder;
                                       Ty, BaseTy: DIType;
                                       BaseOffset: uint64_t;
                                       Flags     : INTEGER;   ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Ty, ADDRESS);
    arg3tmp := LOOPHOLE(BaseTy, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createInheritance(
             selfAdr, arg2tmp, arg3tmp, BaseOffset, Flags);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createInheritance;

PROCEDURE DIBuilder_createMemberType (         self        : DIBuilder;
                                               Scope       : DIScope;
                                      READONLY Name        : StringRef;
                                               File        : DIFile;
                                               LineNo      : uint;
                                               SizeInBits  : uint64_t;
                                               AlignInBits : uint32_t;
                                               OffsetInBits: uint64_t;
                                               Flags       : INTEGER;
                                               Ty          : DIType;    ):
  DIDerivedType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMemberType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, SizeInBits,
             AlignInBits, OffsetInBits, Flags, arg10tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createMemberType;

PROCEDURE DIBuilder_createBitFieldMemberType
  (         self                                         : DIBuilder;
            Scope                                        : DIScope;
   READONLY Name                                         : StringRef;
            File                                         : DIFile;
            LineNo                                       : uint;
            SizeInBits, OffsetInBits, StorageOffsetInBits: uint64_t;
            Flags                                        : INTEGER;
            Ty                                           : DIType;    ):
  DIDerivedType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createBitFieldMemberType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, SizeInBits,
             OffsetInBits, StorageOffsetInBits, Flags, arg10tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createBitFieldMemberType;

PROCEDURE DIBuilder_createStaticMemberType (         self  : DIBuilder;
                                                     Scope : DIScope;
                                            READONLY Name  : StringRef;
                                                     File  : DIFile;
                                                     LineNo: uint;
                                                     Ty    : DIType;
                                                     Flags : INTEGER;
                                                     Val   : DIConstant;
                                            AlignInBits: uint32_t; ):
  DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
    arg8tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    arg8tmp := LOOPHOLE(Val, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStaticMemberType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp, Flags,
             arg8tmp, AlignInBits);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createStaticMemberType;

PROCEDURE DIBuilder_createStaticMemberType1
  (         self  : DIBuilder;
            Scope : DIScope;
   READONLY Name  : StringRef;
            File  : DIFile;
            LineNo: uint;
            Ty    : DIType;
            Flags : INTEGER;
            Val   : DIConstant; ): DIDerivedType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
    arg8tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    arg8tmp := LOOPHOLE(Val, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStaticMemberType1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp, Flags,
             arg8tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createStaticMemberType1;

PROCEDURE DIBuilder_createObjCIVar (         self        : DIBuilder;
                                    READONLY Name        : StringRef;
                                             File        : DIFile;
                                             LineNo      : uint;
                                             SizeInBits  : uint64_t;
                                             AlignInBits : uint32_t;
                                             OffsetInBits: uint64_t;
                                             Flags       : INTEGER;
                                             Ty          : DIType;
                                             PropertyNode: MDNode;    ):
  DIDerivedType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp : ADDRESS;
    arg9tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(Ty, ADDRESS);
    arg10tmp := LOOPHOLE(PropertyNode, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createObjCIVar(
             selfAdr, ADR(Name), arg3tmp, LineNo, SizeInBits, AlignInBits,
             OffsetInBits, Flags, arg9tmp, arg10tmp);
    RETURN LOOPHOLE(ret, DIDerivedType);
  END DIBuilder_createObjCIVar;

PROCEDURE DIBuilder_createObjCProperty
  (         self                  : DIBuilder;
   READONLY Name                  : StringRef;
            File                  : DIFile;
            LineNumber            : uint;
   READONLY GetterName, SetterName: StringRef;
            PropertyAttributes    : uint;
            Ty                    : DIType;    ): DIObjCProperty =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp: ADDRESS;
    arg8tmp: ADDRESS;
  BEGIN
    arg3tmp := LOOPHOLE(File, ADDRESS);
    arg8tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createObjCProperty(
             selfAdr, ADR(Name), arg3tmp, LineNumber, ADR(GetterName),
             ADR(SetterName), PropertyAttributes, arg8tmp);
    RETURN LOOPHOLE(ret, DIObjCProperty);
  END DIBuilder_createObjCProperty;

PROCEDURE DIBuilder_createClassType
  (         self            : DIBuilder;
            Scope           : DIScope;
   READONLY Name            : StringRef;
            File            : DIFile;
            LineNumber      : uint;
            SizeInBits      : uint64_t;
            AlignInBits     : uint32_t;
            OffsetInBits    : uint64_t;
            Flags           : INTEGER;
            DerivedFrom     : DIType;
            Elements        : DINodeArray;
            VTableHolder    : DIType;
            TemplateParms   : MDNode;
   READONLY UniqueIdentifier: StringRef;   ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
    arg12tmp: ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    arg12tmp := LOOPHOLE(VTableHolder, ADDRESS);
    arg13tmp := LOOPHOLE(TemplateParms, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createClassType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, OffsetInBits, Flags, arg10tmp, Elements,
             arg12tmp, arg13tmp, ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createClassType;

PROCEDURE DIBuilder_createClassType1
  (         self         : DIBuilder;
            Scope        : DIScope;
   READONLY Name         : StringRef;
            File         : DIFile;
            LineNumber   : uint;
            SizeInBits   : uint64_t;
            AlignInBits  : uint32_t;
            OffsetInBits : uint64_t;
            Flags        : INTEGER;
            DerivedFrom  : DIType;
            Elements     : DINodeArray;
            VTableHolder : DIType;
            TemplateParms: MDNode;      ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
    arg12tmp: ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    arg12tmp := LOOPHOLE(VTableHolder, ADDRESS);
    arg13tmp := LOOPHOLE(TemplateParms, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createClassType1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, OffsetInBits, Flags, arg10tmp, Elements,
             arg12tmp, arg13tmp);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createClassType1;

PROCEDURE DIBuilder_createClassType2
  (         self        : DIBuilder;
            Scope       : DIScope;
   READONLY Name        : StringRef;
            File        : DIFile;
            LineNumber  : uint;
            SizeInBits  : uint64_t;
            AlignInBits : uint32_t;
            OffsetInBits: uint64_t;
            Flags       : INTEGER;
            DerivedFrom : DIType;
            Elements    : DINodeArray;
            VTableHolder: DIType;      ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
    arg12tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    arg12tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createClassType2(
        selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
        AlignInBits, OffsetInBits, Flags, arg10tmp, Elements, arg12tmp);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createClassType2;

PROCEDURE DIBuilder_createClassType3
  (         self        : DIBuilder;
            Scope       : DIScope;
   READONLY Name        : StringRef;
            File        : DIFile;
            LineNumber  : uint;
            SizeInBits  : uint64_t;
            AlignInBits : uint32_t;
            OffsetInBits: uint64_t;
            Flags       : INTEGER;
            DerivedFrom : DIType;
            Elements    : DINodeArray; ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg10tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createClassType3(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, OffsetInBits, Flags, arg10tmp, Elements);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createClassType3;

PROCEDURE DIBuilder_createStructType
  (         self            : DIBuilder;
            Scope           : DIScope;
   READONLY Name            : StringRef;
            File            : DIFile;
            LineNumber      : uint;
            SizeInBits      : uint64_t;
            AlignInBits     : uint32_t;
            Flags           : INTEGER;
            DerivedFrom     : DIType;
            Elements        : DINodeArray;
            RunTimeLang     : uint;
            VTableHolder    : DIType;
   READONLY UniqueIdentifier: StringRef;   ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg9tmp : ADDRESS;
    arg12tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    arg12tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStructType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, arg9tmp, Elements, RunTimeLang, arg12tmp,
             ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createStructType;

PROCEDURE DIBuilder_createStructType1
  (         self        : DIBuilder;
            Scope       : DIScope;
   READONLY Name        : StringRef;
            File        : DIFile;
            LineNumber  : uint;
            SizeInBits  : uint64_t;
            AlignInBits : uint32_t;
            Flags       : INTEGER;
            DerivedFrom : DIType;
            Elements    : DINodeArray;
            RunTimeLang : uint;
            VTableHolder: DIType;      ): DICompositeType =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg4tmp : ADDRESS;
    arg9tmp : ADDRESS;
    arg12tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    arg12tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStructType1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, arg9tmp, Elements, RunTimeLang, arg12tmp);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createStructType1;

PROCEDURE DIBuilder_createStructType2
  (         self       : DIBuilder;
            Scope      : DIScope;
   READONLY Name       : StringRef;
            File       : DIFile;
            LineNumber : uint;
            SizeInBits : uint64_t;
            AlignInBits: uint32_t;
            Flags      : INTEGER;
            DerivedFrom: DIType;
            Elements   : DINodeArray;
            RunTimeLang: uint;        ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStructType2(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, arg9tmp, Elements, RunTimeLang);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createStructType2;

PROCEDURE DIBuilder_createStructType3
  (         self       : DIBuilder;
            Scope      : DIScope;
   READONLY Name       : StringRef;
            File       : DIFile;
            LineNumber : uint;
            SizeInBits : uint64_t;
            AlignInBits: uint32_t;
            Flags      : INTEGER;
            DerivedFrom: DIType;
            Elements   : DINodeArray; ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(DerivedFrom, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createStructType3(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, arg9tmp, Elements);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createStructType3;

PROCEDURE DIBuilder_createUnionType
  (         self            : DIBuilder;
            Scope           : DIScope;
   READONLY Name            : StringRef;
            File            : DIFile;
            LineNumber      : uint;
            SizeInBits      : uint64_t;
            AlignInBits     : uint32_t;
            Flags           : INTEGER;
            Elements        : DINodeArray;
            RunTimeLang     : uint;
   READONLY UniqueIdentifier: StringRef;   ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createUnionType(
        selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
        AlignInBits, Flags, Elements, RunTimeLang, ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createUnionType;

PROCEDURE DIBuilder_createUnionType1 (         self       : DIBuilder;
                                               Scope      : DIScope;
                                      READONLY Name       : StringRef;
                                               File       : DIFile;
                                               LineNumber : uint;
                                               SizeInBits : uint64_t;
                                               AlignInBits: uint32_t;
                                               Flags      : INTEGER;
                                               Elements   : DINodeArray;
                                               RunTimeLang: uint;        ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createUnionType1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, Elements, RunTimeLang);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createUnionType1;

PROCEDURE DIBuilder_createUnionType2 (         self       : DIBuilder;
                                               Scope      : DIScope;
                                      READONLY Name       : StringRef;
                                               File       : DIFile;
                                               LineNumber : uint;
                                               SizeInBits : uint64_t;
                                               AlignInBits: uint32_t;
                                               Flags      : INTEGER;
                                               Elements   : DINodeArray; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createUnionType2(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Flags, Elements);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createUnionType2;

PROCEDURE DIBuilder_createTemplateTypeParameter
  (self: DIBuilder; Scope: DIScope; READONLY Name: StringRef; Ty: DIType; ):
  DITemplateTypeParameter =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTemplateTypeParameter(
             selfAdr, arg2tmp, ADR(Name), arg4tmp);
    RETURN LOOPHOLE(ret, DITemplateTypeParameter);
  END DIBuilder_createTemplateTypeParameter;

PROCEDURE DIBuilder_createTemplateValueParameter
  (         self : DIBuilder;
            Scope: DIScope;
   READONLY Name : StringRef;
            Ty   : DIType;
            Val  : DIConstant; ): DITemplateValueParameter =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    arg5tmp := LOOPHOLE(Val, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTemplateValueParameter(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, arg5tmp);
    RETURN LOOPHOLE(ret, DITemplateValueParameter);
  END DIBuilder_createTemplateValueParameter;

PROCEDURE DIBuilder_createTemplateTemplateParameter
  (         self : DIBuilder;
            Scope: DIScope;
   READONLY Name : StringRef;
            Ty   : DIType;
   READONLY Val  : StringRef; ): DITemplateValueParameter =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTemplateTemplateParameter(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, ADR(Val));
    RETURN LOOPHOLE(ret, DITemplateValueParameter);
  END DIBuilder_createTemplateTemplateParameter;

PROCEDURE DIBuilder_createTemplateParameterPack (self : DIBuilder;
                                                 Scope: DIScope;
                                                 READONLY Name: StringRef;
                                                          Ty  : DIType;
                                                 Val: DINodeArray; ):
  DITemplateValueParameter =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTemplateParameterPack(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, Val);
    RETURN LOOPHOLE(ret, DITemplateValueParameter);
  END DIBuilder_createTemplateParameterPack;

PROCEDURE DIBuilder_createArrayType (self       : DIBuilder;
                                     Size       : uint64_t;
                                     AlignInBits: uint32_t;
                                     Ty         : DIType;
                                     Subscripts : DINodeArray; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createArrayType(
             selfAdr, Size, AlignInBits, arg4tmp, Subscripts);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createArrayType;

PROCEDURE DIBuilder_createVectorType (self       : DIBuilder;
                                      Size       : uint64_t;
                                      AlignInBits: uint32_t;
                                      Ty         : DIType;
                                      Subscripts : DINodeArray; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createVectorType(
             selfAdr, Size, AlignInBits, arg4tmp, Subscripts);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createVectorType;

PROCEDURE DIBuilder_createEnumerationType
  (         self            : DIBuilder;
            Scope           : DIScope;
   READONLY Name            : StringRef;
            File            : DIFile;
            LineNumber      : uint;
            SizeInBits      : uint64_t;
            AlignInBits     : uint32_t;
            Elements        : DINodeArray;
            UnderlyingType  : DIType;
   READONLY UniqueIdentifier: StringRef;   ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(UnderlyingType, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createEnumerationType(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Elements, arg9tmp, ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createEnumerationType;

PROCEDURE DIBuilder_createEnumerationType1 (         self : DIBuilder;
                                                     Scope: DIScope;
                                            READONLY Name : StringRef;
                                                     File : DIFile;
                                            LineNumber    : uint;
                                            SizeInBits    : uint64_t;
                                            AlignInBits   : uint32_t;
                                            Elements      : DINodeArray;
                                            UnderlyingType: DIType;      ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg9tmp := LOOPHOLE(UnderlyingType, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createEnumerationType1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNumber, SizeInBits,
             AlignInBits, Elements, arg9tmp);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createEnumerationType1;

PROCEDURE DIBuilder_createSubroutineType
  (self          : DIBuilder;
   ParameterTypes: DITypeRefArray;
   Flags         : INTEGER;
   CC            : uint;           ): DISubroutineType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createSubroutineType(
             selfAdr, ParameterTypes, Flags, CC);
    RETURN LOOPHOLE(ret, DISubroutineType);
  END DIBuilder_createSubroutineType;

PROCEDURE DIBuilder_createSubroutineType1
  (self: DIBuilder; ParameterTypes: DITypeRefArray; Flags: INTEGER; ):
  DISubroutineType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createSubroutineType1(
             selfAdr, ParameterTypes, Flags);
    RETURN LOOPHOLE(ret, DISubroutineType);
  END DIBuilder_createSubroutineType1;

PROCEDURE DIBuilder_createSubroutineType2
  (self: DIBuilder; ParameterTypes: DITypeRefArray; ): DISubroutineType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createSubroutineType2(
             selfAdr, ParameterTypes);
    RETURN LOOPHOLE(ret, DISubroutineType);
  END DIBuilder_createSubroutineType2;

PROCEDURE DIBuilder_createArtificialType (self: DIBuilder; Ty: DIType; ):
  DIType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createArtificialType(selfAdr, arg2tmp);
    RETURN LOOPHOLE(ret, DIType);
  END DIBuilder_createArtificialType;

PROCEDURE DIBuilder_createObjectPointerType
  (self: DIBuilder; Ty: DIType; ): DIType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Ty, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createObjectPointerType(selfAdr, arg2tmp);
    RETURN LOOPHOLE(ret, DIType);
  END DIBuilder_createObjectPointerType;

PROCEDURE DIBuilder_createForwardDecl
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;
            SizeInBits       : uint64_t;
            AlignInBits      : uint32_t;
   READONLY UniqueIdentifier : StringRef; ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createForwardDecl(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits, AlignInBits, ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createForwardDecl;

PROCEDURE DIBuilder_createForwardDecl1 (         self : DIBuilder;
                                                 Tag  : uint;
                                        READONLY Name : StringRef;
                                                 Scope: DIScope;
                                                 F    : DIFile;
                                        Line, RuntimeLang: uint;
                                        SizeInBits       : uint64_t;
                                        AlignInBits      : uint32_t; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createForwardDecl1(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits, AlignInBits);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createForwardDecl1;

PROCEDURE DIBuilder_createForwardDecl2 (         self : DIBuilder;
                                                 Tag  : uint;
                                        READONLY Name : StringRef;
                                                 Scope: DIScope;
                                                 F    : DIFile;
                                        Line, RuntimeLang: uint;
                                        SizeInBits       : uint64_t; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createForwardDecl2(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createForwardDecl2;

PROCEDURE DIBuilder_createForwardDecl3 (         self : DIBuilder;
                                                 Tag  : uint;
                                        READONLY Name : StringRef;
                                                 Scope: DIScope;
                                                 F    : DIFile;
                                        Line, RuntimeLang: uint; ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createForwardDecl3(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createForwardDecl3;

PROCEDURE DIBuilder_createForwardDecl4 (         self : DIBuilder;
                                                 Tag  : uint;
                                        READONLY Name : StringRef;
                                                 Scope: DIScope;
                                                 F    : DIFile;
                                                 Line : uint;      ):
  DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createForwardDecl4(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createForwardDecl4;

PROCEDURE DIBuilder_createReplaceableCompositeType
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;
            SizeInBits       : uint64_t;
            AlignInBits      : uint32_t;
            Flags            : INTEGER;
   READONLY UniqueIdentifier : StringRef; ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits, AlignInBits, Flags, ADR(UniqueIdentifier));
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType;

PROCEDURE DIBuilder_createReplaceableCompositeType1
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;
            SizeInBits       : uint64_t;
            AlignInBits      : uint32_t;
            Flags            : INTEGER;   ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType1(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits, AlignInBits, Flags);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType1;

PROCEDURE DIBuilder_createReplaceableCompositeType2
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;
            SizeInBits       : uint64_t;
            AlignInBits      : uint32_t;  ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType2(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits, AlignInBits);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType2;

PROCEDURE DIBuilder_createReplaceableCompositeType3
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;
            SizeInBits       : uint64_t;  ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType3(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang,
             SizeInBits);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType3;

PROCEDURE DIBuilder_createReplaceableCompositeType4
  (         self             : DIBuilder;
            Tag              : uint;
   READONLY Name             : StringRef;
            Scope            : DIScope;
            F                : DIFile;
            Line, RuntimeLang: uint;      ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType4(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line, RuntimeLang);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType4;

PROCEDURE DIBuilder_createReplaceableCompositeType5
  (         self : DIBuilder;
            Tag  : uint;
   READONLY Name : StringRef;
            Scope: DIScope;
            F    : DIFile;
            Line : uint;      ): DICompositeType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
  BEGIN
    arg4tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(F, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createReplaceableCompositeType5(
             selfAdr, Tag, ADR(Name), arg4tmp, arg5tmp, Line);
    RETURN LOOPHOLE(ret, DICompositeType);
  END DIBuilder_createReplaceableCompositeType5;

PROCEDURE DIBuilder_retainType (self: DIBuilder; T: DIScope; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(T, ADDRESS);
    M3DIBuilderRaw.DIBuilder_retainType(selfAdr, arg2tmp);
  END DIBuilder_retainType;

PROCEDURE DIBuilder_createUnspecifiedParameter (self: DIBuilder; ):
  DIBasicType =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createUnspecifiedParameter(selfAdr);
    RETURN LOOPHOLE(ret, DIBasicType);
  END DIBuilder_createUnspecifiedParameter;

PROCEDURE DIBuilder_getOrCreateArray
  (self: DIBuilder; READONLY Elements: ArrayMDPtr; ): DINodeArray =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_getOrCreateArray(selfAdr, ADR(Elements));
    RETURN LOOPHOLE(ret, DINodeArray);
  END DIBuilder_getOrCreateArray;

PROCEDURE DIBuilder_getOrCreateMacroArray
  (self: DIBuilder; READONLY Elements: ArrayMDPtr; ): DIMacroNodeArray =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_getOrCreateMacroArray(
             selfAdr, ADR(Elements));
    RETURN LOOPHOLE(ret, DIMacroNodeArray);
  END DIBuilder_getOrCreateMacroArray;

PROCEDURE DIBuilder_getOrCreateTypeArray
  (self: DIBuilder; READONLY Elements: ArrayMDPtr; ): DITypeRefArray =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_getOrCreateTypeArray(
             selfAdr, ADR(Elements));
    RETURN LOOPHOLE(ret, DITypeRefArray);
  END DIBuilder_getOrCreateTypeArray;

PROCEDURE DIBuilder_getOrCreateSubrange
  (self: DIBuilder; Lo, Count: int64_t; ): DISubrange =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_getOrCreateSubrange(selfAdr, Lo, Count);
    RETURN LOOPHOLE(ret, DISubrange);
  END DIBuilder_getOrCreateSubrange;

PROCEDURE DIBuilder_createGlobalVariableExpression
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;
            Expr             : DIExpression;
            Decl             : MDNode;
            AlignInBits      : uint32_t;     ):
  DIGlobalVariableExpression =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg9tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg9tmp := LOOPHOLE(Expr, ADDRESS);
    arg10tmp := LOOPHOLE(Decl, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createGlobalVariableExpression(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, arg9tmp, arg10tmp, AlignInBits);
    RETURN LOOPHOLE(ret, DIGlobalVariableExpression);
  END DIBuilder_createGlobalVariableExpression;

PROCEDURE DIBuilder_createGlobalVariableExpression1
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;
            Expr             : DIExpression;
            Decl             : MDNode;       ):
  DIGlobalVariableExpression =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg9tmp : ADDRESS;
    arg10tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg9tmp := LOOPHOLE(Expr, ADDRESS);
    arg10tmp := LOOPHOLE(Decl, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createGlobalVariableExpression1(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, arg9tmp, arg10tmp);
    RETURN LOOPHOLE(ret, DIGlobalVariableExpression);
  END DIBuilder_createGlobalVariableExpression1;

PROCEDURE DIBuilder_createGlobalVariableExpression2
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;
            Expr             : DIExpression; ):
  DIGlobalVariableExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg9tmp := LOOPHOLE(Expr, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createGlobalVariableExpression2(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, arg9tmp);
    RETURN LOOPHOLE(ret, DIGlobalVariableExpression);
  END DIBuilder_createGlobalVariableExpression2;

PROCEDURE DIBuilder_createGlobalVariableExpression3
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;   ): DIGlobalVariableExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createGlobalVariableExpression3(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit);
    RETURN LOOPHOLE(ret, DIGlobalVariableExpression);
  END DIBuilder_createGlobalVariableExpression3;

PROCEDURE DIBuilder_createTempGlobalVariableFwdDecl
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;
            Decl             : MDNode;
            AlignInBits      : uint32_t;  ): DIGlobalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg9tmp := LOOPHOLE(Decl, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempGlobalVariableFwdDecl(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, arg9tmp, AlignInBits);
    RETURN LOOPHOLE(ret, DIGlobalVariable);
  END DIBuilder_createTempGlobalVariableFwdDecl;

PROCEDURE DIBuilder_createTempGlobalVariableFwdDecl1
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;
            Decl             : MDNode;    ): DIGlobalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
    arg9tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg9tmp := LOOPHOLE(Decl, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempGlobalVariableFwdDecl1(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, arg9tmp);
    RETURN LOOPHOLE(ret, DIGlobalVariable);
  END DIBuilder_createTempGlobalVariableFwdDecl1;

PROCEDURE DIBuilder_createTempGlobalVariableFwdDecl2
  (         self             : DIBuilder;
            Context          : DIScope;
   READONLY Name, LinkageName: StringRef;
            File             : DIFile;
            LineNo           : uint;
            Ty               : DIType;
            isLocalToUnit    : BOOLEAN;   ): DIGlobalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempGlobalVariableFwdDecl2(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit);
    RETURN LOOPHOLE(ret, DIGlobalVariable);
  END DIBuilder_createTempGlobalVariableFwdDecl2;

PROCEDURE DIBuilder_createAutoVariable (         self  : DIBuilder;
                                                 Scope : DIScope;
                                        READONLY Name  : StringRef;
                                                 File  : DIFile;
                                                 LineNo: uint;
                                                 Ty    : DIType;
                                        AlwaysPreserve: BOOLEAN;
                                        Flags         : INTEGER;
                                        AlignInBits   : uint32_t; ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createAutoVariable(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp,
             AlwaysPreserve, Flags, AlignInBits);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createAutoVariable;

PROCEDURE DIBuilder_createAutoVariable1 (         self  : DIBuilder;
                                                  Scope : DIScope;
                                         READONLY Name  : StringRef;
                                                  File  : DIFile;
                                                  LineNo: uint;
                                                  Ty    : DIType;
                                         AlwaysPreserve: BOOLEAN;
                                         Flags         : INTEGER; ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createAutoVariable1(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp,
             AlwaysPreserve, Flags);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createAutoVariable1;

PROCEDURE DIBuilder_createAutoVariable2 (         self  : DIBuilder;
                                                  Scope : DIScope;
                                         READONLY Name  : StringRef;
                                                  File  : DIFile;
                                                  LineNo: uint;
                                                  Ty    : DIType;
                                         AlwaysPreserve: BOOLEAN; ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createAutoVariable2(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp,
             AlwaysPreserve);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createAutoVariable2;

PROCEDURE DIBuilder_createAutoVariable3 (         self  : DIBuilder;
                                                  Scope : DIScope;
                                         READONLY Name  : StringRef;
                                                  File  : DIFile;
                                                  LineNo: uint;
                                                  Ty    : DIType;    ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    arg6tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createAutoVariable3(
             selfAdr, arg2tmp, ADR(Name), arg4tmp, LineNo, arg6tmp);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createAutoVariable3;

PROCEDURE DIBuilder_createParameterVariable (         self  : DIBuilder;
                                                      Scope : DIScope;
                                             READONLY Name  : StringRef;
                                                      ArgNo : uint;
                                                      File  : DIFile;
                                                      LineNo: uint;
                                                      Ty    : DIType;
                                             AlwaysPreserve: BOOLEAN;
                                             Flags         : INTEGER; ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createParameterVariable(
             selfAdr, arg2tmp, ADR(Name), ArgNo, arg5tmp, LineNo, arg7tmp,
             AlwaysPreserve, Flags);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createParameterVariable;

PROCEDURE DIBuilder_createParameterVariable1 (         self  : DIBuilder;
                                                       Scope : DIScope;
                                              READONLY Name  : StringRef;
                                                       ArgNo : uint;
                                                       File  : DIFile;
                                                       LineNo: uint;
                                                       Ty    : DIType;
                                              AlwaysPreserve: BOOLEAN; ):
  DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createParameterVariable1(
             selfAdr, arg2tmp, ADR(Name), ArgNo, arg5tmp, LineNo, arg7tmp,
             AlwaysPreserve);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createParameterVariable1;

PROCEDURE DIBuilder_createParameterVariable2
  (         self  : DIBuilder;
            Scope : DIScope;
   READONLY Name  : StringRef;
            ArgNo : uint;
            File  : DIFile;
            LineNo: uint;
            Ty    : DIType;    ): DILocalVariable =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createParameterVariable2(
             selfAdr, arg2tmp, ADR(Name), ArgNo, arg5tmp, LineNo, arg7tmp);
    RETURN LOOPHOLE(ret, DILocalVariable);
  END DIBuilder_createParameterVariable2;

PROCEDURE DIBuilder_createExpression
  (self: DIBuilder; READONLY Addr: ArrayUInt64; ): DIExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createExpression(selfAdr, ADR(Addr));
    RETURN LOOPHOLE(ret, DIExpression);
  END DIBuilder_createExpression;

PROCEDURE DIBuilder_createExpression1 (self: DIBuilder; ): DIExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createExpression1(selfAdr);
    RETURN LOOPHOLE(ret, DIExpression);
  END DIBuilder_createExpression1;

PROCEDURE DIBuilder_createExpression2
  (self: DIBuilder; READONLY Addr: ArrayInt64; ): DIExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createExpression2(selfAdr, ADR(Addr));
    RETURN LOOPHOLE(ret, DIExpression);
  END DIBuilder_createExpression2;

PROCEDURE DIBuilder_createFragmentExpression
  (self: DIBuilder; OffsetInBits, SizeInBits: uint; ): DIExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := M3DIBuilderRaw.DIBuilder_createFragmentExpression(
             selfAdr, OffsetInBits, SizeInBits);
    RETURN LOOPHOLE(ret, DIExpression);
  END DIBuilder_createFragmentExpression;

PROCEDURE DIBuilder_createConstantValueExpression
  (self: DIBuilder; Val: uint64_t; ): DIExpression =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      M3DIBuilderRaw.DIBuilder_createConstantValueExpression(selfAdr, Val);
    RETURN LOOPHOLE(ret, DIExpression);
  END DIBuilder_createConstantValueExpression;

PROCEDURE DIBuilder_createFunction
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray;
            Decl                       : DISubprogram;
            ThrownTypes                : DITypeArray;              ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg14tmp: ADDRESS;
    arg15tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    arg14tmp := LOOPHOLE(Decl, ADDRESS);
    arg15tmp := LOOPHOLE(ThrownTypes, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createFunction(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp, arg14tmp, arg15tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction;

PROCEDURE DIBuilder_createFunction1
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray;
            Decl                       : DISubprogram;             ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg14tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    arg14tmp := LOOPHOLE(Decl, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createFunction1(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp, arg14tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction1;

PROCEDURE DIBuilder_createFunction2
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray; ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createFunction2(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction2;

PROCEDURE DIBuilder_createFunction3
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;          ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createFunction3(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction3;

PROCEDURE DIBuilder_createFunction4
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;          ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createFunction4(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, isDefinition, ScopeLine, Flags);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction4;

PROCEDURE DIBuilder_createFunction5
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;             ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createFunction5(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createFunction5;

PROCEDURE DIBuilder_createTempFunctionFwdDecl
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray;
            Decl                       : DISubprogram;
            ThrownTypes                : DITypeArray;              ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg14tmp: ADDRESS;
    arg15tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    arg14tmp := LOOPHOLE(Decl, ADDRESS);
    arg15tmp := LOOPHOLE(ThrownTypes, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp, arg14tmp, arg15tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl;

PROCEDURE DIBuilder_createTempFunctionFwdDecl1
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray;
            Decl                       : DISubprogram;             ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg14tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    arg14tmp := LOOPHOLE(Decl, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl1(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp, arg14tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl1;

PROCEDURE DIBuilder_createTempFunctionFwdDecl2
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;
            TParams                    : DITemplateParameterArray; ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(TParams, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl2(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized, arg13tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl2;

PROCEDURE DIBuilder_createTempFunctionFwdDecl3
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;
            isOptimized                : BOOLEAN;          ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl3(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine,
             Flags, isOptimized);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl3;

PROCEDURE DIBuilder_createTempFunctionFwdDecl4
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;
            Flags                      : INTEGER;          ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl4(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, isDefinition, ScopeLine, Flags);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl4;

PROCEDURE DIBuilder_createTempFunctionFwdDecl5
  (         self                       : DIBuilder;
            Scope                      : DIScope;
   READONLY Name, LinkageName          : StringRef;
            File                       : DIFile;
            LineNo                     : uint;
            Ty                         : DISubroutineType;
            isLocalToUnit, isDefinition: BOOLEAN;
            ScopeLine                  : uint;             ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createTempFunctionFwdDecl5(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, ScopeLine);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createTempFunctionFwdDecl5;

PROCEDURE DIBuilder_createMethod (         self             : DIBuilder;
                                           Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty: DISubroutineType;
                                  isLocalToUnit, isDefinition: BOOLEAN;
                                  Virtuality, VTableIndex    : uint;
                                  ThisAdjustment             : INTEGER;
                                  VTableHolder               : DIType;
                                  Flags                      : INTEGER;
                                  isOptimized                : BOOLEAN;
                                  TParams    : DITemplateParameterArray;
                                  ThrownTypes: DITypeArray;              ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg16tmp: ADDRESS;
    arg17tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(VTableHolder, ADDRESS);
    arg16tmp := LOOPHOLE(TParams, ADDRESS);
    arg17tmp := LOOPHOLE(ThrownTypes, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createMethod(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, isDefinition, Virtuality, VTableIndex,
        ThisAdjustment, arg13tmp, Flags, isOptimized, arg16tmp, arg17tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod;

PROCEDURE DIBuilder_createMethod1 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;
                                   ThisAdjustment             : INTEGER;
                                   VTableHolder               : DIType;
                                   Flags                      : INTEGER;
                                   isOptimized                : BOOLEAN;
                                   TParams: DITemplateParameterArray; ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
    arg16tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(VTableHolder, ADDRESS);
    arg16tmp := LOOPHOLE(TParams, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createMethod1(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, isDefinition, Virtuality, VTableIndex,
        ThisAdjustment, arg13tmp, Flags, isOptimized, arg16tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod1;

PROCEDURE DIBuilder_createMethod2 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;
                                   ThisAdjustment             : INTEGER;
                                   VTableHolder               : DIType;
                                   Flags                      : INTEGER;
                                   isOptimized                : BOOLEAN; ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod2(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, Virtuality,
             VTableIndex, ThisAdjustment, arg13tmp, Flags, isOptimized);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod2;

PROCEDURE DIBuilder_createMethod3 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;
                                   ThisAdjustment             : INTEGER;
                                   VTableHolder               : DIType;
                                   Flags                      : INTEGER; ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod3(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, Virtuality,
             VTableIndex, ThisAdjustment, arg13tmp, Flags);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod3;

PROCEDURE DIBuilder_createMethod4 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;
                                   ThisAdjustment             : INTEGER;
                                   VTableHolder               : DIType;  ):
  DISubprogram =
  VAR
    ret     : ADDRESS;
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp : ADDRESS;
    arg5tmp : ADDRESS;
    arg7tmp : ADDRESS;
    arg13tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    arg13tmp := LOOPHOLE(VTableHolder, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod4(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, Virtuality,
             VTableIndex, ThisAdjustment, arg13tmp);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod4;

PROCEDURE DIBuilder_createMethod5 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;
                                   ThisAdjustment             : INTEGER; ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod5(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, Virtuality,
             VTableIndex, ThisAdjustment);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod5;

PROCEDURE DIBuilder_createMethod6 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality, VTableIndex    : uint;    ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret :=
      M3DIBuilderRaw.DIBuilder_createMethod6(
        selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp, LineNo,
        arg7tmp, isLocalToUnit, isDefinition, Virtuality, VTableIndex);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod6;

PROCEDURE DIBuilder_createMethod7 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN;
                                   Virtuality                 : uint;    ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod7(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition, Virtuality);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod7;

PROCEDURE DIBuilder_createMethod8 (         self             : DIBuilder;
                                            Scope            : DIScope;
                                   READONLY Name, LinkageName: StringRef;
                                            File             : DIFile;
                                            LineNo           : uint;
                                   Ty: DISubroutineType;
                                   isLocalToUnit, isDefinition: BOOLEAN; ):
  DISubprogram =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg5tmp := LOOPHOLE(File, ADDRESS);
    arg7tmp := LOOPHOLE(Ty, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createMethod8(
             selfAdr, arg2tmp, ADR(Name), ADR(LinkageName), arg5tmp,
             LineNo, arg7tmp, isLocalToUnit, isDefinition);
    RETURN LOOPHOLE(ret, DISubprogram);
  END DIBuilder_createMethod8;

PROCEDURE DIBuilder_createNameSpace (         self         : DIBuilder;
                                              Scope        : DIScope;
                                     READONLY Name         : StringRef;
                                              ExportSymbols: BOOLEAN;   ):
  DINamespace =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createNameSpace(
             selfAdr, arg2tmp, ADR(Name), ExportSymbols);
    RETURN LOOPHOLE(ret, DINamespace);
  END DIBuilder_createNameSpace;

PROCEDURE DIBuilder_createModule
  (         self                                            : DIBuilder;
            Scope                                           : DIScope;
   READONLY Name, ConfigurationMacros, IncludePath, ISysRoot: StringRef; ):
  DIModule =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createModule(
             selfAdr, arg2tmp, ADR(Name), ADR(ConfigurationMacros),
             ADR(IncludePath), ADR(ISysRoot));
    RETURN LOOPHOLE(ret, DIModule);
  END DIBuilder_createModule;

PROCEDURE DIBuilder_createLexicalBlockFile
  (self: DIBuilder; Scope: DIScope; File: DIFile; Discriminator: uint; ):
  DILexicalBlockFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createLexicalBlockFile(
             selfAdr, arg2tmp, arg3tmp, Discriminator);
    RETURN LOOPHOLE(ret, DILexicalBlockFile);
  END DIBuilder_createLexicalBlockFile;

PROCEDURE DIBuilder_createLexicalBlockFile1
  (self: DIBuilder; Scope: DIScope; File: DIFile; ): DILexicalBlockFile =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createLexicalBlockFile1(
             selfAdr, arg2tmp, arg3tmp);
    RETURN LOOPHOLE(ret, DILexicalBlockFile);
  END DIBuilder_createLexicalBlockFile1;

PROCEDURE DIBuilder_createLexicalBlock
  (self: DIBuilder; Scope: DIScope; File: DIFile; Line, Col: uint; ):
  DILexicalBlock =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Scope, ADDRESS);
    arg3tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createLexicalBlock(
             selfAdr, arg2tmp, arg3tmp, Line, Col);
    RETURN LOOPHOLE(ret, DILexicalBlock);
  END DIBuilder_createLexicalBlock;

PROCEDURE DIBuilder_createImportedModule (self   : DIBuilder;
                                          Context: DIScope;
                                          NS     : DINamespace;
                                          File   : DIFile;
                                          Line   : uint;        ):
  DIImportedEntity =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg3tmp := LOOPHOLE(NS, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createImportedModule(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, Line);
    RETURN LOOPHOLE(ret, DIImportedEntity);
  END DIBuilder_createImportedModule;

PROCEDURE DIBuilder_createImportedModule1 (self   : DIBuilder;
                                           Context: DIScope;
                                           NS     : DIImportedEntity;
                                           File   : DIFile;
                                           Line   : uint;             ):
  DIImportedEntity =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg3tmp := LOOPHOLE(NS, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createImportedModule1(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, Line);
    RETURN LOOPHOLE(ret, DIImportedEntity);
  END DIBuilder_createImportedModule1;

PROCEDURE DIBuilder_createImportedModule2 (self   : DIBuilder;
                                           Context: DIScope;
                                           M      : DIModule;
                                           File   : DIFile;
                                           Line   : uint;      ):
  DIImportedEntity =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg3tmp := LOOPHOLE(M, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createImportedModule2(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, Line);
    RETURN LOOPHOLE(ret, DIImportedEntity);
  END DIBuilder_createImportedModule2;

PROCEDURE DIBuilder_createImportedDeclaration (self   : DIBuilder;
                                               Context: DIScope;
                                               Decl   : DINode;
                                               File   : DIFile;
                                               Line   : uint;
                                               READONLY Name: StringRef; ):
  DIImportedEntity =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg3tmp := LOOPHOLE(Decl, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createImportedDeclaration(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, Line, ADR(Name));
    RETURN LOOPHOLE(ret, DIImportedEntity);
  END DIBuilder_createImportedDeclaration;

PROCEDURE DIBuilder_createImportedDeclaration1 (self   : DIBuilder;
                                                Context: DIScope;
                                                Decl   : DINode;
                                                File   : DIFile;
                                                Line   : uint;      ):
  DIImportedEntity =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Context, ADDRESS);
    arg3tmp := LOOPHOLE(Decl, ADDRESS);
    arg4tmp := LOOPHOLE(File, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_createImportedDeclaration1(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, Line);
    RETURN LOOPHOLE(ret, DIImportedEntity);
  END DIBuilder_createImportedDeclaration1;

PROCEDURE DIBuilder_insertDeclareAtEnd (self       : DIBuilder;
                                        Storage    : ValueRef;
                                        VarInfo    : DILocalVariable;
                                        Expr       : DIExpression;
                                        DL         : DILocation;
                                        InsertAtEnd: BasicBlockRef;   ):
  InstructionRef =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Storage, ADDRESS);
    arg3tmp := LOOPHOLE(VarInfo, ADDRESS);
    arg4tmp := LOOPHOLE(Expr, ADDRESS);
    arg5tmp := LOOPHOLE(DL, ADDRESS);
    arg6tmp := LOOPHOLE(InsertAtEnd, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_insertDeclareAtEnd(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp, arg6tmp);
    RETURN LOOPHOLE(ret, InstructionRef);
  END DIBuilder_insertDeclareAtEnd;

PROCEDURE DIBuilder_insertDeclareBefore (self        : DIBuilder;
                                         Storage     : ValueRef;
                                         VarInfo     : DILocalVariable;
                                         Expr        : DIExpression;
                                         DL          : DILocation;
                                         InsertBefore: InstructionRef;  ):
  InstructionRef =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg6tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Storage, ADDRESS);
    arg3tmp := LOOPHOLE(VarInfo, ADDRESS);
    arg4tmp := LOOPHOLE(Expr, ADDRESS);
    arg5tmp := LOOPHOLE(DL, ADDRESS);
    arg6tmp := LOOPHOLE(InsertBefore, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_insertDeclareBefore(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp, arg6tmp);
    RETURN LOOPHOLE(ret, InstructionRef);
  END DIBuilder_insertDeclareBefore;

PROCEDURE DIBuilder_insertValueAtEnd (self       : DIBuilder;
                                      Val        : ValueRef;
                                      Offset     : uint64_t;
                                      VarInfo    : DILocalVariable;
                                      Expr       : DIExpression;
                                      DL         : DILocation;
                                      InsertAtEnd: BasicBlockRef;   ):
  InstructionRef =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg6tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Val, ADDRESS);
    arg4tmp := LOOPHOLE(VarInfo, ADDRESS);
    arg5tmp := LOOPHOLE(Expr, ADDRESS);
    arg6tmp := LOOPHOLE(DL, ADDRESS);
    arg7tmp := LOOPHOLE(InsertAtEnd, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_insertValueAtEnd(
             selfAdr, arg2tmp, Offset, arg4tmp, arg5tmp, arg6tmp, arg7tmp);
    RETURN LOOPHOLE(ret, InstructionRef);
  END DIBuilder_insertValueAtEnd;

PROCEDURE DIBuilder_insertValueBefore (self        : DIBuilder;
                                       Val         : ValueRef;
                                       Offset      : uint64_t;
                                       VarInfo     : DILocalVariable;
                                       Expr        : DIExpression;
                                       DL          : DILocation;
                                       InsertBefore: InstructionRef;  ):
  InstructionRef =
  VAR
    ret    : ADDRESS;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg4tmp: ADDRESS;
    arg5tmp: ADDRESS;
    arg6tmp: ADDRESS;
    arg7tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(Val, ADDRESS);
    arg4tmp := LOOPHOLE(VarInfo, ADDRESS);
    arg5tmp := LOOPHOLE(Expr, ADDRESS);
    arg6tmp := LOOPHOLE(DL, ADDRESS);
    arg7tmp := LOOPHOLE(InsertBefore, ADDRESS);
    ret := M3DIBuilderRaw.DIBuilder_insertValueBefore(
             selfAdr, arg2tmp, Offset, arg4tmp, arg5tmp, arg6tmp, arg7tmp);
    RETURN LOOPHOLE(ret, InstructionRef);
  END DIBuilder_insertValueBefore;

PROCEDURE DIBuilder_replaceVTableHolder
  (self: DIBuilder; T, VTableHolder: DICompositeType; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
    arg3tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(T, ADDRESS);
    arg3tmp := LOOPHOLE(VTableHolder, ADDRESS);
    M3DIBuilderRaw.DIBuilder_replaceVTableHolder(selfAdr, arg2tmp, arg3tmp);
  END DIBuilder_replaceVTableHolder;

PROCEDURE DIBuilder_replaceArrays
  (self: DIBuilder; T: DICompositeType; Elements, TParams: DINodeArray; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(T, ADDRESS);
    M3DIBuilderRaw.DIBuilder_replaceArrays(
      selfAdr, arg2tmp, Elements, TParams);
  END DIBuilder_replaceArrays;

PROCEDURE DIBuilder_replaceArrays1
  (self: DIBuilder; T: DICompositeType; Elements: DINodeArray; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: ADDRESS;
  BEGIN
    arg2tmp := LOOPHOLE(T, ADDRESS);
    M3DIBuilderRaw.DIBuilder_replaceArrays1(selfAdr, arg2tmp, Elements);
  END DIBuilder_replaceArrays1;

PROCEDURE Delete_DIBuilder (self: DIBuilder; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    M3DIBuilderRaw.Delete_DIBuilder(selfAdr);
  END Delete_DIBuilder;

PROCEDURE Cleanup_DIBuilder
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: DIBuilder := ref;
  BEGIN
    Delete_DIBuilder(obj);
  END Cleanup_DIBuilder;

PROCEDURE Destroy_DIBuilder (self: DIBuilder) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_DIBuilder);
  END Destroy_DIBuilder;

REVEAL
  DIBuilder =
    DIBuilderPublic BRANDED OBJECT
      cxxObj: ADDRESS;
    OVERRIDES
      init_0                      := New_DIBuilder0;
      init_1                      := New_DIBuilder1;
      finalize                    := DIBuilder_finalize;
      finalizeSubprogram          := DIBuilder_finalizeSubprogram;
      createCompileUnit           := DIBuilder_createCompileUnit;
      createCompileUnit1          := DIBuilder_createCompileUnit1;
      createCompileUnit2          := DIBuilder_createCompileUnit2;
      createCompileUnit3          := DIBuilder_createCompileUnit3;
      createCompileUnit4          := DIBuilder_createCompileUnit4;
      createCompileUnit5          := DIBuilder_createCompileUnit5;
      createFile                  := DIBuilder_createFile;
      createFile1                 := DIBuilder_createFile1;
      createFile2                 := DIBuilder_createFile2;
      createMacro                 := DIBuilder_createMacro;
      createMacro1                := DIBuilder_createMacro1;
      createTempMacroFile         := DIBuilder_createTempMacroFile;
      createEnumerator            := DIBuilder_createEnumerator;
      createUnspecifiedType       := DIBuilder_createUnspecifiedType;
      createNullPtrType           := DIBuilder_createNullPtrType;
      createBasicType             := DIBuilder_createBasicType;
      createQualifiedType         := DIBuilder_createQualifiedType;
      createPointerType           := DIBuilder_createPointerType;
      createPointerType1          := DIBuilder_createPointerType1;
      createPointerType2          := DIBuilder_createPointerType2;
      createPointerType3          := DIBuilder_createPointerType3;
      createMemberPointerType     := DIBuilder_createMemberPointerType;
      createMemberPointerType1    := DIBuilder_createMemberPointerType1;
      createMemberPointerType2    := DIBuilder_createMemberPointerType2;
      createReferenceType         := DIBuilder_createReferenceType;
      createReferenceType1        := DIBuilder_createReferenceType1;
      createReferenceType2        := DIBuilder_createReferenceType2;
      createReferenceType3        := DIBuilder_createReferenceType3;
      createTypedef               := DIBuilder_createTypedef;
      createFriend                := DIBuilder_createFriend;
      createInheritance           := DIBuilder_createInheritance;
      createMemberType            := DIBuilder_createMemberType;
      createBitFieldMemberType    := DIBuilder_createBitFieldMemberType;
      createStaticMemberType      := DIBuilder_createStaticMemberType;
      createStaticMemberType1     := DIBuilder_createStaticMemberType1;
      createObjCIVar              := DIBuilder_createObjCIVar;
      createObjCProperty          := DIBuilder_createObjCProperty;
      createClassType             := DIBuilder_createClassType;
      createClassType1            := DIBuilder_createClassType1;
      createClassType2            := DIBuilder_createClassType2;
      createClassType3            := DIBuilder_createClassType3;
      createStructType            := DIBuilder_createStructType;
      createStructType1           := DIBuilder_createStructType1;
      createStructType2           := DIBuilder_createStructType2;
      createStructType3           := DIBuilder_createStructType3;
      createUnionType             := DIBuilder_createUnionType;
      createUnionType1            := DIBuilder_createUnionType1;
      createUnionType2            := DIBuilder_createUnionType2;
      createTemplateTypeParameter := DIBuilder_createTemplateTypeParameter;
      createTemplateValueParameter := DIBuilder_createTemplateValueParameter;
      createTemplateTemplateParameter := DIBuilder_createTemplateTemplateParameter;
      createTemplateParameterPack := DIBuilder_createTemplateParameterPack;
      createArrayType             := DIBuilder_createArrayType;
      createVectorType            := DIBuilder_createVectorType;
      createEnumerationType       := DIBuilder_createEnumerationType;
      createEnumerationType1      := DIBuilder_createEnumerationType1;
      createSubroutineType        := DIBuilder_createSubroutineType;
      createSubroutineType1       := DIBuilder_createSubroutineType1;
      createSubroutineType2       := DIBuilder_createSubroutineType2;
      createArtificialType        := DIBuilder_createArtificialType;
      createObjectPointerType     := DIBuilder_createObjectPointerType;
      createForwardDecl           := DIBuilder_createForwardDecl;
      createForwardDecl1          := DIBuilder_createForwardDecl1;
      createForwardDecl2          := DIBuilder_createForwardDecl2;
      createForwardDecl3          := DIBuilder_createForwardDecl3;
      createForwardDecl4          := DIBuilder_createForwardDecl4;
      createReplaceableCompositeType := DIBuilder_createReplaceableCompositeType;
      createReplaceableCompositeType1 := DIBuilder_createReplaceableCompositeType1;
      createReplaceableCompositeType2 := DIBuilder_createReplaceableCompositeType2;
      createReplaceableCompositeType3 := DIBuilder_createReplaceableCompositeType3;
      createReplaceableCompositeType4 := DIBuilder_createReplaceableCompositeType4;
      createReplaceableCompositeType5 := DIBuilder_createReplaceableCompositeType5;
      retainType                 := DIBuilder_retainType;
      createUnspecifiedParameter := DIBuilder_createUnspecifiedParameter;
      getOrCreateArray           := DIBuilder_getOrCreateArray;
      getOrCreateMacroArray      := DIBuilder_getOrCreateMacroArray;
      getOrCreateTypeArray       := DIBuilder_getOrCreateTypeArray;
      getOrCreateSubrange        := DIBuilder_getOrCreateSubrange;
      createGlobalVariableExpression := DIBuilder_createGlobalVariableExpression;
      createGlobalVariableExpression1 := DIBuilder_createGlobalVariableExpression1;
      createGlobalVariableExpression2 := DIBuilder_createGlobalVariableExpression2;
      createGlobalVariableExpression3 := DIBuilder_createGlobalVariableExpression3;
      createTempGlobalVariableFwdDecl := DIBuilder_createTempGlobalVariableFwdDecl;
      createTempGlobalVariableFwdDecl1 := DIBuilder_createTempGlobalVariableFwdDecl1;
      createTempGlobalVariableFwdDecl2 := DIBuilder_createTempGlobalVariableFwdDecl2;
      createAutoVariable       := DIBuilder_createAutoVariable;
      createAutoVariable1      := DIBuilder_createAutoVariable1;
      createAutoVariable2      := DIBuilder_createAutoVariable2;
      createAutoVariable3      := DIBuilder_createAutoVariable3;
      createParameterVariable  := DIBuilder_createParameterVariable;
      createParameterVariable1 := DIBuilder_createParameterVariable1;
      createParameterVariable2 := DIBuilder_createParameterVariable2;
      createExpression         := DIBuilder_createExpression;
      createExpression1        := DIBuilder_createExpression1;
      createExpression2        := DIBuilder_createExpression2;
      createFragmentExpression := DIBuilder_createFragmentExpression;
      createConstantValueExpression := DIBuilder_createConstantValueExpression;
      createFunction             := DIBuilder_createFunction;
      createFunction1            := DIBuilder_createFunction1;
      createFunction2            := DIBuilder_createFunction2;
      createFunction3            := DIBuilder_createFunction3;
      createFunction4            := DIBuilder_createFunction4;
      createFunction5            := DIBuilder_createFunction5;
      createTempFunctionFwdDecl  := DIBuilder_createTempFunctionFwdDecl;
      createTempFunctionFwdDecl1 := DIBuilder_createTempFunctionFwdDecl1;
      createTempFunctionFwdDecl2 := DIBuilder_createTempFunctionFwdDecl2;
      createTempFunctionFwdDecl3 := DIBuilder_createTempFunctionFwdDecl3;
      createTempFunctionFwdDecl4 := DIBuilder_createTempFunctionFwdDecl4;
      createTempFunctionFwdDecl5 := DIBuilder_createTempFunctionFwdDecl5;
      createMethod               := DIBuilder_createMethod;
      createMethod1              := DIBuilder_createMethod1;
      createMethod2              := DIBuilder_createMethod2;
      createMethod3              := DIBuilder_createMethod3;
      createMethod4              := DIBuilder_createMethod4;
      createMethod5              := DIBuilder_createMethod5;
      createMethod6              := DIBuilder_createMethod6;
      createMethod7              := DIBuilder_createMethod7;
      createMethod8              := DIBuilder_createMethod8;
      createNameSpace            := DIBuilder_createNameSpace;
      createModule               := DIBuilder_createModule;
      createLexicalBlockFile     := DIBuilder_createLexicalBlockFile;
      createLexicalBlockFile1    := DIBuilder_createLexicalBlockFile1;
      createLexicalBlock         := DIBuilder_createLexicalBlock;
      createImportedModule       := DIBuilder_createImportedModule;
      createImportedModule1      := DIBuilder_createImportedModule1;
      createImportedModule2      := DIBuilder_createImportedModule2;
      createImportedDeclaration  := DIBuilder_createImportedDeclaration;
      createImportedDeclaration1 := DIBuilder_createImportedDeclaration1;
      insertDeclareAtEnd         := DIBuilder_insertDeclareAtEnd;
      insertDeclareBefore        := DIBuilder_insertDeclareBefore;
      insertValueAtEnd           := DIBuilder_insertValueAtEnd;
      insertValueBefore          := DIBuilder_insertValueBefore;
      replaceVTableHolder        := DIBuilder_replaceVTableHolder;
      replaceArrays              := DIBuilder_replaceArrays;
      replaceArrays1             := DIBuilder_replaceArrays1;
      destroyCxx                 := Destroy_DIBuilder;
    END;


BEGIN
END M3DIBuilder.
