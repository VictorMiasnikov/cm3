/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include "llvm/IR/DIBuilder.h"

using namespace llvm;
typedef struct StringRefStruct {char *Data; size_t Length; } 
  const * LLVMStringRef;
typedef struct ArrayInt64Struct {int64_t *Data; size_t Length; } 
  const * LLVMArrayInt64;
typedef struct ArrayUInt64Struct {uint64_t *Data; size_t Length; } 
  const * LLVMArrayUInt64;
/* dont need this
typedef struct ArrayMetadataStruct {Metadata *Data; size_t Length; } 
  const * LLVMArrayMD;
*/


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT llvm::DIBuilder * New_DIBuilder0(llvm::Module & M, bool AllowUnresolved) {
  llvm::Module *arg1 = 0 ;
  bool arg2 ;
  llvm::DIBuilder *result = 0 ;
  llvm::DIBuilder * cresult ;
  
  arg1 = *(llvm::Module **)&M;
  
  arg2 = AllowUnresolved ? true : false; 
  result = (llvm::DIBuilder *)new llvm::DIBuilder(*arg1,arg2);
  *(llvm::DIBuilder **)&cresult = result; 
  return cresult;
}


SWIGEXPORT llvm::DIBuilder * New_DIBuilder1(llvm::Module & M) {
  llvm::Module *arg1 = 0 ;
  llvm::DIBuilder *result = 0 ;
  llvm::DIBuilder * cresult ;
  
  arg1 = *(llvm::Module **)&M;
  
  result = (llvm::DIBuilder *)new llvm::DIBuilder(*arg1);
  *(llvm::DIBuilder **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void DIBuilder_finalize(llvm::DIBuilder * self) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  (arg1)->finalize();
}


SWIGEXPORT void DIBuilder_finalizeSubprogram(llvm::DIBuilder * self, DISubprogram * SP) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DISubprogram *arg2 = (DISubprogram *) 0 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DISubprogram **)&SP; 
  (arg1)->finalizeSubprogram(arg2);
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV, LLVMStringRef SplitName, DICompileUnit::DebugEmissionKind Kind, uint64_t DWOId, bool SplitDebugInlining, bool DebugInfoForProfiling) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  StringRef arg8 ;
  DICompileUnit::DebugEmissionKind arg9 ;
  uint64_t arg10 ;
  bool arg11 ;
  bool arg12 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  arg8 = StringRef(SplitName->Data,SplitName->Length);
  arg9 = Kind;
  arg10 = (uint64_t)DWOId; 
  arg11 = SplitDebugInlining ? true : false; 
  arg12 = DebugInfoForProfiling ? true : false; 
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit1(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV, LLVMStringRef SplitName, DICompileUnit::DebugEmissionKind Kind, uint64_t DWOId, bool SplitDebugInlining) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  StringRef arg8 ;
  DICompileUnit::DebugEmissionKind arg9 ;
  uint64_t arg10 ;
  bool arg11 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  arg8 = StringRef(SplitName->Data,SplitName->Length);
  arg9 = Kind;
  arg10 = (uint64_t)DWOId; 
  arg11 = SplitDebugInlining ? true : false; 
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit2(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV, LLVMStringRef SplitName, DICompileUnit::DebugEmissionKind Kind, uint64_t DWOId) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  StringRef arg8 ;
  DICompileUnit::DebugEmissionKind arg9 ;
  uint64_t arg10 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  arg8 = StringRef(SplitName->Data,SplitName->Length);
  arg9 = Kind;
  arg10 = (uint64_t)DWOId; 
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit3(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV, LLVMStringRef SplitName, DICompileUnit::DebugEmissionKind Kind) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  StringRef arg8 ;
  DICompileUnit::DebugEmissionKind arg9 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  arg8 = StringRef(SplitName->Data,SplitName->Length);
  arg9 = Kind;
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit4(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV, LLVMStringRef SplitName) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  StringRef arg8 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  arg8 = StringRef(SplitName->Data,SplitName->Length);
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompileUnit * DIBuilder_createCompileUnit5(llvm::DIBuilder * self, unsigned int Lang, DIFile * File, LLVMStringRef Producer, bool isOptimized, LLVMStringRef Flags, unsigned int RV) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  StringRef arg4 ;
  bool arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  DICompileUnit *result = 0 ;
  DICompileUnit * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Lang; 
  arg3 = *(DIFile **)&File; 
  arg4 = StringRef(Producer->Data,Producer->Length);
  arg5 = isOptimized ? true : false; 
  arg6 = StringRef(Flags->Data,Flags->Length);
  arg7 = (unsigned int)RV; 
  result = (DICompileUnit *)(arg1)->createCompileUnit(arg2,arg3,arg4,arg5,arg6,arg7);
  *(DICompileUnit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIFile * DIBuilder_createFile(llvm::DIBuilder * self, LLVMStringRef Filename, LLVMStringRef Directory, DIFile::ChecksumKind CSKind, LLVMStringRef Checksum) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  StringRef arg3 ;
  DIFile::ChecksumKind arg4 ;
  StringRef arg5 ;
  DIFile *result = 0 ;
  DIFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Filename->Data,Filename->Length);
  arg3 = StringRef(Directory->Data,Directory->Length);
  arg4 = CSKind;
  arg5 = StringRef(Checksum->Data,Checksum->Length);
  result = (DIFile *)(arg1)->createFile(arg2,arg3,arg4,arg5);
  *(DIFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIFile * DIBuilder_createFile1(llvm::DIBuilder * self, LLVMStringRef Filename, LLVMStringRef Directory, DIFile::ChecksumKind CSKind) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  StringRef arg3 ;
  DIFile::ChecksumKind arg4 ;
  DIFile *result = 0 ;
  DIFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Filename->Data,Filename->Length);
  arg3 = StringRef(Directory->Data,Directory->Length);
  arg4 = CSKind;
  result = (DIFile *)(arg1)->createFile(arg2,arg3,arg4);
  *(DIFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIFile * DIBuilder_createFile2(llvm::DIBuilder * self, LLVMStringRef Filename, LLVMStringRef Directory) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  StringRef arg3 ;
  DIFile *result = 0 ;
  DIFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Filename->Data,Filename->Length);
  arg3 = StringRef(Directory->Data,Directory->Length);
  result = (DIFile *)(arg1)->createFile(arg2,arg3);
  *(DIFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIMacro * DIBuilder_createMacro(llvm::DIBuilder * self, DIMacroFile * Parent, unsigned int Line, unsigned int MacroType, LLVMStringRef Name, LLVMStringRef Value) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIMacroFile *arg2 = (DIMacroFile *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  StringRef arg5 ;
  StringRef arg6 ;
  DIMacro *result = 0 ;
  DIMacro * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIMacroFile **)&Parent; 
  arg3 = (unsigned int)Line; 
  arg4 = (unsigned int)MacroType; 
  arg5 = StringRef(Name->Data,Name->Length);
  arg6 = StringRef(Value->Data,Value->Length);
  result = (DIMacro *)(arg1)->createMacro(arg2,arg3,arg4,arg5,arg6);
  *(DIMacro **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIMacro * DIBuilder_createMacro1(llvm::DIBuilder * self, DIMacroFile * Parent, unsigned int Line, unsigned int MacroType, LLVMStringRef Name) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIMacroFile *arg2 = (DIMacroFile *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  StringRef arg5 ;
  DIMacro *result = 0 ;
  DIMacro * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIMacroFile **)&Parent; 
  arg3 = (unsigned int)Line; 
  arg4 = (unsigned int)MacroType; 
  arg5 = StringRef(Name->Data,Name->Length);
  result = (DIMacro *)(arg1)->createMacro(arg2,arg3,arg4,arg5);
  *(DIMacro **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIMacroFile * DIBuilder_createTempMacroFile(llvm::DIBuilder * self, DIMacroFile * Parent, unsigned int Line, DIFile * File) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIMacroFile *arg2 = (DIMacroFile *) 0 ;
  unsigned int arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  DIMacroFile *result = 0 ;
  DIMacroFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIMacroFile **)&Parent; 
  arg3 = (unsigned int)Line; 
  arg4 = *(DIFile **)&File; 
  result = (DIMacroFile *)(arg1)->createTempMacroFile(arg2,arg3,arg4);
  *(DIMacroFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIEnumerator * DIBuilder_createEnumerator(llvm::DIBuilder * self, LLVMStringRef Name, int64_t Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  int64_t arg3 ;
  DIEnumerator *result = 0 ;
  DIEnumerator * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Name->Data,Name->Length);
  arg3 = (int64_t)Val; 
  result = (DIEnumerator *)(arg1)->createEnumerator(arg2,arg3);
  *(DIEnumerator **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIBasicType * DIBuilder_createUnspecifiedType(llvm::DIBuilder * self, LLVMStringRef Name) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  DIBasicType *result = 0 ;
  DIBasicType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Name->Data,Name->Length);
  result = (DIBasicType *)(arg1)->createUnspecifiedType(arg2);
  *(DIBasicType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIBasicType * DIBuilder_createNullPtrType(llvm::DIBuilder * self) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIBasicType *result = 0 ;
  DIBasicType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  result = (DIBasicType *)(arg1)->createNullPtrType();
  *(DIBasicType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIBasicType * DIBuilder_createBasicType(llvm::DIBuilder * self, LLVMStringRef Name, uint64_t SizeInBits, unsigned int Encoding) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  uint64_t arg3 ;
  unsigned int arg4 ;
  DIBasicType *result = 0 ;
  DIBasicType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Name->Data,Name->Length);
  arg3 = (uint64_t)SizeInBits; 
  arg4 = (unsigned int)Encoding; 
  result = (DIBasicType *)(arg1)->createBasicType(arg2,arg3,arg4);
  *(DIBasicType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createQualifiedType(llvm::DIBuilder * self, unsigned int Tag, DIType * FromTy) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIType *arg3 = (DIType *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = *(DIType **)&FromTy; 
  result = (DIDerivedType *)(arg1)->createQualifiedType(arg2,arg3);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createPointerType(llvm::DIBuilder * self, DIType * PointeeTy, uint64_t SizeInBits, uint32_t AlignInBits, Optional< unsigned int > DWARFAddressSpace, LLVMStringRef Name) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  uint64_t arg3 ;
  uint32_t arg4 ;
  Optional< unsigned int > arg5 ;
  StringRef arg6 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = (uint64_t)SizeInBits; 
  arg4 = (uint32_t)AlignInBits; 
  arg5 = None;
  arg6 = StringRef(Name->Data,Name->Length);
  result = (DIDerivedType *)(arg1)->createPointerType(arg2,arg3,arg4,arg5,arg6);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createPointerType1(llvm::DIBuilder * self, DIType * PointeeTy, uint64_t SizeInBits, uint32_t AlignInBits, Optional< unsigned int > DWARFAddressSpace) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  uint64_t arg3 ;
  uint32_t arg4 ;
  Optional< unsigned int > arg5 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = (uint64_t)SizeInBits; 
  arg4 = (uint32_t)AlignInBits; 
  arg5 = None;
  result = (DIDerivedType *)(arg1)->createPointerType(arg2,arg3,arg4,arg5);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createPointerType2(llvm::DIBuilder * self, DIType * PointeeTy, uint64_t SizeInBits, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  uint64_t arg3 ;
  uint32_t arg4 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = (uint64_t)SizeInBits; 
  arg4 = (uint32_t)AlignInBits; 
  result = (DIDerivedType *)(arg1)->createPointerType(arg2,arg3,arg4);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createPointerType3(llvm::DIBuilder * self, DIType * PointeeTy, uint64_t SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  uint64_t arg3 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = (uint64_t)SizeInBits; 
  result = (DIDerivedType *)(arg1)->createPointerType(arg2,arg3);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createMemberPointerType(llvm::DIBuilder * self, DIType * PointeeTy, DIType * Class, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  DINode::DIFlags arg6 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = *(DIType **)&Class; 
  arg4 = (uint64_t)SizeInBits; 
  arg5 = (uint32_t)AlignInBits; 
  arg6 = Flags;
  result = (DIDerivedType *)(arg1)->createMemberPointerType(arg2,arg3,arg4,arg5,arg6);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createMemberPointerType1(llvm::DIBuilder * self, DIType * PointeeTy, DIType * Class, uint64_t SizeInBits, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = *(DIType **)&Class; 
  arg4 = (uint64_t)SizeInBits; 
  arg5 = (uint32_t)AlignInBits; 
  result = (DIDerivedType *)(arg1)->createMemberPointerType(arg2,arg3,arg4,arg5);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createMemberPointerType2(llvm::DIBuilder * self, DIType * PointeeTy, DIType * Class, uint64_t SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&PointeeTy; 
  arg3 = *(DIType **)&Class; 
  arg4 = (uint64_t)SizeInBits; 
  result = (DIDerivedType *)(arg1)->createMemberPointerType(arg2,arg3,arg4);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createReferenceType(llvm::DIBuilder * self, unsigned int Tag, DIType * RTy, uint64_t SizeInBits, uint32_t AlignInBits, Optional< unsigned int > DWARFAddressSpace) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  Optional< unsigned int > arg6 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = *(DIType **)&RTy; 
  arg4 = (uint64_t)SizeInBits; 
  arg5 = (uint32_t)AlignInBits; 
  arg6 = None;
  result = (DIDerivedType *)(arg1)->createReferenceType(arg2,arg3,arg4,arg5,arg6);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createReferenceType1(llvm::DIBuilder * self, unsigned int Tag, DIType * RTy, uint64_t SizeInBits, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = *(DIType **)&RTy; 
  arg4 = (uint64_t)SizeInBits; 
  arg5 = (uint32_t)AlignInBits; 
  result = (DIDerivedType *)(arg1)->createReferenceType(arg2,arg3,arg4,arg5);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createReferenceType2(llvm::DIBuilder * self, unsigned int Tag, DIType * RTy, uint64_t SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = *(DIType **)&RTy; 
  arg4 = (uint64_t)SizeInBits; 
  result = (DIDerivedType *)(arg1)->createReferenceType(arg2,arg3,arg4);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createReferenceType3(llvm::DIBuilder * self, unsigned int Tag, DIType * RTy) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  DIType *arg3 = (DIType *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = *(DIType **)&RTy; 
  result = (DIDerivedType *)(arg1)->createReferenceType(arg2,arg3);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createTypedef(llvm::DIBuilder * self, DIType * Ty, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIScope * Context) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIScope *arg6 = (DIScope *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&Ty; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIScope **)&Context; 
  result = (DIDerivedType *)(arg1)->createTypedef(arg2,arg3,arg4,arg5,arg6);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createFriend(llvm::DIBuilder * self, DIType * Ty, DIType * FriendTy) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *arg3 = (DIType *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&Ty; 
  arg3 = *(DIType **)&FriendTy; 
  result = (DIDerivedType *)(arg1)->createFriend(arg2,arg3);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createInheritance(llvm::DIBuilder * self, DIType * Ty, DIType * BaseTy, uint64_t BaseOffset, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *arg3 = (DIType *) 0 ;
  uint64_t arg4 ;
  DINode::DIFlags arg5 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&Ty; 
  arg3 = *(DIType **)&BaseTy; 
  arg4 = (uint64_t)BaseOffset; 
  arg5 = Flags;
  result = (DIDerivedType *)(arg1)->createInheritance(arg2,arg3,arg4,arg5);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createMemberType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = (uint64_t)OffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&Ty; 
  result = (DIDerivedType *)(arg1)->createMemberType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createBitFieldMemberType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, uint64_t SizeInBits, uint64_t OffsetInBits, uint64_t StorageOffsetInBits, DINode::DIFlags Flags, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint64_t)OffsetInBits; 
  arg8 = (uint64_t)StorageOffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&Ty; 
  result = (DIDerivedType *)(arg1)->createBitFieldMemberType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createStaticMemberType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty, DINode::DIFlags Flags, llvm::Constant * Val, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  DINode::DIFlags arg7 ;
  llvm::Constant *arg8 = (llvm::Constant *) 0 ;
  uint32_t arg9 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  arg7 = Flags;
  arg8 = *(llvm::Constant **)&Val; 
  arg9 = (uint32_t)AlignInBits; 
  result = (DIDerivedType *)(arg1)->createStaticMemberType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createStaticMemberType1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty, DINode::DIFlags Flags, llvm::Constant * Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  DINode::DIFlags arg7 ;
  llvm::Constant *arg8 = (llvm::Constant *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  arg7 = Flags;
  arg8 = *(llvm::Constant **)&Val; 
  result = (DIDerivedType *)(arg1)->createStaticMemberType(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIDerivedType * DIBuilder_createObjCIVar(llvm::DIBuilder * self, LLVMStringRef Name, DIFile * File, unsigned int LineNo, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * Ty, MDNode * PropertyNode) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  unsigned int arg4 ;
  uint64_t arg5 ;
  uint32_t arg6 ;
  uint64_t arg7 ;
  DINode::DIFlags arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  MDNode *arg10 = (MDNode *) 0 ;
  DIDerivedType *result = 0 ;
  DIDerivedType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Name->Data,Name->Length);
  arg3 = *(DIFile **)&File; 
  arg4 = (unsigned int)LineNo; 
  arg5 = (uint64_t)SizeInBits; 
  arg6 = (uint32_t)AlignInBits; 
  arg7 = (uint64_t)OffsetInBits; 
  arg8 = Flags;
  arg9 = *(DIType **)&Ty; 
  arg10 = *(MDNode **)&PropertyNode; 
  result = (DIDerivedType *)(arg1)->createObjCIVar(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DIDerivedType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIObjCProperty * DIBuilder_createObjCProperty(llvm::DIBuilder * self, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, LLVMStringRef GetterName, LLVMStringRef SetterName, unsigned int PropertyAttributes, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  StringRef arg2 ;
  DIFile *arg3 = (DIFile *) 0 ;
  unsigned int arg4 ;
  StringRef arg5 ;
  StringRef arg6 ;
  unsigned int arg7 ;
  DIType *arg8 = (DIType *) 0 ;
  DIObjCProperty *result = 0 ;
  DIObjCProperty * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = StringRef(Name->Data,Name->Length);
  arg3 = *(DIFile **)&File; 
  arg4 = (unsigned int)LineNumber; 
  arg5 = StringRef(GetterName->Data,GetterName->Length);
  arg6 = StringRef(SetterName->Data,SetterName->Length);
  arg7 = (unsigned int)PropertyAttributes; 
  arg8 = *(DIType **)&Ty; 
  result = (DIObjCProperty *)(arg1)->createObjCProperty(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DIObjCProperty **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createClassType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, DIType * VTableHolder, MDNode * TemplateParms, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DINodeArray arg11 ;
  DIType *arg12 = (DIType *) 0 ;
  MDNode *arg13 = (MDNode *) 0 ;
  StringRef arg14 ;
  DINodeArray *argp11 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = (uint64_t)OffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&DerivedFrom; 
  argp11 = *(DINodeArray **)&Elements;
  arg11 = *argp11; 
  arg12 = *(DIType **)&VTableHolder; 
  arg13 = *(MDNode **)&TemplateParms; 
  arg14 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createClassType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createClassType1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, DIType * VTableHolder, MDNode * TemplateParms) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DINodeArray arg11 ;
  DIType *arg12 = (DIType *) 0 ;
  MDNode *arg13 = (MDNode *) 0 ;
  DINodeArray *argp11 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = (uint64_t)OffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&DerivedFrom; 
  argp11 = *(DINodeArray **)&Elements;
  arg11 = *argp11; 
  arg12 = *(DIType **)&VTableHolder; 
  arg13 = *(MDNode **)&TemplateParms; 
  result = (DICompositeType *)(arg1)->createClassType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createClassType2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, DIType * VTableHolder) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DINodeArray arg11 ;
  DIType *arg12 = (DIType *) 0 ;
  DINodeArray *argp11 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = (uint64_t)OffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&DerivedFrom; 
  argp11 = *(DINodeArray **)&Elements;
  arg11 = *argp11; 
  arg12 = *(DIType **)&VTableHolder; 
  result = (DICompositeType *)(arg1)->createClassType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createClassType3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint64_t arg8 ;
  DINode::DIFlags arg9 ;
  DIType *arg10 = (DIType *) 0 ;
  DINodeArray arg11 ;
  DINodeArray *argp11 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = (uint64_t)OffsetInBits; 
  arg9 = Flags;
  arg10 = *(DIType **)&DerivedFrom; 
  argp11 = *(DINodeArray **)&Elements;
  arg11 = *argp11; 
  result = (DICompositeType *)(arg1)->createClassType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createStructType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, unsigned int RunTimeLang, DIType * VTableHolder, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  DINodeArray arg10 ;
  unsigned int arg11 ;
  DIType *arg12 = (DIType *) 0 ;
  StringRef arg13 ;
  DINodeArray *argp10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  arg9 = *(DIType **)&DerivedFrom; 
  argp10 = *(DINodeArray **)&Elements;
  arg10 = *argp10; 
  arg11 = (unsigned int)RunTimeLang; 
  arg12 = *(DIType **)&VTableHolder; 
  arg13 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createStructType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createStructType1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, unsigned int RunTimeLang, DIType * VTableHolder) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  DINodeArray arg10 ;
  unsigned int arg11 ;
  DIType *arg12 = (DIType *) 0 ;
  DINodeArray *argp10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  arg9 = *(DIType **)&DerivedFrom; 
  argp10 = *(DINodeArray **)&Elements;
  arg10 = *argp10; 
  arg11 = (unsigned int)RunTimeLang; 
  arg12 = *(DIType **)&VTableHolder; 
  result = (DICompositeType *)(arg1)->createStructType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createStructType2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements, unsigned int RunTimeLang) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  DINodeArray arg10 ;
  unsigned int arg11 ;
  DINodeArray *argp10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  arg9 = *(DIType **)&DerivedFrom; 
  argp10 = *(DINodeArray **)&Elements;
  arg10 = *argp10; 
  arg11 = (unsigned int)RunTimeLang; 
  result = (DICompositeType *)(arg1)->createStructType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createStructType3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DIType * DerivedFrom, DINodeArray Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  DINodeArray arg10 ;
  DINodeArray *argp10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  arg9 = *(DIType **)&DerivedFrom; 
  argp10 = *(DINodeArray **)&Elements;
  arg10 = *argp10; 
  result = (DICompositeType *)(arg1)->createStructType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createUnionType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DINodeArray Elements, unsigned int RunTimeLang, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DINodeArray arg9 ;
  unsigned int arg10 ;
  StringRef arg11 ;
  DINodeArray *argp9 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  argp9 = *(DINodeArray **)&Elements;
  arg9 = *argp9; 
  arg10 = (unsigned int)RunTimeLang; 
  arg11 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createUnionType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createUnionType1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DINodeArray Elements, unsigned int RunTimeLang) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DINodeArray arg9 ;
  unsigned int arg10 ;
  DINodeArray *argp9 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  argp9 = *(DINodeArray **)&Elements;
  arg9 = *argp9; 
  arg10 = (unsigned int)RunTimeLang; 
  result = (DICompositeType *)(arg1)->createUnionType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createUnionType2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, DINodeArray Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINode::DIFlags arg8 ;
  DINodeArray arg9 ;
  DINodeArray *argp9 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  arg8 = Flags;
  argp9 = *(DINodeArray **)&Elements;
  arg9 = *argp9; 
  result = (DICompositeType *)(arg1)->createUnionType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DITemplateTypeParameter * DIBuilder_createTemplateTypeParameter(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  DITemplateTypeParameter *result = 0 ;
  DITemplateTypeParameter * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIType **)&Ty; 
  result = (DITemplateTypeParameter *)(arg1)->createTemplateTypeParameter(arg2,arg3,arg4);
  *(DITemplateTypeParameter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DITemplateValueParameter * DIBuilder_createTemplateValueParameter(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIType * Ty, llvm::Constant * Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  llvm::Constant *arg5 = (llvm::Constant *) 0 ;
  DITemplateValueParameter *result = 0 ;
  DITemplateValueParameter * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIType **)&Ty; 
  arg5 = *(llvm::Constant **)&Val; 
  result = (DITemplateValueParameter *)(arg1)->createTemplateValueParameter(arg2,arg3,arg4,arg5);
  *(DITemplateValueParameter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DITemplateValueParameter * DIBuilder_createTemplateTemplateParameter(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIType * Ty, LLVMStringRef Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  StringRef arg5 ;
  DITemplateValueParameter *result = 0 ;
  DITemplateValueParameter * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIType **)&Ty; 
  arg5 = StringRef(Val->Data,Val->Length);
  result = (DITemplateValueParameter *)(arg1)->createTemplateTemplateParameter(arg2,arg3,arg4,arg5);
  *(DITemplateValueParameter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DITemplateValueParameter * DIBuilder_createTemplateParameterPack(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIType * Ty, DINodeArray Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  DINodeArray arg5 ;
  DINodeArray *argp5 ;
  DITemplateValueParameter *result = 0 ;
  DITemplateValueParameter * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIType **)&Ty; 
  argp5 = *(DINodeArray **)&Val;
  arg5 = *argp5; 
  result = (DITemplateValueParameter *)(arg1)->createTemplateParameterPack(arg2,arg3,arg4,arg5);
  *(DITemplateValueParameter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createArrayType(llvm::DIBuilder * self, uint64_t Size, uint32_t AlignInBits, DIType * Ty, DINodeArray Subscripts) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  DINodeArray arg5 ;
  DINodeArray *argp5 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (uint64_t)Size; 
  arg3 = (uint32_t)AlignInBits; 
  arg4 = *(DIType **)&Ty; 
  argp5 = *(DINodeArray **)&Subscripts;
  arg5 = *argp5; 
  result = (DICompositeType *)(arg1)->createArrayType(arg2,arg3,arg4,arg5);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createVectorType(llvm::DIBuilder * self, uint64_t Size, uint32_t AlignInBits, DIType * Ty, DINodeArray Subscripts) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  DIType *arg4 = (DIType *) 0 ;
  DINodeArray arg5 ;
  DINodeArray *argp5 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (uint64_t)Size; 
  arg3 = (uint32_t)AlignInBits; 
  arg4 = *(DIType **)&Ty; 
  argp5 = *(DINodeArray **)&Subscripts;
  arg5 = *argp5; 
  result = (DICompositeType *)(arg1)->createVectorType(arg2,arg3,arg4,arg5);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createEnumerationType(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINodeArray Elements, DIType * UnderlyingType, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINodeArray arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  StringRef arg10 ;
  DINodeArray *argp8 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  argp8 = *(DINodeArray **)&Elements;
  arg8 = *argp8; 
  arg9 = *(DIType **)&UnderlyingType; 
  arg10 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createEnumerationType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createEnumerationType1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, DINodeArray Elements, DIType * UnderlyingType) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  DINodeArray arg8 ;
  DIType *arg9 = (DIType *) 0 ;
  DINodeArray *argp8 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNumber; 
  arg6 = (uint64_t)SizeInBits; 
  arg7 = (uint32_t)AlignInBits; 
  argp8 = *(DINodeArray **)&Elements;
  arg8 = *argp8; 
  arg9 = *(DIType **)&UnderlyingType; 
  result = (DICompositeType *)(arg1)->createEnumerationType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubroutineType * DIBuilder_createSubroutineType(llvm::DIBuilder * self, DITypeRefArray ParameterTypes, DINode::DIFlags Flags, unsigned int CC) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DITypeRefArray arg2 ;
  DINode::DIFlags arg3 ;
  unsigned int arg4 ;
  DITypeRefArray *argp2 ;
  DISubroutineType *result = 0 ;
  DISubroutineType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(DITypeRefArray **)&ParameterTypes;
  arg2 = *argp2; 
  arg3 = Flags;
  arg4 = (unsigned int)CC; 
  result = (DISubroutineType *)(arg1)->createSubroutineType(arg2,arg3,arg4);
  *(DISubroutineType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubroutineType * DIBuilder_createSubroutineType1(llvm::DIBuilder * self, DITypeRefArray ParameterTypes, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DITypeRefArray arg2 ;
  DINode::DIFlags arg3 ;
  DITypeRefArray *argp2 ;
  DISubroutineType *result = 0 ;
  DISubroutineType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(DITypeRefArray **)&ParameterTypes;
  arg2 = *argp2; 
  arg3 = Flags;
  result = (DISubroutineType *)(arg1)->createSubroutineType(arg2,arg3);
  *(DISubroutineType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubroutineType * DIBuilder_createSubroutineType2(llvm::DIBuilder * self, DITypeRefArray ParameterTypes) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DITypeRefArray arg2 ;
  DITypeRefArray *argp2 ;
  DISubroutineType *result = 0 ;
  DISubroutineType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(DITypeRefArray **)&ParameterTypes;
  arg2 = *argp2; 
  result = (DISubroutineType *)(arg1)->createSubroutineType(arg2);
  *(DISubroutineType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIType * DIBuilder_createArtificialType(llvm::DIBuilder * self, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *result = 0 ;
  DIType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&Ty; 
  result = (DIType *)(arg1)->createArtificialType(arg2);
  *(DIType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIType * DIBuilder_createObjectPointerType(llvm::DIBuilder * self, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIType *arg2 = (DIType *) 0 ;
  DIType *result = 0 ;
  DIType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIType **)&Ty; 
  result = (DIType *)(arg1)->createObjectPointerType(arg2);
  *(DIType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createForwardDecl(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  uint32_t arg9 ;
  StringRef arg10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  arg9 = (uint32_t)AlignInBits; 
  arg10 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createForwardDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createForwardDecl1(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  uint32_t arg9 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  arg9 = (uint32_t)AlignInBits; 
  result = (DICompositeType *)(arg1)->createForwardDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createForwardDecl2(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  result = (DICompositeType *)(arg1)->createForwardDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createForwardDecl3(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  result = (DICompositeType *)(arg1)->createForwardDecl(arg2,arg3,arg4,arg5,arg6,arg7);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createForwardDecl4(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  result = (DICompositeType *)(arg1)->createForwardDecl(arg2,arg3,arg4,arg5,arg6);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags, LLVMStringRef UniqueIdentifier) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  uint32_t arg9 ;
  DINode::DIFlags arg10 ;
  StringRef arg11 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  arg9 = (uint32_t)AlignInBits; 
  arg10 = Flags;
  arg11 = StringRef(UniqueIdentifier->Data,UniqueIdentifier->Length);
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType1(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  uint32_t arg9 ;
  DINode::DIFlags arg10 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  arg9 = (uint32_t)AlignInBits; 
  arg10 = Flags;
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType2(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  uint32_t arg9 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  arg9 = (uint32_t)AlignInBits; 
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType3(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang, uint64_t SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  uint64_t arg8 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  arg8 = (uint64_t)SizeInBits; 
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType4(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line, unsigned int RuntimeLang) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  arg7 = (unsigned int)RuntimeLang; 
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6,arg7);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DICompositeType * DIBuilder_createReplaceableCompositeType5(llvm::DIBuilder * self, unsigned int Tag, LLVMStringRef Name, DIScope * Scope, DIFile * F, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  StringRef arg3 ;
  DIScope *arg4 = (DIScope *) 0 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DICompositeType *result = 0 ;
  DICompositeType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)Tag; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIScope **)&Scope; 
  arg5 = *(DIFile **)&F; 
  arg6 = (unsigned int)Line; 
  result = (DICompositeType *)(arg1)->createReplaceableCompositeType(arg2,arg3,arg4,arg5,arg6);
  *(DICompositeType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void DIBuilder_retainType(llvm::DIBuilder * self, DIScope * T) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&T; 
  (arg1)->retainType(arg2);
}


SWIGEXPORT DIBasicType * DIBuilder_createUnspecifiedParameter(llvm::DIBuilder * self) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIBasicType *result = 0 ;
  DIBasicType * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  result = (DIBasicType *)(arg1)->createUnspecifiedParameter();
  *(DIBasicType **)&cresult = result; 
  return cresult;
}


SWIGEXPORT MDNode * DIBuilder_getOrCreateArray(llvm::DIBuilder * self, ArrayRef< Metadata * > Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  ArrayRef< Metadata * > arg2 ;
  ArrayRef< Metadata * > *argp2 ;
  DINodeArray result;
  MDNode * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(ArrayRef< Metadata * > **)&Elements;
  arg2 = *argp2; 
  result = (arg1)->getOrCreateArray(arg2);
  *(DINodeArray **)&cresult = new DINodeArray((const DINodeArray &)result); 
  return cresult;
}


SWIGEXPORT MDNode * DIBuilder_getOrCreateMacroArray(llvm::DIBuilder * self, ArrayRef< Metadata * > Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  ArrayRef< Metadata * > arg2 ;
  ArrayRef< Metadata * > *argp2 ;
  DIMacroNodeArray result;
  MDNode * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(ArrayRef< Metadata * > **)&Elements;
  arg2 = *argp2; 
  result = (arg1)->getOrCreateMacroArray(arg2);
  *(DIMacroNodeArray **)&cresult = new DIMacroNodeArray((const DIMacroNodeArray &)result); 
  return cresult;
}


SWIGEXPORT MDNode * DIBuilder_getOrCreateTypeArray(llvm::DIBuilder * self, ArrayRef< Metadata * > Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  ArrayRef< Metadata * > arg2 ;
  ArrayRef< Metadata * > *argp2 ;
  DITypeRefArray result;
  MDNode * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  argp2 = *(ArrayRef< Metadata * > **)&Elements;
  arg2 = *argp2; 
  result = (arg1)->getOrCreateTypeArray(arg2);
  *(DITypeRefArray **)&cresult = new DITypeRefArray((const DITypeRefArray &)result); 
  return cresult;
}


SWIGEXPORT DISubrange * DIBuilder_getOrCreateSubrange(llvm::DIBuilder * self, int64_t Lo, int64_t Count) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  DISubrange *result = 0 ;
  DISubrange * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (int64_t)Lo; 
  arg3 = (int64_t)Count; 
  result = (DISubrange *)(arg1)->getOrCreateSubrange(arg2,arg3);
  *(DISubrange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariableExpression * DIBuilder_createGlobalVariableExpression(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit, DIExpression * Expr, MDNode * Decl, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DIExpression *arg9 = (DIExpression *) 0 ;
  MDNode *arg10 = (MDNode *) 0 ;
  uint32_t arg11 ;
  DIGlobalVariableExpression *result = 0 ;
  DIGlobalVariableExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = *(DIExpression **)&Expr; 
  arg10 = *(MDNode **)&Decl; 
  arg11 = (uint32_t)AlignInBits; 
  result = (DIGlobalVariableExpression *)(arg1)->createGlobalVariableExpression(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DIGlobalVariableExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariableExpression * DIBuilder_createGlobalVariableExpression1(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit, DIExpression * Expr, MDNode * Decl) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DIExpression *arg9 = (DIExpression *) 0 ;
  MDNode *arg10 = (MDNode *) 0 ;
  DIGlobalVariableExpression *result = 0 ;
  DIGlobalVariableExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = *(DIExpression **)&Expr; 
  arg10 = *(MDNode **)&Decl; 
  result = (DIGlobalVariableExpression *)(arg1)->createGlobalVariableExpression(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DIGlobalVariableExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariableExpression * DIBuilder_createGlobalVariableExpression2(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit, DIExpression * Expr) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DIExpression *arg9 = (DIExpression *) 0 ;
  DIGlobalVariableExpression *result = 0 ;
  DIGlobalVariableExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = *(DIExpression **)&Expr; 
  result = (DIGlobalVariableExpression *)(arg1)->createGlobalVariableExpression(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DIGlobalVariableExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariableExpression * DIBuilder_createGlobalVariableExpression3(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DIGlobalVariableExpression *result = 0 ;
  DIGlobalVariableExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  result = (DIGlobalVariableExpression *)(arg1)->createGlobalVariableExpression(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DIGlobalVariableExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariable * DIBuilder_createTempGlobalVariableFwdDecl(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit, MDNode * Decl, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  MDNode *arg9 = (MDNode *) 0 ;
  uint32_t arg10 ;
  DIGlobalVariable *result = 0 ;
  DIGlobalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = *(MDNode **)&Decl; 
  arg10 = (uint32_t)AlignInBits; 
  result = (DIGlobalVariable *)(arg1)->createTempGlobalVariableFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DIGlobalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariable * DIBuilder_createTempGlobalVariableFwdDecl1(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit, MDNode * Decl) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  MDNode *arg9 = (MDNode *) 0 ;
  DIGlobalVariable *result = 0 ;
  DIGlobalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = *(MDNode **)&Decl; 
  result = (DIGlobalVariable *)(arg1)->createTempGlobalVariableFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DIGlobalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIGlobalVariable * DIBuilder_createTempGlobalVariableFwdDecl2(llvm::DIBuilder * self, DIScope * Context, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DIType * Ty, bool isLocalToUnit) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DIGlobalVariable *result = 0 ;
  DIGlobalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  result = (DIGlobalVariable *)(arg1)->createTempGlobalVariableFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DIGlobalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createAutoVariable(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty, bool AlwaysPreserve, DINode::DIFlags Flags, uint32_t AlignInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  bool arg7 ;
  DINode::DIFlags arg8 ;
  uint32_t arg9 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  arg7 = AlwaysPreserve ? true : false; 
  arg8 = Flags;
  arg9 = (uint32_t)AlignInBits; 
  result = (DILocalVariable *)(arg1)->createAutoVariable(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createAutoVariable1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty, bool AlwaysPreserve, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  bool arg7 ;
  DINode::DIFlags arg8 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  arg7 = AlwaysPreserve ? true : false; 
  arg8 = Flags;
  result = (DILocalVariable *)(arg1)->createAutoVariable(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createAutoVariable2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty, bool AlwaysPreserve) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  bool arg7 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  arg7 = AlwaysPreserve ? true : false; 
  result = (DILocalVariable *)(arg1)->createAutoVariable(arg2,arg3,arg4,arg5,arg6,arg7);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createAutoVariable3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, DIFile * File, unsigned int LineNo, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIType *arg6 = (DIType *) 0 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)LineNo; 
  arg6 = *(DIType **)&Ty; 
  result = (DILocalVariable *)(arg1)->createAutoVariable(arg2,arg3,arg4,arg5,arg6);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createParameterVariable(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, unsigned int ArgNo, DIFile * File, unsigned int LineNo, DIType * Ty, bool AlwaysPreserve, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  unsigned int arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DINode::DIFlags arg9 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = (unsigned int)ArgNo; 
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = AlwaysPreserve ? true : false; 
  arg9 = Flags;
  result = (DILocalVariable *)(arg1)->createParameterVariable(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createParameterVariable1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, unsigned int ArgNo, DIFile * File, unsigned int LineNo, DIType * Ty, bool AlwaysPreserve) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  unsigned int arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  bool arg8 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = (unsigned int)ArgNo; 
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  arg8 = AlwaysPreserve ? true : false; 
  result = (DILocalVariable *)(arg1)->createParameterVariable(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILocalVariable * DIBuilder_createParameterVariable2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, unsigned int ArgNo, DIFile * File, unsigned int LineNo, DIType * Ty) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  unsigned int arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DIType *arg7 = (DIType *) 0 ;
  DILocalVariable *result = 0 ;
  DILocalVariable * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = (unsigned int)ArgNo; 
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DIType **)&Ty; 
  result = (DILocalVariable *)(arg1)->createParameterVariable(arg2,arg3,arg4,arg5,arg6,arg7);
  *(DILocalVariable **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIExpression * DIBuilder_createExpression(llvm::DIBuilder * self, LLVMArrayUInt64 Addr) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  ArrayRef< uint64_t > arg2 ;
  DIExpression *result = 0 ;
  DIExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = ArrayRef< uint64_t >(Addr->Data,Addr->Length);
  result = (DIExpression *)(arg1)->createExpression(arg2);
  *(DIExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIExpression * DIBuilder_createExpression1(llvm::DIBuilder * self) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIExpression *result = 0 ;
  DIExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  result = (DIExpression *)(arg1)->createExpression();
  *(DIExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIExpression * DIBuilder_createExpression2(llvm::DIBuilder * self, LLVMArrayInt64 Addr) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  ArrayRef< int64_t > arg2 ;
  DIExpression *result = 0 ;
  DIExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = ArrayRef< int64_t >(Addr->Data,Addr->Length);
  result = (DIExpression *)(arg1)->createExpression(arg2);
  *(DIExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIExpression * DIBuilder_createFragmentExpression(llvm::DIBuilder * self, unsigned int OffsetInBits, unsigned int SizeInBits) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  DIExpression *result = 0 ;
  DIExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (unsigned int)OffsetInBits; 
  arg3 = (unsigned int)SizeInBits; 
  result = (DIExpression *)(arg1)->createFragmentExpression(arg2,arg3);
  *(DIExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIExpression * DIBuilder_createConstantValueExpression(llvm::DIBuilder * self, uint64_t Val) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  uint64_t arg2 ;
  DIExpression *result = 0 ;
  DIExpression * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = (uint64_t)Val; 
  result = (DIExpression *)(arg1)->createConstantValueExpression(arg2);
  *(DIExpression **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams, DISubprogram * Decl, DITypeArray ThrownTypes) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *arg14 = (DISubprogram *) 0 ;
  DITypeArray arg15 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  arg14 = *(DISubprogram **)&Decl; 
  arg15 = ThrownTypes;
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams, DISubprogram * Decl) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *arg14 = (DISubprogram *) 0 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  arg14 = *(DISubprogram **)&Decl; 
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction4(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createFunction5(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  result = (DISubprogram *)(arg1)->createFunction(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams, DISubprogram * Decl, DITypeArray ThrownTypes) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *arg14 = (DISubprogram *) 0 ;
  DITypeArray arg15 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  arg14 = *(DISubprogram **)&Decl; 
  arg15 = ThrownTypes;
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams, DISubprogram * Decl) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *arg14 = (DISubprogram *) 0 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  arg14 = *(DISubprogram **)&Decl; 
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DITemplateParameterArray arg13 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  arg13 = TParams;
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags, bool isOptimized) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  bool arg12 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  arg12 = isOptimized ? true : false; 
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl4(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DINode::DIFlags arg11 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  arg11 = Flags;
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createTempFunctionFwdDecl5(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int ScopeLine) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)ScopeLine; 
  result = (DISubprogram *)(arg1)->createTempFunctionFwdDecl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment, DIType * VTableHolder, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams, DITypeArray ThrownTypes) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DIType *arg13 = (DIType *) 0 ;
  DINode::DIFlags arg14 ;
  bool arg15 ;
  DITemplateParameterArray arg16 ;
  DITypeArray arg17 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  arg13 = *(DIType **)&VTableHolder; 
  arg14 = Flags;
  arg15 = isOptimized ? true : false; 
  arg16 = TParams;
  arg17 = ThrownTypes;
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod1(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment, DIType * VTableHolder, DINode::DIFlags Flags, bool isOptimized, DITemplateParameterArray TParams) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DIType *arg13 = (DIType *) 0 ;
  DINode::DIFlags arg14 ;
  bool arg15 ;
  DITemplateParameterArray arg16 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  arg13 = *(DIType **)&VTableHolder; 
  arg14 = Flags;
  arg15 = isOptimized ? true : false; 
  arg16 = TParams;
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod2(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment, DIType * VTableHolder, DINode::DIFlags Flags, bool isOptimized) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DIType *arg13 = (DIType *) 0 ;
  DINode::DIFlags arg14 ;
  bool arg15 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  arg13 = *(DIType **)&VTableHolder; 
  arg14 = Flags;
  arg15 = isOptimized ? true : false; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod3(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment, DIType * VTableHolder, DINode::DIFlags Flags) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DIType *arg13 = (DIType *) 0 ;
  DINode::DIFlags arg14 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  arg13 = *(DIType **)&VTableHolder; 
  arg14 = Flags;
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod4(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment, DIType * VTableHolder) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DIType *arg13 = (DIType *) 0 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  arg13 = *(DIType **)&VTableHolder; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod5(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex, int ThisAdjustment) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  int arg12 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  arg12 = (int)ThisAdjustment; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod6(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality, unsigned int VTableIndex) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  unsigned int arg11 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  arg11 = (unsigned int)VTableIndex; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod7(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition, unsigned int Virtuality) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  arg10 = (unsigned int)Virtuality; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DISubprogram * DIBuilder_createMethod8(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef LinkageName, DIFile * File, unsigned int LineNo, DISubroutineType * Ty, bool isLocalToUnit, bool isDefinition) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  DIFile *arg5 = (DIFile *) 0 ;
  unsigned int arg6 ;
  DISubroutineType *arg7 = (DISubroutineType *) 0 ;
  bool arg8 ;
  bool arg9 ;
  DISubprogram *result = 0 ;
  DISubprogram * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(LinkageName->Data,LinkageName->Length);
  arg5 = *(DIFile **)&File; 
  arg6 = (unsigned int)LineNo; 
  arg7 = *(DISubroutineType **)&Ty; 
  arg8 = isLocalToUnit ? true : false; 
  arg9 = isDefinition ? true : false; 
  result = (DISubprogram *)(arg1)->createMethod(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(DISubprogram **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DINamespace * DIBuilder_createNameSpace(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, bool ExportSymbols) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  bool arg4 ;
  DINamespace *result = 0 ;
  DINamespace * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = ExportSymbols ? true : false; 
  result = (DINamespace *)(arg1)->createNameSpace(arg2,arg3,arg4);
  *(DINamespace **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIModule * DIBuilder_createModule(llvm::DIBuilder * self, DIScope * Scope, LLVMStringRef Name, LLVMStringRef ConfigurationMacros, LLVMStringRef IncludePath, LLVMStringRef ISysRoot) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  StringRef arg3 ;
  StringRef arg4 ;
  StringRef arg5 ;
  StringRef arg6 ;
  DIModule *result = 0 ;
  DIModule * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = StringRef(Name->Data,Name->Length);
  arg4 = StringRef(ConfigurationMacros->Data,ConfigurationMacros->Length);
  arg5 = StringRef(IncludePath->Data,IncludePath->Length);
  arg6 = StringRef(ISysRoot->Data,ISysRoot->Length);
  result = (DIModule *)(arg1)->createModule(arg2,arg3,arg4,arg5,arg6);
  *(DIModule **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILexicalBlockFile * DIBuilder_createLexicalBlockFile(llvm::DIBuilder * self, DIScope * Scope, DIFile * File, unsigned int Discriminator) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DIFile *arg3 = (DIFile *) 0 ;
  unsigned int arg4 ;
  DILexicalBlockFile *result = 0 ;
  DILexicalBlockFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = *(DIFile **)&File; 
  arg4 = (unsigned int)Discriminator; 
  result = (DILexicalBlockFile *)(arg1)->createLexicalBlockFile(arg2,arg3,arg4);
  *(DILexicalBlockFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILexicalBlockFile * DIBuilder_createLexicalBlockFile1(llvm::DIBuilder * self, DIScope * Scope, DIFile * File) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DIFile *arg3 = (DIFile *) 0 ;
  DILexicalBlockFile *result = 0 ;
  DILexicalBlockFile * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = *(DIFile **)&File; 
  result = (DILexicalBlockFile *)(arg1)->createLexicalBlockFile(arg2,arg3);
  *(DILexicalBlockFile **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DILexicalBlock * DIBuilder_createLexicalBlock(llvm::DIBuilder * self, DIScope * Scope, DIFile * File, unsigned int Line, unsigned int Col) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DIFile *arg3 = (DIFile *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  DILexicalBlock *result = 0 ;
  DILexicalBlock * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Scope; 
  arg3 = *(DIFile **)&File; 
  arg4 = (unsigned int)Line; 
  arg5 = (unsigned int)Col; 
  result = (DILexicalBlock *)(arg1)->createLexicalBlock(arg2,arg3,arg4,arg5);
  *(DILexicalBlock **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIImportedEntity * DIBuilder_createImportedModule(llvm::DIBuilder * self, DIScope * Context, DINamespace * NS, DIFile * File, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DINamespace *arg3 = (DINamespace *) 0 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIImportedEntity *result = 0 ;
  DIImportedEntity * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = *(DINamespace **)&NS; 
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)Line; 
  result = (DIImportedEntity *)(arg1)->createImportedModule(arg2,arg3,arg4,arg5);
  *(DIImportedEntity **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIImportedEntity * DIBuilder_createImportedModule1(llvm::DIBuilder * self, DIScope * Context, DIImportedEntity * NS, DIFile * File, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DIImportedEntity *arg3 = (DIImportedEntity *) 0 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIImportedEntity *result = 0 ;
  DIImportedEntity * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = *(DIImportedEntity **)&NS; 
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)Line; 
  result = (DIImportedEntity *)(arg1)->createImportedModule(arg2,arg3,arg4,arg5);
  *(DIImportedEntity **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIImportedEntity * DIBuilder_createImportedModule2(llvm::DIBuilder * self, DIScope * Context, DIModule * M, DIFile * File, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DIModule *arg3 = (DIModule *) 0 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIImportedEntity *result = 0 ;
  DIImportedEntity * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = *(DIModule **)&M; 
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)Line; 
  result = (DIImportedEntity *)(arg1)->createImportedModule(arg2,arg3,arg4,arg5);
  *(DIImportedEntity **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIImportedEntity * DIBuilder_createImportedDeclaration(llvm::DIBuilder * self, DIScope * Context, DINode * Decl, DIFile * File, unsigned int Line, LLVMStringRef Name) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DINode *arg3 = (DINode *) 0 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  StringRef arg6 ;
  DIImportedEntity *result = 0 ;
  DIImportedEntity * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = *(DINode **)&Decl; 
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)Line; 
  arg6 = StringRef(Name->Data,Name->Length);
  result = (DIImportedEntity *)(arg1)->createImportedDeclaration(arg2,arg3,arg4,arg5,arg6);
  *(DIImportedEntity **)&cresult = result; 
  return cresult;
}


SWIGEXPORT DIImportedEntity * DIBuilder_createImportedDeclaration1(llvm::DIBuilder * self, DIScope * Context, DINode * Decl, DIFile * File, unsigned int Line) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DIScope *arg2 = (DIScope *) 0 ;
  DINode *arg3 = (DINode *) 0 ;
  DIFile *arg4 = (DIFile *) 0 ;
  unsigned int arg5 ;
  DIImportedEntity *result = 0 ;
  DIImportedEntity * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(DIScope **)&Context; 
  arg3 = *(DINode **)&Decl; 
  arg4 = *(DIFile **)&File; 
  arg5 = (unsigned int)Line; 
  result = (DIImportedEntity *)(arg1)->createImportedDeclaration(arg2,arg3,arg4,arg5);
  *(DIImportedEntity **)&cresult = result; 
  return cresult;
}


SWIGEXPORT llvm::Instruction * DIBuilder_insertDeclareAtEnd(llvm::DIBuilder * self, llvm::Value * Storage, DILocalVariable * VarInfo, DIExpression * Expr, DILocation const * DL, llvm::BasicBlock * InsertAtEnd) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  DILocalVariable *arg3 = (DILocalVariable *) 0 ;
  DIExpression *arg4 = (DIExpression *) 0 ;
  DILocation *arg5 = (DILocation *) 0 ;
  llvm::BasicBlock *arg6 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  llvm::Instruction * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(llvm::Value **)&Storage; 
  arg3 = *(DILocalVariable **)&VarInfo; 
  arg4 = *(DIExpression **)&Expr; 
  arg5 = *(DILocation **)&DL; 
  arg6 = *(llvm::BasicBlock **)&InsertAtEnd; 
  result = (llvm::Instruction *)(arg1)->insertDeclare(arg2,arg3,arg4,(DILocation const *)arg5,arg6);
  *(llvm::Instruction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT llvm::Instruction * DIBuilder_insertDeclareBefore(llvm::DIBuilder * self, llvm::Value * Storage, DILocalVariable * VarInfo, DIExpression * Expr, DILocation const * DL, llvm::Instruction * InsertBefore) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  DILocalVariable *arg3 = (DILocalVariable *) 0 ;
  DIExpression *arg4 = (DIExpression *) 0 ;
  DILocation *arg5 = (DILocation *) 0 ;
  llvm::Instruction *arg6 = (llvm::Instruction *) 0 ;
  llvm::Instruction *result = 0 ;
  llvm::Instruction * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(llvm::Value **)&Storage; 
  arg3 = *(DILocalVariable **)&VarInfo; 
  arg4 = *(DIExpression **)&Expr; 
  arg5 = *(DILocation **)&DL; 
  arg6 = *(llvm::Instruction **)&InsertBefore; 
  result = (llvm::Instruction *)(arg1)->insertDeclare(arg2,arg3,arg4,(DILocation const *)arg5,arg6);
  *(llvm::Instruction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT llvm::Instruction * DIBuilder_insertValueAtEnd(llvm::DIBuilder * self, llvm::Value * Val, uint64_t Offset, DILocalVariable * VarInfo, DIExpression * Expr, DILocation const * DL, llvm::BasicBlock * InsertAtEnd) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  uint64_t arg3 ;
  DILocalVariable *arg4 = (DILocalVariable *) 0 ;
  DIExpression *arg5 = (DIExpression *) 0 ;
  DILocation *arg6 = (DILocation *) 0 ;
  llvm::BasicBlock *arg7 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  llvm::Instruction * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(llvm::Value **)&Val; 
  arg3 = (uint64_t)Offset; 
  arg4 = *(DILocalVariable **)&VarInfo; 
  arg5 = *(DIExpression **)&Expr; 
  arg6 = *(DILocation **)&DL; 
  arg7 = *(llvm::BasicBlock **)&InsertAtEnd; 
  result = (llvm::Instruction *)(arg1)->insertDbgValueIntrinsic(arg2,arg3,arg4,arg5,(DILocation const *)arg6,arg7);
  *(llvm::Instruction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT llvm::Instruction * DIBuilder_insertValueBefore(llvm::DIBuilder * self, llvm::Value * Val, uint64_t Offset, DILocalVariable * VarInfo, DIExpression * Expr, DILocation const * DL, llvm::Instruction * InsertBefore) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  uint64_t arg3 ;
  DILocalVariable *arg4 = (DILocalVariable *) 0 ;
  DIExpression *arg5 = (DIExpression *) 0 ;
  DILocation *arg6 = (DILocation *) 0 ;
  llvm::Instruction *arg7 = (llvm::Instruction *) 0 ;
  llvm::Instruction *result = 0 ;
  llvm::Instruction * cresult ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = *(llvm::Value **)&Val; 
  arg3 = (uint64_t)Offset; 
  arg4 = *(DILocalVariable **)&VarInfo; 
  arg5 = *(DIExpression **)&Expr; 
  arg6 = *(DILocation **)&DL; 
  arg7 = *(llvm::Instruction **)&InsertBefore; 
  result = (llvm::Instruction *)(arg1)->insertDbgValueIntrinsic(arg2,arg3,arg4,arg5,(DILocation const *)arg6,arg7);
  *(llvm::Instruction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void DIBuilder_replaceVTableHolder(llvm::DIBuilder * self, DICompositeType ** T, DICompositeType * VTableHolder) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DICompositeType **arg2 = 0 ;
  DICompositeType *arg3 = (DICompositeType *) 0 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = T;
  arg3 = *(DICompositeType **)&VTableHolder; 
  (arg1)->replaceVTableHolder(*arg2,arg3);
}


SWIGEXPORT void DIBuilder_replaceArrays(llvm::DIBuilder * self, DICompositeType ** T, DINodeArray Elements, DINodeArray TParams) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DICompositeType **arg2 = 0 ;
  DINodeArray arg3 ;
  DINodeArray arg4 ;
  DINodeArray *argp3 ;
  DINodeArray *argp4 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = T;
  argp3 = *(DINodeArray **)&Elements;
  arg3 = *argp3; 
  argp4 = *(DINodeArray **)&TParams;
  arg4 = *argp4; 
  (arg1)->replaceArrays(*arg2,arg3,arg4);
}


SWIGEXPORT void DIBuilder_replaceArrays1(llvm::DIBuilder * self, DICompositeType ** T, DINodeArray Elements) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  DICompositeType **arg2 = 0 ;
  DINodeArray arg3 ;
  DINodeArray *argp3 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  arg2 = T;
  argp3 = *(DINodeArray **)&Elements;
  arg3 = *argp3; 
  (arg1)->replaceArrays(*arg2,arg3);
}


SWIGEXPORT void Delete_DIBuilder(llvm::DIBuilder * self) {
  llvm::DIBuilder *arg1 = (llvm::DIBuilder *) 0 ;
  
  arg1 = *(llvm::DIBuilder **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

